	.INCLUDE "macro.inc"

	.SYNTAX UNIFIED

	THUMB_FUNC_START func_080895B4
func_080895B4: @ 0x080895B4
	push {lr}
	adds r2, r0, #0
	movs r0, #1
	ands r0, r2
	ldr r3, .L080895DC  @ gUnknown_08A07C58
	cmp r0, #0
	beq .L080895C4
	ldr r3, .L080895E0  @ gUnknown_08A07AD8
.L080895C4:
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne .L0808960A
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq .L080895E4
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r3, r3, r0
	b .L0808960A
	.align 2, 0
.L080895DC: .4byte gUnknown_08A07C58
.L080895E0: .4byte gUnknown_08A07AD8
.L080895E4:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	bne .L0808960A
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq .L080895F6
	adds r3, #0x40
.L080895F6:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq .L08089600
	adds r3, #0x80
.L08089600:
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq .L0808960A
	adds r3, #0x80
.L0808960A:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L08089614
	adds r3, #0x20
.L08089614:
	lsls r1, r1, #5
	adds r0, r3, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080895B4

	THUMB_FUNC_START LoadChapterTitleGfx
LoadChapterTitleGfx: @ 0x08089624
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	movs r0, #0x84
	lsls r0, r0, #1
	cmp r3, r0
	bls .L08089634
	movs r3, #0x54
.L08089634:
	ldr r2, .L08089660  @ gUnknown_0203E78C
	ldr r0, .L08089664  @ 0x000003FF
	adds r1, r0, #0
	adds r0, r4, #0
	ands r0, r1
	strh r0, [r2, #2]
	ldr r1, .L08089668  @ chap_title_data
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r1, r4, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl Decompress
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08089660: .4byte gUnknown_0203E78C
.L08089664: .4byte 0x000003FF
.L08089668: .4byte chap_title_data

	THUMB_FUNC_END LoadChapterTitleGfx

	THUMB_FUNC_START func_0808966C
func_0808966C: @ 0x0808966C
	push {lr}
	bl LoadChapterTitleGfx
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808966C

	THUMB_FUNC_START func_08089678
func_08089678: @ 0x08089678
	push {lr}
	adds r1, r0, #0
	ldr r3, .L0808969C  @ gUnknown_0203E78C
	ldr r0, .L080896A0  @ 0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, .L080896A4  @ gUnknown_08A09E4C
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
.L0808969C: .4byte gUnknown_0203E78C
.L080896A0: .4byte 0x000003FF
.L080896A4: .4byte gUnknown_08A09E4C

	THUMB_FUNC_END func_08089678

	THUMB_FUNC_START func_080896A8
func_080896A8: @ 0x080896A8
	push {lr}
	adds r1, r0, #0
	ldr r3, .L080896CC  @ gUnknown_0203E78C
	ldr r0, .L080896D0  @ 0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, .L080896D4  @ gUnknown_08A0A4E8
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
.L080896CC: .4byte gUnknown_0203E78C
.L080896D0: .4byte 0x000003FF
.L080896D4: .4byte gUnknown_08A0A4E8

	THUMB_FUNC_END func_080896A8

	THUMB_FUNC_START func_080896D8
func_080896D8: @ 0x080896D8
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080896F8  @ gUnknown_0203E78C
	lsls r1, r1, #0xc
	ldrh r0, [r0, #2]
	adds r1, r1, r0
	movs r0, #0x3f
.L080896E6:
	strh r1, [r2]
	adds r1, #1
	adds r2, #2
	subs r0, #1
	cmp r0, #0
	bge .L080896E6
	pop {r0}
	bx r0
	.align 2, 0
.L080896F8: .4byte gUnknown_0203E78C

	THUMB_FUNC_END func_080896D8

	THUMB_FUNC_START func_080896FC
func_080896FC: @ 0x080896FC
	push {lr}
	adds r2, r0, #0
	ldr r0, .L0808971C  @ gUnknown_0203E78C
	lsls r1, r1, #0xc
	ldrh r0, [r0, #2]
	adds r1, r1, r0
	movs r0, #0x3f
.L0808970A:
	strh r1, [r2]
	adds r1, #1
	adds r2, #2
	subs r0, #1
	cmp r0, #0
	bge .L0808970A
	pop {r0}
	bx r0
	.align 2, 0
.L0808971C: .4byte gUnknown_0203E78C

	THUMB_FUNC_END func_080896FC

	THUMB_FUNC_START func_08089720
func_08089720: @ 0x08089720
	push {lr}
	adds r2, r0, #0
	ldr r0, .L08089740  @ gUnknown_0203E78C
	lsls r1, r1, #0xc
	ldrh r0, [r0]
	adds r1, r1, r0
	movs r0, #0x7f
.L0808972E:
	strh r1, [r2]
	adds r1, #1
	adds r2, #2
	subs r0, #1
	cmp r0, #0
	bge .L0808972E
	pop {r0}
	bx r0
	.align 2, 0
.L08089740: .4byte gUnknown_0203E78C

	THUMB_FUNC_END func_08089720

	THUMB_FUNC_START func_08089744
func_08089744: @ 0x08089744
	push {lr}
	adds r2, r1, #0
	ldr r1, .L08089760  @ gUnknown_08A0A9F8
	ldr r3, .L08089764  @ gUnknown_0203E78C
	lsls r2, r2, #0xc
	ldrh r3, [r3]
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	pop {r0}
	bx r0
	.align 2, 0
.L08089760: .4byte gUnknown_08A0A9F8
.L08089764: .4byte gUnknown_0203E78C

	THUMB_FUNC_END func_08089744

	THUMB_FUNC_START func_08089768
func_08089768: @ 0x08089768
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne .L08089774
	movs r0, #0x54
	b .L08089798
.L08089774:
	ldrb r2, [r1, #0x14]
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq .L08089782
	movs r0, #0x57
	b .L08089798
.L08089782:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	bne .L08089796
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	bl GetChapterInfo
	ldrb r0, [r0, #0xe]
	b .L08089798
.L08089796:
	movs r0, #0x55
.L08089798:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08089768

	THUMB_FUNC_START func_0808979C
func_0808979C: @ 0x0808979C
	push {r4, r5, lr}
	adds r4, r0, #0
	cmp r4, #0
	bne .L080897AE
	movs r0, #0x54
	b .L080897F2
.L080897A8:
	adds r0, r1, #0
	adds r0, #0x46
	b .L080897F2
.L080897AE:
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl func_080BCFDC
	adds r5, r0, #0
	ldrb r1, [r4, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne .L080897CC
	ldr r0, .L080897F8  @ gGmData
	bl func_080BD014
	cmp r0, r5
	beq .L080897E8
.L080897CC:
	movs r1, #0
	ldr r0, .L080897FC  @ gUnknown_08206951
	ldrb r0, [r0]
	cmp r1, r0
	bge .L080897E8
	ldr r3, .L08089800  @ gUnknown_08206948
	adds r2, r0, #0
.L080897DA:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r5, r0
	beq .L080897A8
	adds r1, #1
	cmp r1, r2
	blt .L080897DA
.L080897E8:
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	ldrb r0, [r0, #0xe]
.L080897F2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080897F8: .4byte gGmData
.L080897FC: .4byte gUnknown_08206951
.L08089800: .4byte gUnknown_08206948

	THUMB_FUNC_END func_0808979C

	THUMB_FUNC_START LoadHelpBoxGfx
LoadHelpBoxGfx: @ 0x08089804
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	cmp r5, #0
	bne .L08089810
	ldr r5, .L080898A4  @ 0x06013000
.L08089810:
	cmp r6, #0
	bge .L08089816
	movs r6, #5
.L08089816:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r6
	adds r6, r0, #0
	adds r6, #0x10
	ldr r0, .L080898A8  @ gUnknown_08A0285C
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L080898AC  @ gUnknown_08A02884
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L080898B0  @ gUnknown_08A028AC
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L080898B4  @ gUnknown_08A02914
	movs r2, #0xf6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L080898B8  @ gUnknown_08A02980
	movs r2, #0x9b
	lsls r2, r2, #5
	adds r1, r5, r2
	bl Decompress
	ldr r7, .L080898BC  @ gFont_HelpBox
	adds r0, r7, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSpriteTextFont
	adds r0, r7, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r7, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r7, #0
	adds r0, #0x28
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	ldr r0, .L080898C0  @ gUnknown_0859EF40
	lsls r1, r6, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r5, #0x11
	lsrs r0, r0, #0x16
	ands r6, r4
	lsls r1, r6, #0xc
	adds r0, r0, r1
	strh r0, [r7, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080898A4: .4byte 0x06013000
.L080898A8: .4byte gUnknown_08A0285C
.L080898AC: .4byte gUnknown_08A02884
.L080898B0: .4byte gUnknown_08A028AC
.L080898B4: .4byte gUnknown_08A02914
.L080898B8: .4byte gUnknown_08A02980
.L080898BC: .4byte gFont_HelpBox
.L080898C0: .4byte gUnknown_0859EF40

	THUMB_FUNC_END LoadHelpBoxGfx

	THUMB_FUNC_START func_080898C4
func_080898C4: @ 0x080898C4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	cmp r5, #0
	bne .L080898D0
	ldr r5, .L08089960  @ 0x06013000
.L080898D0:
	cmp r6, #0
	bge .L080898D6
	movs r6, #5
.L080898D6:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r6
	adds r6, r0, #0
	adds r6, #0x10
	ldr r0, .L08089964  @ gUnknown_08A0285C
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L08089968  @ gUnknown_08A02884
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808996C  @ gUnknown_08A028AC
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L08089970  @ gUnknown_08A02914
	movs r2, #0xf6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L08089974  @ gUnknown_08A02980
	movs r2, #0x9b
	lsls r2, r2, #5
	adds r1, r5, r2
	bl Decompress
	ldr r7, .L08089978  @ gFont_HelpBox
	adds r0, r7, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSpriteTextFont
	adds r0, r7, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r7, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	bl SetTextFont
	ldr r0, .L0808997C  @ gUnknown_0859EF40
	lsls r1, r6, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r5, #0x11
	lsrs r0, r0, #0x16
	ands r6, r4
	lsls r1, r6, #0xc
	adds r0, r0, r1
	strh r0, [r7, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08089960: .4byte 0x06013000
.L08089964: .4byte gUnknown_08A0285C
.L08089968: .4byte gUnknown_08A02884
.L0808996C: .4byte gUnknown_08A028AC
.L08089970: .4byte gUnknown_08A02914
.L08089974: .4byte gUnknown_08A02980
.L08089978: .4byte gFont_HelpBox
.L0808997C: .4byte gUnknown_0859EF40

	THUMB_FUNC_END func_080898C4

	THUMB_FUNC_START DisplayHelpBoxObj
DisplayHelpBoxObj: @ 0x08089980
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	mov sl, r0
	str r1, [sp, #4]
	adds r7, r2, #0
	mov r9, r3
	adds r0, r7, #7
	movs r1, #0x10
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r0, #0xf
	adds r1, r7, #0
	ands r1, r0
	cmp r7, #0x1f
	bgt .L080899AA
	movs r7, #0x20
.L080899AA:
	cmp r7, #0xc0
	ble .L080899B0
	movs r7, #0xc0
.L080899B0:
	mov r0, r9
	cmp r0, #0xf
	bgt .L080899BA
	movs r0, #0x10
	mov r9, r0
.L080899BA:
	mov r0, r9
	cmp r0, #0x30
	ble .L080899C4
	movs r0, #0x30
	mov r9, r0
.L080899C4:
	adds r0, r7, #0
	adds r0, #0x1f
	cmp r0, #0
	bge .L080899CE
	adds r0, #0x1f
.L080899CE:
	asrs r2, r0, #5
	mov r0, r9
	adds r0, #0xf
	cmp r0, #0
	bge .L080899DA
	adds r0, #0xf
.L080899DA:
	asrs r0, r0, #4
	str r0, [sp, #8]
	lsls r0, r3, #0x18
	lsrs r3, r0, #0x18
	mov r8, r3
	subs r5, r2, #1
	str r0, [sp, #0x1c]
	str r5, [sp, #0x14]
	ldr r0, [sp, #4]
	subs r0, #8
	str r0, [sp, #0x10]
	ldr r3, [sp, #4]
	add r3, r9
	str r3, [sp, #0x28]
	mov r0, sl
	subs r0, #8
	str r0, [sp, #0xc]
	mov r3, sl
	adds r3, r3, r7
	str r3, [sp, #0x24]
	lsls r1, r1, #0x18
	str r1, [sp, #0x20]
	cmp r5, #0
	blt .L08089A92
.L08089A0A:
	ldr r4, [sp, #8]
	subs r0, r5, #1
	str r0, [sp, #0x18]
	cmp r4, #0
	blt .L08089A88
	lsls r6, r4, #6
	mov r1, r8
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
.L08089A1E:
	adds r0, r4, #1
	lsls r2, r0, #4
	cmp r2, r9
	ble .L08089A28
	mov r2, r9
.L08089A28:
	subs r2, #0x10
	adds r0, r5, #1
	lsls r0, r0, #5
	mov r3, r8
	cmp r3, #0
	beq .L08089A5C
	subs r0, #0x20
	mov r3, sl
	adds r1, r3, r0
	ldr r0, [sp, #4]
	adds r2, r0, r2
	ldr r3, .L08089A54  @ gFont_HelpBox
	lsls r0, r5, #2
	ldrh r3, [r3, #0x30]
	adds r0, r0, r3
	adds r0, r0, r6
	str r0, [sp]
	movs r0, #0
	ldr r3, .L08089A58  @ Sprite_16x16
	bl PutSprite
	b .L08089A80
	.align 2, 0
.L08089A54: .4byte gFont_HelpBox
.L08089A58: .4byte Sprite_16x16
.L08089A5C:
	cmp r0, r7
	ble .L08089A62
	adds r0, r7, #0
.L08089A62:
	subs r0, #0x20
	mov r3, sl
	adds r1, r3, r0
	ldr r0, [sp, #4]
	adds r2, r0, r2
	ldr r3, .L08089ADC  @ gFont_HelpBox
	lsls r0, r5, #2
	ldrh r3, [r3, #0x30]
	adds r0, r0, r3
	adds r0, r0, r6
	str r0, [sp]
	movs r0, #0
	ldr r3, .L08089AE0  @ Sprite_32x16
	bl PutSprite
.L08089A80:
	subs r6, #0x40
	subs r4, #1
	cmp r4, #0
	bge .L08089A1E
.L08089A88:
	movs r1, #0
	mov r8, r1
	ldr r5, [sp, #0x18]
	cmp r5, #0
	bge .L08089A0A
.L08089A92:
	ldr r3, [sp, #0x1c]
	lsrs r3, r3, #0x18
	mov r8, r3
	ldr r5, [sp, #0x14]
	cmp r5, #0
	blt .L08089B1E
	ldr r6, .L08089ADC  @ gFont_HelpBox
.L08089AA0:
	adds r0, r5, #1
	lsls r0, r0, #5
	mov r1, r8
	cmp r1, #0
	beq .L08089AE8
	subs r0, #0x20
	mov r3, sl
	adds r4, r3, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	ldr r3, .L08089AE4  @ Sprite_16x8
	bl PutSprite
	ldrh r0, [r6, #0x30]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x28]
	ldr r3, .L08089AE4  @ Sprite_16x8
	bl PutSprite
	movs r0, #0
	mov r8, r0
	b .L08089B18
	.align 2, 0
.L08089ADC: .4byte gFont_HelpBox
.L08089AE0: .4byte Sprite_32x16
.L08089AE4: .4byte Sprite_16x8
.L08089AE8:
	cmp r0, r7
	ble .L08089AEE
	adds r0, r7, #0
.L08089AEE:
	subs r0, #0x20
	mov r1, sl
	adds r4, r1, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	ldr r3, .L08089C28  @ Sprite_32x8
	bl PutSprite
	ldrh r0, [r6, #0x30]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x28]
	ldr r3, .L08089C28  @ Sprite_32x8
	bl PutSprite
.L08089B18:
	subs r5, #1
	cmp r5, #0
	bge .L08089AA0
.L08089B1E:
	ldr r4, [sp, #8]
	cmp r4, #0
	blt .L08089B7C
.L08089B24:
	adds r0, r4, #1
	lsls r2, r0, #4
	cmp r2, r9
	ble .L08089B2E
	mov r2, r9
.L08089B2E:
	subs r2, #0x10
	ldr r3, [sp, #4]
	adds r5, r3, r2
	ldr r7, .L08089C2C  @ Sprite_8x16
	ldr r6, .L08089C30  @ gFont_HelpBox
	ldrh r0, [r6, #0x30]
	adds r0, #0x5f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	adds r2, r5, #0
	adds r3, r7, #0
	bl PutSprite
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	adds r2, r5, #0
	adds r3, r7, #0
	bl PutSprite
	ldr r0, [sp, #0x20]
	cmp r0, #0
	beq .L08089B76
	ldrh r0, [r6, #0x30]
	adds r0, #0x1a
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	subs r1, #8
	adds r2, r5, #0
	adds r3, r7, #0
	bl PutSprite
.L08089B76:
	subs r4, #1
	cmp r4, #0
	bge .L08089B24
.L08089B7C:
	ldr r6, .L08089C34  @ Sprite_8x8
	ldr r5, .L08089C30  @ gFont_HelpBox
	ldrh r0, [r5, #0x30]
	adds r0, #0x5b
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x10]
	adds r3, r6, #0
	bl PutSprite
	ldrh r0, [r5, #0x30]
	adds r0, #0x5c
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	ldr r2, [sp, #0x10]
	adds r3, r6, #0
	bl PutSprite
	ldrh r0, [r5, #0x30]
	adds r0, #0x5d
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x28]
	adds r3, r6, #0
	bl PutSprite
	ldrh r0, [r5, #0x30]
	adds r0, #0x5e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x24]
	ldr r2, [sp, #0x28]
	adds r3, r6, #0
	bl PutSprite
	ldr r1, [sp, #0x20]
	cmp r1, #0
	beq .L08089BF6
	ldr r4, [sp, #0x24]
	subs r4, #8
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	adds r3, r6, #0
	bl PutSprite
	ldrh r0, [r5, #0x30]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x28]
	adds r3, r6, #0
	bl PutSprite
.L08089BF6:
	ldr r0, [sp, #0x4c]
	cmp r0, #0
	bne .L08089C16
	ldr r2, [sp, #4]
	subs r2, #0xb
	ldr r3, .L08089C38  @ Sprite_32x16
	ldr r0, .L08089C30  @ gFont_HelpBox
	ldrh r1, [r0, #0x30]
	ldr r0, .L08089C3C  @ 0x000003FF
	ands r0, r1
	adds r0, #0x7b
	str r0, [sp]
	movs r0, #0
	mov r1, sl
	bl PutSprite
.L08089C16:
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08089C28: .4byte Sprite_32x8
.L08089C2C: .4byte Sprite_8x16
.L08089C30: .4byte gFont_HelpBox
.L08089C34: .4byte Sprite_8x8
.L08089C38: .4byte Sprite_32x16
.L08089C3C: .4byte 0x000003FF

	THUMB_FUNC_END DisplayHelpBoxObj

	THUMB_FUNC_START DrawHelpBoxWeaponStatLabels
DrawHelpBoxWeaponStatLabels: @ 0x08089C40
	push {r4, lr}
	ldr r4, .L08089CC0  @ gText_HelpBox
	bl GetItemKind
	bl GetItemKindString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	movs r0, #0xa0
	lsls r0, r0, #3
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x2f
	movs r2, #8
	bl Text_InsertDrawString
	ldr r0, .L08089CC4  @ 0x00000502
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x61
	movs r2, #8
	bl Text_InsertDrawString
	adds r4, #8
	ldr r0, .L08089CC8  @ 0x00000503
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	ldr r0, .L08089CCC  @ 0x000004F4
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x2f
	movs r2, #8
	bl Text_InsertDrawString
	ldr r0, .L08089CD0  @ 0x00000501
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x61
	movs r2, #8
	bl Text_InsertDrawString
	movs r0, #2
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L08089CC0: .4byte gText_HelpBox
.L08089CC4: .4byte 0x00000502
.L08089CC8: .4byte 0x00000503
.L08089CCC: .4byte 0x000004F4
.L08089CD0: .4byte 0x00000501

	THUMB_FUNC_END DrawHelpBoxWeaponStatLabels

	THUMB_FUNC_START DrawHelpBoxWeaponStats
DrawHelpBoxWeaponStats: @ 0x08089CD4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L08089D4C  @ gText_HelpBox
	bl GetItemWeaponLevelString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x43
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemWeight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x81
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r4, #8
	adds r0, r5, #0
	bl GetItemMight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r0, r5, #0
	bl GetItemHit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x51
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r0, r5, #0
	bl GetItemCrit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x81
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08089D4C: .4byte gText_HelpBox

	THUMB_FUNC_END DrawHelpBoxWeaponStats

	THUMB_FUNC_START DrawHelpBoxStaffStatLabels
DrawHelpBoxStaffStatLabels: @ 0x08089D50
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L08089DA8  @ gText_HelpBox
	ldr r0, .L08089DAC  @ 0x00000509
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemWeaponLevelString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x1e
	movs r2, #7
	bl Text_InsertDrawString
	movs r0, #0xa0
	lsls r0, r0, #3
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x30
	movs r2, #8
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x46
	movs r2, #7
	bl Text_InsertDrawString
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L08089DA8: .4byte gText_HelpBox
.L08089DAC: .4byte 0x00000509

	THUMB_FUNC_END DrawHelpBoxStaffStatLabels

	THUMB_FUNC_START DrawHelpBoxSavemenuLabels
DrawHelpBoxSavemenuLabels: @ 0x08089DB0
	push {r4, lr}
	ldr r4, .L08089DE0  @ gText_HelpBox
	ldr r0, .L08089DE4  @ 0x00000147
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	movs r0, #0xa4
	lsls r0, r0, #1
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x5a
	movs r2, #8
	bl Text_InsertDrawString
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08089DE0: .4byte gText_HelpBox
.L08089DE4: .4byte 0x00000147

	THUMB_FUNC_END DrawHelpBoxSavemenuLabels

	THUMB_FUNC_START DrawHelpBoxSavemenuStuff
DrawHelpBoxSavemenuStuff: @ 0x08089DE8
	push {r4, lr}
	bl func_080AA768
	adds r3, r0, #0
	cmp r3, #0
	beq .L08089E04
	ldr r0, .L08089E00  @ gText_HelpBox
	movs r1, #0x1a
	movs r2, #7
	bl Text_InsertDrawString
	b .L08089E1A
	.align 2, 0
.L08089E00: .4byte gText_HelpBox
.L08089E04:
	ldr r4, .L08089E30  @ gText_HelpBox
	movs r0, #0xa7
	lsls r0, r0, #3
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x1a
	movs r2, #7
	bl Text_InsertDrawString
.L08089E1A:
	bl func_080AA744
	adds r3, r0, #0
	cmp r3, #0
	blt .L08089E34
	ldr r0, .L08089E30  @ gText_HelpBox
	movs r1, #0x74
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	b .L08089E48
	.align 2, 0
.L08089E30: .4byte gText_HelpBox
.L08089E34:
	ldr r4, .L08089E50  @ gText_HelpBox
	ldr r0, .L08089E54  @ 0x00000535
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x6c
	movs r2, #7
	bl Text_InsertDrawString
.L08089E48:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08089E50: .4byte gText_HelpBox
.L08089E54: .4byte 0x00000535

	THUMB_FUNC_END DrawHelpBoxSavemenuStuff

	THUMB_FUNC_START HelpBoxTextScroll_OnLoop
HelpBoxTextScroll_OnLoop: @ 0x08089E58
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5e
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt .L08089EE6
	adds r0, r4, #0
	adds r0, #0x60
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r0, [r4, #0x30]
	bl SetTextFont
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x62
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r7, r0, #0
	cmp r6, r1
	bge .L08089EE0
	adds r5, r4, #0
	adds r5, #0x5c
.L08089E8E:
	ldr r0, [r4, #0x2c]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #1
	beq .L08089EB0
	cmp r2, #1
	bgt .L08089EA2
	cmp r2, #0
	beq .L08089EA8
	b .L08089EC0
.L08089EA2:
	cmp r2, #4
	beq .L08089EBC
	b .L08089EC0
.L08089EA8:
	adds r0, r4, #0
	bl Proc_Break
	b .L08089EE0
.L08089EB0:
	adds r0, r3, #1
	str r0, [r4, #0x2c]
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b .L08089ED6
.L08089EBC:
	adds r0, r3, #1
	b .L08089ED4
.L08089EC0:
	movs r0, #0
	ldrsh r1, [r5, r0]
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r3, #0
	bl Text_DrawCharacter
.L08089ED4:
	str r0, [r4, #0x2c]
.L08089ED6:
	adds r6, #1
	movs r1, #0
	ldrsh r0, [r7, r1]
	cmp r6, r0
	blt .L08089E8E
.L08089EE0:
	movs r0, #0
	bl SetTextFont
.L08089EE6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END HelpBoxTextScroll_OnLoop

	THUMB_FUNC_START func_08089EEC
func_08089EEC: @ 0x08089EEC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	bl SetTextFont
	movs r6, #0
.L08089EF8:
	lsls r1, r6, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r5, [r0]
	ldrb r0, [r5, #4]
	lsls r0, r0, #3
	ldr r1, [r4, #0x2c]
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetCursor
.L08089F14:
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0]
	cmp r1, #1
	beq .L08089F34
	cmp r1, #1
	bgt .L08089F26
	cmp r1, #0
	beq .L08089F4C
	b .L08089F40
.L08089F26:
	cmp r1, #5
	bgt .L08089F40
	cmp r1, #4
	blt .L08089F40
	adds r0, #1
	str r0, [r4, #0x2c]
	b .L08089F14
.L08089F34:
	adds r0, #1
	str r0, [r4, #0x2c]
	adds r6, #1
	cmp r6, #5
	ble .L08089EF8
	b .L08089F4C
.L08089F40:
	ldr r1, [r4, #0x2c]
	adds r0, r5, #0
	bl Text_DrawCharacter
	str r0, [r4, #0x2c]
	b .L08089F14
.L08089F4C:
	ldr r0, [r4, #0x30]
	bl SetTextFont
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08089EEC

	THUMB_FUNC_START func_08089F58
func_08089F58: @ 0x08089F58
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, .L08089F80  @ gFont_HelpBox
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r4, #0
	bl GetItemHelpBoxKind
	adds r1, r0, #0
	cmp r1, #1
	beq .L08089F96
	cmp r1, #1
	bgt .L08089F84
	cmp r1, #0
	beq .L08089F8E
	b .L08089FB8
	.align 2, 0
.L08089F80: .4byte gFont_HelpBox
.L08089F84:
	cmp r1, #2
	beq .L08089FA4
	cmp r1, #3
	beq .L08089FAC
	b .L08089FB8
.L08089F8E:
	adds r0, r5, #0
	adds r0, #0x64
	strh r1, [r0]
	b .L08089FB8
.L08089F96:
	adds r0, r4, #0
	bl DrawHelpBoxWeaponStatLabels
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #2
	b .L08089FB6
.L08089FA4:
	adds r0, r4, #0
	bl DrawHelpBoxStaffStatLabels
	b .L08089FB0
.L08089FAC:
	bl DrawHelpBoxSavemenuLabels
.L08089FB0:
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #1
.L08089FB6:
	strh r0, [r1]
.L08089FB8:
	movs r0, #0
	bl SetTextFont
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08089F58

	THUMB_FUNC_START func_08089FCC
func_08089FCC: @ 0x08089FCC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, .L08089FE8  @ gFont_HelpBox
	bl SetTextFont
	adds r0, r4, #0
	bl GetItemHelpBoxKind
	cmp r0, #1
	beq .L08089FEC
	cmp r0, #3
	beq .L08089FF4
	b .L08089FF8
	.align 2, 0
.L08089FE8: .4byte gFont_HelpBox
.L08089FEC:
	adds r0, r4, #0
	bl DrawHelpBoxWeaponStats
	b .L08089FF8
.L08089FF4:
	bl DrawHelpBoxSavemenuStuff
.L08089FF8:
	movs r0, #0
	bl SetTextFont
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08089FCC

	THUMB_FUNC_START func_0808A00C
func_0808A00C: @ 0x0808A00C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	mov sl, r0
	ldr r5, .L0808A0B4  @ gFont_HelpBox
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	movs r0, #0x18
	adds r0, r0, r5
	mov r9, r0
	movs r1, #6
	bl Text_SetColor
	movs r1, #0x20
	adds r1, r1, r5
	mov r8, r1
	mov r0, r8
	movs r1, #6
	bl Text_SetColor
	adds r6, r5, #0
	adds r6, #0x28
	adds r0, r6, #0
	movs r1, #6
	bl Text_SetColor
	movs r0, #0
	bl SetTextFont
	ldr r4, .L0808A0B8  @ gUnknown_08A01628
	adds r0, r4, #0
	bl EndEachProc
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x30]
	mov r0, r9
	str r0, [r4, #0x34]
	mov r1, r8
	str r1, [r4, #0x38]
	str r6, [r4, #0x3c]
	mov r0, sl
	adds r0, #0x64
	ldrh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x5c
	movs r5, #0
	strh r1, [r0]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	bl GetMsg
	bl StrExpandNames
	str r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x62
	movs r3, #1
	strh r3, [r1]
	adds r0, r4, #0
	adds r0, #0x5e
	strh r5, [r0]
	ldr r0, .L0808A0BC  @ gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	cmp r2, #1
	beq .L0808A0D2
	cmp r2, #1
	bgt .L0808A0C0
	cmp r2, #0
	beq .L0808A0CA
	b .L0808A0EE
	.align 2, 0
.L0808A0B4: .4byte gFont_HelpBox
.L0808A0B8: .4byte gUnknown_08A01628
.L0808A0BC: .4byte gPlaySt
.L0808A0C0:
	cmp r2, #2
	beq .L0808A0DA
	cmp r2, #3
	beq .L0808A0E4
	b .L0808A0EE
.L0808A0CA:
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #2
	b .L0808A0EC
.L0808A0D2:
	adds r0, r4, #0
	adds r0, #0x60
	strh r2, [r0]
	b .L0808A0EE
.L0808A0DA:
	adds r0, r4, #0
	adds r0, #0x60
	strh r3, [r0]
	strh r2, [r1]
	b .L0808A0EE
.L0808A0E4:
	adds r0, r4, #0
	adds r0, #0x60
	strh r5, [r0]
	movs r0, #0x7f
.L0808A0EC:
	strh r0, [r1]
.L0808A0EE:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A00C

	THUMB_FUNC_START StartHelpBoxTextInit
StartHelpBoxTextInit: @ 0x0808A0FC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L0808A114  @ gUnknown_08A01650
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x58]
	str r5, [r0, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A114: .4byte gUnknown_08A01650

	THUMB_FUNC_END StartHelpBoxTextInit

	THUMB_FUNC_START ClearHelpBoxText
ClearHelpBoxText: @ 0x0808A118
	push {r4, lr}
	ldr r4, .L0808A154  @ gFont_HelpBox
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl DrawSpriteTextBackground
	adds r4, #0x28
	adds r0, r4, #0
	bl DrawSpriteTextBackground
	ldr r0, .L0808A158  @ gUnknown_08A01628
	bl EndEachProc
	ldr r0, .L0808A15C  @ gUnknown_08A01650
	bl EndEachProc
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A154: .4byte gFont_HelpBox
.L0808A158: .4byte gUnknown_08A01628
.L0808A15C: .4byte gUnknown_08A01650

	THUMB_FUNC_END ClearHelpBoxText

	THUMB_FUNC_START func_0808A160
func_0808A160: @ 0x0808A160
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl UpdateHelpBoxDisplay
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge .L0808A182
	adds r0, r3, #1
	strh r0, [r2]
.L0808A182:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A160

	THUMB_FUNC_START func_0808A188
func_0808A188: @ 0x0808A188
	push {r4, r5, lr}
	adds r4, r0, #0
	bl func_0808A444
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0, #0x10]
	ldrb r2, [r0, #0x11]
	adds r0, r4, #0
	bl func_0808A43C
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A188

	THUMB_FUNC_START func_0808A1B8
func_0808A1B8: @ 0x0808A1B8
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl UpdateHelpBoxDisplay
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge .L0808A1D8
	adds r0, r4, #0
	bl Proc_Break
.L0808A1D8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A1B8

	THUMB_FUNC_START func_0808A1E0
func_0808A1E0: @ 0x0808A1E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808A1FC  @ gUnknown_0203E7C8
	movs r3, #0
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	bl func_0808A354
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A1FC: .4byte gUnknown_0203E7C8

	THUMB_FUNC_END func_0808A1E0

	THUMB_FUNC_START func_0808A200
func_0808A200: @ 0x0808A200
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r4, .L0808A244  @ gUnknown_08A01678
	adds r0, r4, #0
	bl FindProc
	adds r5, r0, #0
	cmp r5, #0
	bne .L0808A24C
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, .L0808A248  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808A230
	movs r0, #0x70
	bl m4aSongNumStart
.L0808A230:
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl func_0808A43C
	adds r0, r5, #0
	bl func_0808A444
	b .L0808A268
	.align 2, 0
.L0808A244: .4byte gUnknown_08A01678
.L0808A248: .4byte gPlaySt
.L0808A24C:
	ldrh r0, [r5, #0x30]
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x3a]
	adds r0, r5, #0
	adds r0, #0x44
	ldrh r1, [r0]
	subs r0, #4
	strh r1, [r0]
	adds r0, #6
	ldrh r0, [r0]
	adds r1, r5, #0
	adds r1, #0x42
	strh r0, [r1]
.L0808A268:
	str r6, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	adds r1, #2
	movs r0, #0xc
	strh r0, [r1]
	ldrh r0, [r6, #0x12]
	adds r4, r5, #0
	adds r4, #0x4c
	strh r0, [r4]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r4]
	bl GetMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r5, #0
	bl func_0808A384
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl func_0808A3C4
	bl ClearHelpBoxText
	adds r0, r5, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	ldrh r1, [r4]
	bl StartHelpBoxTextInit
	ldr r0, .L0808A2CC  @ gUnknown_0203E7E4
	str r6, [r0]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A2CC: .4byte gUnknown_0203E7E4

	THUMB_FUNC_END func_0808A200

	THUMB_FUNC_START func_0808A2D0
func_0808A2D0: @ 0x0808A2D0
	push {lr}
	ldr r0, .L0808A2F4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808A2E4
	movs r0, #0x71
	bl m4aSongNumStart
.L0808A2E4:
	bl ClearHelpBoxText
	ldr r0, .L0808A2F8  @ gUnknown_08A01678
	bl BreakEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L0808A2F4: .4byte gPlaySt
.L0808A2F8: .4byte gUnknown_08A01678

	THUMB_FUNC_END func_0808A2D0

	THUMB_FUNC_START func_0808A2FC
func_0808A2FC: @ 0x0808A2FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x50
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq .L0808A314
	adds r0, r4, #0
	bl _call_via_r1
.L0808A314:
	ldr r0, [r4, #0x2c]
	bl func_0808A200
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A2FC

	THUMB_FUNC_START func_0808A320
func_0808A320: @ 0x0808A320
	push {lr}
	adds r2, r0, #0
	ldr r0, .L0808A33C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0808A338
	adds r0, r2, #0
	bl Proc_Break
.L0808A338:
	pop {r0}
	bx r0
	.align 2, 0
.L0808A33C: .4byte gKeySt

	THUMB_FUNC_END func_0808A320

	THUMB_FUNC_START func_0808A340
func_0808A340: @ 0x0808A340
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808A2D0
	adds r0, r4, #0
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A340

	THUMB_FUNC_START func_0808A354
func_0808A354: @ 0x0808A354
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808A368  @ gUnknown_08A01698
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A368: .4byte gUnknown_08A01698

	THUMB_FUNC_END func_0808A354

	THUMB_FUNC_START func_0808A36C
func_0808A36C: @ 0x0808A36C
	push {lr}
	ldr r0, .L0808A380  @ gUnknown_08A01698
	bl FindProc
	cmp r0, #0
	beq .L0808A37A
	movs r0, #1
.L0808A37A:
	pop {r1}
	bx r1
	.align 2, 0
.L0808A380: .4byte gUnknown_08A01698

	THUMB_FUNC_END func_0808A36C

	THUMB_FUNC_START func_0808A384
func_0808A384: @ 0x0808A384
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r4, #0x1f
	movs r0, #0xe0
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	bl func_0808A454
	cmp r0, #1
	beq .L0808A3A6
	cmp r0, #2
	beq .L0808A3AC
	b .L0808A3B4
.L0808A3A6:
	movs r4, #0xa0
	adds r5, #0x20
	b .L0808A3B4
.L0808A3AC:
	cmp r4, #0x5f
	bgt .L0808A3B2
	movs r4, #0x60
.L0808A3B2:
	adds r5, #0x10
.L0808A3B4:
	adds r0, r6, #0
	adds r0, #0x44
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A384

	THUMB_FUNC_START func_0808A3C4
func_0808A3C4: @ 0x0808A3C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	mov r8, r2
	adds r0, #0x44
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r6, r0, #0
	adds r6, #0x10
	adds r0, r5, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r7, r0, #0
	adds r7, #0x10
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r0, #0x10
	subs r4, r4, r0
	strh r4, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bge .L0808A3FE
	movs r0, #0
	strh r0, [r5, #0x3c]
.L0808A3FE:
	movs r1, #0x3c
	ldrsh r0, [r5, r1]
	adds r0, r0, r6
	cmp r0, #0xf0
	ble .L0808A40E
	movs r0, #0xf0
	subs r0, r0, r6
	strh r0, [r5, #0x3c]
.L0808A40E:
	mov r0, r8
	adds r0, #0x10
	strh r0, [r5, #0x3e]
	movs r1, #0x3e
	ldrsh r0, [r5, r1]
	adds r0, r0, r7
	cmp r0, #0xa0
	ble .L0808A424
	mov r1, r8
	subs r0, r1, r7
	strh r0, [r5, #0x3e]
.L0808A424:
	ldrh r0, [r5, #0x3c]
	adds r0, #8
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x3e]
	adds r0, #8
	strh r0, [r5, #0x3e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A3C4

	THUMB_FUNC_START func_0808A43C
func_0808A43C: @ 0x0808A43C
	strh r1, [r0, #0x38]
	strh r2, [r0, #0x3a]
	bx lr

	THUMB_FUNC_END func_0808A43C

	THUMB_FUNC_START func_0808A444
func_0808A444: @ 0x0808A444
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0x20
	strh r1, [r2]
	adds r0, #0x42
	movs r1, #0x10
	strh r1, [r0]
	bx lr

	THUMB_FUNC_END func_0808A444

	THUMB_FUNC_START func_0808A454
func_0808A454: @ 0x0808A454
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808A464  @ 0x0000FFFE
	cmp r4, r0
	bne .L0808A468
	movs r0, #3
	b .L0808A49E
	.align 2, 0
.L0808A464: .4byte 0x0000FFFE
.L0808A468:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne .L0808A498
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808A48A
	movs r0, #1
	b .L0808A49E
.L0808A48A:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne .L0808A49C
.L0808A498:
	movs r0, #0
	b .L0808A49E
.L0808A49C:
	movs r0, #2
.L0808A49E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808A454

	THUMB_FUNC_START func_0808A4A4
func_0808A4A4: @ 0x0808A4A4
	push {lr}
	adds r2, r0, #0
	ldr r0, .L0808A4C0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0808A4BC
	adds r0, r2, #0
	bl Proc_Break
.L0808A4BC:
	pop {r0}
	bx r0
	.align 2, 0
.L0808A4C0: .4byte gKeySt

	THUMB_FUNC_END func_0808A4A4

	THUMB_FUNC_START func_0808A4C4
func_0808A4C4: @ 0x0808A4C4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl LoadHelpBoxGfx
	bl GetUiHandPrevDisplayX
	adds r4, r0, #0
	bl GetUiHandPrevDisplayY
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl func_0808A1E0
	ldr r0, .L0808A4F8  @ gUnknown_08A016C8
	adds r1, r6, #0
	bl SpawnProcLocking
	movs r0, #1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L0808A4F8: .4byte gUnknown_08A016C8

	THUMB_FUNC_END func_0808A4C4

	THUMB_FUNC_START func_0808A4FC
func_0808A4FC: @ 0x0808A4FC
	push {lr}
	ldr r0, .L0808A50C  @ gUnknown_08A016E0
	bl FindProc
	cmp r0, #0
	bne .L0808A510
	movs r0, #0
	b .L0808A512
	.align 2, 0
.L0808A50C: .4byte gUnknown_08A016E0
.L0808A510:
	movs r0, #1
.L0808A512:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808A4FC

	THUMB_FUNC_START SetDialogueBoxConfig
SetDialogueBoxConfig: @ 0x0808A518
	ldr r1, .L0808A520  @ gUnknown_0203E7E8
	adds r1, #0x42
	strh r0, [r1]
	bx lr
	.align 2, 0
.L0808A520: .4byte gUnknown_0203E7E8

	THUMB_FUNC_END SetDialogueBoxConfig

	THUMB_FUNC_START GetDialogueBoxConfig
GetDialogueBoxConfig: @ 0x0808A524
	ldr r0, .L0808A52C  @ gUnknown_0203E7E8
	adds r0, #0x42
	ldrh r0, [r0]
	bx lr
	.align 2, 0
.L0808A52C: .4byte gUnknown_0203E7E8

	THUMB_FUNC_END GetDialogueBoxConfig

	THUMB_FUNC_START func_0808A530
func_0808A530: @ 0x0808A530
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r9, r0
	ldr r3, .L0808A590  @ gUnknown_0203E7E8
	adds r0, r3, #0
	adds r0, #0x40
	ldrh r2, [r0]
	ldr r0, .L0808A594  @ 0x000003FF
	ands r0, r2
	ldrh r3, [r3, #0x18]
	adds r0, r0, r3
	lsls r0, r0, #5
	ldr r2, .L0808A598  @ 0x06010000
	adds r5, r0, r2
	movs r7, #0
	lsls r0, r1, #1
	cmp r7, r0
	bge .L0808A5C2
	adds r3, r0, #0
.L0808A55C:
	adds r4, r5, #0
	movs r2, #0
	adds r0, r7, #1
	mov r8, r0
	cmp r2, r9
	bge .L0808A5B6
.L0808A568:
	adds r6, r2, #1
	movs r1, #6
.L0808A56C:
	ldr r0, [r4, #4]
	stm r4!, {r0}
	subs r1, #1
	cmp r1, #0
	bge .L0808A56C
	subs r0, r3, #1
	cmp r7, r0
	bne .L0808A5A4
	str r3, [sp]
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	ldr r3, [sp]
	cmp r1, #0
	bne .L0808A5A0
	ldr r0, .L0808A59C  @ 0x44444444
	b .L0808A5AE
	.align 2, 0
.L0808A590: .4byte gUnknown_0203E7E8
.L0808A594: .4byte 0x000003FF
.L0808A598: .4byte 0x06010000
.L0808A59C: .4byte 0x44444444
.L0808A5A0:
	movs r0, #0
	b .L0808A5AE
.L0808A5A4:
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #5
	adds r0, r0, r5
	ldr r0, [r0]
.L0808A5AE:
	stm r4!, {r0}
	adds r2, r6, #0
	cmp r2, r9
	blt .L0808A568
.L0808A5B6:
	movs r2, #0x80
	lsls r2, r2, #3
	adds r5, r5, r2
	mov r7, r8
	cmp r7, r3
	blt .L0808A55C
.L0808A5C2:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A530

	THUMB_FUNC_START func_0808A5D0
func_0808A5D0: @ 0x0808A5D0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	cmp r5, #0
	bne .L0808A5DC
	ldr r5, .L0808A634  @ 0x06013000
.L0808A5DC:
	cmp r6, #0
	bge .L0808A5E2
	movs r6, #5
.L0808A5E2:
	movs r0, #0xf
	ands r0, r6
	adds r6, r0, #0
	adds r6, #0x10
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808A64C
	ldr r0, .L0808A638  @ gUnknown_08A029A8
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A63C  @ gUnknown_08A02A1C
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A640  @ gUnknown_08A02A94
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A644  @ gUnknown_08A02B3C
	movs r2, #0xf8
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A648  @ gUnknown_08A02BAC
	movs r2, #0x9c
	lsls r2, r2, #5
	adds r1, r5, r2
	bl Decompress
	b .L0808A688
	.align 2, 0
.L0808A634: .4byte 0x06013000
.L0808A638: .4byte gUnknown_08A029A8
.L0808A63C: .4byte gUnknown_08A02A1C
.L0808A640: .4byte gUnknown_08A02A94
.L0808A644: .4byte gUnknown_08A02B3C
.L0808A648: .4byte gUnknown_08A02BAC
.L0808A64C:
	ldr r0, .L0808A6FC  @ gUnknown_08A0285C
	movs r2, #0xd8
	lsls r2, r2, #2
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A700  @ gUnknown_08A02884
	movs r2, #0xec
	lsls r2, r2, #3
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A704  @ gUnknown_08A028AC
	movs r2, #0xb6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A708  @ gUnknown_08A02914
	movs r2, #0xf6
	lsls r2, r2, #4
	adds r1, r5, r2
	bl Decompress
	ldr r0, .L0808A70C  @ gUnknown_08A02980
	movs r2, #0x9b
	lsls r2, r2, #5
	adds r1, r5, r2
	bl Decompress
.L0808A688:
	bl ClearTalkFlags
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne .L0808A728
	ldr r4, .L0808A710  @ gUnknown_0203E7E8
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSpriteTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x28
	bl InitSpriteText
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808A6E4
	bl GetDialogueBoxConfig
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne .L0808A6E4
	adds r0, r4, #0
	adds r0, #0x30
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x38
	bl InitSpriteText
.L0808A6E4:
	movs r0, #0
	bl SetTextFont
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808A718
	ldr r0, .L0808A714  @ gUnknown_0859EF80
	b .L0808A71A
	.align 2, 0
.L0808A6FC: .4byte gUnknown_08A0285C
.L0808A700: .4byte gUnknown_08A02884
.L0808A704: .4byte gUnknown_08A028AC
.L0808A708: .4byte gUnknown_08A02914
.L0808A70C: .4byte gUnknown_08A02980
.L0808A710: .4byte gUnknown_0203E7E8
.L0808A714: .4byte gUnknown_0859EF80
.L0808A718:
	ldr r0, .L0808A724  @ gUnknown_0859EF60
.L0808A71A:
	lsls r1, r6, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	b .L0808A764
	.align 2, 0
.L0808A724: .4byte gUnknown_0859EF60
.L0808A728:
	ldr r0, .L0808A738  @ gUnknown_0203E7E8
	adds r1, r5, #0
	adds r2, r6, #0
	bl InitSpriteTextFont
	movs r4, #0
	lsls r7, r6, #5
	b .L0808A748
	.align 2, 0
.L0808A738: .4byte gUnknown_0203E7E8
.L0808A73C:
	lsls r0, r4, #3
	ldr r1, .L0808A79C  @ gUnknown_0203E800
	adds r0, r0, r1
	bl InitSpriteText
	adds r4, #1
.L0808A748:
	bl GetDialogueBoxConfig
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt .L0808A73C
	movs r0, #0
	bl SetTextFont
	ldr r0, .L0808A7A0  @ Pal_SystemText
	adds r1, r7, #0
	movs r2, #0x20
	bl ApplyPaletteExt
.L0808A764:
	ldr r2, .L0808A7A4  @ gUnknown_0203E7E8
	lsls r1, r5, #0x11
	lsrs r1, r1, #0x16
	movs r0, #0xf
	ands r0, r6
	lsls r0, r0, #0xc
	adds r1, r1, r0
	adds r2, #0x40
	strh r1, [r2]
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808A794
	ldr r0, .L0808A7A8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808A794
	ldr r0, .L0808A7AC  @ 0x000002E6
	bl m4aSongNumStart
.L0808A794:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A79C: .4byte gUnknown_0203E800
.L0808A7A0: .4byte Pal_SystemText
.L0808A7A4: .4byte gUnknown_0203E7E8
.L0808A7A8: .4byte gPlaySt
.L0808A7AC: .4byte 0x000002E6

	THUMB_FUNC_END func_0808A5D0

	THUMB_FUNC_START func_0808A7B0
func_0808A7B0: @ 0x0808A7B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r0, #0x10
	mov r8, r0
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xbf
	ble .L0808A7D6
	movs r0, #0xc0
	strh r0, [r1]
.L0808A7D6:
	movs r2, #0
	ldrsh r0, [r1, r2]
	adds r7, r0, #0
	adds r7, #0x10
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne .L0808A828
	strh r5, [r4, #0x3c]
	adds r0, r6, #0
	adds r0, #8
	strh r0, [r4, #0x3e]
	bl GetDialogueBoxConfig
	movs r1, #0x40
	ands r1, r0
	cmp r1, #0
	bne .L0808A820
	movs r1, #0x3c
	ldrsh r0, [r4, r1]
	adds r0, r0, r7
	cmp r0, #0xf0
	ble .L0808A80E
	movs r0, #0xf0
	subs r0, r0, r7
	strh r0, [r4, #0x3c]
.L0808A80E:
	movs r2, #0x3e
	ldrsh r0, [r4, r2]
	add r0, r8
	cmp r0, #0xa0
	ble .L0808A820
	movs r0, #0x98
	mov r1, r8
	subs r0, r0, r1
	strh r0, [r4, #0x3e]
.L0808A820:
	ldrh r0, [r4, #0x3c]
	adds r0, #8
	strh r0, [r4, #0x3c]
	b .L0808A82C
.L0808A828:
	strh r5, [r4, #0x3c]
	strh r6, [r4, #0x3e]
.L0808A82C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A7B0

	THUMB_FUNC_START func_0808A838
func_0808A838: @ 0x0808A838
	movs r3, #0xf8
	ands r3, r1
	adds r1, r0, #0
	adds r1, #0x44
	strh r3, [r1]
	adds r0, #0x46
	strh r2, [r0]
	bx lr

	THUMB_FUNC_END func_0808A838

	THUMB_FUNC_START func_0808A848
func_0808A848: @ 0x0808A848
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0xff
	bne .L0808A862
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl func_0808A5D0
	b .L0808A86A
.L0808A862:
	ldr r0, [r4, #0x3c]
	ldrb r1, [r1]
	bl func_0808A5D0
.L0808A86A:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x34]
	bl func_0808AC0C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A848

	THUMB_FUNC_START func_0808A87C
func_0808A87C: @ 0x0808A87C
	push {r4, lr}
	adds r4, r0, #0
	bl GetDialogueBoxConfig
	movs r1, #0x82
	ands r1, r0
	cmp r1, #0
	bne .L0808A8A2
	ldr r0, .L0808A8A8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq .L0808A8A2
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
.L0808A8A2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A8A8: .4byte gKeySt

	THUMB_FUNC_END func_0808A87C

	THUMB_FUNC_START func_0808A8AC
func_0808A8AC: @ 0x0808A8AC
	push {lr}
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808A8CC
	ldr r0, .L0808A8DC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808A8CC
	ldr r0, .L0808A8E0  @ 0x000002E7
	bl m4aSongNumStart
.L0808A8CC:
	movs r0, #0
	bl SetTextFontGlyphs
	bl func_0808A9F0
	pop {r0}
	bx r0
	.align 2, 0
.L0808A8DC: .4byte gPlaySt
.L0808A8E0: .4byte 0x000002E7

	THUMB_FUNC_END func_0808A8AC

	THUMB_FUNC_START func_0808A8E4
func_0808A8E4: @ 0x0808A8E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r5, r1, #0
	movs r1, #0x3c
	ldrsh r0, [r7, r1]
	mov r8, r0
	movs r3, #0x3e
	ldrsh r2, [r7, r3]
	mov r9, r2
	adds r0, r7, #0
	adds r0, #0x40
	movs r4, #0
	ldrsh r1, [r0, r4]
	adds r0, #4
	movs r6, #0
	ldrsh r2, [r0, r6]
	adds r4, r7, #0
	adds r4, #0x48
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r6, #0x4a
	adds r6, r6, r7
	mov sl, r6
	movs r3, #0
	ldrsh r0, [r6, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	str r0, [sp, #4]
	adds r0, r7, #0
	adds r0, #0x42
	movs r6, #0
	ldrsh r1, [r0, r6]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r6, #0
	ldrsh r3, [r4, r6]
	mov r4, sl
	movs r6, #0
	ldrsh r0, [r4, r6]
	str r0, [sp]
	adds r0, r5, #0
	bl Interpolate
	adds r3, r0, #0
	mov r0, r8
	strh r0, [r7, #0x30]
	mov r1, r9
	strh r1, [r7, #0x32]
	mov r0, r8
	mov r1, r9
	ldr r2, [sp, #4]
	bl func_0808ACFC
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A8E4

	THUMB_FUNC_START func_0808A974
func_0808A974: @ 0x0808A974
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl func_0808A8E4
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge .L0808A996
	adds r0, r3, #1
	strh r0, [r2]
.L0808A996:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A974

	THUMB_FUNC_START func_0808A99C
func_0808A99C: @ 0x0808A99C
	push {r4, r5, lr}
	adds r4, r0, #0
	bl ResetHelpBoxInitSize
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808A99C

	THUMB_FUNC_START func_0808A9C0
func_0808A9C0: @ 0x0808A9C0
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl func_0808A8E4
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge .L0808A9E6
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, .L0808A9EC  @ gUnknown_08A01818
	bl EndEachProc
.L0808A9E6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808A9EC: .4byte gUnknown_08A01818

	THUMB_FUNC_END func_0808A9C0

	THUMB_FUNC_START func_0808A9F0
func_0808A9F0: @ 0x0808A9F0
	push {lr}
	bl func_0808BAA4
	ldr r0, .L0808AA00  @ gUnknown_08A01740
	bl BreakEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L0808AA00: .4byte gUnknown_08A01740

	THUMB_FUNC_END func_0808A9F0

	THUMB_FUNC_START func_0808AA04
func_0808AA04: @ 0x0808AA04
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	adds r5, r3, #0
	ldr r4, .L0808AA30  @ gUnknown_08A016E0
	adds r0, r4, #0
	bl EndEachProc
	movs r0, #0
	bl SetDialogueBoxConfig
	cmp r5, #0
	bne .L0808AA34
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	b .L0808AA3C
	.align 2, 0
.L0808AA30: .4byte gUnknown_08A016E0
.L0808AA34:
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProcLocking
.L0808AA3C:
	adds r2, r0, #0
	str r6, [r2, #0x2c]
	str r7, [r2, #0x30]
	mov r0, r8
	str r0, [r2, #0x34]
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0xff
	strb r0, [r1]
	subs r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r0, .L0808AA68  @ gUnknown_08A01818
	movs r1, #0
	bl SpawnProc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808AA68: .4byte gUnknown_08A01818

	THUMB_FUNC_END func_0808AA04

	THUMB_FUNC_START func_0808AA6C
func_0808AA6C: @ 0x0808AA6C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	mov r9, r3
	ldr r5, [sp, #0x20]
	ldr r4, .L0808AA9C  @ gUnknown_08A016E0
	adds r0, r4, #0
	bl EndEachProc
	movs r0, #0
	bl SetDialogueBoxConfig
	cmp r5, #0
	bne .L0808AAA0
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	b .L0808AAA8
	.align 2, 0
.L0808AA9C: .4byte gUnknown_08A016E0
.L0808AAA0:
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProcLocking
.L0808AAA8:
	adds r2, r0, #0
	str r6, [r2, #0x2c]
	str r7, [r2, #0x30]
	mov r0, r8
	str r0, [r2, #0x34]
	adds r1, r2, #0
	adds r1, #0x40
	ldr r0, [sp, #0x1c]
	strb r0, [r1]
	mov r0, r9
	str r0, [r2, #0x3c]
	subs r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r0, .L0808AAD8  @ gUnknown_08A01818
	movs r1, #0
	bl SpawnProc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808AAD8: .4byte gUnknown_08A01818

	THUMB_FUNC_END func_0808AA6C

	THUMB_FUNC_START func_0808AADC
func_0808AADC: @ 0x0808AADC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r7, #0
	movs r6, #0x10
	str r7, [r4]
	str r7, [r5]
.L0808AAEE:
	ldrb r0, [r3]
	cmp r0, #7
	bgt .L0808AB10
	cmp r0, #4
	bge .L0808AB38
	cmp r0, #1
	beq .L0808AB2C
	cmp r0, #1
	bgt .L0808AB06
	cmp r0, #0
	beq .L0808AB6E
	b .L0808AB80
.L0808AB06:
	cmp r0, #2
	beq .L0808AB3C
	cmp r0, #3
	beq .L0808AB52
	b .L0808AB80
.L0808AB10:
	cmp r0, #0x19
	ble .L0808AB1A
	cmp r0, #0x80
	beq .L0808AB28
	b .L0808AB80
.L0808AB1A:
	cmp r0, #0x18
	bge .L0808AB36
	cmp r0, #0x14
	bgt .L0808AB80
	cmp r0, #0x12
	blt .L0808AB80
	b .L0808AB6E
.L0808AB28:
	adds r3, #2
	b .L0808AAEE
.L0808AB2C:
	adds r6, #0x10
	ldr r0, [r4]
	cmp r0, r7
	bge .L0808AB36
	str r7, [r4]
.L0808AB36:
	movs r7, #0
.L0808AB38:
	adds r3, #1
	b .L0808AAEE
.L0808AB3C:
	adds r3, #1
	ldr r0, [r5]
	cmp r0, r6
	bge .L0808AB46
	str r6, [r5]
.L0808AB46:
	movs r6, #0
	ldr r0, [r4]
	cmp r0, r7
	bge .L0808AB6A
	str r7, [r4]
	b .L0808AB6A
.L0808AB52:
	adds r3, #1
	ldr r0, [r5]
	cmp r0, r6
	bge .L0808AB5C
	str r6, [r5]
.L0808AB5C:
	movs r6, #0
	adds r1, r7, #0
	adds r1, #8
	ldr r0, [r4]
	cmp r0, r1
	bge .L0808AB6A
	str r1, [r4]
.L0808AB6A:
	movs r7, #0
	b .L0808AAEE
.L0808AB6E:
	ldr r0, [r4]
	cmp r0, r7
	bge .L0808AB76
	str r7, [r4]
.L0808AB76:
	ldr r0, [r5]
	cmp r0, r6
	bge .L0808AB90
	str r6, [r5]
	b .L0808AB90
.L0808AB80:
	adds r0, r3, #0
	mov r1, sp
	bl GetCharTextLen
	adds r3, r0, #0
	ldr r0, [sp]
	adds r7, r7, r0
	b .L0808AAEE
.L0808AB90:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808AADC

	THUMB_FUNC_START func_0808AB98
func_0808AB98: @ 0x0808AB98
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r1, #0
	movs r5, #0
	adds r4, r0, #0
	strb r5, [r6]
	movs r0, #1
	bl SetTextFontGlyphs
.L0808ABAA:
	ldrb r0, [r4]
	cmp r0, #7
	bgt .L0808ABCC
	cmp r0, #4
	bge .L0808ABE2
	cmp r0, #1
	beq .L0808ABE6
	cmp r0, #1
	bgt .L0808ABC2
	cmp r0, #0
	beq .L0808AC00
	b .L0808ABF0
.L0808ABC2:
	cmp r0, #2
	beq .L0808ABE2
	cmp r0, #3
	beq .L0808AC00
	b .L0808ABF0
.L0808ABCC:
	cmp r0, #0x19
	ble .L0808ABD6
	cmp r0, #0x80
	beq .L0808ABEC
	b .L0808ABF0
.L0808ABD6:
	cmp r0, #0x18
	bge .L0808ABE6
	cmp r0, #0x14
	bgt .L0808ABF0
	cmp r0, #0x12
	blt .L0808ABF0
.L0808ABE2:
	adds r4, #1
	b .L0808ABAA
.L0808ABE6:
	adds r4, #1
	movs r5, #0
	b .L0808ABAA
.L0808ABEC:
	adds r4, #2
	b .L0808ABAA
.L0808ABF0:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r5, r5, r0
	b .L0808ABAA
.L0808AC00:
	adds r0, r5, #2
	strb r0, [r6]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808AB98

	THUMB_FUNC_START func_0808AC0C
func_0808AC0C: @ 0x0808AC0C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	movs r5, #0
	str r5, [sp]
	str r5, [sp, #4]
	ldr r4, .L0808AC5C  @ gUnknown_08A01740
	adds r0, r4, #0
	bl EndEachProc
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl SetHelpBoxInitPosition
	adds r0, r4, #0
	bl ResetHelpBoxInitSize
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x48
	strh r5, [r0]
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808AC60
	adds r0, r4, #0
	adds r0, #0x4a
	strh r5, [r0]
	b .L0808AC68
	.align 2, 0
.L0808AC5C: .4byte gUnknown_08A01740
.L0808AC60:
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0xc
	strh r0, [r1]
.L0808AC68:
	adds r1, r4, #0
	adds r1, #0x4e
	movs r0, #0
	strh r0, [r1]
	adds r5, r4, #0
	adds r5, #0x4c
	mov r0, r8
	strh r0, [r5]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r5]
	bl GetMsg
	bl StrExpandNames
	add r2, sp, #4
	mov r1, sp
	bl func_0808AADC
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl func_0808A838
	bl GetDialogueBoxConfig
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808ACD6
	adds r0, r4, #0
	adds r0, #0x44
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0xd8
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r6, r6, r0
	adds r0, r4, #0
	adds r0, #0x46
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0x90
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r7, r7, r0
.L0808ACD6:
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl func_0808A7B0
	bl func_0808BAA4
	ldrh r0, [r5]
	ldr r1, [sp]
	ldr r2, [sp, #4]
	bl func_0808BA60
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808AC0C

	THUMB_FUNC_START func_0808ACFC
func_0808ACFC: @ 0x0808ACFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	str r0, [sp, #4]
	str r1, [sp, #8]
	adds r4, r2, #0
	mov r8, r3
	mov r0, r8
	asrs r0, r0, #5
	str r0, [sp, #0x14]
	cmp r4, #0x1f
	bgt .L0808AD1C
	movs r4, #0x20
.L0808AD1C:
	cmp r4, #0xc0
	ble .L0808AD22
	movs r4, #0xc0
.L0808AD22:
	mov r1, r8
	cmp r1, #0xf
	bgt .L0808AD2C
	movs r2, #0x10
	mov r8, r2
.L0808AD2C:
	mov r3, r8
	cmp r3, #0x50
	ble .L0808AD36
	movs r0, #0x50
	mov r8, r0
.L0808AD36:
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808AD44
	b .L0808B020
.L0808AD44:
	mov r0, r8
	adds r0, #0xf
	cmp r0, #0
	bge .L0808AD4E
	adds r0, #0xf
.L0808AD4E:
	asrs r0, r0, #4
	str r0, [sp, #0x10]
	adds r0, r4, #7
	cmp r0, #0
	bge .L0808AD5A
	adds r0, #7
.L0808AD5A:
	asrs r0, r0, #3
	adds r1, r0, #1
	str r1, [sp, #0xc]
	movs r7, #0
	subs r0, #3
	ldr r2, [sp, #8]
	subs r2, #8
	str r2, [sp, #0x24]
	ldr r3, [sp, #8]
	add r3, r8
	str r3, [sp, #0x1c]
	ldr r1, [sp, #4]
	subs r1, #8
	str r1, [sp, #0x20]
	cmp r7, r0
	bge .L0808ADBE
	mov sl, r0
.L0808AD7C:
	lsls r6, r7, #3
	ldr r5, [sp, #0x10]
	adds r4, r7, #4
	cmp r5, #0
	blt .L0808ADB8
	ldr r2, .L0808AE04  @ gUnknown_0203E828
	mov r9, r2
.L0808AD8A:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble .L0808AD94
	mov r0, r8
.L0808AD94:
	subs r0, #0x10
	ldr r3, [sp, #8]
	adds r2, r3, r0
	mov r1, r9
	ldrh r0, [r1]
	adds r0, r0, r7
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	ldr r3, .L0808AE08  @ Sprite_32x16
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge .L0808AD8A
.L0808ADB8:
	adds r7, r4, #0
	cmp r7, sl
	blt .L0808AD7C
.L0808ADBE:
	ldr r0, [sp, #0xc]
	cmp r7, r0
	bge .L0808AE40
	subs r0, #2
	mov sl, r0
.L0808ADC8:
	lsls r6, r7, #3
	ldr r5, [sp, #0x10]
	cmp r5, #0
	blt .L0808AE32
	ldr r1, .L0808AE04  @ gUnknown_0203E828
	mov r9, r1
	lsls r4, r5, #6
.L0808ADD6:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble .L0808ADE0
	mov r0, r8
.L0808ADE0:
	subs r0, #0x10
	cmp r7, sl
	bge .L0808AE10
	ldr r3, [sp, #8]
	adds r2, r3, r0
	mov r1, r9
	ldrh r0, [r1]
	adds r0, r0, r7
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	ldr r3, .L0808AE0C  @ Sprite_16x16
	bl PutSprite
	b .L0808AE2A
	.align 2, 0
.L0808AE04: .4byte gUnknown_0203E828
.L0808AE08: .4byte Sprite_32x16
.L0808AE0C: .4byte Sprite_16x16
.L0808AE10:
	ldr r1, [sp, #8]
	adds r2, r1, r0
	mov r3, r9
	ldrh r0, [r3]
	adds r0, r0, r7
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	ldr r3, .L0808AEAC  @ Sprite_8x16
	bl PutSprite
.L0808AE2A:
	subs r4, #0x40
	subs r5, #1
	cmp r5, #0
	bge .L0808ADD6
.L0808AE32:
	cmp r7, sl
	bge .L0808AE38
	adds r7, #1
.L0808AE38:
	adds r7, #1
	ldr r0, [sp, #0xc]
	cmp r7, r0
	blt .L0808ADC8
.L0808AE40:
	movs r7, #0
	ldr r1, [sp, #0xc]
	cmp r7, r1
	bge .L0808AEEC
	ldr r2, .L0808AEB0  @ gUnknown_0203E7E8
	str r2, [sp, #0x18]
.L0808AE4C:
	lsls r6, r7, #3
	ldr r0, [sp, #0xc]
	subs r0, #2
	cmp r7, r0
	bge .L0808AEB8
	ldr r3, [sp, #4]
	adds r3, r3, r6
	mov r9, r3
	ldr r0, [sp, #0x18]
	adds r0, #0x40
	mov sl, r0
	ldrh r5, [r0]
	adds r6, r5, #0
	adds r6, #0x1b
	adds r4, r7, #6
	adds r0, r4, #0
	movs r1, #0xa
	bl __modsi3
	cmp r0, #0
	bne .L0808AE78
	adds r6, #2
.L0808AE78:
	str r6, [sp]
	movs r0, #2
	mov r1, r9
	ldr r2, [sp, #0x24]
	ldr r3, .L0808AEB4  @ Sprite_16x8
	bl PutSprite
	mov r2, sl
	ldrh r1, [r2]
	adds r2, r1, #0
	adds r2, #0x3b
	movs r0, #7
	ands r4, r0
	cmp r4, #0
	bne .L0808AE98
	adds r2, #2
.L0808AE98:
	str r2, [sp]
	movs r0, #2
	mov r1, r9
	ldr r2, [sp, #0x1c]
	ldr r3, .L0808AEB4  @ Sprite_16x8
	bl PutSprite
	adds r7, #1
	b .L0808AEE4
	.align 2, 0
.L0808AEAC: .4byte Sprite_8x16
.L0808AEB0: .4byte gUnknown_0203E7E8
.L0808AEB4: .4byte Sprite_16x8
.L0808AEB8:
	ldr r3, [sp, #4]
	adds r4, r3, r6
	ldr r1, .L0808AF60  @ gUnknown_0203E828
	ldrh r0, [r1]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x24]
	ldr r3, .L0808AF64  @ Sprite_8x8
	bl PutSprite
	ldr r2, .L0808AF60  @ gUnknown_0203E828
	ldrh r0, [r2]
	adds r0, #0x3b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x1c]
	ldr r3, .L0808AF64  @ Sprite_8x8
	bl PutSprite
.L0808AEE4:
	adds r7, #1
	ldr r3, [sp, #0xc]
	cmp r7, r3
	blt .L0808AE4C
.L0808AEEC:
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808AF70
	ldr r5, [sp, #0x10]
	lsls r7, r7, #3
	mov r9, r7
	cmp r5, #0
	blt .L0808AFBA
.L0808AF02:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble .L0808AF0C
	mov r0, r8
.L0808AF0C:
	subs r0, #0x10
	ldr r1, [sp, #8]
	adds r4, r1, r0
	ldr r6, .L0808AF68  @ Sprite_8x16
	ldr r0, .L0808AF6C  @ gUnknown_0203E7E8
	adds r7, r0, #0
	adds r7, #0x40
	ldrh r2, [r7]
	movs r0, #1
	ands r0, r5
	adds r1, r2, #0
	adds r1, #0x5f
	cmp r0, #0
	beq .L0808AF2A
	adds r1, #0x20
.L0808AF2A:
	str r1, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	ldr r1, [sp, #4]
	add r1, r9
	ldrh r0, [r7]
	adds r2, r0, #0
	adds r2, #0x1f
	ldr r3, [sp, #0x14]
	cmp r5, r3
	bne .L0808AF4A
	adds r2, #0x5f
.L0808AF4A:
	str r2, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge .L0808AF02
	b .L0808AFBA
	.align 2, 0
.L0808AF60: .4byte gUnknown_0203E828
.L0808AF64: .4byte Sprite_8x8
.L0808AF68: .4byte Sprite_8x16
.L0808AF6C: .4byte gUnknown_0203E7E8
.L0808AF70:
	ldr r5, [sp, #0x10]
	lsls r7, r7, #3
	mov r9, r7
	cmp r5, #0
	blt .L0808AFBA
	ldr r6, .L0808B010  @ Sprite_8x16
	ldr r7, .L0808B014  @ gUnknown_0203E828
.L0808AF7E:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble .L0808AF88
	mov r0, r8
.L0808AF88:
	subs r0, #0x10
	ldr r1, [sp, #8]
	adds r4, r1, r0
	ldrh r0, [r7]
	adds r0, #0x5f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	ldrh r0, [r7]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #4]
	add r1, r9
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge .L0808AF7E
.L0808AFBA:
	ldr r5, .L0808B018  @ Sprite_8x8
	ldr r4, .L0808B01C  @ gUnknown_0203E7E8
	adds r4, #0x40
	ldrh r0, [r4]
	adds r0, #0x5b
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x24]
	adds r3, r5, #0
	bl PutSprite
	ldr r6, [sp, #4]
	add r6, r9
	ldrh r0, [r4]
	adds r0, #0x5c
	str r0, [sp]
	movs r0, #2
	adds r1, r6, #0
	ldr r2, [sp, #0x24]
	adds r3, r5, #0
	bl PutSprite
	ldrh r0, [r4]
	adds r0, #0x5d
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x20]
	ldr r2, [sp, #0x1c]
	adds r3, r5, #0
	bl PutSprite
	ldrh r0, [r4]
	adds r0, #0x5e
	str r0, [sp]
	movs r0, #2
	adds r1, r6, #0
	ldr r2, [sp, #0x1c]
	adds r3, r5, #0
	bl PutSprite
	b .L0808B082
	.align 2, 0
.L0808B010: .4byte Sprite_8x16
.L0808B014: .4byte gUnknown_0203E828
.L0808B018: .4byte Sprite_8x8
.L0808B01C: .4byte gUnknown_0203E7E8
.L0808B020:
	adds r0, r4, #0
	adds r0, #0x1f
	cmp r0, #0
	bge .L0808B02A
	adds r0, #0x1f
.L0808B02A:
	asrs r0, r0, #5
	str r0, [sp, #0xc]
	bl GetDialogueBoxConfig
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	subs r0, #1
	str r0, [sp, #0x10]
	ldr r7, [sp, #0xc]
	subs r7, #1
	cmp r7, #0
	blt .L0808B082
.L0808B042:
	ldr r5, [sp, #0x10]
	subs r2, r7, #1
	mov r8, r2
	cmp r5, #0
	blt .L0808B07C
	lsls r6, r7, #5
	ldr r3, .L0808B094  @ gUnknown_0203E828
	mov r9, r3
	lsls r0, r5, #4
	ldr r1, [sp, #8]
	adds r4, r0, r1
.L0808B058:
	lsls r0, r7, #2
	mov r2, r9
	ldrh r2, [r2]
	adds r0, r0, r2
	lsls r1, r5, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #2
	ldr r3, [sp, #4]
	adds r1, r3, r6
	adds r2, r4, #0
	ldr r3, .L0808B098  @ Sprite_32x16
	bl PutSprite
	subs r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge .L0808B058
.L0808B07C:
	mov r7, r8
	cmp r7, #0
	bge .L0808B042
.L0808B082:
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B094: .4byte gUnknown_0203E828
.L0808B098: .4byte Sprite_32x16

	THUMB_FUNC_END func_0808ACFC

	THUMB_FUNC_START func_0808B09C
func_0808B09C: @ 0x0808B09C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808B0D0  @ gUnknown_08A01740
	bl FindProc
	adds r2, r4, #0
	adds r2, #0x59
	movs r1, #0
	strb r1, [r2]
	ldrh r1, [r0, #0x30]
	subs r1, #8
	subs r2, #9
	strb r1, [r2]
	ldrh r0, [r0, #0x32]
	subs r0, #8
	adds r1, r4, #0
	adds r1, #0x51
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	adds r1, #1
	bl func_0808AB98
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B0D0: .4byte gUnknown_08A01740

	THUMB_FUNC_END func_0808B09C

	THUMB_FUNC_START func_0808B0D4
func_0808B0D4: @ 0x0808B0D4
	push {lr}
	bl GetDialogueBoxConfig
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq .L0808B0F4
	movs r0, #0
	bl GetFaceDispById
	movs r1, #0x11
	negs r1, r1
	ands r1, r0
	movs r0, #0
	bl SetFaceDispById
.L0808B0F4:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808B0D4

	THUMB_FUNC_START func_0808B0F8
func_0808B0F8: @ 0x0808B0F8
	push {lr}
	bl GetDialogueBoxConfig
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq .L0808B116
	movs r0, #0
	bl GetFaceDispById
	movs r1, #0x10
	orrs r1, r0
	movs r0, #0
	bl SetFaceDispById
.L0808B116:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808B0F8

	THUMB_FUNC_START func_0808B11C
func_0808B11C: @ 0x0808B11C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L0808B174  @ gUnknown_0203E800
	adds r0, r4, #0
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #8
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #0x10
	bl DrawSpriteTextBackground
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808B160
	bl GetDialogueBoxConfig
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne .L0808B160
	adds r0, r4, #0
	adds r0, #0x18
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl DrawSpriteTextBackground
.L0808B160:
	adds r0, r5, #0
	adds r0, #0x58
	movs r1, #0
	strb r1, [r0]
	subs r0, #0x10
	strh r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B174: .4byte gUnknown_0203E800

	THUMB_FUNC_END func_0808B11C

	THUMB_FUNC_START BoxDialogueInterpreter_Main
BoxDialogueInterpreter_Main: @ 0x0808B178
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	adds r6, r0, #0
	adds r0, #0x4e
	movs r2, #0
	ldrsh r1, [r0, r2]
	mov r8, r1
	ldr r0, .L0808B1AC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf3
	ands r0, r1
	cmp r0, #0
	beq .L0808B200
	bl GetDialogueBoxConfig
	movs r1, #8
	ands r1, r0
	cmp r1, #0
	bne .L0808B200
	movs r3, #0x80
	mov r8, r3
	b .L0808B21A
	.align 2, 0
.L0808B1AC: .4byte gKeySt
.L0808B1B0:
	bl func_0808B0D4
	ldr r0, .L0808B1D0  @ gUnknown_08A016E0
	bl FindProc
	movs r1, #1
	bl Proc_Goto
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0808B1D4  @ gUnknown_08A01818
	bl EndEachProc
	b .L0808B4C0
	.align 2, 0
.L0808B1D0: .4byte gUnknown_08A016E0
.L0808B1D4: .4byte gUnknown_08A01818
.L0808B1D8:
	adds r0, r1, #1
	str r0, [r6, #0x2c]
	b .L0808B772
.L0808B1DE:
	adds r1, r6, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	b .L0808B772
.L0808B1F0:
	adds r0, r6, #0
	bl Proc_Break
	b .L0808B772
.L0808B1F8:
	adds r0, r6, #0
	bl func_0808B11C
	b .L0808B772
.L0808B200:
	adds r1, r6, #0
	adds r1, #0x4a
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	ble .L0808B212
	b .L0808B778
.L0808B212:
	adds r0, r6, #0
	adds r0, #0x4c
	ldrh r0, [r0]
	strh r0, [r1]
.L0808B21A:
	bl func_0808B0F8
	ldr r0, [r6, #0x30]
	bl SetTextFont
	movs r7, #0
	cmp r7, r8
	blt .L0808B22C
	b .L0808B772
.L0808B22C:
	ldr r0, [r6, #0x2c]
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0x80
	bls .L0808B238
	b .L0808B6A8
.L0808B238:
	lsls r0, r1, #2
	ldr r1, .L0808B244  @ .L0808B248
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808B244: .4byte .L0808B248
.L0808B248: @ jump table
	.4byte .L0808B56C @ case 0
	.4byte .L0808B572 @ case 1
	.4byte .L0808B5EA @ case 2
	.4byte .L0808B664 @ case 3
	.4byte .L0808B59A @ case 4
	.4byte .L0808B5AE @ case 5
	.4byte .L0808B5C2 @ case 6
	.4byte .L0808B5D6 @ case 7
	.4byte .L0808B6A8 @ case 8
	.4byte .L0808B6A8 @ case 9
	.4byte .L0808B6A8 @ case 10
	.4byte .L0808B6A8 @ case 11
	.4byte .L0808B6A8 @ case 12
	.4byte .L0808B6A8 @ case 13
	.4byte .L0808B6A8 @ case 14
	.4byte .L0808B6A8 @ case 15
	.4byte .L0808B6A8 @ case 16
	.4byte .L0808B6A8 @ case 17
	.4byte .L0808B4FE @ case 18
	.4byte .L0808B4FE @ case 19
	.4byte .L0808B4FE @ case 20
	.4byte .L0808B6A8 @ case 21
	.4byte .L0808B6A8 @ case 22
	.4byte .L0808B6A8 @ case 23
	.4byte .L0808B44C @ case 24
	.4byte .L0808B488 @ case 25
	.4byte .L0808B6A8 @ case 26
	.4byte .L0808B6A8 @ case 27
	.4byte .L0808B6A8 @ case 28
	.4byte .L0808B6A8 @ case 29
	.4byte .L0808B6A8 @ case 30
	.4byte .L0808B6A8 @ case 31
	.4byte .L0808B6A8 @ case 32
	.4byte .L0808B6A8 @ case 33
	.4byte .L0808B6A8 @ case 34
	.4byte .L0808B6A8 @ case 35
	.4byte .L0808B6A8 @ case 36
	.4byte .L0808B6A8 @ case 37
	.4byte .L0808B6A8 @ case 38
	.4byte .L0808B6A8 @ case 39
	.4byte .L0808B6A8 @ case 40
	.4byte .L0808B6A8 @ case 41
	.4byte .L0808B6A8 @ case 42
	.4byte .L0808B6A8 @ case 43
	.4byte .L0808B6A8 @ case 44
	.4byte .L0808B6A8 @ case 45
	.4byte .L0808B6A8 @ case 46
	.4byte .L0808B6A8 @ case 47
	.4byte .L0808B6A8 @ case 48
	.4byte .L0808B6A8 @ case 49
	.4byte .L0808B6A8 @ case 50
	.4byte .L0808B6A8 @ case 51
	.4byte .L0808B6A8 @ case 52
	.4byte .L0808B6A8 @ case 53
	.4byte .L0808B6A8 @ case 54
	.4byte .L0808B6A8 @ case 55
	.4byte .L0808B6A8 @ case 56
	.4byte .L0808B6A8 @ case 57
	.4byte .L0808B6A8 @ case 58
	.4byte .L0808B6A8 @ case 59
	.4byte .L0808B6A8 @ case 60
	.4byte .L0808B6A8 @ case 61
	.4byte .L0808B6A8 @ case 62
	.4byte .L0808B6A8 @ case 63
	.4byte .L0808B6A8 @ case 64
	.4byte .L0808B6A8 @ case 65
	.4byte .L0808B6A8 @ case 66
	.4byte .L0808B6A8 @ case 67
	.4byte .L0808B6A8 @ case 68
	.4byte .L0808B6A8 @ case 69
	.4byte .L0808B6A8 @ case 70
	.4byte .L0808B6A8 @ case 71
	.4byte .L0808B6A8 @ case 72
	.4byte .L0808B6A8 @ case 73
	.4byte .L0808B6A8 @ case 74
	.4byte .L0808B6A8 @ case 75
	.4byte .L0808B6A8 @ case 76
	.4byte .L0808B6A8 @ case 77
	.4byte .L0808B6A8 @ case 78
	.4byte .L0808B6A8 @ case 79
	.4byte .L0808B6A8 @ case 80
	.4byte .L0808B6A8 @ case 81
	.4byte .L0808B6A8 @ case 82
	.4byte .L0808B6A8 @ case 83
	.4byte .L0808B6A8 @ case 84
	.4byte .L0808B6A8 @ case 85
	.4byte .L0808B6A8 @ case 86
	.4byte .L0808B6A8 @ case 87
	.4byte .L0808B6A8 @ case 88
	.4byte .L0808B6A8 @ case 89
	.4byte .L0808B6A8 @ case 90
	.4byte .L0808B6A8 @ case 91
	.4byte .L0808B6A8 @ case 92
	.4byte .L0808B6A8 @ case 93
	.4byte .L0808B6A8 @ case 94
	.4byte .L0808B6A8 @ case 95
	.4byte .L0808B6A8 @ case 96
	.4byte .L0808B6A8 @ case 97
	.4byte .L0808B6A8 @ case 98
	.4byte .L0808B6A8 @ case 99
	.4byte .L0808B6A8 @ case 100
	.4byte .L0808B6A8 @ case 101
	.4byte .L0808B6A8 @ case 102
	.4byte .L0808B6A8 @ case 103
	.4byte .L0808B6A8 @ case 104
	.4byte .L0808B6A8 @ case 105
	.4byte .L0808B6A8 @ case 106
	.4byte .L0808B6A8 @ case 107
	.4byte .L0808B6A8 @ case 108
	.4byte .L0808B6A8 @ case 109
	.4byte .L0808B6A8 @ case 110
	.4byte .L0808B6A8 @ case 111
	.4byte .L0808B6A8 @ case 112
	.4byte .L0808B6A8 @ case 113
	.4byte .L0808B6A8 @ case 114
	.4byte .L0808B6A8 @ case 115
	.4byte .L0808B6A8 @ case 116
	.4byte .L0808B6A8 @ case 117
	.4byte .L0808B6A8 @ case 118
	.4byte .L0808B6A8 @ case 119
	.4byte .L0808B6A8 @ case 120
	.4byte .L0808B6A8 @ case 121
	.4byte .L0808B6A8 @ case 122
	.4byte .L0808B6A8 @ case 123
	.4byte .L0808B6A8 @ case 124
	.4byte .L0808B6A8 @ case 125
	.4byte .L0808B6A8 @ case 126
	.4byte .L0808B6A8 @ case 127
	.4byte .L0808B4D0 @ case 128
.L0808B44C:
	bl func_0808B0D4
	ldr r0, .L0808B480  @ gUnknown_08A01740
	bl FindProc
	adds r3, r0, #0
	ldr r0, .L0808B484  @ gUnknown_08A016D8
	adds r1, r6, #0
	adds r1, #0x48
	movs r5, #0
	ldrsh r4, [r1, r5]
	lsls r2, r4, #2
	subs r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	movs r5, #0x3c
	ldrsh r2, [r3, r5]
	movs r5, #0x3e
	ldrsh r3, [r3, r5]
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #6
	str r4, [sp]
	movs r4, #1
	b .L0808B4B8
	.align 2, 0
.L0808B480: .4byte gUnknown_08A01740
.L0808B484: .4byte gUnknown_08A016D8
.L0808B488:
	bl func_0808B0D4
	ldr r0, .L0808B4C8  @ gUnknown_08A01740
	bl FindProc
	adds r3, r0, #0
	ldr r0, .L0808B4CC  @ gUnknown_08A016D8
	adds r1, r6, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r4, [r1, r2]
	lsls r2, r4, #2
	subs r1, #0x14
	adds r1, r1, r2
	ldr r1, [r1]
	movs r5, #0x3c
	ldrsh r2, [r3, r5]
	movs r5, #0x3e
	ldrsh r3, [r3, r5]
	lsls r4, r4, #4
	adds r3, r3, r4
	movs r4, #6
	str r4, [sp]
	movs r4, #2
.L0808B4B8:
	str r4, [sp, #4]
	str r6, [sp, #8]
	bl func_080900EC
.L0808B4C0:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b .L0808B772
	.align 2, 0
.L0808B4C8: .4byte gUnknown_08A01740
.L0808B4CC: .4byte gUnknown_08A016D8
.L0808B4D0:
	adds r1, r2, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r2, #1]
	cmp r0, #0x21
	bne .L0808B4F2
	adds r2, r6, #0
	adds r2, #0x59
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	subs r7, #1
	b .L0808B76A
.L0808B4F2:
	cmp r0, #4
	bne .L0808B4F8
	b .L0808B1B0
.L0808B4F8:
	cmp r0, #0x25
	bne .L0808B4FE
	b .L0808B1D8
.L0808B4FE:
	ldr r0, .L0808B568  @ gUnknown_08A01740
	bl FindProc
	adds r4, r0, #0
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #1
	bne .L0808B51A
	adds r0, r1, #1
	str r0, [r6, #0x2c]
.L0808B51A:
	cmp r4, #0
	bne .L0808B520
	b .L0808B772
.L0808B520:
	adds r0, r6, #0
	bl func_0808B11C
	ldr r0, [r6, #0x2c]
	add r2, sp, #0x10
	add r1, sp, #0xc
	bl func_0808AADC
	ldr r0, [sp, #0xc]
	adds r1, r6, #0
	adds r1, #0x56
	movs r2, #0
	strb r0, [r1]
	ldr r0, [sp, #0x10]
	adds r1, #1
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r1, [r0]
	adds r0, r6, #0
	adds r0, #0x54
	strb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x46
	ldrh r0, [r0]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x58
	strb r2, [r0]
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
	b .L0808B772
	.align 2, 0
.L0808B568: .4byte gUnknown_08A01740
.L0808B56C:
	bl func_0808B0D4
	b .L0808B606
.L0808B572:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x55
	ldrb r1, [r0]
	adds r2, r6, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, #1
	cmp r1, r0
	bne .L0808B592
	b .L0808B1DE
.L0808B592:
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	b .L0808B76A
.L0808B59A:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #8
	strh r0, [r1]
	b .L0808B772
.L0808B5AE:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x10
	strh r0, [r1]
	b .L0808B772
.L0808B5C2:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x20
	strh r0, [r1]
	b .L0808B772
.L0808B5D6:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #0x40
	strh r0, [r1]
	b .L0808B772
.L0808B5EA:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #1
	bne .L0808B5FE
	adds r0, r1, #1
	str r0, [r6, #0x2c]
.L0808B5FE:
	ldr r0, [r6, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0808B638
.L0808B606:
	bl GetDialogueBoxConfig
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	bne .L0808B614
	b .L0808B1F0
.L0808B614:
	ldr r0, .L0808B630  @ gUnknown_08A016E0
	bl FindProc
	movs r1, #1
	bl Proc_Goto
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0808B634  @ gUnknown_08A01818
	bl EndEachProc
	b .L0808B772
	.align 2, 0
.L0808B630: .4byte gUnknown_08A016E0
.L0808B634: .4byte gUnknown_08A01818
.L0808B638:
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0
	beq .L0808B64A
	b .L0808B1F8
.L0808B64A:
	ldr r0, [r6, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0808B654
	b .L0808B772
.L0808B654:
	adds r0, r6, #0
	adds r0, #0x58
	strb r1, [r0]
	adds r0, r6, #0
	movs r1, #5
	bl Proc_Goto
	b .L0808B772
.L0808B664:
	bl func_0808B0D4
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	ldr r0, .L0808B6A4  @ gUnknown_08A01740
	bl FindProc
	adds r4, r6, #0
	adds r4, #0x52
	movs r5, #0x3c
	ldrsh r1, [r0, r5]
	ldrb r2, [r4]
	adds r1, r1, r2
	movs r3, #0x3e
	ldrsh r2, [r0, r3]
	adds r0, r6, #0
	adds r0, #0x48
	movs r5, #0
	ldrsh r0, [r0, r5]
	lsls r0, r0, #4
	adds r2, r2, r0
	adds r2, #8
	adds r0, r6, #0
	bl NewTextBluArrowAndButtonChecker
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl func_0808AB98
	b .L0808B772
	.align 2, 0
.L0808B6A4: .4byte gUnknown_08A01740
.L0808B6A8:
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808B6CE
	adds r5, r6, #0
	adds r5, #0x48
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #1
	bl Text_SetColor
	b .L0808B70A
.L0808B6CE:
	adds r0, r6, #0
	adds r0, #0x59
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0808B6F2
	adds r5, r6, #0
	adds r5, #0x48
	movs r2, #0
	ldrsh r0, [r5, r2]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xa
	bl Text_SetColor
	b .L0808B70A
.L0808B6F2:
	adds r5, r6, #0
	adds r5, #0x48
	movs r3, #0
	ldrsh r0, [r5, r3]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #6
	bl Text_SetColor
.L0808B70A:
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldr r1, [r6, #0x2c]
	bl Text_DrawCharacter
	str r0, [r6, #0x2c]
	bl GetTextPrintDelay
	adds r4, r0, #0
	cmp r4, #1
	bne .L0808B730
	bl GetGameTime
	ands r0, r4
	cmp r0, #0
	beq .L0808B76A
.L0808B730:
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808B758
	ldr r0, .L0808B750  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808B76A
	ldr r0, .L0808B754  @ 0x000002E5
	bl m4aSongNumStart
	b .L0808B76A
	.align 2, 0
.L0808B750: .4byte gPlaySt
.L0808B754: .4byte 0x000002E5
.L0808B758:
	ldr r0, .L0808B784  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808B76A
	movs r0, #0x6e
	bl m4aSongNumStart
.L0808B76A:
	adds r7, #1
	cmp r7, r8
	bge .L0808B772
	b .L0808B22C
.L0808B772:
	movs r0, #0
	bl SetTextFont
.L0808B778:
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B784: .4byte gPlaySt

	THUMB_FUNC_END BoxDialogueInterpreter_Main

	THUMB_FUNC_START func_0808B788
func_0808B788: @ 0x0808B788
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808B7B0  @ gUnknown_08A01818
	bl FindProc
	cmp r0, #0
	beq .L0808B7AA
	ldr r0, .L0808B7B4  @ gUnknown_08A016E0
	bl FindProc
	movs r1, #0
	bl Proc_Goto
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
.L0808B7AA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B7B0: .4byte gUnknown_08A01818
.L0808B7B4: .4byte gUnknown_08A016E0

	THUMB_FUNC_END func_0808B788

	THUMB_FUNC_START func_0808B7B8
func_0808B7B8: @ 0x0808B7B8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x54
	ldrb r0, [r0]
	adds r0, #1
	adds r1, r4, #0
	adds r1, #0x55
	ldrb r1, [r1]
	bl func_0808A530
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne .L0808B7F8
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #3
	ldr r1, .L0808B800  @ gUnknown_0203E800
	adds r0, r0, r1
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	bl Proc_Break
.L0808B7F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B800: .4byte gUnknown_0203E800

	THUMB_FUNC_END func_0808B7B8

	THUMB_FUNC_START func_0808B804
func_0808B804: @ 0x0808B804
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne .L0808B81A
	adds r0, r4, #0
	bl Proc_Break
	b .L0808B822
.L0808B81A:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
.L0808B822:
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq .L0808B834
	subs r0, r2, #1
	strh r0, [r1]
.L0808B834:
	adds r1, r4, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808B804

	THUMB_FUNC_START func_0808B844
func_0808B844: @ 0x0808B844
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808B86C  @ gUnknown_08A016E0
	bl FindProc
	movs r1, #3
	bl Proc_Goto
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B86C: .4byte gUnknown_08A016E0

	THUMB_FUNC_END func_0808B844

	THUMB_FUNC_START func_0808B870
func_0808B870: @ 0x0808B870
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, .L0808B900  @ gUnknown_08A01740
	bl FindProc
	adds r6, r0, #0
	adds r5, r4, #0
	adds r5, #0x58
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	cmp r6, #0
	beq .L0808B8C8
	adds r0, r4, #0
	adds r0, #0x54
	ldrb r0, [r0]
	ldrb r3, [r5]
	movs r2, #2
	subs r2, r2, r3
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	muls r0, r3, r0
	adds r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x55
	ldrb r0, [r0]
	muls r2, r0, r2
	adds r0, r4, #0
	adds r0, #0x57
	ldrb r0, [r0]
	muls r0, r3, r0
	adds r2, r2, r0
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r0, r6, #0
	bl func_0808A838
.L0808B8C8:
	ldrb r0, [r5]
	cmp r0, #2
	bne .L0808B8F8
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	lsrs r0, r0, #3
	adds r1, r4, #0
	adds r1, #0x54
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x57
	ldrb r0, [r0]
	lsrs r0, r0, #4
	adds r1, r0, #0
	cmp r0, #5
	bls .L0808B8EC
	movs r1, #5
.L0808B8EC:
	adds r0, r4, #0
	adds r0, #0x55
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
.L0808B8F8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808B900: .4byte gUnknown_08A01740

	THUMB_FUNC_END func_0808B870

	THUMB_FUNC_START func_0808B904
func_0808B904: @ 0x0808B904
	push {lr}
	ldr r0, .L0808B91C  @ gUnknown_08A016E0
	bl FindProc
	cmp r0, #0
	beq .L0808B920
	adds r0, #0x38
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0808B920
	movs r0, #0
	b .L0808B922
	.align 2, 0
.L0808B91C: .4byte gUnknown_08A016E0
.L0808B920:
	movs r0, #1
.L0808B922:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808B904

	THUMB_FUNC_START func_0808B928
func_0808B928: @ 0x0808B928
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L0808B998  @ gUnknown_0203E7E8
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #1
	bl SetTextFontGlyphs
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne .L0808B99C
	adds r0, r4, #0
	adds r0, #0x18
	movs r1, #6
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x20
	movs r1, #6
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #6
	bl Text_SetColor
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808B9BA
	bl GetDialogueBoxConfig
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne .L0808B9BA
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #6
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x38
	movs r1, #6
	bl Text_SetColor
	b .L0808B9BA
	.align 2, 0
.L0808B998: .4byte gUnknown_0203E7E8
.L0808B99C:
	movs r4, #0
	b .L0808B9AE
.L0808B9A0:
	lsls r0, r4, #3
	ldr r1, .L0808BA38  @ gUnknown_0203E800
	adds r0, r0, r1
	movs r1, #0
	bl Text_SetColor
	adds r4, #1
.L0808B9AE:
	bl GetDialogueBoxConfig
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt .L0808B9A0
.L0808B9BA:
	movs r0, #0
	bl SetTextFont
	ldr r4, .L0808BA3C  @ gUnknown_08A01760
	adds r0, r4, #0
	bl EndEachProc
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	ldr r1, .L0808BA40  @ gUnknown_0203E7E8
	str r1, [r4, #0x30]
	adds r0, r1, #0
	adds r0, #0x18
	str r0, [r4, #0x34]
	adds r0, #8
	str r0, [r4, #0x38]
	adds r0, #8
	str r0, [r4, #0x3c]
	adds r0, #8
	str r0, [r4, #0x40]
	adds r0, #8
	str r0, [r4, #0x44]
	adds r1, r4, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r5, #0x5c]
	bl GetMsg
	bl StrExpandNames
	str r0, [r4, #0x2c]
	ldr r1, [r5, #0x2c]
	adds r0, r4, #0
	adds r0, #0x54
	strb r1, [r0]
	ldr r0, [r5, #0x30]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	bl func_0808B904
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq .L0808BA44
	bl GetTextPrintDelay
	adds r1, r4, #0
	adds r1, #0x4c
	strh r0, [r1]
	lsls r0, r0, #0x10
	movs r1, #0x80
	cmp r0, #0
	beq .L0808BA30
	movs r1, #1
.L0808BA30:
	adds r0, r4, #0
	adds r0, #0x4e
	strh r1, [r0]
	b .L0808BA52
	.align 2, 0
.L0808BA38: .4byte gUnknown_0203E800
.L0808BA3C: .4byte gUnknown_08A01760
.L0808BA40: .4byte gUnknown_0203E7E8
.L0808BA44:
	adds r0, r4, #0
	adds r0, #0x4c
	strh r1, [r0]
	adds r1, r4, #0
	adds r1, #0x4e
	movs r0, #0x80
	strh r0, [r1]
.L0808BA52:
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0
	strh r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808B928

	THUMB_FUNC_START func_0808BA60
func_0808BA60: @ 0x0808BA60
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, .L0808BA94  @ gUnknown_08A01800
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	cmp r5, #0
	bge .L0808BA7A
	adds r5, #7
.L0808BA7A:
	asrs r0, r5, #3
	str r0, [r1, #0x2c]
	adds r0, r6, #0
	cmp r6, #0
	bge .L0808BA86
	adds r0, #0xf
.L0808BA86:
	asrs r0, r0, #4
	cmp r0, #5
	bgt .L0808BA98
	cmp r0, #0
	bge .L0808BA9A
	movs r0, #0
	b .L0808BA9A
	.align 2, 0
.L0808BA94: .4byte gUnknown_08A01800
.L0808BA98:
	movs r0, #5
.L0808BA9A:
	str r0, [r1, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808BA60

	THUMB_FUNC_START func_0808BAA4
func_0808BAA4: @ 0x0808BAA4
	push {r4, lr}
	ldr r4, .L0808BAFC  @ gUnknown_0203E7E8
	adds r0, r4, #0
	bl SetTextFont
	bl GetDialogueBoxConfig
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne .L0808BB00
	adds r0, r4, #0
	adds r0, #0x18
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #0x28
	bl DrawSpriteTextBackground
	bl GetDialogueBoxConfig
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L0808BB1E
	bl GetDialogueBoxConfig
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne .L0808BB1E
	adds r0, r4, #0
	adds r0, #0x30
	bl DrawSpriteTextBackground
	adds r0, r4, #0
	adds r0, #0x38
	bl DrawSpriteTextBackground
	b .L0808BB1E
	.align 2, 0
.L0808BAFC: .4byte gUnknown_0203E7E8
.L0808BB00:
	movs r4, #0
	b .L0808BB12
.L0808BB04:
	lsls r0, r4, #3
	ldr r1, .L0808BB38  @ gUnknown_0203E800
	adds r0, r0, r1
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	adds r4, #1
.L0808BB12:
	bl GetDialogueBoxConfig
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	cmp r4, r0
	blt .L0808BB04
.L0808BB1E:
	ldr r0, .L0808BB3C  @ gUnknown_08A01760
	bl EndEachProc
	ldr r0, .L0808BB40  @ gUnknown_08A01800
	bl EndEachProc
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808BB38: .4byte gUnknown_0203E800
.L0808BB3C: .4byte gUnknown_08A01760
.L0808BB40: .4byte gUnknown_08A01800

	THUMB_FUNC_END func_0808BAA4

	THUMB_FUNC_START func_0808BB44
func_0808BB44: @ 0x0808BB44
	push {lr}
	ldr r0, .L0808BB54  @ gUnknown_08A01818
	movs r1, #0
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L0808BB54: .4byte gUnknown_08A01818

	THUMB_FUNC_END func_0808BB44

	THUMB_FUNC_START func_0808BB58
func_0808BB58: @ 0x0808BB58
	push {lr}
	ldr r0, .L0808BB68  @ gUnknown_08A01818
	bl FindProc
	cmp r0, #0
	bne .L0808BB6C
	movs r0, #0
	b .L0808BB6E
	.align 2, 0
.L0808BB68: .4byte gUnknown_08A01818
.L0808BB6C:
	movs r0, #1
.L0808BB6E:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808BB58

	THUMB_FUNC_START func_0808BB74
func_0808BB74: @ 0x0808BB74
	push {lr}
	ldr r0, .L0808BB98  @ gUnknown_08A016E0
	bl EndEachProc
	ldr r0, .L0808BB9C  @ gUnknown_08A01818
	bl EndEachProc
	ldr r0, .L0808BBA0  @ gUnknown_08A01740
	bl EndEachProc
	ldr r0, .L0808BBA4  @ gUnknown_08A01760
	bl EndEachProc
	ldr r0, .L0808BBA8  @ gUnknown_08A01800
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L0808BB98: .4byte gUnknown_08A016E0
.L0808BB9C: .4byte gUnknown_08A01818
.L0808BBA0: .4byte gUnknown_08A01740
.L0808BBA4: .4byte gUnknown_08A01760
.L0808BBA8: .4byte gUnknown_08A01800

	THUMB_FUNC_END func_0808BB74

	THUMB_FUNC_START func_0808BBAC
func_0808BBAC: @ 0x0808BBAC
	push {lr}
	cmp r0, #0
	bge .L0808BBBE
	cmp r1, #0
	bge .L0808BBBA
	movs r0, #0
	b .L0808BBC8
.L0808BBBA:
	movs r0, #1
	b .L0808BBC8
.L0808BBBE:
	cmp r1, #0
	blt .L0808BBC6
	movs r0, #3
	b .L0808BBC8
.L0808BBC6:
	movs r0, #2
.L0808BBC8:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808BBAC

	THUMB_FUNC_START GetCameraMovementSpeedMaybe
GetCameraMovementSpeedMaybe: @ 0x0808BBCC
	push {r4, lr}
	ldr r2, .L0808BBF8  @ gBmSt
	movs r0, #0x14
	ldrsh r3, [r2, r0]
	lsls r3, r3, #4
	movs r1, #0xc
	ldrsh r0, [r2, r1]
	subs r0, #8
	subs r3, r3, r0
	movs r4, #0x16
	ldrsh r1, [r2, r4]
	lsls r1, r1, #4
	movs r4, #0xe
	ldrsh r0, [r2, r4]
	subs r0, #8
	subs r1, r1, r0
	cmp r3, #0x78
	bgt .L0808BBFC
	cmp r1, #0x50
	bgt .L0808BC04
	movs r0, #0
	b .L0808BC0A
	.align 2, 0
.L0808BBF8: .4byte gBmSt
.L0808BBFC:
	cmp r1, #0x50
	bgt .L0808BC08
	movs r0, #1
	b .L0808BC0A
.L0808BC04:
	movs r0, #2
	b .L0808BC0A
.L0808BC08:
	movs r0, #3
.L0808BC0A:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetCameraMovementSpeedMaybe

	THUMB_FUNC_START func_0808BC10
func_0808BC10: @ 0x0808BC10
	push {lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #5
	ble .L0808BC20
	movs r0, #5
.L0808BC20:
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	strh r0, [r3]
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808BC10

	THUMB_FUNC_START func_0808BC2C
func_0808BC2C: @ 0x0808BC2C
	push {r4, r5, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	asrs r4, r1, #0x13
	movs r0, #0xe0
	lsls r0, r0, #0xb
	ands r0, r1
	asrs r0, r0, #0x10
	movs r1, #0
	adds r5, r2, #0
	adds r5, #0xe
	adds r2, #6
	adds r0, r2, r0
.L0808BC46:
	cmp r1, r4
	bge .L0808BC4E
	strh r5, [r3]
	b .L0808BC58
.L0808BC4E:
	cmp r1, r4
	bne .L0808BC56
	strh r0, [r3]
	b .L0808BC58
.L0808BC56:
	strh r2, [r3]
.L0808BC58:
	adds r3, #2
	adds r1, #1
	cmp r1, #4
	ble .L0808BC46
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808BC2C

	THUMB_FUNC_START func_0808BC68
func_0808BC68: @ 0x0808BC68
	push {r4, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #4
	ble .L0808BC78
	movs r3, #5
.L0808BC78:
	lsls r0, r3, #0x10
	cmp r0, #0
	bge .L0808BC80
	movs r3, #0
.L0808BC80:
	adds r1, r2, #0
	adds r1, #0xf
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808BC68

	THUMB_FUNC_START func_0808BC94
func_0808BC94: @ 0x0808BC94
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r0, r6, #0
	bl GetUnitCurrentHp
	movs r1, #0x32
	adds r4, r0, #0
	muls r4, r1, r4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl func_0808BC10
	adds r0, r5, #2
	subs r1, r4, #5
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r2, r8
	bl func_0808BC2C
	adds r5, #0xc
	subs r4, #0x2d
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl func_0808BC68
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808BC94

	THUMB_FUNC_START Loop6CUI1_DisplayTransition
Loop6CUI1_DisplayTransition: @ 0x0808BCF8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r1, .L0808BD44  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r0, r1
	movs r0, #3
	ldrsb r0, [r1, r0]
	movs r4, #0
	cmp r0, #0
	blt .L0808BD1A
	movs r4, #0xe
.L0808BD1A:
	movs r0, #2
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L0808BD50
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, .L0808BD48  @ gBg0Tm
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808BD4C  @ gBg1Tm
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	b .L0808BD70
	.align 2, 0
.L0808BD44: .4byte gUnknown_08A01828
.L0808BD48: .4byte gBg0Tm
.L0808BD4C: .4byte gBg1Tm
.L0808BD50:
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, .L0808BDC8  @ gBg0Tm+0x22
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808BDCC  @ gBg1Tm+0x22
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
.L0808BD70:
	mov r8, r5
	adds r6, r4, #0
	movs r0, #3
	bl EnableBgSync
	ldr r1, .L0808BDD0  @ gUnknown_08A0189C
	ldr r0, [r7, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, .L0808BDD4  @ gUnknown_08A01828
	adds r0, r7, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808BDE8
	movs r4, #0xd
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, .L0808BDD8  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, .L0808BDDC  @ gBg0Tm
	adds r1, r6, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, .L0808BDE0  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, .L0808BDE4  @ gBg1Tm
	adds r1, r6, r1
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	b .L0808BE0E
	.align 2, 0
.L0808BDC8: .4byte gBg0Tm+0x22
.L0808BDCC: .4byte gBg1Tm+0x22
.L0808BDD0: .4byte gUnknown_08A0189C
.L0808BDD4: .4byte gUnknown_08A01828
.L0808BDD8: .4byte gBmFrameTmap0
.L0808BDDC: .4byte gBg0Tm
.L0808BDE0: .4byte gUnknown_0200422C
.L0808BDE4: .4byte gBg1Tm
.L0808BDE8:
	ldr r0, .L0808BE58  @ gBmFrameTmap0
	mov r4, r8
	adds r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, .L0808BE5C  @ gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, .L0808BE60  @ gUnknown_0200422C
	ldr r1, .L0808BE64  @ gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
.L0808BE0E:
	ldr r0, [r7, #0x58]
	adds r0, #1
	str r0, [r7, #0x58]
	cmp r0, #4
	bne .L0808BE4C
	adds r1, r7, #0
	adds r1, #0x55
	movs r0, #0
	strb r0, [r1]
	str r0, [r7, #0x58]
	adds r0, r7, #0
	bl Proc_Break
	ldr r2, .L0808BE68  @ gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, .L0808BE6C  @ gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r7, #0
	bl DrawMinimugBoxMaybe
.L0808BE4C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808BE58: .4byte gBmFrameTmap0
.L0808BE5C: .4byte gBg0Tm
.L0808BE60: .4byte gUnknown_0200422C
.L0808BE64: .4byte gBg1Tm
.L0808BE68: .4byte gBmSt
.L0808BE6C: .4byte gMapUnit

	THUMB_FUNC_END Loop6CUI1_DisplayTransition

	THUMB_FUNC_START Loop6CUI1_HideTransition
Loop6CUI1_HideTransition: @ 0x0808BE70
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r3, .L0808BED0  @ gUnknown_08A01828
	adds r2, r6, #0
	adds r2, #0x50
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r4, #0
	cmp r0, #0
	blt .L0808BE94
	movs r4, #0xe
.L0808BE94:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #3
	adds r0, r0, r3
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808BEDC
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, .L0808BED4  @ gBg0Tm
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808BED8  @ gBg1Tm
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	b .L0808BEFC
	.align 2, 0
.L0808BED0: .4byte gUnknown_08A01828
.L0808BED4: .4byte gBg0Tm
.L0808BED8: .4byte gBg1Tm
.L0808BEDC:
	lsls r5, r4, #5
	lsls r4, r4, #6
	ldr r0, .L0808BF54  @ gBg0Tm+0x22
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808BF58  @ gBg1Tm+0x22
	adds r0, r4, r0
	movs r1, #0xd
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
.L0808BEFC:
	mov r8, r5
	adds r7, r4, #0
	movs r0, #3
	bl EnableBgSync
	ldr r1, .L0808BF5C  @ gUnknown_08A018A0
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, .L0808BF60  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808BF74
	movs r4, #0xd
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, .L0808BF64  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, .L0808BF68  @ gBg0Tm
	adds r1, r7, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, .L0808BF6C  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, .L0808BF70  @ gBg1Tm
	adds r1, r7, r1
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	b .L0808BF9A
	.align 2, 0
.L0808BF54: .4byte gBg0Tm+0x22
.L0808BF58: .4byte gBg1Tm+0x22
.L0808BF5C: .4byte gUnknown_08A018A0
.L0808BF60: .4byte gUnknown_08A01828
.L0808BF64: .4byte gBmFrameTmap0
.L0808BF68: .4byte gBg0Tm
.L0808BF6C: .4byte gUnknown_0200422C
.L0808BF70: .4byte gBg1Tm
.L0808BF74:
	ldr r0, .L0808BFC4  @ gBmFrameTmap0
	mov r4, r8
	adds r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, .L0808BFC8  @ gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
	ldr r0, .L0808BFCC  @ gUnknown_0200422C
	ldr r1, .L0808BFD0  @ gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_thm
.L0808BF9A:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne .L0808BFBA
	adds r1, r6, #0
	adds r1, #0x56
	movs r0, #0
	strb r0, [r1]
	str r0, [r6, #0x58]
	adds r1, #1
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
.L0808BFBA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808BFC4: .4byte gBmFrameTmap0
.L0808BFC8: .4byte gBg0Tm
.L0808BFCC: .4byte gUnknown_0200422C
.L0808BFD0: .4byte gBg1Tm

	THUMB_FUNC_END Loop6CUI1_HideTransition

	THUMB_FUNC_START func_0808BFD4
func_0808BFD4: @ 0x0808BFD4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, .L0808C00C  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808C018
	ldr r0, .L0808C010  @ gBg0Tm+0x340
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808C014  @ gBg1Tm+0x340
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	b .L0808C030
	.align 2, 0
.L0808C00C: .4byte gUnknown_08A01828
.L0808C010: .4byte gBg0Tm+0x340
.L0808C014: .4byte gBg1Tm+0x340
.L0808C018:
	ldr r0, .L0808C084  @ gBg0Tm+0x36E
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808C088  @ gBg1Tm+0x36E
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
.L0808C030:
	movs r0, #3
	bl EnableBgSync
	ldr r1, .L0808C08C  @ gUnknown_08A018A3
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r5, r0, #1
	ldr r1, .L0808C090  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808C0A8
	ldr r4, .L0808C094  @ 0x00000147
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, .L0808C098  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, .L0808C09C  @ gBg0Tm+0x340
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, .L0808C0A0  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, .L0808C0A4  @ gBg1Tm+0x340
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	b .L0808C0CE
	.align 2, 0
.L0808C084: .4byte gBg0Tm+0x36E
.L0808C088: .4byte gBg1Tm+0x36E
.L0808C08C: .4byte gUnknown_08A018A3
.L0808C090: .4byte gUnknown_08A01828
.L0808C094: .4byte 0x00000147
.L0808C098: .4byte gBmFrameTmap0
.L0808C09C: .4byte gBg0Tm+0x340
.L0808C0A0: .4byte gUnknown_0200422C
.L0808C0A4: .4byte gBg1Tm+0x340
.L0808C0A8:
	ldr r0, .L0808C0F0  @ gUnknown_02003FAC
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, .L0808C0F4  @ gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, .L0808C0F8  @ gUnknown_020044AC
	ldr r1, .L0808C0FC  @ gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
.L0808C0CE:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne .L0808C0E8
	movs r0, #0
	str r0, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
.L0808C0E8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C0F0: .4byte gUnknown_02003FAC
.L0808C0F4: .4byte gBg0Tm
.L0808C0F8: .4byte gUnknown_020044AC
.L0808C0FC: .4byte gBg1Tm

	THUMB_FUNC_END func_0808BFD4

	THUMB_FUNC_START func_0808C100
func_0808C100: @ 0x0808C100
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	ldr r1, .L0808C140  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808C14C
	ldr r0, .L0808C144  @ gBg0Tm+0x340
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808C148  @ gBg1Tm+0x340
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	b .L0808C164
	.align 2, 0
.L0808C140: .4byte gUnknown_08A01828
.L0808C144: .4byte gBg0Tm+0x340
.L0808C148: .4byte gBg1Tm+0x340
.L0808C14C:
	ldr r0, .L0808C1B8  @ gBg0Tm+0x36E
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808C1BC  @ gBg1Tm+0x36E
	movs r1, #7
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
.L0808C164:
	movs r0, #3
	bl EnableBgSync
	ldr r1, .L0808C1C0  @ gUnknown_08A018A6
	ldr r0, [r6, #0x58]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	ldr r1, .L0808C1C4  @ gUnknown_08A01828
	adds r0, r6, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808C1D8
	movs r4, #0xa3
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, .L0808C1C8  @ gBmFrameTmap0
	adds r0, r4, r0
	ldr r1, .L0808C1CC  @ gBg0Tm+0x340
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, .L0808C1D0  @ gUnknown_0200422C
	adds r4, r4, r0
	ldr r1, .L0808C1D4  @ gBg1Tm+0x340
	adds r0, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	b .L0808C1FE
	.align 2, 0
.L0808C1B8: .4byte gBg0Tm+0x36E
.L0808C1BC: .4byte gBg1Tm+0x36E
.L0808C1C0: .4byte gUnknown_08A018A6
.L0808C1C4: .4byte gUnknown_08A01828
.L0808C1C8: .4byte gBmFrameTmap0
.L0808C1CC: .4byte gBg0Tm+0x340
.L0808C1D0: .4byte gUnknown_0200422C
.L0808C1D4: .4byte gBg1Tm+0x340
.L0808C1D8:
	ldr r0, .L0808C224  @ gUnknown_02003FAC
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r1, .L0808C228  @ gBg0Tm
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
	ldr r0, .L0808C22C  @ gUnknown_020044AC
	ldr r1, .L0808C230  @ gBg1Tm
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_thm
.L0808C1FE:
	ldr r0, [r6, #0x58]
	adds r0, #1
	str r0, [r6, #0x58]
	cmp r0, #3
	bne .L0808C21C
	movs r0, #0
	str r0, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
.L0808C21C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C224: .4byte gUnknown_02003FAC
.L0808C228: .4byte gBg0Tm
.L0808C22C: .4byte gUnknown_020044AC
.L0808C230: .4byte gBg1Tm

	THUMB_FUNC_END func_0808C100

	THUMB_FUNC_START func_0808C234
func_0808C234: @ 0x0808C234
	push {lr}
	ldr r1, .L0808C27C  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r1, r0, r1
	movs r0, #2
	ldrsb r0, [r1, r0]
	movs r2, #0x12
	cmp r0, #0
	bge .L0808C250
	movs r2, #0
.L0808C250:
	movs r0, #3
	ldrsb r0, [r1, r0]
	movs r1, #0xe
	cmp r0, #0
	bge .L0808C25C
	movs r1, #0
.L0808C25C:
	ldr r0, .L0808C280  @ gBmFrameTmap0
	lsls r1, r1, #5
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, .L0808C284  @ gBg0Tm
	adds r1, r1, r2
	movs r2, #0xd
	movs r3, #6
	bl TmCopyRect_thm
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L0808C27C: .4byte gUnknown_08A01828
.L0808C280: .4byte gBmFrameTmap0
.L0808C284: .4byte gBg0Tm

	THUMB_FUNC_END func_0808C234

	THUMB_FUNC_START func_0808C288
func_0808C288: @ 0x0808C288
	push {lr}
	ldr r1, .L0808C2C0  @ gUnknown_08A01828
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x17
	cmp r0, #0
	bge .L0808C2A6
	movs r1, #0
.L0808C2A6:
	ldr r0, .L0808C2C4  @ gUnknown_02003FAC
	lsls r1, r1, #1
	ldr r2, .L0808C2C8  @ gBg0Tm+0x340
	adds r1, r1, r2
	movs r2, #7
	movs r3, #7
	bl TmCopyRect_thm
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L0808C2C0: .4byte gUnknown_08A01828
.L0808C2C4: .4byte gUnknown_02003FAC
.L0808C2C8: .4byte gBg0Tm+0x340

	THUMB_FUNC_END func_0808C288

	THUMB_FUNC_START func_0808C2CC
func_0808C2CC: @ 0x0808C2CC
	push {r4, r5, lr}
	adds r5, r1, #0
	movs r4, #0
	cmp r0, #0x40
	beq .L0808C2F8
	cmp r0, #0x40
	bgt .L0808C2E0
	cmp r0, #0
	beq .L0808C2E6
	b .L0808C300
.L0808C2E0:
	cmp r0, #0x80
	beq .L0808C2F0
	b .L0808C300
.L0808C2E6:
	ldr r4, .L0808C2EC  @ gUnknown_08A1738C
	b .L0808C304
	.align 2, 0
.L0808C2EC: .4byte gUnknown_08A1738C
.L0808C2F0:
	ldr r4, .L0808C2F4  @ gUnknown_08A173AC
	b .L0808C304
	.align 2, 0
.L0808C2F4: .4byte gUnknown_08A173AC
.L0808C2F8:
	ldr r4, .L0808C2FC  @ gUnknown_08A173CC
	b .L0808C304
	.align 2, 0
.L0808C2FC: .4byte gUnknown_08A173CC
.L0808C300:
	bl nullsub_8
.L0808C304:
	lsls r1, r5, #5
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808C2CC

	THUMB_FUNC_START func_0808C314
func_0808C314: @ 0x0808C314
	push {lr}
	ldr r0, .L0808C330  @ gBmSt
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x6f
	ble .L0808C334
	movs r0, #1
	negs r0, r0
	b .L0808C336
	.align 2, 0
.L0808C330: .4byte gBmSt
.L0808C334:
	movs r0, #1
.L0808C336:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808C314

	THUMB_FUNC_START func_0808C33C
func_0808C33C: @ 0x0808C33C
	push {lr}
	ldr r0, .L0808C354  @ gBmSt
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x70
	bgt .L0808C358
	movs r0, #1
	b .L0808C35C
	.align 2, 0
.L0808C354: .4byte gBmSt
.L0808C358:
	movs r0, #1
	negs r0, r0
.L0808C35C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808C33C

	THUMB_FUNC_START func_0808C360
func_0808C360: @ 0x0808C360
	ldr r2, .L0808C380  @ 0x00002120
	adds r0, r2, #0
	strh r0, [r1]
	ldr r3, .L0808C384  @ 0x00002121
	adds r0, r3, #0
	strh r0, [r1, #2]
	movs r2, #0
	strh r2, [r1, #4]
	strh r2, [r1, #6]
	adds r3, #0x1d
	adds r0, r3, #0
	strh r0, [r1, #8]
	strh r2, [r1, #0xa]
	strh r2, [r1, #0xc]
	bx lr
	.align 2, 0
.L0808C380: .4byte 0x00002120
.L0808C384: .4byte 0x00002121

	THUMB_FUNC_END func_0808C360

	THUMB_FUNC_START MMB_DrawStatusText
MMB_DrawStatusText: @ 0x0808C388
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, .L0808C3AC  @ 0x0000016F
	cmp r1, #0
	beq .L0808C448
	adds r1, #0x30
	ldrb r0, [r1]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	adds r6, r1, #0
	cmp r0, #0xd
	bhi .L0808C41C
	lsls r0, r0, #2
	ldr r1, .L0808C3B0  @ .L0808C3B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808C3AC: .4byte 0x0000016F
.L0808C3B0: .4byte .L0808C3B4
.L0808C3B4: @ jump table
	.4byte .L0808C448 @ case 0
	.4byte .L0808C3EC @ case 1
	.4byte .L0808C3F0 @ case 2
	.4byte .L0808C3F4 @ case 3
	.4byte .L0808C3FA @ case 4
	.4byte .L0808C400 @ case 5
	.4byte .L0808C406 @ case 6
	.4byte .L0808C40C @ case 7
	.4byte .L0808C412 @ case 8
	.4byte .L0808C448 @ case 9
	.4byte .L0808C448 @ case 10
	.4byte .L0808C418 @ case 11
	.4byte .L0808C41C @ case 12
	.4byte .L0808C418 @ case 13
.L0808C3EC:
	movs r2, #0
	b .L0808C41C
.L0808C3F0:
	movs r2, #0xa0
	b .L0808C41C
.L0808C3F4:
	movs r2, #0xa0
	lsls r2, r2, #1
	b .L0808C41C
.L0808C3FA:
	movs r2, #0xf0
	lsls r2, r2, #1
	b .L0808C41C
.L0808C400:
	movs r2, #0xa0
	lsls r2, r2, #2
	b .L0808C41C
.L0808C406:
	movs r2, #0xc8
	lsls r2, r2, #2
	b .L0808C41C
.L0808C40C:
	movs r2, #0xf0
	lsls r2, r2, #2
	b .L0808C41C
.L0808C412:
	movs r2, #0x8c
	lsls r2, r2, #3
	b .L0808C41C
.L0808C418:
	movs r2, #0xa0
	lsls r2, r2, #3
.L0808C41C:
	ldr r0, .L0808C450  @ gUnknown_08A16DEC
	adds r0, r2, r0
	ldr r1, .L0808C454  @ 0x06002DE0
	movs r2, #0x28
	bl CpuFastSet
	strh r4, [r5]
	adds r4, #1
	strh r4, [r5, #2]
	adds r4, #1
	strh r4, [r5, #4]
	adds r4, #1
	strh r4, [r5, #6]
	adds r4, #1
	strh r4, [r5, #8]
	movs r0, #0
	strh r0, [r5, #0xa]
	ldrb r0, [r6]
	lsrs r0, r0, #4
	ldr r1, .L0808C458  @ 0x00001128
	adds r0, r0, r1
	strh r0, [r5, #0xc]
.L0808C448:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C450: .4byte gUnknown_08A16DEC
.L0808C454: .4byte 0x06002DE0
.L0808C458: .4byte 0x00001128

	THUMB_FUNC_END MMB_DrawStatusText

	THUMB_FUNC_START DrawMinimugBoxMaybe
DrawMinimugBoxMaybe: @ 0x0808C45C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, #0x44
	ldrh r2, [r0]
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0xa
	bne .L0808C47A
	movs r2, #0
.L0808C47A:
	lsls r1, r2, #0x10
	asrs r2, r1, #0x10
	movs r0, #0x3f
	ands r0, r2
	adds r6, r1, #0
	cmp r0, #0
	bne .L0808C518
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq .L0808C4A0
	ldr r0, [r4, #0x40]
	adds r1, r5, #0
	bl MMB_DrawStatusText
	movs r0, #1
	bl EnableBgSync
	b .L0808C518
.L0808C4A0:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble .L0808C4B2
	movs r0, #0xff
	bl GenNumberOrBlankStr
	b .L0808C4BC
.L0808C4B2:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	bl GenNumberOrBlankStr
.L0808C4BC:
	ldr r1, .L0808C4E4  @ gNumberStr
	ldrb r0, [r1, #6]
	subs r0, #0x30
	adds r2, r4, #0
	adds r2, #0x51
	strb r0, [r2]
	ldrb r0, [r1, #7]
	subs r0, #0x30
	adds r1, r4, #0
	adds r1, #0x52
	strb r0, [r1]
	adds r0, r5, #0
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble .L0808C4E8
	movs r0, #0xff
	bl GenNumberOrBlankStr
	b .L0808C4F2
	.align 2, 0
.L0808C4E4: .4byte gNumberStr
.L0808C4E8:
	adds r0, r5, #0
	bl GetUnitMaxHp
	bl GenNumberOrBlankStr
.L0808C4F2:
	ldr r1, .L0808C5C4  @ gNumberStr
	ldrb r0, [r1, #6]
	subs r0, #0x30
	adds r2, r4, #0
	adds r2, #0x53
	strb r0, [r2]
	ldrb r0, [r1, #7]
	subs r0, #0x30
	adds r1, r4, #0
	adds r1, #0x54
	strb r0, [r1]
	ldr r1, [r4, #0x40]
	adds r0, r4, #0
	adds r2, r5, #0
	bl func_0808C360
	movs r0, #1
	bl EnableBgSync
.L0808C518:
	adds r0, r4, #0
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L0808C5BA
	asrs r0, r6, #0x10
	movs r1, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L0808C53E
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L0808C5BA
.L0808C53E:
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r5, r0, #3
	adds r7, r5, #0
	adds r7, #0x11
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r6, r0, #3
	adds r1, r4, #0
	adds r1, #0x51
	ldrb r0, [r1]
	cmp r0, #0xf0
	beq .L0808C570
	ldr r2, .L0808C5C8  @ Sprite_8x8
	adds r3, r0, #0
	ldr r0, .L0808C5CC  @ 0x000082E0
	adds r3, r3, r0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutOamHiRam
.L0808C570:
	adds r0, r5, #0
	adds r0, #0x18
	ldr r7, .L0808C5C8  @ Sprite_8x8
	adds r1, r4, #0
	adds r1, #0x52
	ldrb r3, [r1]
	ldr r1, .L0808C5CC  @ 0x000082E0
	mov r8, r1
	add r3, r8
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutOamHiRam
	adds r1, r4, #0
	adds r1, #0x53
	ldrb r0, [r1]
	cmp r0, #0xf0
	beq .L0808C5A6
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r3, [r1]
	ldr r1, .L0808C5CC  @ 0x000082E0
	adds r3, r3, r1
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutOamHiRam
.L0808C5A6:
	adds r0, r5, #0
	adds r0, #0x30
	adds r1, r4, #0
	adds r1, #0x54
	ldrb r3, [r1]
	add r3, r8
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutOamHiRam
.L0808C5BA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C5C4: .4byte gNumberStr
.L0808C5C8: .4byte Sprite_8x8
.L0808C5CC: .4byte 0x000082E0

	THUMB_FUNC_END DrawMinimugBoxMaybe

	THUMB_FUNC_START InitMinimugBoxMaybe
InitMinimugBoxMaybe: @ 0x0808C5D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	mov r8, r1
	movs r0, #0
	mov sl, r0
	str r0, [sp, #4]
	ldr r1, .L0808C688  @ gBmFrameTmap0
	mov r9, r1
	ldr r2, .L0808C68C  @ 0x01000060
	add r0, sp, #4
	bl CpuFastSet
	mov r1, r8
	ldr r0, [r1]
	ldrh r0, [r0]
	bl GetMsg
	adds r6, r0, #0
	movs r0, #0x38
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	adds r5, r0, #0
	adds r4, r7, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #5
	bl Text_SetParams
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_DrawString
	mov r1, r9
	adds r1, #0x4a
	adds r0, r4, #0
	bl PutText
	mov r0, r8
	bl GetUnitChibiFid
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L0808C646
	adds r2, #1
.L0808C646:
	mov r1, r9
	adds r1, #0x42
	mov r0, sl
	str r0, [sp]
	adds r0, r2, #0
	movs r2, #0xf0
	movs r3, #4
	bl PutFaceChibi
	mov r0, r9
	adds r0, #0xca
	str r0, [r7, #0x40]
	adds r0, r7, #0
	adds r0, #0x44
	mov r1, sl
	strh r1, [r0]
	ldr r2, .L0808C690  @ gUnknown_08A01828
	adds r1, r7, #0
	adds r1, #0x50
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808C694
	adds r2, r7, #0
	adds r2, #0x46
	movs r0, #5
	b .L0808C69A
	.align 2, 0
.L0808C688: .4byte gBmFrameTmap0
.L0808C68C: .4byte 0x01000060
.L0808C690: .4byte gUnknown_08A01828
.L0808C694:
	adds r2, r7, #0
	adds r2, #0x46
	movs r0, #0x17
.L0808C69A:
	strh r0, [r2]
	ldr r0, .L0808C6B8  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #3
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L0808C6BC
	adds r1, r7, #0
	adds r1, #0x48
	movs r0, #3
	b .L0808C6C2
	.align 2, 0
.L0808C6B8: .4byte gUnknown_08A01828
.L0808C6BC:
	adds r1, r7, #0
	adds r1, #0x48
	movs r0, #0x11
.L0808C6C2:
	strh r0, [r1]
	adds r0, r7, #0
	mov r1, r8
	bl DrawMinimugBoxMaybe
	ldr r0, .L0808C704  @ gUnknown_02003E36
	movs r2, #0x8a
	lsls r2, r2, #5
	mov r1, r8
	bl func_0808BC94
	ldr r0, .L0808C708  @ gUnknown_0200422C
	ldr r1, .L0808C70C  @ gUnknown_08A17484
	movs r2, #0xc0
	lsls r2, r2, #6
	bl TmApplyTsa_thm
	mov r1, r8
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	movs r1, #3
	bl func_0808C2CC
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C704: .4byte gUnknown_02003E36
.L0808C708: .4byte gUnknown_0200422C
.L0808C70C: .4byte gUnknown_08A17484

	THUMB_FUNC_END InitMinimugBoxMaybe

	THUMB_FUNC_START func_0808C710
func_0808C710: @ 0x0808C710
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl GetCameraMovementSpeedMaybe
	adds r1, r0, #0
	movs r2, #1
	cmp r4, #5
	ble .L0808C734
	cmp r4, #0xb
	bgt .L0808C736
	ldr r0, .L0808C74C  @ gUnknown_08A01828
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #5
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L0808C736
.L0808C734:
	movs r2, #4
.L0808C736:
	cmp r5, #1
	bgt .L0808C73C
	subs r2, #1
.L0808C73C:
	cmp r5, #0x16
	ble .L0808C742
	adds r2, #1
.L0808C742:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L0808C74C: .4byte gUnknown_08A01828

	THUMB_FUNC_END func_0808C710

	THUMB_FUNC_START func_0808C750
func_0808C750: @ 0x0808C750
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	str r1, [sp]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	ldr r2, .L0808C8C4  @ gBmSt
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge .L0808C774
	adds r0, #7
.L0808C774:
	asrs r0, r0, #3
	mov sl, r0
	ldr r1, [sp]
	movs r0, #0x11
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge .L0808C78C
	adds r0, #7
.L0808C78C:
	asrs r4, r0, #3
	mov r0, sl
	adds r1, r4, #0
	bl func_0808C710
	mov r8, r0
	ldr r0, .L0808C8C8  @ gUnknown_08A01860
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add sl, r0
	ldr r0, .L0808C8CC  @ gUnknown_08A01866
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r4, r0
	adds r0, r7, #0
	adds r0, #0x3c
	mov r1, sl
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, r7, #0
	adds r1, #0x3e
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #5
	strb r0, [r1]
	ldr r2, [sp]
	ldr r0, [r2]
	ldrh r0, [r0]
	bl GetMsg
	mov r9, r0
	movs r0, #0x38
	mov r1, r9
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #5
	bl Text_SetParams
	adds r0, r5, #0
	mov r1, r9
	bl Text_DrawString
	ldr r0, .L0808C8D0  @ gUnknown_08A0184E
	add r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, r4, r1
	lsls r1, r1, #5
	ldr r0, .L0808C8D4  @ gUnknown_08A01848
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add r0, sl
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r6, .L0808C8D8  @ gBg0Tm
	adds r1, r1, r6
	adds r0, r5, #0
	bl PutText
	adds r1, r4, #3
	lsls r0, r1, #5
	adds r0, #1
	add r0, sl
	lsls r0, r0, #1
	adds r0, r0, r6
	str r0, [r7, #0x40]
	adds r0, r7, #0
	adds r0, #0x44
	movs r3, #0
	strh r3, [r0]
	mov r0, sl
	adds r0, #1
	adds r2, r7, #0
	adds r2, #0x46
	strh r0, [r2]
	adds r0, r7, #0
	adds r0, #0x48
	strh r1, [r0]
	adds r0, r7, #0
	ldr r1, [sp]
	bl DrawMinimugBoxMaybe
	lsls r0, r4, #5
	add r0, sl
	lsls r0, r0, #1
	ldr r5, .L0808C8DC  @ gBg1Tm
	adds r0, r0, r5
	ldr r1, .L0808C8E0  @ gUnknown_08A0186C
	mov r2, r8
	lsls r2, r2, #2
	mov r8, r2
	add r1, r8
	ldr r1, [r1]
	movs r6, #0xc4
	lsls r6, r6, #6
	adds r2, r6, #0
	bl TmApplyTsa_thm
	adds r0, r4, #1
	lsls r0, r0, #5
	add r0, sl
	lsls r0, r0, #1
	adds r0, r0, r5
	ldr r1, .L0808C8E4  @ gUnknown_08A17604
	adds r2, r6, #0
	bl TmApplyTsa_thm
	adds r4, #4
	lsls r4, r4, #5
	add r4, sl
	lsls r4, r4, #1
	adds r4, r4, r5
	ldr r0, .L0808C8E8  @ gUnknown_08A01884
	add r8, r0
	mov r3, r8
	ldr r1, [r3]
	adds r0, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	movs r0, #3
	bl EnableBgSync
	ldr r1, [sp]
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	movs r1, #3
	bl func_0808C2CC
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C8C4: .4byte gBmSt
.L0808C8C8: .4byte gUnknown_08A01860
.L0808C8CC: .4byte gUnknown_08A01866
.L0808C8D0: .4byte gUnknown_08A0184E
.L0808C8D4: .4byte gUnknown_08A01848
.L0808C8D8: .4byte gBg0Tm
.L0808C8DC: .4byte gBg1Tm
.L0808C8E0: .4byte gUnknown_08A0186C
.L0808C8E4: .4byte gUnknown_08A17604
.L0808C8E8: .4byte gUnknown_08A01884

	THUMB_FUNC_END func_0808C750

	THUMB_FUNC_START func_0808C8EC
func_0808C8EC: @ 0x0808C8EC
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldrh r1, [r2, #0x3e]
	movs r0, #0xa1
	lsls r0, r0, #3
	cmp r1, r0
	bne .L0808C956
	adds r7, r2, #0
	adds r7, #0x3d
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	adds r5, r2, #0
	adds r5, #0x3c
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, .L0808C95C  @ gBg0Tm
	adds r0, r0, r1
	adds r6, r2, #0
	adds r6, #0x3e
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r2, #0
	adds r4, #0x3f
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, .L0808C960  @ gBg1Tm
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r6, r1]
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #3
	bl EnableBgSync
	movs r0, #0
	strb r0, [r6]
	strb r0, [r4]
.L0808C956:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808C95C: .4byte gBg0Tm
.L0808C960: .4byte gBg1Tm

	THUMB_FUNC_END func_0808C8EC

	THUMB_FUNC_START func_0808C964
func_0808C964: @ 0x0808C964
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	ldr r0, .L0808CA48  @ gBmSt
	mov r9, r0
	movs r1, #0x16
	ldrsh r0, [r0, r1]
	ldr r1, .L0808CA4C  @ gMapTerrain
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	mov r2, r9
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r7, [r0]
	ldr r0, .L0808CA50  @ gUnknown_02003FAC
	mov r8, r0
	movs r1, #0xe
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808CA54  @ gUnknown_020044AC
	movs r1, #0xe
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r7, #0
	bl GetTerrainName
	adds r5, r0, #0
	movs r0, #0x28
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0
	bl Text_SetParams
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	mov r1, r8
	adds r1, #0x82
	adds r0, r4, #0
	bl PutText
	movs r6, #0x81
	lsls r6, r6, #1
	add r6, r8
	ldr r1, .L0808CA58  @ gUnknown_08A1768C
	movs r2, #0x84
	lsls r2, r2, #6
	adds r0, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L0808CA5C  @ gUnknown_0880B90C
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble .L0808CA3A
	ldr r0, .L0808CA60  @ gUnknown_0880C4BA
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GenNumberStr
	movs r0, #0x85
	lsls r0, r0, #1
	add r0, r8
	ldr r4, .L0808CA64  @ gNumberStr+7
	ldr r5, .L0808CA68  @ 0x00002128
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl func_08013138
	ldr r0, .L0808CA6C  @ gUnknown_0880C479
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GenNumberStr
	movs r0, #0xa5
	lsls r0, r0, #1
	add r0, r8
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl func_08013138
.L0808CA3A:
	cmp r7, #0x29
	bgt .L0808CA70
	cmp r7, #0x27
	bge .L0808CAD8
	cmp r7, #0x1b
	beq .L0808CA74
	b .L0808CB06
	.align 2, 0
.L0808CA48: .4byte gBmSt
.L0808CA4C: .4byte gMapTerrain
.L0808CA50: .4byte gUnknown_02003FAC
.L0808CA54: .4byte gUnknown_020044AC
.L0808CA58: .4byte gUnknown_08A1768C
.L0808CA5C: .4byte gUnknown_0880B90C
.L0808CA60: .4byte gUnknown_0880C4BA
.L0808CA64: .4byte gNumberStr+7
.L0808CA68: .4byte 0x00002128
.L0808CA6C: .4byte gUnknown_0880C479
.L0808CA70:
	cmp r7, #0x33
	bne .L0808CB06
.L0808CA74:
	ldr r4, .L0808CAA8  @ gUnknown_020040AE
	ldr r1, .L0808CAAC  @ gUnknown_08A176A4
	movs r2, #0x84
	lsls r2, r2, #6
	adds r0, r4, #0
	bl TmApplyTsa_thm
	ldr r1, .L0808CAB0  @ gBmSt
	movs r2, #0x14
	ldrsh r0, [r1, r2]
	movs r3, #0x16
	ldrsh r1, [r1, r3]
	bl GetObstacleHpAt
	adds r6, r0, #0
	cmp r6, #0x64
	bne .L0808CAB8
	adds r0, r4, #0
	adds r0, #0x46
	ldr r1, .L0808CAB4  @ gUnknown_08A176B4
	movs r2, #0x80
	lsls r2, r2, #1
	bl TmApplyTsa_thm
	b .L0808CB06
	.align 2, 0
.L0808CAA8: .4byte gUnknown_020040AE
.L0808CAAC: .4byte gUnknown_08A176A4
.L0808CAB0: .4byte gBmSt
.L0808CAB4: .4byte gUnknown_08A176B4
.L0808CAB8:
	adds r0, r6, #0
	bl GenNumberStr
	adds r0, r4, #0
	adds r0, #0x48
	ldr r1, .L0808CAD0  @ gNumberStr+7
	ldr r2, .L0808CAD4  @ 0x00002128
	movs r3, #2
	bl func_08013138
	b .L0808CB06
	.align 2, 0
.L0808CAD0: .4byte gNumberStr+7
.L0808CAD4: .4byte 0x00002128
.L0808CAD8:
	ldr r1, .L0808CB20  @ gUnknown_08A1769C
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r6, #0
	bl TmApplyTsa_thm
	mov r1, r9
	movs r2, #0x14
	ldrsh r0, [r1, r2]
	movs r3, #0x16
	ldrsh r1, [r1, r3]
	bl GetObstacleHpAt
	bl GenNumberStr
	movs r0, #0x85
	lsls r0, r0, #1
	add r0, r8
	ldr r1, .L0808CB24  @ gNumberStr+7
	ldr r2, .L0808CB28  @ 0x00002128
	movs r3, #2
	bl func_08013138
.L0808CB06:
	ldr r0, .L0808CB2C  @ gUnknown_020044EC
	ldr r1, .L0808CB30  @ gUnknown_08A1742C
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_thm
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808CB20: .4byte gUnknown_08A1769C
.L0808CB24: .4byte gNumberStr+7
.L0808CB28: .4byte 0x00002128
.L0808CB2C: .4byte gUnknown_020044EC
.L0808CB30: .4byte gUnknown_08A1742C

	THUMB_FUNC_END func_0808C964

	THUMB_FUNC_START func_0808CB34
func_0808CB34: @ 0x0808CB34
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	subs r1, #1
	movs r0, #0
	strb r0, [r1]
	str r0, [r2, #0x58]
	subs r1, #6
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2c
	movs r1, #5
	bl InitTextDb
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808CB34

	THUMB_FUNC_START func_0808CB5C
func_0808CB5C: @ 0x0808CB5C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl GetCameraMovementSpeedMaybe
	adds r1, r5, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, .L0808CBF0  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #0
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_0808BBAC
	adds r6, r0, #0
	ldr r0, .L0808CBF4  @ gUnknown_08A0190C
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L0808CBAA
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L0808CBAA
	cmp r0, r6
	beq .L0808CBE8
.L0808CBAA:
	ldr r0, .L0808CBF8  @ gUnknown_08A019E4
	bl FindProc
	cmp r4, #0
	beq .L0808CBC4
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L0808CBC4
	cmp r0, r6
	beq .L0808CBE8
.L0808CBC4:
	adds r0, r5, #0
	adds r0, #0x57
	strb r6, [r0]
	adds r0, r5, #0
	bl func_0808C964
	ldr r0, .L0808CBFC  @ gBmSt
	ldrh r1, [r0, #0x14]
	adds r2, r5, #0
	adds r2, #0x4e
	strb r1, [r2]
	ldrh r0, [r0, #0x16]
	adds r1, r5, #0
	adds r1, #0x4f
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
.L0808CBE8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808CBF0: .4byte gUnknown_08A01828
.L0808CBF4: .4byte gUnknown_08A0190C
.L0808CBF8: .4byte gUnknown_08A019E4
.L0808CBFC: .4byte gBmSt

	THUMB_FUNC_END func_0808CB5C

	THUMB_FUNC_START func_0808CC00
func_0808CC00: @ 0x0808CC00
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, .L0808CC80  @ gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq .L0808CC9A
	ldr r0, .L0808CC84  @ ProcScr_CameraPan
	bl FindProc
	cmp r0, #0
	bne .L0808CC8C
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq .L0808CC70
	ldr r1, .L0808CC88  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r5, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L0808CC8C
	movs r1, #1
	ldrsb r1, [r5, r1]
	movs r0, #1
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L0808CC8C
.L0808CC70:
	adds r0, r4, #0
	bl func_0808C964
	adds r0, r4, #0
	bl func_0808C288
	b .L0808CC9A
	.align 2, 0
.L0808CC80: .4byte gBmSt
.L0808CC84: .4byte ProcScr_CameraPan
.L0808CC88: .4byte gUnknown_08A01828
.L0808CC8C:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L0808CC9A:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808CC00

	THUMB_FUNC_START func_0808CCA0
func_0808CCA0: @ 0x0808CCA0
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r1, #7
	bl InitTextDb
	movs r1, #0
	str r1, [r4, #0x58]
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808CCA0

	THUMB_FUNC_START Loop6CUI1_Hidden
Loop6CUI1_Hidden: @ 0x0808CCC8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r2, .L0808CD64  @ gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, .L0808CD68  @ gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	beq .L0808CD5C
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl GetCameraMovementSpeedMaybe
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, .L0808CD6C  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #2
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #3]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_0808BBAC
	adds r5, r0, #0
	ldr r0, .L0808CD70  @ gUnknown_08A018AC
	bl FindProc
	cmp r0, #0
	beq .L0808CD36
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L0808CD36
	cmp r0, r5
	beq .L0808CD5C
.L0808CD36:
	adds r0, r4, #0
	adds r0, #0x57
	strb r5, [r0]
	ldr r0, .L0808CD64  @ gBmSt
	ldrh r1, [r0, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r1, [r2]
	ldrh r0, [r0, #0x16]
	adds r1, r4, #0
	adds r1, #0x4f
	strb r0, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	bl InitMinimugBoxMaybe
	adds r0, r4, #0
	bl Proc_Break
.L0808CD5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808CD64: .4byte gBmSt
.L0808CD68: .4byte gMapUnit
.L0808CD6C: .4byte gUnknown_08A01828
.L0808CD70: .4byte gUnknown_08A018AC

	THUMB_FUNC_END Loop6CUI1_Hidden

	THUMB_FUNC_START Loop6CUI1_Displayed
Loop6CUI1_Displayed: @ 0x0808CD74
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r6, .L0808CE2C  @ gBmSt
	movs r1, #0x16
	ldrsh r0, [r6, r1]
	ldr r1, .L0808CE30  @ gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0x14
	ldrsh r1, [r6, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r7, r0, #0
	adds r4, r5, #0
	adds r4, #0x44
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	adds r0, r5, #0
	adds r1, r7, #0
	bl DrawMinimugBoxMaybe
	ldrh r1, [r4]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne .L0808CDB8
	adds r0, r5, #0
	bl func_0808C234
.L0808CDB8:
	adds r3, r5, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x4f
	ldrb r0, [r4]
	adds r2, r5, #0
	adds r2, #0x4d
	strb r0, [r2]
	ldrh r0, [r6, #0x14]
	strb r0, [r3]
	ldrh r0, [r6, #0x16]
	strb r0, [r4]
	ldrh r0, [r3]
	ldrh r1, [r1]
	cmp r0, r1
	beq .L0808CE4A
	cmp r7, #0
	beq .L0808CE3C
	ldr r0, .L0808CE34  @ ProcScr_CameraPan
	bl FindProc
	cmp r0, #0
	bne .L0808CE3C
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r5, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq .L0808CE22
	ldr r1, .L0808CE38  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r4, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #2
	ldrsb r1, [r4, r1]
	movs r0, #2
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L0808CE3C
	movs r1, #3
	ldrsb r1, [r4, r1]
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L0808CE3C
.L0808CE22:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b .L0808CE4A
	.align 2, 0
.L0808CE2C: .4byte gBmSt
.L0808CE30: .4byte gMapUnit
.L0808CE34: .4byte ProcScr_CameraPan
.L0808CE38: .4byte gUnknown_08A01828
.L0808CE3C:
	adds r1, r5, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
.L0808CE4A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END Loop6CUI1_Displayed

	THUMB_FUNC_START func_0808CE50
func_0808CE50: @ 0x0808CE50
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, .L0808CE80  @ gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, .L0808CE84  @ gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	bne .L0808CE88
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b .L0808CE94
	.align 2, 0
.L0808CE80: .4byte gBmSt
.L0808CE84: .4byte gMapUnit
.L0808CE88:
	adds r0, r4, #0
	bl InitMinimugBoxMaybe
	adds r0, r4, #0
	bl func_0808C234
.L0808CE94:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808CE50

	THUMB_FUNC_START Init6CUI2
Init6CUI2: @ 0x0808CE9C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	movs r1, #7
	bl InitTextDb
	adds r0, r4, #0
	adds r0, #0x4b
	movs r1, #0
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	str r1, [r4, #0x58]
	subs r0, #0x17
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0x17
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END Init6CUI2

	THUMB_FUNC_START Loop6CUI2
Loop6CUI2: @ 0x0808CEC8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x4b
	ldrb r0, [r5]
	adds r3, r4, #0
	adds r3, #0x4a
	strb r0, [r3]
	ldr r2, .L0808CF0C  @ gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, .L0808CF10  @ gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r6, #0x14
	ldrsh r1, [r2, r6]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	strb r0, [r5]
	ldrb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq .L0808CF14
	cmp r1, #0
	beq .L0808CF14
	adds r0, r4, #0
	bl func_0808C8EC
	movs r0, #0
	str r0, [r4, #0x58]
	b .L0808CFBC
	.align 2, 0
.L0808CF0C: .4byte gBmSt
.L0808CF10: .4byte gMapUnit
.L0808CF14:
	adds r0, r4, #0
	adds r0, #0x4b
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	beq .L0808CFBC
	ldr r0, .L0808CF64  @ ProcScr_CameraPan
	bl FindProc
	cmp r0, #0
	bne .L0808CFBC
	ldr r0, .L0808CF68  @ gUnknown_08A018AC
	bl FindProc
	adds r5, r0, #0
	cmp r5, #0
	beq .L0808CF42
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L0808CF58
.L0808CF42:
	ldr r0, .L0808CF6C  @ gUnknown_08A019E4
	bl FindProc
	cmp r0, #0
	beq .L0808CF70
	adds r0, #0x55
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L0808CF70
.L0808CF58:
	ldr r0, [r4, #0x58]
	cmp r0, #3
	bgt .L0808CFBC
	adds r0, #1
	str r0, [r4, #0x58]
	b .L0808CFBC
	.align 2, 0
.L0808CF64: .4byte ProcScr_CameraPan
.L0808CF68: .4byte gUnknown_08A018AC
.L0808CF6C: .4byte gUnknown_08A019E4
.L0808CF70:
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #7
	ble .L0808CFBC
	cmp r0, #8
	bne .L0808CF8E
	ldrb r0, [r6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl func_0808C750
	b .L0808CFBC
.L0808CF8E:
	adds r1, r4, #0
	adds r1, #0x44
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	cmp r5, #0
	beq .L0808CFA6
	adds r0, r5, #0
	adds r0, #0x55
	ldrb r0, [r0]
	adds r1, #0x11
	b .L0808CFAC
.L0808CFA6:
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #0
.L0808CFAC:
	strb r0, [r1]
	ldrb r0, [r6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl DrawMinimugBoxMaybe
.L0808CFBC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END Loop6CUI2

	THUMB_FUNC_START InitPlayerPhaseInterfaceMaybe
InitPlayerPhaseInterfaceMaybe: @ 0x0808CFC4
	push {r4, lr}
	sub sp, #4
	ldr r2, .L0808D0A8  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	ldr r0, .L0808D0AC  @ gUnknown_08A167C8
	ldr r1, .L0808D0B0  @ 0x06002000
	bl Decompress
	ldr r0, .L0808D0B4  @ gUnknown_08A16D6C
	ldr r1, .L0808D0B8  @ 0x06015C00
	bl Decompress
	ldr r0, .L0808D0BC  @ 0x06002EA0
	ldr r1, .L0808D0C0  @ 0x06015D40
	movs r2, #8
	bl CpuFastSet
	ldr r0, .L0808D0C4  @ gPal
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #1
	movs r1, #2
	bl ApplyIconPalette
	bl ResetTextFont
	ldr r4, .L0808D0C8  @ gPlaySt
	adds r0, r4, #0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808D092
	ldr r0, .L0808D0CC  @ gUnknown_08A018AC
	movs r1, #3
	bl SpawnProc
.L0808D092:
	ldr r0, .L0808D0D0  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L0808D0D8
	ldr r0, .L0808D0D4  @ gUnknown_08A01A44
	movs r1, #3
	bl SpawnProc
	b .L0808D0F8
	.align 2, 0
.L0808D0A8: .4byte gDispIo
.L0808D0AC: .4byte gUnknown_08A167C8
.L0808D0B0: .4byte 0x06002000
.L0808D0B4: .4byte gUnknown_08A16D6C
.L0808D0B8: .4byte 0x06015C00
.L0808D0BC: .4byte 0x06002EA0
.L0808D0C0: .4byte 0x06015D40
.L0808D0C4: .4byte gPal
.L0808D0C8: .4byte gPlaySt
.L0808D0CC: .4byte gUnknown_08A018AC
.L0808D0D0: .4byte gBmSt
.L0808D0D4: .4byte gUnknown_08A01A44
.L0808D0D8:
	adds r0, r4, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne .L0808D0F8
	movs r0, #0x66
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0808D0F8
	ldr r0, .L0808D12C  @ gUnknown_08A019E4
	movs r1, #3
	bl SpawnProc
.L0808D0F8:
	ldr r0, .L0808D130  @ gPlaySt
	adds r4, r0, #0
	adds r4, #0x40
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #0
	bne .L0808D110
	ldr r0, .L0808D134  @ gUnknown_08A0190C
	movs r1, #3
	bl SpawnProc
.L0808D110:
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #1
	bne .L0808D122
	ldr r0, .L0808D138  @ gUnknown_08A01994
	movs r1, #3
	bl SpawnProc
.L0808D122:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D12C: .4byte gUnknown_08A019E4
.L0808D130: .4byte gPlaySt
.L0808D134: .4byte gUnknown_08A0190C
.L0808D138: .4byte gUnknown_08A01994

	THUMB_FUNC_END InitPlayerPhaseInterfaceMaybe

	THUMB_FUNC_START StartPlayerPhaseSideWindows
StartPlayerPhaseSideWindows: @ 0x0808D13C
	push {lr}
	ldr r0, .L0808D14C  @ gUnknown_08A019C4
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L0808D14C: .4byte gUnknown_08A019C4

	THUMB_FUNC_END StartPlayerPhaseSideWindows

	THUMB_FUNC_START EndPlayerPhaseSideWindows
EndPlayerPhaseSideWindows: @ 0x0808D150
	push {lr}
	ldr r0, .L0808D17C  @ gUnknown_08A0190C
	bl EndEachProc
	ldr r0, .L0808D180  @ gUnknown_08A01994
	bl EndEachProc
	ldr r0, .L0808D184  @ gUnknown_08A018AC
	bl EndEachProc
	ldr r0, .L0808D188  @ gUnknown_08A019E4
	bl EndEachProc
	ldr r0, .L0808D18C  @ gUnknown_08A01A44
	bl EndEachProc
	bl SetBlendNone
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
.L0808D17C: .4byte gUnknown_08A0190C
.L0808D180: .4byte gUnknown_08A01994
.L0808D184: .4byte gUnknown_08A018AC
.L0808D188: .4byte gUnknown_08A019E4
.L0808D18C: .4byte gUnknown_08A01A44

	THUMB_FUNC_END EndPlayerPhaseSideWindows

	THUMB_FUNC_START func_0808D190
func_0808D190: @ 0x0808D190
	push {lr}
	ldr r0, .L0808D1A8  @ gBmSt
	movs r2, #0x16
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xe
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x40
	bgt .L0808D1AC
	movs r0, #0
	b .L0808D1AE
	.align 2, 0
.L0808D1A8: .4byte gBmSt
.L0808D1AC:
	movs r0, #1
.L0808D1AE:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808D190

	THUMB_FUNC_START func_0808D1B4
func_0808D1B4: @ 0x0808D1B4
	push {lr}
	bl func_0808D190
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0808D1DC
	bl func_0808C314
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	bne .L0808D1D0
	movs r0, #2
	b .L0808D1FA
.L0808D1D0:
	bl func_0808C314
	cmp r0, #1
	bne .L0808D1F8
	movs r0, #1
	b .L0808D1FA
.L0808D1DC:
	bl func_0808C33C
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	bne .L0808D1EC
	movs r0, #4
	b .L0808D1FA
.L0808D1EC:
	bl func_0808C33C
	cmp r0, #1
	bne .L0808D1F8
	movs r0, #3
	b .L0808D1FA
.L0808D1F8:
	movs r0, #0
.L0808D1FA:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808D1B4

	THUMB_FUNC_START func_0808D200
func_0808D200: @ 0x0808D200
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r7, .L0808D278  @ gUnknown_020044D4
	adds r0, r7, #0
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, .L0808D27C  @ gUnknown_02004054
	adds r0, r6, #0
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	adds r5, r4, #0
	adds r5, #0x44
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne .L0808D244
	ldr r1, .L0808D280  @ gUnknown_08A17744
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r7, #0
	bl TmApplyTsa_thm
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x42
	bl PutText
.L0808D244:
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #1
	bne .L0808D270
	ldr r1, .L0808D284  @ gUnknown_08A176BC
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r7, #0
	bl TmApplyTsa_thm
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x42
	bl PutText
	adds r0, r4, #0
	adds r0, #0x34
	adds r1, r6, #0
	adds r1, #0xc2
	bl PutText
.L0808D270:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D278: .4byte gUnknown_020044D4
.L0808D27C: .4byte gUnknown_02004054
.L0808D280: .4byte gUnknown_08A17744
.L0808D284: .4byte gUnknown_08A176BC

	THUMB_FUNC_END func_0808D200

	THUMB_FUNC_START Init6CPI
Init6CPI: @ 0x0808D288
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r1, #0
	str r1, [r6, #0x58]
	adds r0, #0x56
	strb r1, [r0]
	subs r0, #6
	strb r1, [r0]
	adds r1, r6, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x2c
	adds r0, r5, #0
	movs r1, #8
	bl InitText
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, #0
	movs r1, #8
	bl InitText
	adds r0, r6, #0
	bl StartGreenText
	adds r0, r5, #0
	bl ClearText
	adds r0, r4, #0
	bl ClearText
	bl GetBattleMapKind
	cmp r0, #2
	beq .L0808D2E8
	ldr r0, .L0808D2E4  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x8a
	ldrh r0, [r0]
	b .L0808D2EC
	.align 2, 0
.L0808D2E4: .4byte gPlaySt
.L0808D2E8:
	movs r0, #0xcf
	lsls r0, r0, #1
.L0808D2EC:
	bl GetMsg
	adds r5, r0, #0
	adds r4, r6, #0
	adds r4, #0x2c
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	bl GetBattleMapKind
	cmp r0, #2
	beq .L0808D328
	ldr r0, .L0808D324  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x8c
	ldrb r0, [r0]
	b .L0808D32A
	.align 2, 0
.L0808D324: .4byte gPlaySt
.L0808D328:
	movs r0, #1
.L0808D32A:
	cmp r0, #4
	bls .L0808D330
	b .L0808D476
.L0808D330:
	lsls r0, r0, #2
	ldr r1, .L0808D33C  @ .L0808D340
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808D33C: .4byte .L0808D340
.L0808D340: @ jump table
	.4byte .L0808D354 @ case 0
	.4byte .L0808D35C @ case 1
	.4byte .L0808D3B0 @ case 2
	.4byte .L0808D354 @ case 3
	.4byte .L0808D354 @ case 4
.L0808D354:
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #0
	b .L0808D474
.L0808D35C:
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, .L0808D390  @ 0x000001C1
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x10
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, .L0808D394  @ gPlaySt
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq .L0808D39C
	ldr r0, .L0808D398  @ 0x00000535
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x28
	movs r2, #1
	bl Text_InsertDrawString
	b .L0808D46E
	.align 2, 0
.L0808D390: .4byte 0x000001C1
.L0808D394: .4byte gPlaySt
.L0808D398: .4byte 0x00000535
.L0808D39C:
	movs r0, #0x80
	bl CountUnitsByFaction
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x30
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	b .L0808D46E
.L0808D3B0:
	ldr r4, .L0808D3D0  @ gPlaySt
	ldrh r5, [r4, #0x10]
	bl GetBattleMapKind
	cmp r0, #2
	beq .L0808D3D4
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x8d
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bge .L0808D3DC
	b .L0808D404
	.align 2, 0
.L0808D3D0: .4byte gPlaySt
.L0808D3D4:
	movs r0, #1
	negs r0, r0
	cmp r5, r0
	blt .L0808D404
.L0808D3DC:
	ldr r0, .L0808D400  @ 0x000001C3
	bl GetMsg
	adds r5, r0, #0
	adds r4, r6, #0
	adds r4, #0x34
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #4
	adds r3, r5, #0
	bl Text_InsertDrawString
	b .L0808D46E
	.align 2, 0
.L0808D400: .4byte 0x000001C3
.L0808D404:
	adds r4, r6, #0
	adds r4, #0x34
	ldr r7, .L0808D444  @ gPlaySt
	ldrh r3, [r7, #0x10]
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	ldr r0, .L0808D448  @ 0x00000539
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x12
	movs r2, #0
	bl Text_InsertDrawString
	bl GetBattleMapKind
	adds r5, r4, #0
	cmp r0, #2
	beq .L0808D44C
	movs r0, #0xe
	ldrsb r0, [r7, r0]
	bl GetChapterInfo
	adds r0, #0x8d
	ldrb r0, [r0]
	subs r3, r0, #1
	b .L0808D450
	.align 2, 0
.L0808D444: .4byte gPlaySt
.L0808D448: .4byte 0x00000539
.L0808D44C:
	movs r3, #1
	negs r3, r3
.L0808D450:
	adds r0, r4, #0
	movs r1, #0x22
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	movs r0, #0xe1
	lsls r0, r0, #1
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x2a
	movs r2, #0
	bl Text_InsertDrawString
.L0808D46E:
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #1
.L0808D474:
	strh r0, [r1]
.L0808D476:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END Init6CPI

	THUMB_FUNC_START Loop16CPI
Loop16CPI: @ 0x0808D47C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl GetCameraMovementSpeedMaybe
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, .L0808D508  @ gUnknown_08A01828
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r0, #4
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #5]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_0808BBAC
	adds r5, r0, #0
	ldr r0, .L0808D50C  @ gUnknown_08A018AC
	bl FindProc
	cmp r0, #0
	beq .L0808D4CC
	adds r1, r0, #0
	adds r1, #0x57
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L0808D4CC
	cmp r0, r5
	beq .L0808D500
.L0808D4CC:
	adds r0, r4, #0
	adds r0, #0x57
	strb r5, [r0]
	adds r0, r4, #0
	bl func_0808D200
	ldr r1, .L0808D510  @ gBmSt
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	adds r3, r4, #0
	adds r3, #0x4f
	strb r0, [r3]
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x4c
	strb r1, [r0]
	ldrb r0, [r3]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L0808D500:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D508: .4byte gUnknown_08A01828
.L0808D50C: .4byte gUnknown_08A018AC
.L0808D510: .4byte gBmSt

	THUMB_FUNC_END Loop16CPI

	THUMB_FUNC_START func_0808D514
func_0808D514: @ 0x0808D514
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r1, #0
	mov sl, r2
	ldr r1, .L0808D69C  @ gUnknown_08A01828
	lsls r0, r0, #3
	adds r0, r0, r1
	movs r1, #4
	ldrsb r1, [r0, r1]
	mov r8, r1
	ldrb r0, [r0, #5]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r9, r0
	cmp r1, #0
	bge .L0808D582
	cmp r0, #0
	bge .L0808D582
	ldr r4, .L0808D6A0  @ gBg1Tm
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r5, .L0808D6A4  @ gBg0Tm
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0x10
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, .L0808D6A8  @ gUnknown_02004254
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	movs r0, #0x12
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, .L0808D6AC  @ gUnknown_02003D54
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
.L0808D582:
	mov r0, r8
	cmp r0, #0
	ble .L0808D5D2
	mov r1, r9
	cmp r1, #0
	bge .L0808D5D2
	ldr r4, .L0808D6B0  @ gBg1Tm+0x26
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r5, .L0808D6B4  @ gBg0Tm+0x26
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0x10
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, .L0808D6A8  @ gUnknown_02004254
	adds r0, r0, r1
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	movs r0, #0x12
	subs r0, r0, r7
	lsls r0, r0, #6
	ldr r1, .L0808D6AC  @ gUnknown_02003D54
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
.L0808D5D2:
	mov r0, r8
	cmp r0, #0
	bge .L0808D62C
	mov r1, r9
	cmp r1, #0
	ble .L0808D62C
	ldr r5, .L0808D6B8  @ gBg1Tm+0x380
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, .L0808D6BC  @ gBg0Tm+0x380
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808D6C0  @ gUnknown_020044D4
	movs r4, #1
	mov r1, sl
	subs r4, r4, r1
	lsls r4, r4, #1
	adds r4, #0x14
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, .L0808D6C4  @ 0xFFFFFC80
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, .L0808D6C8  @ gUnknown_02004054
	ldr r1, .L0808D6C4  @ 0xFFFFFC80
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
.L0808D62C:
	mov r0, r8
	cmp r0, #0
	ble .L0808D686
	mov r1, r9
	cmp r1, #0
	ble .L0808D686
	ldr r5, .L0808D6CC  @ gBg1Tm+0x3A6
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, .L0808D6D0  @ gBg0Tm+0x3A6
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0808D6C0  @ gUnknown_020044D4
	movs r4, #1
	mov r1, sl
	subs r4, r4, r1
	lsls r4, r4, #1
	adds r4, #0x14
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, .L0808D6C4  @ 0xFFFFFC80
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, .L0808D6C8  @ gUnknown_02004054
	ldr r1, .L0808D6C4  @ 0xFFFFFC80
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xc
	adds r3, r7, #0
	bl TmCopyRect_thm
.L0808D686:
	movs r0, #3
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D69C: .4byte gUnknown_08A01828
.L0808D6A0: .4byte gBg1Tm
.L0808D6A4: .4byte gBg0Tm
.L0808D6A8: .4byte gUnknown_02004254
.L0808D6AC: .4byte gUnknown_02003D54
.L0808D6B0: .4byte gBg1Tm+0x26
.L0808D6B4: .4byte gBg0Tm+0x26
.L0808D6B8: .4byte gBg1Tm+0x380
.L0808D6BC: .4byte gBg0Tm+0x380
.L0808D6C0: .4byte gUnknown_020044D4
.L0808D6C4: .4byte 0xFFFFFC80
.L0808D6C8: .4byte gUnknown_02004054
.L0808D6CC: .4byte gBg1Tm+0x3A6
.L0808D6D0: .4byte gBg0Tm+0x3A6

	THUMB_FUNC_END func_0808D514

	THUMB_FUNC_START Loop26CPI
Loop26CPI: @ 0x0808D6D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L0808D718  @ gUnknown_08A019DC
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl func_0808D514
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #5
	bne .L0808D712
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L0808D712:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D718: .4byte gUnknown_08A019DC

	THUMB_FUNC_END Loop26CPI

	THUMB_FUNC_START Loop46CPI
Loop46CPI: @ 0x0808D71C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x55
	movs r5, #0
	movs r0, #1
	strb r0, [r6]
	ldr r1, .L0808D774  @ gUnknown_08A019E1
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl func_0808D514
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, #3
	bne .L0808D76C
	str r5, [r4, #0x58]
	strb r5, [r6]
	adds r0, r4, #0
	adds r0, #0x56
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L0808D76C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D774: .4byte gUnknown_08A019E1

	THUMB_FUNC_END Loop46CPI

	THUMB_FUNC_START func_0808D778
func_0808D778: @ 0x0808D778
	bx lr

	THUMB_FUNC_END func_0808D778

	THUMB_FUNC_START __malloc_unlock_0
__malloc_unlock_0: @ 0x0808D77C
	bx lr

	THUMB_FUNC_END __malloc_unlock_0

	THUMB_FUNC_START func_0808D780
func_0808D780: @ 0x0808D780
	bx lr

	THUMB_FUNC_END func_0808D780

	THUMB_FUNC_START Loop36CPI
Loop36CPI: @ 0x0808D784
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, .L0808D808  @ gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq .L0808D802
	ldr r0, .L0808D80C  @ ProcScr_CameraPan
	bl FindProc
	cmp r0, #0
	bne .L0808D7F4
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq .L0808D802
	ldr r1, .L0808D810  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r5, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #4
	ldrsb r1, [r5, r1]
	movs r0, #4
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L0808D7F4
	movs r1, #5
	ldrsb r1, [r5, r1]
	movs r0, #5
	ldrsb r0, [r2, r0]
	cmp r1, r0
	beq .L0808D802
.L0808D7F4:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L0808D802:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D808: .4byte gBmSt
.L0808D80C: .4byte ProcScr_CameraPan
.L0808D810: .4byte gUnknown_08A01828

	THUMB_FUNC_END Loop36CPI

	THUMB_FUNC_START func_0808D814
func_0808D814: @ 0x0808D814
	push {lr}
	ldr r0, .L0808D85C  @ gUnknown_08A0190C
	bl FindProc
	cmp r0, #0
	beq .L0808D82C
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L0808D858
.L0808D82C:
	ldr r0, .L0808D860  @ gUnknown_08A018AC
	bl FindProc
	cmp r0, #0
	beq .L0808D842
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L0808D858
.L0808D842:
	ldr r0, .L0808D864  @ gUnknown_08A019E4
	bl FindProc
	cmp r0, #0
	beq .L0808D868
	adds r0, #0x56
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L0808D868
.L0808D858:
	movs r0, #1
	b .L0808D86A
	.align 2, 0
.L0808D85C: .4byte gUnknown_08A0190C
.L0808D860: .4byte gUnknown_08A018AC
.L0808D864: .4byte gUnknown_08A019E4
.L0808D868:
	movs r0, #0
.L0808D86A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808D814

	THUMB_FUNC_START func_0808D870
func_0808D870: @ 0x0808D870
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808D898  @ gUnknown_08A199C8
	ldr r1, .L0808D89C  @ 0x06015000
	bl Decompress
	adds r1, r4, #0
	adds r1, #0x46
	movs r2, #0
	movs r0, #0x88
	strh r0, [r1]
	adds r1, #2
	movs r0, #0x8c
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x56
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D898: .4byte gUnknown_08A199C8
.L0808D89C: .4byte 0x06015000

	THUMB_FUNC_END func_0808D870

	THUMB_FUNC_START func_0808D8A0
func_0808D8A0: @ 0x0808D8A0
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r5, r2, #0
	ldr r0, .L0808D920  @ gUnknown_08A01828
	lsls r1, r1, #3
	adds r1, r1, r0
	movs r2, #4
	ldrsb r2, [r1, r2]
	movs r4, #5
	ldrsb r4, [r1, r4]
	cmp r2, #0
	bge .L0808D8CE
	cmp r4, #0
	bge .L0808D8CE
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strh r0, [r1]
	adds r1, r5, #0
	subs r1, #0x14
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
.L0808D8CE:
	cmp r2, #0
	ble .L0808D8E8
	cmp r4, #0
	bge .L0808D8E8
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0xac
	strh r0, [r1]
	adds r1, r5, #0
	subs r1, #0x14
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
.L0808D8E8:
	cmp r2, #0
	bge .L0808D900
	cmp r4, #0
	ble .L0808D900
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strh r0, [r1]
	movs r0, #0xa4
	subs r0, r0, r5
	adds r1, #2
	strh r0, [r1]
.L0808D900:
	cmp r2, #0
	ble .L0808D918
	cmp r4, #0
	ble .L0808D918
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0xac
	strh r0, [r1]
	movs r0, #0xa4
	subs r0, r0, r5
	adds r1, #2
	strh r0, [r1]
.L0808D918:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D920: .4byte gUnknown_08A01828

	THUMB_FUNC_END func_0808D8A0

	THUMB_FUNC_START func_0808D924
func_0808D924: @ 0x0808D924
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r6, .L0808D970  @ 0x000001FF
	adds r1, r4, #0
	ands r1, r6
	movs r0, #0xff
	ands r5, r0
	ldr r0, .L0808D974  @ Sprite_32x16
	mov r8, r0
	movs r0, #0x8a
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	mov r3, r8
	bl PutSprite
	adds r4, #0x20
	ands r4, r6
	ldr r0, .L0808D978  @ 0x00002284
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	mov r3, r8
	bl PutSprite
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D970: .4byte 0x000001FF
.L0808D974: .4byte Sprite_32x16
.L0808D978: .4byte 0x00002284

	THUMB_FUNC_END func_0808D924

	THUMB_FUNC_START func_0808D97C
func_0808D97C: @ 0x0808D97C
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetCameraMovementSpeedMaybe
	adds r1, r4, #0
	adds r1, #0x50
	movs r5, #0
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [r4, #0x58]
	adds r0, r4, #0
	bl func_0808D8A0
	str r5, [r4, #0x58]
	ldr r1, .L0808D9B4  @ gBmSt
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x4e
	strb r0, [r2]
	ldrh r0, [r1, #0x16]
	adds r4, #0x4f
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808D9B4: .4byte gBmSt

	THUMB_FUNC_END func_0808D97C

	THUMB_FUNC_START func_0808D9B8
func_0808D9B8: @ 0x0808D9B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x58]
	adds r2, #4
	str r2, [r4, #0x58]
	adds r0, #0x50
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl func_0808D8A0
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl func_0808D924
	ldr r0, [r4, #0x58]
	cmp r0, #0x18
	bne .L0808D9F6
	adds r0, r4, #0
	bl Proc_Break
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #0
	strb r0, [r1]
.L0808D9F6:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808D9B8

	THUMB_FUNC_START func_0808D9FC
func_0808D9FC: @ 0x0808D9FC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl func_0808D924
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, .L0808DA94  @ gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq .L0808DA8C
	ldr r0, .L0808DA98  @ ProcScr_CameraPan
	bl FindProc
	cmp r0, #0
	bne .L0808DA7E
	bl GetCameraMovementSpeedMaybe
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x50
	movs r3, #0
	ldrsb r3, [r0, r3]
	cmp r2, r3
	beq .L0808DA8C
	ldr r1, .L0808DA9C  @ gUnknown_08A01828
	lsls r0, r2, #3
	adds r5, r0, r1
	lsls r0, r3, #3
	adds r2, r0, r1
	movs r1, #4
	ldrsb r1, [r5, r1]
	movs r0, #4
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L0808DA7E
	movs r1, #5
	ldrsb r1, [r5, r1]
	movs r0, #5
	ldrsb r0, [r2, r0]
	cmp r1, r0
	beq .L0808DA8C
.L0808DA7E:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L0808DA8C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808DA94: .4byte gBmSt
.L0808DA98: .4byte ProcScr_CameraPan
.L0808DA9C: .4byte gUnknown_08A01828

	THUMB_FUNC_END func_0808D9FC

	THUMB_FUNC_START func_0808DAA0
func_0808DAA0: @ 0x0808DAA0
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x58]
	subs r2, #4
	str r2, [r4, #0x58]
	adds r0, #0x50
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl func_0808D8A0
	adds r0, r4, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r4, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r1, [r1, r2]
	bl func_0808D924
	ldr r1, [r4, #0x58]
	cmp r1, #0
	bne .L0808DADC
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
.L0808DADC:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808DAA0

	THUMB_FUNC_START MinimalVBlankHandler
MinimalVBlankHandler: @ 0x0808DAE4
	push {lr}
	ldr r1, .L0808DB04  @ gUnknown_03007FF8
	movs r0, #1
	strh r0, [r1]
	bl SyncDispIo
	bl SyncBgsAndPal
	bl ApplyDataMoves
	bl m4aSoundVSync
	bl m4aSoundMain
	pop {r0}
	bx r0
	.align 2, 0
.L0808DB04: .4byte gUnknown_03007FF8

	THUMB_FUNC_END MinimalVBlankHandler

	THUMB_FUNC_START func_0808DB08
func_0808DB08: @ 0x0808DB08
	push {r4, lr}
	ldr r4, .L0808DB30  @ gKeySt
	ldr r0, [r4]
	bl RefreshKeySt
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq .L0808DB24
	movs r0, #0xff
	bl SoftReset
.L0808DB24:
	bl VBlankIntrWait
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808DB30: .4byte gKeySt

	THUMB_FUNC_END func_0808DB08

	THUMB_FUNC_START func_0808DB34
func_0808DB34: @ 0x0808DB34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x7c
	add r5, sp, #0x18
	bl ResetText
	bl InitTalkTextFont
	add r7, sp, #8
	add r0, sp, #0x10
	mov r8, r0
	mov r4, sp
	movs r6, #2
.L0808DB50:
	adds r0, r4, #0
	movs r1, #0x16
	bl InitText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge .L0808DB50
	movs r1, #0
	str r1, [r5, #0x30]
	mov r0, sp
	str r0, [r5, #0x34]
	str r7, [r5, #0x38]
	mov r0, r8
	str r0, [r5, #0x3c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r1, [r0]
	ldr r0, .L0808DBC0  @ 0x0000088E
	bl GetMsg
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	bl func_08089EEC
	ldr r4, .L0808DBC4  @ gBg0Tm+0x188
	mov r0, sp
	adds r1, r4, #0
	bl PutText
	adds r1, r4, #0
	adds r1, #0xc0
	adds r0, r7, #0
	bl PutText
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r4, r4, r0
	mov r0, r8
	adds r1, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	add sp, #0x7c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808DBC0: .4byte 0x0000088E
.L0808DBC4: .4byte gBg0Tm+0x188

	THUMB_FUNC_END func_0808DB34

	THUMB_FUNC_START func_0808DBC8
func_0808DBC8: @ 0x0808DBC8
	push {r4, r5, lr}
	sub sp, #8
	movs r0, #0
	bl SetupBackgrounds
	bl m4aSoundInit
	bl InitProcs
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, .L0808DC60  @ gDispIo
	ldrb r0, [r4, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	subs r1, #0x10
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	bl SetBlendNone
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	strh r0, [r4, #0x38]
	bl SyncDispIo
	movs r4, #0
	str r4, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r5, .L0808DC64  @ 0x01000008
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, .L0808DC68  @ 0x06008000
	adds r2, r5, #0
	bl CpuFastSet
	bl func_0808DB34
	ldr r0, .L0808DC6C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808DC52
	movs r0, #0x7b
	bl m4aSongNumStart
.L0808DC52:
	ldr r0, .L0808DC70  @ func_0808DB08
	bl SetMainFunc
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808DC60: .4byte gDispIo
.L0808DC64: .4byte 0x01000008
.L0808DC68: .4byte 0x06008000
.L0808DC6C: .4byte gPlaySt
.L0808DC70: .4byte func_0808DB08

	THUMB_FUNC_END func_0808DBC8

	THUMB_FUNC_START SioLinkError
SioLinkError: @ 0x0808DC74
	push {lr}
	ldr r1, .L0808DC9C  @ 0x04000004
	movs r0, #8
	strh r0, [r1]
	ldr r1, .L0808DCA0  @ 0x04000208
	movs r0, #1
	strh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #0x13
	movs r0, #0
	strh r0, [r1]
	ldr r0, .L0808DCA4  @ MinimalVBlankHandler
	bl SetOnVBlank
	ldr r0, .L0808DCA8  @ func_0808DBC8
	bl SetMainFunc
	pop {r0}
	bx r0
	.align 2, 0
.L0808DC9C: .4byte 0x04000004
.L0808DCA0: .4byte 0x04000208
.L0808DCA4: .4byte MinimalVBlankHandler
.L0808DCA8: .4byte func_0808DBC8

	THUMB_FUNC_END SioLinkError

	THUMB_FUNC_START func_0808DCAC
func_0808DCAC: @ 0x0808DCAC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808DCC8  @ 0x06015000
	movs r1, #6
	bl LoadHelpBoxGfx
	ldr r0, .L0808DCCC  @ gUnknown_08A01D18
	adds r1, r4, #0
	bl StartMoveableHelpBox
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808DCC8: .4byte 0x06015000
.L0808DCCC: .4byte gUnknown_08A01D18

	THUMB_FUNC_END func_0808DCAC

	THUMB_FUNC_START func_0808DCD0
func_0808DCD0: @ 0x0808DCD0
	push {r4, lr}
	movs r4, #1
.L0808DCD4:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L0808DCEA
	ldr r0, [r1]
	cmp r0, #0
	beq .L0808DCEA
	adds r0, r1, #0
	b .L0808DCF2
.L0808DCEA:
	adds r4, #1
	cmp r4, #0x3f
	ble .L0808DCD4
	movs r0, #0
.L0808DCF2:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808DCD0

	THUMB_FUNC_START func_0808DCF8
func_0808DCF8: @ 0x0808DCF8
	push {r4, lr}
	movs r2, #0
	ldr r0, .L0808DD14  @ gPlaySt
	ldrb r0, [r0, #0xe]
	subs r0, #0xd
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x14
	bhi .L0808DD84
	lsls r0, r0, #2
	ldr r1, .L0808DD18  @ .L0808DD1C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808DD14: .4byte gPlaySt
.L0808DD18: .4byte .L0808DD1C
.L0808DD1C: @ jump table
	.4byte .L0808DD70 @ case 0
	.4byte .L0808DD84 @ case 1
	.4byte .L0808DD74 @ case 2
	.4byte .L0808DD84 @ case 3
	.4byte .L0808DD84 @ case 4
	.4byte .L0808DD84 @ case 5
	.4byte .L0808DD84 @ case 6
	.4byte .L0808DD7C @ case 7
	.4byte .L0808DD84 @ case 8
	.4byte .L0808DD84 @ case 9
	.4byte .L0808DD84 @ case 10
	.4byte .L0808DD84 @ case 11
	.4byte .L0808DD84 @ case 12
	.4byte .L0808DD84 @ case 13
	.4byte .L0808DD84 @ case 14
	.4byte .L0808DD78 @ case 15
	.4byte .L0808DD84 @ case 16
	.4byte .L0808DD84 @ case 17
	.4byte .L0808DD84 @ case 18
	.4byte .L0808DD84 @ case 19
	.4byte .L0808DD7C @ case 20
.L0808DD70:
	movs r0, #0x51
	b .L0808DD7E
.L0808DD74:
	movs r0, #0x43
	b .L0808DD7E
.L0808DD78:
	movs r0, #0x53
	b .L0808DD7E
.L0808DD7C:
	movs r0, #0x41
.L0808DD7E:
	bl GetUnitByPid
	adds r2, r0, #0
.L0808DD84:
	cmp r2, #0
	beq .L0808DD8C
.L0808DD88:
	adds r0, r2, #0
	b .L0808DDBA
.L0808DD8C:
	movs r4, #0x81
.L0808DD8E:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L0808DDB2
	ldr r1, [r2]
	cmp r1, #0
	beq .L0808DDB2
	ldr r0, [r2, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	bne .L0808DD88
.L0808DDB2:
	adds r4, #1
	cmp r4, #0xbf
	ble .L0808DD8E
	movs r0, #0
.L0808DDBA:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808DCF8

	THUMB_FUNC_START func_0808DDC0
func_0808DDC0: @ 0x0808DDC0
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0x81
.L0808DDC6:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq .L0808DDEA
	ldr r1, [r0]
	cmp r1, #0
	beq .L0808DDEA
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x28]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	beq .L0808DDEA
	adds r5, #1
.L0808DDEA:
	adds r4, #1
	cmp r4, #0xbf
	ble .L0808DDC6
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808DDC0

	THUMB_FUNC_START CountUnitsByFaction
CountUnitsByFaction: @ 0x0808DDF8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #1
	b .L0808DE24
.L0808DE02:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L0808DE20
	ldr r0, [r1]
	cmp r0, #0
	beq .L0808DE20
	ldr r0, [r1, #0xc]
	ldr r1, .L0808DE34  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne .L0808DE20
	adds r6, #1
.L0808DE20:
	adds r4, #1
	adds r0, r5, #0
.L0808DE24:
	adds r0, #0x40
	cmp r4, r0
	blt .L0808DE02
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L0808DE34: .4byte 0x0001000C

	THUMB_FUNC_END CountUnitsByFaction

	THUMB_FUNC_START func_0808DE38
func_0808DE38: @ 0x0808DE38
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r0, .L0808DEB4  @ gUnknown_08A2E8F0
	adds r0, #0x5e
	ldrh r5, [r0]
	ldr r6, .L0808DEB8  @ gPal+0x2FC
	adds r3, r2, #0
	adds r3, #0x40
	ldrb r0, [r3]
	lsrs r4, r0, #1
	movs r1, #0x1f
	ands r4, r1
	adds r0, #1
	strb r0, [r3]
	cmp r4, #0x10
	ble .L0808DE60
	movs r0, #0xf
	ands r0, r4
	movs r1, #0x10
	subs r4, r1, r0
.L0808DE60:
	adds r1, r2, #0
	adds r1, #0x2e
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r2, [r0]
	cmp r1, r2
	beq .L0808DE76
	strb r1, [r0]
	movs r0, #0
	strb r0, [r3]
.L0808DE76:
	movs r3, #0x1f
	movs r0, #0x1f
	ands r0, r5
	movs r2, #0x10
	subs r2, r2, r4
	adds r1, r0, #0
	muls r1, r2, r1
	asrs r1, r1, #4
	ands r1, r3
	movs r3, #0xf8
	lsls r3, r3, #2
	adds r0, r5, #0
	ands r0, r3
	muls r0, r2, r0
	asrs r0, r0, #4
	ands r0, r3
	adds r1, r1, r0
	movs r3, #0xf8
	lsls r3, r3, #7
	ands r5, r3
	adds r0, r5, #0
	muls r0, r2, r0
	asrs r0, r0, #4
	ands r0, r3
	adds r1, r1, r0
	strh r1, [r6]
	bl EnablePalSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808DEB4: .4byte gUnknown_08A2E8F0
.L0808DEB8: .4byte gPal+0x2FC

	THUMB_FUNC_END func_0808DE38

	THUMB_FUNC_START func_0808DEBC
func_0808DEBC: @ 0x0808DEBC
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	cmp r1, #0
	beq .L0808DEDA
	ldrb r0, [r1]
	cmp r0, #0
	beq .L0808DEDA
.L0808DECC:
	ldrb r0, [r1]
	cmp r0, #0
	beq .L0808DEDA
	cmp r0, #1
	bne .L0808DEDE
	adds r0, r1, #1
	b .L0808DEEA
.L0808DEDA:
	movs r0, #0
	b .L0808DEEA
.L0808DEDE:
	adds r0, r1, #0
	mov r1, sp
	bl GetCharTextLen
	adds r1, r0, #0
	b .L0808DECC
.L0808DEEA:
	add sp, #4
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808DEBC

	THUMB_FUNC_START func_0808DEF0
func_0808DEF0: @ 0x0808DEF0
	push {lr}
	sub sp, #4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0808DF18
	movs r0, #0
	str r0, [sp]
	ldr r1, .L0808DF10  @ gPal+0x3A0
	ldr r2, .L0808DF14  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	b .L0808DF1C
	.align 2, 0
.L0808DF10: .4byte gPal+0x3A0
.L0808DF14: .4byte 0x01000008
.L0808DF18:
	bl ApplyUnitSpritePalettes
.L0808DF1C:
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808DEF0

	THUMB_FUNC_START func_0808DF24
func_0808DF24: @ 0x0808DF24
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	ldr r4, .L0808E060  @ gDispIo
	ldrb r0, [r4, #0xc]
	mov r9, r0
	movs r5, #4
	negs r5, r5
	ldrb r0, [r4, #0x10]
	adds r2, r5, #0
	ands r2, r0
	movs r6, #1
	mov r8, r6
	mov r0, r8
	orrs r2, r0
	ldrb r0, [r4, #0x14]
	adds r1, r5, #0
	ands r1, r0
	movs r6, #2
	mov ip, r6
	mov r0, ip
	orrs r1, r0
	ldrb r3, [r4, #0x18]
	movs r0, #3
	orrs r3, r0
	adds r0, r5, #0
	mov r6, r9
	ands r0, r6
	strb r0, [r4, #0xc]
	ands r2, r5
	mov r0, r8
	orrs r2, r0
	strb r2, [r4, #0x10]
	ands r1, r5
	mov r6, ip
	orrs r1, r6
	strb r1, [r4, #0x14]
	ands r3, r5
	orrs r3, r6
	strb r3, [r4, #0x18]
	bl ResetText
	bl LoadUiFrameGraphics
	movs r5, #0
	movs r0, #0
	strh r0, [r7, #0x3c]
	adds r0, r7, #0
	adds r0, #0x3e
	strb r5, [r0]
	subs r0, #0x14
	strb r5, [r0]
	ldr r4, .L0808E064  @ 0x0000FFFE
	ldr r2, .L0808E068  @ 0x0000FFFC
	movs r0, #0
	adds r1, r4, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	ldr r2, .L0808E06C  @ 0x0000FFDC
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl ClearBg0Bg1
	ldr r0, .L0808E070  @ gUiFramePaletteA
	movs r1, #0x40
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, .L0808E074  @ gUnknown_08A2E5EC
	ldr r1, .L0808E078  @ 0x06005800
	bl Decompress
	ldr r0, .L0808E07C  @ gUnknown_08A2E4C4
	ldr r4, .L0808E080  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L0808E084  @ gBg2Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L0808E088  @ gUnknown_08A2D32C
	ldr r1, .L0808E08C  @ 0x06013000
	bl Decompress
	ldr r0, .L0808E090  @ gUnknown_08A2E1B8
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L0808E094  @ gUnknown_08A2E1F8
	ldr r1, .L0808E098  @ 0x06013300
	bl Decompress
	bl SetBlendNone
	movs r0, #0xf
	bl EnableBgSync
	adds r0, r7, #0
	adds r0, #0x2d
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #0x12
	strb r5, [r0]
	bl GetPlayerLeaderPid
	bl GetUnitByPid
	str r0, [r7, #0x34]
	movs r0, #0
	bl CountUnitsByFaction
	adds r1, r7, #0
	adds r1, #0x30
	strb r0, [r1]
	bl GetGlobalCompletionCount
	adds r1, r7, #0
	adds r1, #0x2b
	strb r0, [r1]
	ldr r2, [r7, #0x34]
	ldr r1, [r2, #0xc]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0808E09C
	movs r0, #3
	negs r0, r0
	ands r1, r0
	str r1, [r2, #0xc]
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	b .L0808E0A2
	.align 2, 0
.L0808E060: .4byte gDispIo
.L0808E064: .4byte 0x0000FFFE
.L0808E068: .4byte 0x0000FFFC
.L0808E06C: .4byte 0x0000FFDC
.L0808E070: .4byte gUiFramePaletteA
.L0808E074: .4byte gUnknown_08A2E5EC
.L0808E078: .4byte 0x06005800
.L0808E07C: .4byte gUnknown_08A2E4C4
.L0808E080: .4byte gBuf
.L0808E084: .4byte gBg2Tm
.L0808E088: .4byte gUnknown_08A2D32C
.L0808E08C: .4byte 0x06013000
.L0808E090: .4byte gUnknown_08A2E1B8
.L0808E094: .4byte gUnknown_08A2E1F8
.L0808E098: .4byte 0x06013300
.L0808E09C:
	adds r0, r7, #0
	adds r0, #0x29
	strb r5, [r0]
.L0808E0A2:
	bl func_0808DDC0
	cmp r0, #0
	beq .L0808E0AE
	bl func_0808DCF8
.L0808E0AE:
	str r0, [r7, #0x38]
	movs r0, #0x80
	bl CountUnitsByFaction
	adds r1, r7, #0
	adds r1, #0x31
	strb r0, [r1]
	bl ApplyUnitSpritePalettes
	adds r4, r7, #0
	adds r4, #0x34
	movs r5, #1
.L0808E0C6:
	ldr r0, [r4]
	cmp r0, #0
	beq .L0808E0D4
	bl GetUnitSpriteId
	bl UseUnitSprite
.L0808E0D4:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge .L0808E0C6
	bl ForceSyncUnitSpriteSheet
	ldr r6, .L0808E190  @ gDispIo
	ldrb r0, [r6, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x48
	strb r0, [r1]
	adds r3, r6, #0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r5, #1
	orrs r0, r5
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r2, #8
	orrs r0, r2
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3]
	adds r3, #2
	ldrb r0, [r3]
	orrs r0, r5
	movs r5, #3
	negs r5, r5
	ands r0, r5
	orrs r0, r4
	orrs r0, r2
	orrs r0, r1
	strb r0, [r3]
	adds r0, r7, #0
	movs r1, #0
	movs r2, #0xe
	bl StartScreenMenuScrollingBg
	ldr r0, .L0808E194  @ gUnknown_08B1754C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #0xc8
	movs r1, #0x12
	movs r2, #2
	adds r3, r7, #0
	bl ShowRIsInfo
	ldr r0, .L0808E198  @ gUnknown_08A01CA4
	adds r1, r7, #0
	bl SpawnProc
	ldrb r1, [r6, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	ands r0, r5
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r6, #1]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E190: .4byte gDispIo
.L0808E194: .4byte gUnknown_08B1754C
.L0808E198: .4byte gUnknown_08A01CA4

	THUMB_FUNC_END func_0808DF24

	THUMB_FUNC_START func_0808E19C
func_0808E19C: @ 0x0808E19C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, .L0808E22C  @ gUnknown_02004BBC
	ldr r0, .L0808E230  @ gBg0Tm+0x272
	movs r1, #3
	movs r2, #3
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r5, #0
	adds r0, #8
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	cmp r6, #0
	bne .L0808E1CC
	b .L0808E318
.L0808E1CC:
	ldr r0, [r6, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq .L0808E238
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0x82
	bl Text_SetCursor
	ldr r4, .L0808E234  @ 0x00000535
	adds r0, r4, #0
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xa2
	bl Text_SetCursor
	adds r0, r4, #0
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xba
	bl Text_SetCursor
	adds r0, r4, #0
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	movs r0, #1
	bl func_0808DEF0
	b .L0808E364
	.align 2, 0
.L0808E22C: .4byte gUnknown_02004BBC
.L0808E230: .4byte gBg0Tm+0x272
.L0808E234: .4byte 0x00000535
.L0808E238:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r6]
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x30
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0x8a
	bl Text_SetCursor
	movs r1, #8
	ldrsb r1, [r6, r1]
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble .L0808E2A4
	adds r0, r5, #0
	movs r1, #0xa2
	bl Text_SetCursor
	ldr r0, .L0808E2A0  @ 0x00000535
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	b .L0808E2BA
	.align 2, 0
.L0808E2A0: .4byte 0x00000535
.L0808E2A4:
	adds r0, r5, #0
	movs r1, #0xaa
	bl Text_SetCursor
	adds r0, r6, #0
	bl GetUnitCurrentHp
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
.L0808E2BA:
	adds r0, r6, #0
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble .L0808E2E0
	adds r0, r5, #0
	movs r1, #0xba
	bl Text_SetCursor
	ldr r0, .L0808E2DC  @ 0x00000535
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	b .L0808E2F6
	.align 2, 0
.L0808E2DC: .4byte 0x00000535
.L0808E2E0:
	adds r0, r5, #0
	movs r1, #0xc2
	bl Text_SetCursor
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawNumberOrBlank
.L0808E2F6:
	adds r0, r6, #0
	bl GetUnitChibiFid
	ldr r1, .L0808E314  @ gBg0Tm+0x272
	movs r2, #0xa0
	lsls r2, r2, #2
	movs r3, #0
	str r3, [sp]
	movs r3, #4
	bl PutFaceChibi
	movs r0, #0
	bl func_0808DEF0
	b .L0808E364
	.align 2, 0
.L0808E314: .4byte gBg0Tm+0x272
.L0808E318:
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0x82
	bl Text_SetCursor
	ldr r4, .L0808E3CC  @ 0x00000535
	adds r0, r4, #0
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xa2
	bl Text_SetCursor
	adds r0, r4, #0
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0xba
	bl Text_SetCursor
	adds r0, r4, #0
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
.L0808E364:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0xb3
	bl Text_SetCursor
	ldr r0, .L0808E3D0  @ 0x00000539
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	movs r0, #1
	bl EnableBgSync
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E3CC: .4byte 0x00000535
.L0808E3D0: .4byte 0x00000539

	THUMB_FUNC_END func_0808E19C

	THUMB_FUNC_START func_0808E3D4
func_0808E3D4: @ 0x0808E3D4
	ldr r2, .L0808E3F0  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L0808E3F0: .4byte gDispIo

	THUMB_FUNC_END func_0808E3D4

	THUMB_FUNC_START func_0808E3F4
func_0808E3F4: @ 0x0808E3F4
	push {r4, lr}
	ldr r0, .L0808E430  @ Pal_SystemText
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L0808E434  @ gUnknown_02004BC4
	ldr r1, .L0808E438  @ 0x06017800
	adds r0, r4, #0
	movs r2, #0x1a
	bl InitSpriteTextFont
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	subs r4, #8
	adds r0, r4, #0
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E430: .4byte Pal_SystemText
.L0808E434: .4byte gUnknown_02004BC4
.L0808E438: .4byte 0x06017800

	THUMB_FUNC_END func_0808E3F4

	THUMB_FUNC_START func_0808E43C
func_0808E43C: @ 0x0808E43C
	push {r4, r5, lr}
	ldr r5, .L0808E4A0  @ gBg0Tm+0x380
	adds r0, r5, #0
	movs r1, #0xf
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r5, #0
	adds r0, #0x18
	ldr r1, .L0808E4A4  @ gPlaySt
	ldrh r2, [r1, #0x10]
	movs r1, #2
	bl PutNumber
	adds r4, r5, #0
	adds r4, #0x96
	bl GetGold
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	adds r0, r5, #0
	adds r0, #0x98
	movs r1, #3
	movs r2, #0x1e
	bl PutSpecialChar
	ldr r1, .L0808E4A8  @ 0xFFFFFEE2
	adds r0, r5, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	adds r0, r5, #0
	subs r0, #0x9e
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl PutTwoSpecialChar
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E4A0: .4byte gBg0Tm+0x380
.L0808E4A4: .4byte gPlaySt
.L0808E4A8: .4byte 0xFFFFFEE2

	THUMB_FUNC_END func_0808E43C

	THUMB_FUNC_START func_0808E4AC
func_0808E4AC: @ 0x0808E4AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, .L0808E504  @ gUnknown_08A01B3C
	bl InitTextList
	adds r0, r6, #0
	bl func_0808E3F4
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	lsls r1, r1, #2
	adds r0, #6
	adds r0, r0, r1
	ldr r0, [r0]
	bl func_0808E19C
	ldr r4, .L0808E508  @ gBg1Tm+0x148
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r2, [r0]
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	ldr r0, .L0808E50C  @ gPlaySt
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	beq .L0808E510
	adds r0, r4, #0
	adds r0, #0xe
	movs r1, #2
	movs r2, #0x14
	bl PutSpecialChar
	adds r0, r4, #0
	adds r0, #0x10
	movs r1, #2
	movs r2, #0x14
	bl PutSpecialChar
	b .L0808E520
	.align 2, 0
.L0808E504: .4byte gUnknown_08A01B3C
.L0808E508: .4byte gBg1Tm+0x148
.L0808E50C: .4byte gPlaySt
.L0808E510:
	adds r0, r4, #0
	adds r0, #0xe
	adds r1, r6, #0
	adds r1, #0x31
	ldrb r2, [r1]
	movs r1, #2
	bl PutNumber
.L0808E520:
	adds r4, r6, #0
	adds r4, #0x2c
	movs r0, #1
	strb r0, [r4]
	bl GetBattleMapKind
	mov r8, r4
	cmp r0, #2
	beq .L0808E548
	ldr r0, .L0808E544  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x88
	ldrh r0, [r0]
	b .L0808E54C
	.align 2, 0
.L0808E544: .4byte gPlaySt
.L0808E548:
	movs r0, #0xe0
	lsls r0, r0, #1
.L0808E54C:
	bl GetMsg
	adds r5, r0, #0
	ldr r7, .L0808E5B4  @ gUnknown_02004BAC
	movs r0, #0x60
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r7, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl func_0808DEBC
	adds r5, r0, #0
	cmp r5, #0
	beq .L0808E592
	adds r4, r7, #0
	adds r4, #8
	movs r0, #0x60
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	movs r0, #2
	mov r1, r8
	strb r0, [r1]
.L0808E592:
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #2
	bne .L0808E5BC
	ldr r4, .L0808E5B8  @ gBg0Tm+0x282
	adds r0, r7, #0
	adds r1, r4, #0
	bl PutText
	adds r0, r7, #0
	adds r0, #8
	adds r4, #0x80
	adds r1, r4, #0
	bl PutText
	b .L0808E5C4
	.align 2, 0
.L0808E5B4: .4byte gUnknown_02004BAC
.L0808E5B8: .4byte gBg0Tm+0x282
.L0808E5BC:
	ldr r1, .L0808E5FC  @ gBg0Tm+0x2C2
	adds r0, r7, #0
	bl PutText
.L0808E5C4:
	adds r4, r6, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	cmp r0, #0
	beq .L0808E5E6
	ldr r0, .L0808E600  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne .L0808E5E6
	ldr r0, .L0808E604  @ gBg0Tm+0x34
	ldrb r2, [r4]
	adds r2, #1
	movs r1, #0
	bl PutNumberOrBlank
.L0808E5E6:
	bl func_0808E43C
	movs r0, #1
	bl EnableBgSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E5FC: .4byte gBg0Tm+0x2C2
.L0808E600: .4byte gPlaySt
.L0808E604: .4byte gBg0Tm+0x34

	THUMB_FUNC_END func_0808E4AC

	THUMB_FUNC_START func_0808E608
func_0808E608: @ 0x0808E608
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x2e
	ldrb r7, [r3]
	adds r4, r5, #0
	adds r4, #0x3e
	movs r0, #0
	strb r0, [r4]
	ldr r1, .L0808E638  @ gKeySt
	ldr r6, [r1]
	ldrh r2, [r6, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	mov ip, r1
	cmp r0, #0
	beq .L0808E63C
	movs r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	bl func_0808DCAC
	b .L0808E710
	.align 2, 0
.L0808E638: .4byte gKeySt
.L0808E63C:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq .L0808E690
	ldrb r1, [r3]
	lsls r1, r1, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r2, [r0]
	cmp r2, #0
	beq .L0808E670
	ldr r0, [r2, #0xc]
	movs r1, #0xa0
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne .L0808E670
	movs r0, #0xb
	ldrsb r0, [r2, r0]
	bl SetLastStatScreenUid
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
.L0808E670:
	ldr r0, .L0808E68C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808E682
	movs r0, #0x6a
	bl m4aSongNumStart
.L0808E682:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b .L0808E710
	.align 2, 0
.L0808E68C: .4byte gPlaySt
.L0808E690:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L0808E6B8
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0808E6B4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808E710
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0808E710
	.align 2, 0
.L0808E6B4: .4byte gPlaySt
.L0808E6B8:
	ldrh r1, [r6, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L0808E6CC
	ldrb r0, [r3]
	cmp r0, #0
	beq .L0808E6CC
	subs r0, #1
	strb r0, [r3]
.L0808E6CC:
	mov r1, ip
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x2e
	cmp r0, #0
	beq .L0808E6E8
	ldrb r0, [r4]
	cmp r0, #0
	bne .L0808E6E8
	adds r0, #1
	strb r0, [r4]
.L0808E6E8:
	ldrb r0, [r4]
	cmp r0, r7
	beq .L0808E710
	ldr r0, .L0808E718  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808E700
	movs r0, #0x66
	bl m4aSongNumStart
.L0808E700:
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r1, r5, #0
	adds r1, #0x34
	adds r1, r1, r0
	ldr r0, [r1]
	bl func_0808E19C
.L0808E710:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E718: .4byte gPlaySt

	THUMB_FUNC_END func_0808E608

	THUMB_FUNC_START func_0808E71C
func_0808E71C: @ 0x0808E71C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808E744  @ gUnknown_08A01CA4
	bl EndEachProc
	bl HideRIsInfo
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0808E73E
	ldr r0, [r4, #0x34]
	ldr r1, [r0, #0xc]
	movs r2, #2
	orrs r1, r2
	str r1, [r0, #0xc]
.L0808E73E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E744: .4byte gUnknown_08A01CA4

	THUMB_FUNC_END func_0808E71C

	THUMB_FUNC_START func_0808E748
func_0808E748: @ 0x0808E748
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0808E75A
	ldr r0, .L0808E760  @ gUnknown_0859AE18
	bl SpawnProcLocking
.L0808E75A:
	pop {r0}
	bx r0
	.align 2, 0
.L0808E760: .4byte gUnknown_0859AE18

	THUMB_FUNC_END func_0808E748

	THUMB_FUNC_START StartChapterStatusScreen
StartChapterStatusScreen: @ 0x0808E764
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	beq .L0808E784
	ldr r0, .L0808E780  @ gUnknown_08A01B54
	adds r1, r4, #0
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r1, #0x3f
	movs r0, #0
	strb r0, [r1]
	b .L0808E790
	.align 2, 0
.L0808E780: .4byte gUnknown_08A01B54
.L0808E784:
	ldr r0, .L0808E798  @ gUnknown_08A01B54
	movs r1, #3
	bl SpawnProc
	adds r0, #0x3f
	strb r4, [r0]
.L0808E790:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E798: .4byte gUnknown_08A01B54

	THUMB_FUNC_END StartChapterStatusScreen

	THUMB_FUNC_START func_0808E79C
func_0808E79C: @ 0x0808E79C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L0808E7B0  @ gUnknown_08A01C04
	bl SpawnProcLocking
	adds r0, #0x3f
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
.L0808E7B0: .4byte gUnknown_08A01C04

	THUMB_FUNC_END func_0808E79C

	THUMB_FUNC_START func_0808E7B4
func_0808E7B4: @ 0x0808E7B4
	push {r4, lr}
	adds r4, r0, #0
	bl LoadObjUiGfx
	ldr r0, .L0808E804  @ gUnknown_08A2E4A4
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0808E808  @ gUnknown_08A2E8F0
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0808E80C  @ gUnknown_08A2E214
	ldr r1, .L0808E810  @ 0x06016800
	bl Decompress
	adds r4, #0x64
	movs r0, #0
	strh r0, [r4]
	movs r0, #0x80
	movs r1, #0x13
	bl func_080895B4
	movs r4, #0xb8
	lsls r4, r4, #4
	ldr r0, .L0808E814  @ gPlaySt
	bl func_0808979C
	adds r1, r0, #0
	adds r0, r4, #0
	bl LoadChapterTitleGfx
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E804: .4byte gUnknown_08A2E4A4
.L0808E808: .4byte gUnknown_08A2E8F0
.L0808E80C: .4byte gUnknown_08A2E214
.L0808E810: .4byte 0x06016800
.L0808E814: .4byte gPlaySt

	THUMB_FUNC_END func_0808E7B4

	THUMB_FUNC_START func_0808E818
func_0808E818: @ 0x0808E818
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r7, [r0, #0x14]
	ldr r3, .L0808E990  @ gUnknown_08A01B18
	ldr r0, .L0808E994  @ 0x00008580
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #3
	bl PutSprite
	ldr r3, .L0808E998  @ gUnknown_08A01B2C
	ldr r0, .L0808E99C  @ 0x00009580
	str r0, [sp]
	movs r0, #4
	movs r1, #0x96
	movs r2, #0x7c
	bl PutSprite
	adds r0, r7, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0808E862
	ldr r3, .L0808E9A0  @ gUnknown_08A01C7C
	movs r0, #0xde
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #0xb
	bl PutSprite
.L0808E862:
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #3
	ldr r3, .L0808E9A4  @ gUnknown_08A01AE6
	movs r0, #0xeb
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r2, #0x2c
	bl PutSprite
	ldr r3, .L0808E9A8  @ gUnknown_08A01AAC
	movs r4, #0
	str r4, [sp]
	movs r0, #4
	movs r1, #8
	movs r2, #0x25
	bl PutSprite
	ldr r3, .L0808E9AC  @ gUnknown_08A01ABA
	str r4, [sp]
	movs r0, #4
	movs r1, #0x40
	movs r2, #0x25
	bl PutSprite
	ldr r3, .L0808E9B0  @ gUnknown_08A01AD6
	str r4, [sp]
	movs r0, #4
	movs r1, #0x12
	movs r2, #0x73
	bl PutSprite
	ldr r3, .L0808E9B4  @ gUnknown_08A01ADE
	str r4, [sp]
	movs r0, #4
	movs r1, #0x12
	movs r2, #0x83
	bl PutSprite
	ldr r3, .L0808E9B8  @ gUnknown_08A01AC8
	str r4, [sp]
	movs r0, #4
	movs r1, #0x1c
	movs r2, #0x43
	bl PutSprite
	mov r8, r5
	movs r0, #0x34
	adds r0, r0, r7
	mov r9, r0
	movs r1, #0x2b
	adds r1, r1, r7
	mov sl, r1
	ldr r6, .L0808E9BC  @ 0x0000A3C0
	movs r5, #0xa0
	movs r4, #1
.L0808E8DA:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x3c
	ldr r3, .L0808E9C0  @ Sprite_32x16
	bl PutSprite
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L0808E8DA
	ldr r3, .L0808E9C0  @ Sprite_32x16
	ldr r0, .L0808E9C4  @ 0x0000A3D0
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb4
	movs r2, #0x4b
	bl PutSprite
	ldr r6, .L0808E9C8  @ 0x0000A3D4
	movs r5, #0x9c
	movs r4, #1
.L0808E908:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x5b
	ldr r3, .L0808E9C0  @ Sprite_32x16
	bl PutSprite
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L0808E908
	ldr r4, .L0808E9CC  @ gBg0Tm+0x426
	bl GetGameTime
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl PutTime
	movs r0, #1
	bl EnableBgSync
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #2
	add r0, r9
	ldr r3, [r0]
	cmp r3, #0
	beq .L0808E950
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x3d
	bl PutUnitSprite
.L0808E950:
	bl SyncUnitSpriteSheet
	mov r1, sl
	ldrb r0, [r1]
	cmp r0, #0
	beq .L0808E97A
	ldr r0, .L0808E9D0  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne .L0808E97A
	ldr r3, .L0808E9D4  @ gUnknown_08A01AA4
	str r0, [sp]
	movs r0, #4
	movs r1, #0xdb
	movs r2, #3
	bl PutSprite
.L0808E97A:
	adds r0, r7, #0
	bl func_0808DE38
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808E990: .4byte gUnknown_08A01B18
.L0808E994: .4byte 0x00008580
.L0808E998: .4byte gUnknown_08A01B2C
.L0808E99C: .4byte 0x00009580
.L0808E9A0: .4byte gUnknown_08A01C7C
.L0808E9A4: .4byte gUnknown_08A01AE6
.L0808E9A8: .4byte gUnknown_08A01AAC
.L0808E9AC: .4byte gUnknown_08A01ABA
.L0808E9B0: .4byte gUnknown_08A01AD6
.L0808E9B4: .4byte gUnknown_08A01ADE
.L0808E9B8: .4byte gUnknown_08A01AC8
.L0808E9BC: .4byte 0x0000A3C0
.L0808E9C0: .4byte Sprite_32x16
.L0808E9C4: .4byte 0x0000A3D0
.L0808E9C8: .4byte 0x0000A3D4
.L0808E9CC: .4byte gBg0Tm+0x426
.L0808E9D0: .4byte gPlaySt
.L0808E9D4: .4byte gUnknown_08A01AA4

	THUMB_FUNC_END func_0808E818

	THUMB_FUNC_START func_0808E9D8
func_0808E9D8: @ 0x0808E9D8
	ldr r3, .L0808E9E8  @ gUnknown_0203E82C
	lsls r0, r0, #0xa
	ldr r1, [r3, #0x48]
	ldr r2, .L0808E9EC  @ 0x000003FF
	ands r1, r2
	orrs r1, r0
	str r1, [r3, #0x48]
	bx lr
	.align 2, 0
.L0808E9E8: .4byte gUnknown_0203E82C
.L0808E9EC: .4byte 0x000003FF

	THUMB_FUNC_END func_0808E9D8

	THUMB_FUNC_START func_0808E9F0
func_0808E9F0: @ 0x0808E9F0
	push {r4, lr}
	ldr r4, .L0808EA10  @ gUnknown_0203E82C
	ldr r3, [r4, #0x48]
	lsrs r2, r3, #0xa
	ldr r1, .L0808EA14  @ 0x003FFFFF
	ands r1, r0
	orrs r2, r1
	lsls r2, r2, #0xa
	ldr r0, .L0808EA18  @ 0x000003FF
	ands r0, r3
	orrs r0, r2
	str r0, [r4, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808EA10: .4byte gUnknown_0203E82C
.L0808EA14: .4byte 0x003FFFFF
.L0808EA18: .4byte 0x000003FF

	THUMB_FUNC_END func_0808E9F0

	THUMB_FUNC_START func_0808EA1C
func_0808EA1C: @ 0x0808EA1C
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808EA3C
	adds r1, r0, #0
	ldr r0, .L0808EA38  @ 0x003FFFFF
	eors r0, r4
	ands r0, r1
	bl func_0808E9D8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808EA38: .4byte 0x003FFFFF

	THUMB_FUNC_END func_0808EA1C

	THUMB_FUNC_START func_0808EA3C
func_0808EA3C: @ 0x0808EA3C
	ldr r0, .L0808EA44  @ gUnknown_0203E82C
	ldr r0, [r0, #0x48]
	lsrs r0, r0, #0xa
	bx lr
	.align 2, 0
.L0808EA44: .4byte gUnknown_0203E82C

	THUMB_FUNC_END func_0808EA3C

	THUMB_FUNC_START func_0808EA48
func_0808EA48: @ 0x0808EA48
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0x20
	orrs r1, r2
	ldr r2, .L0808EA64  @ gUnknown_0203E82C
	lsls r1, r1, #8
	adds r1, #0x40
	adds r0, r0, r1
	adds r2, #0x4c
	strh r0, [r2]
	bx lr
	.align 2, 0
.L0808EA64: .4byte gUnknown_0203E82C

	THUMB_FUNC_END func_0808EA48

	THUMB_FUNC_START func_0808EA68
func_0808EA68: @ 0x0808EA68
	ldr r0, .L0808EA70  @ gUnknown_0203E82C
	adds r0, #0x4c
	ldrh r0, [r0]
	bx lr
	.align 2, 0
.L0808EA70: .4byte gUnknown_0203E82C

	THUMB_FUNC_END func_0808EA68

	THUMB_FUNC_START func_0808EA74
func_0808EA74: @ 0x0808EA74
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	ldr r2, .L0808EA88  @ gUnknown_0203E82C
	lsrs r1, r1, #8
	adds r0, r0, r1
	adds r2, #0x4e
	strh r0, [r2]
	bx lr
	.align 2, 0
.L0808EA88: .4byte gUnknown_0203E82C

	THUMB_FUNC_END func_0808EA74

	THUMB_FUNC_START func_0808EA8C
func_0808EA8C: @ 0x0808EA8C
	ldr r0, .L0808EA94  @ gUnknown_0203E82C
	adds r0, #0x4e
	ldrh r0, [r0]
	bx lr
	.align 2, 0
.L0808EA94: .4byte gUnknown_0203E82C

	THUMB_FUNC_END func_0808EA8C

	THUMB_FUNC_START func_0808EA98
func_0808EA98: @ 0x0808EA98
	push {r4, r5, lr}
	ldr r0, .L0808EAF8  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0xa0
	bls .L0808EAAA
	movs r4, #0
.L0808EAAA:
	ldr r0, .L0808EAFC  @ gUnknown_0203E82C
	adds r5, r0, #0
	adds r5, #0x48
	ldrb r0, [r5]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x18
	subs r0, #0x20
	cmp r4, r0
	bne .L0808EACC
	bl func_0808EA68
	ldr r1, .L0808EB00  @ 0x04000050
	strh r0, [r1]
	bl func_0808EA8C
	ldr r1, .L0808EB04  @ 0x04000052
	strh r0, [r1]
.L0808EACC:
	cmp r4, #0
	beq .L0808EADE
	ldrh r0, [r5]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	lsls r0, r0, #3
	adds r0, #4
	cmp r4, r0
	bne .L0808EAF2
.L0808EADE:
	ldr r1, .L0808EB00  @ 0x04000050
	ldr r2, .L0808EB08  @ gDispIo+0x3C
	ldrh r0, [r2]
	strh r0, [r1]
	ldr r3, .L0808EB04  @ 0x04000052
	ldrb r1, [r2, #8]
	ldrb r0, [r2, #9]
	lsls r0, r0, #8
	adds r1, r1, r0
	strh r1, [r3]
.L0808EAF2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808EAF8: .4byte 0x04000006
.L0808EAFC: .4byte gUnknown_0203E82C
.L0808EB00: .4byte 0x04000050
.L0808EB04: .4byte 0x04000052
.L0808EB08: .4byte gDispIo+0x3C

	THUMB_FUNC_END func_0808EA98

	THUMB_FUNC_START func_0808EB0C
func_0808EB0C: @ 0x0808EB0C
	push {r4, r5, lr}
	sub sp, #0x40
	adds r3, r0, #0
	add r2, sp, #0x18
	ldr r1, [r3, #0x2c]
	ldrb r0, [r1]
	adds r5, r2, #0
	cmp r0, #0x80
	bne .L0808EBB6
	ldrb r0, [r1, #1]
	cmp r0, #0x23
	bne .L0808EBB6
	adds r0, r1, #2
	str r0, [r3, #0x2c]
	ldrb r0, [r1, #2]
	add r4, sp, #0x38
	cmp r0, #1
	beq .L0808EB46
.L0808EB30:
	ldr r1, [r3, #0x2c]
	ldrb r0, [r1]
	strb r0, [r2]
	ldrb r0, [r1, #1]
	strb r0, [r2, #1]
	adds r0, r1, #2
	str r0, [r3, #0x2c]
	adds r2, #2
	ldrb r0, [r1, #2]
	cmp r0, #1
	bne .L0808EB30
.L0808EB46:
	ldr r0, [r3, #0x2c]
	adds r0, #1
	str r0, [r3, #0x2c]
	movs r0, #0
	strb r0, [r2]
	movs r0, #0x80
	lsls r0, r0, #9
	bl func_0808E9F0
	ldr r1, .L0808EBC0  @ 0x06017800
	mov r0, sp
	movs r2, #0x12
	bl InitSpriteTextFont
	mov r0, sp
	bl SetTextFont
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0x30
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	ldr r0, .L0808EBC4  @ Pal_SystemText
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0808EBC8  @ gUnknown_085A643C
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0808EBCC  @ gUnknown_085A638C
	ldr r1, .L0808EBD0  @ 0x06017900
	bl Decompress
.L0808EBB6:
	add sp, #0x40
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808EBC0: .4byte 0x06017800
.L0808EBC4: .4byte Pal_SystemText
.L0808EBC8: .4byte gUnknown_085A643C
.L0808EBCC: .4byte gUnknown_085A638C
.L0808EBD0: .4byte 0x06017900

	THUMB_FUNC_END func_0808EB0C

	THUMB_FUNC_START func_0808EBD4
func_0808EBD4: @ 0x0808EBD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r1, r6, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	bl func_0808EA3C
	lsrs r0, r0, #0xb
	movs r1, #7
	ands r0, r1
	cmp r0, #0
	beq .L0808EC0E
	bl func_0808EA3C
	lsrs r0, r0, #0xb
	movs r1, #7
	ands r0, r1
	subs r0, #1
	b .L0808EC12
.L0808EC0E:
	bl GetTextPrintDelay
.L0808EC12:
	adds r1, r6, #0
	adds r1, #0x52
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	movs r2, #0x7f
	cmp r0, #0
	beq .L0808EC24
	movs r2, #1
.L0808EC24:
	adds r0, r6, #0
	adds r0, #0x53
	movs r1, #0
	strb r2, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	adds r0, r6, #0
	bl func_0808EB0C
	adds r0, r6, #0
	adds r0, #0x5b
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	movs r0, #0x5c
	adds r0, r0, r6
	mov r9, r0
	cmp r1, #0
	blt .L0808EC58
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge .L0808EC8A
.L0808EC58:
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, [r6, #0x2c]
	add r2, sp, #8
	add r1, sp, #4
	bl func_0808F428
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp, #4]
	adds r0, r1, #7
	cmp r0, #0
	bge .L0808EC78
	adds r0, #7
.L0808EC78:
	asrs r0, r0, #3
	strb r0, [r7]
	ldr r0, [sp, #8]
	cmp r0, #0
	bge .L0808EC84
	adds r0, #7
.L0808EC84:
	asrs r0, r0, #3
	mov r1, r9
	strb r0, [r1]
.L0808EC8A:
	bl func_0808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808EC98
	b .L0808EDE6
.L0808EC98:
	movs r2, #0x58
	adds r2, r2, r6
	mov r8, r2
	mov r3, r9
	movs r0, #0
	ldrsb r0, [r3, r0]
	mvns r0, r0
	ldrb r1, [r2]
	adds r0, r0, r1
	str r0, [sp, #0x10]
	bl func_0808EA3C
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq .L0808ED38
	adds r5, r6, #0
	adds r5, #0x57
	ldrb r0, [r5]
	movs r1, #0
	ldrsb r1, [r7, r1]
	subs r0, r0, r1
	subs r0, #2
	str r0, [sp, #0xc]
	bl func_0808EA3C
	movs r2, #0xc0
	lsls r2, r2, #8
	mov sl, r2
	ands r0, r2
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	movs r3, #0
	ldrsb r3, [r7, r3]
	subs r1, r1, r3
	subs r1, #2
	mov ip, r1
	mov r7, r9
	movs r4, #0
	ldrsb r4, [r7, r4]
	mvns r2, r4
	mov r1, r8
	ldrb r1, [r1]
	adds r2, r2, r1
	adds r3, #2
	adds r4, #2
	str r4, [sp]
	mov r1, ip
	bl func_08008668
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne .L0808EDAA
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xb
	ands r1, r0
	movs r4, #3
	cmp r1, #0
	beq .L0808ED1C
	movs r4, #5
.L0808ED1C:
	bl func_0808EA3C
	mov r2, sl
	ands r0, r2
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	subs r1, #1
	mov r3, r8
	ldrb r2, [r3]
	subs r2, #2
	adds r3, r4, #0
	bl func_080084E0
	b .L0808EDAA
.L0808ED38:
	adds r5, r6, #0
	adds r5, #0x57
	ldrb r0, [r5]
	adds r0, #1
	str r0, [sp, #0xc]
	bl func_0808EA3C
	movs r1, #0xc0
	lsls r1, r1, #8
	mov sl, r1
	ands r0, r1
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	adds r1, #1
	mov ip, r1
	mov r2, r9
	movs r4, #0
	ldrsb r4, [r2, r4]
	mvns r2, r4
	mov r3, r8
	ldrb r3, [r3]
	adds r2, r2, r3
	movs r3, #0
	ldrsb r3, [r7, r3]
	adds r3, #2
	adds r4, #2
	str r4, [sp]
	bl func_08008668
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne .L0808EDAA
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xb
	ands r1, r0
	movs r4, #2
	cmp r1, #0
	beq .L0808ED92
	movs r4, #5
.L0808ED92:
	bl func_0808EA3C
	mov r7, sl
	ands r0, r7
	lsrs r0, r0, #0xe
	ldrb r1, [r5]
	mov r3, r8
	ldrb r2, [r3]
	subs r2, #2
	adds r3, r4, #0
	bl func_080084E0
.L0808EDAA:
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq .L0808EDE0
	bl func_0808EA3C
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	bl GetBgTilemap
	ldr r7, [sp, #0x10]
	lsls r1, r7, #6
	adds r0, r0, r1
	ldr r2, [sp, #0xc]
	lsls r1, r2, #1
	adds r0, r0, r1
	movs r1, #6
	movs r2, #0
	movs r3, #0
	bl TmFillRect_thm
.L0808EDE0:
	movs r0, #0xf
	bl EnableBgSync
.L0808EDE6:
	adds r0, r6, #0
	bl func_0808F3D8
	ldr r0, .L0808EE5C  @ func_0808F5C8
	adds r1, r6, #0
	bl StartParallelWorker
	ldr r0, [r6, #0x30]
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	mov r3, r9
	movs r0, #0
	ldrsb r0, [r3, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r5, #0
	cmp r0, #0
	blt .L0808EE38
.L0808EE10:
	lsls r0, r5, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r4, r4, r0
	ldr r0, [r4]
	bl InitSpriteText
	ldr r0, [r4]
	movs r1, #0xb
	bl Text_SetColor
	adds r5, #1
	mov r7, r9
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r5, r0
	ble .L0808EE10
.L0808EE38:
	adds r0, r6, #0
	bl func_0808F2BC
	movs r0, #0
	bl SetTextFont
	bl func_0808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808EE60
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b .L0808EF30
	.align 2, 0
.L0808EE5C: .4byte func_0808F5C8
.L0808EE60:
	bl func_0808EA3C
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	beq .L0808EE7E
	movs r0, #0x10
	movs r1, #1
	bl func_0808EA74
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b .L0808EE86
.L0808EE7E:
	movs r0, #0
	movs r1, #0x10
	bl func_0808EA74
.L0808EE86:
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq .L0808EEA4
	ldr r5, .L0808EEA0  @ gUnknown_0203E82C
	adds r4, r6, #0
	adds r4, #0x58
	ldrb r1, [r4]
	subs r1, #5
	b .L0808EEAE
	.align 2, 0
.L0808EEA0: .4byte gUnknown_0203E82C
.L0808EEA4:
	ldr r5, .L0808EF58  @ gUnknown_0203E82C
	adds r4, r6, #0
	adds r4, #0x58
	ldrb r1, [r4]
	subs r1, #1
.L0808EEAE:
	adds r3, r5, #0
	adds r3, #0x48
	movs r0, #0x1f
	ands r1, r0
	ldrb r2, [r3]
	movs r0, #0x20
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	mov r0, r9
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldrb r4, [r4]
	adds r1, r1, r4
	adds r1, #1
	adds r3, r5, #0
	adds r3, #0x48
	movs r2, #0x1f
	mov r8, r2
	mov r7, r8
	ands r1, r7
	lsls r1, r1, #5
	ldrh r2, [r3]
	ldr r0, .L0808EF5C  @ 0xFFFFFC1F
	ands r0, r2
	orrs r0, r1
	strh r0, [r3]
	bl func_0808EA3C
	movs r6, #0xc0
	lsls r6, r6, #8
	ands r0, r6
	lsrs r0, r0, #0xe
	movs r4, #1
	adds r5, r4, #0
	lsls r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	bl func_0808EA3C
	ands r0, r6
	lsrs r0, r0, #0xe
	lsls r4, r0
	mov r0, r8
	eors r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_0808EA48
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xc
	ands r1, r0
	cmp r1, #0
	bne .L0808EF30
	movs r0, #0
	bl SetOnHBlankB
	ldr r0, .L0808EF60  @ func_0808EA98
	bl SetOnHBlankB
.L0808EF30:
	bl func_0808EA3C
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808EF58: .4byte gUnknown_0203E82C
.L0808EF5C: .4byte 0xFFFFFC1F
.L0808EF60: .4byte func_0808EA98

	THUMB_FUNC_END func_0808EBD4

	THUMB_FUNC_START func_0808EF64
func_0808EF64: @ 0x0808EF64
	adds r0, #0x56
	movs r1, #0
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_0808EF64

	THUMB_FUNC_START func_0808EF6C
func_0808EF6C: @ 0x0808EF6C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x56
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r2, [r1]
	cmp r2, #0x10
	beq .L0808EF8A
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b .L0808EF8C
.L0808EF8A:
	movs r1, #1
.L0808EF8C:
	adds r0, r2, #0
	bl func_0808EA74
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0x10
	bne .L0808EFA2
	adds r0, r4, #0
	bl Proc_Break
.L0808EFA2:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808EF6C

	THUMB_FUNC_START func_0808EFA8
func_0808EFA8: @ 0x0808EFA8
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808F2BC
	movs r0, #0
	bl GetFaceDispById
	movs r1, #0x11
	negs r1, r1
	ands r1, r0
	movs r0, #0
	bl SetFaceDispById
	bl func_0808FFE8
	bl func_0808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808EFDC
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b .L0808EFE4
.L0808EFDC:
	adds r1, r4, #0
	adds r1, #0x56
	movs r0, #0x10
	strb r0, [r1]
.L0808EFE4:
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #0xa
	ands r1, r0
	cmp r1, #0
	beq .L0808EFFC
	ldr r0, .L0808F004  @ ProcScr_Face
	bl FindProc
	bl StartFaceFadeOut
.L0808EFFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808F004: .4byte ProcScr_Face

	THUMB_FUNC_END func_0808EFA8

	THUMB_FUNC_START func_0808F008
func_0808F008: @ 0x0808F008
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x56
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldrb r2, [r1]
	cmp r2, #0x10
	beq .L0808F026
	movs r0, #0x10
	subs r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	b .L0808F028
.L0808F026:
	movs r1, #1
.L0808F028:
	adds r0, r2, #0
	bl func_0808EA74
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0808F046
	movs r0, #0x80
	lsls r0, r0, #9
	bl func_0808EA1C
	adds r0, r4, #0
	bl Proc_Break
.L0808F046:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F008

	THUMB_FUNC_START func_0808F04C
func_0808F04C: @ 0x0808F04C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0808F080  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq .L0808F07A
	bl func_0808EA3C
	movs r1, #0x40
	ands r1, r0
	cmp r1, #0
	bne .L0808F07A
	bl func_0800D3E4
	bl func_0808FFE8
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
.L0808F07A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0808F080: .4byte gKeySt

	THUMB_FUNC_END func_0808F04C

	THUMB_FUNC_START func_0808F084
func_0808F084: @ 0x0808F084
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808EA3C
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r1
	lsrs r0, r0, #0xe
	bl GetBgTilemap
	adds r1, r4, #0
	adds r1, #0x58
	ldrb r1, [r1]
	subs r1, #1
	lsls r1, r1, #6
	adds r0, r0, r1
	adds r4, #0x5c
	movs r2, #0
	ldrsb r2, [r4, r2]
	adds r2, #1
	movs r1, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xf
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F084

	THUMB_FUNC_START func_0808F0C4
func_0808F0C4: @ 0x0808F0C4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl GetFaceDispById
	movs r1, #0x11
	negs r1, r1
	ands r1, r0
	movs r0, #0
	bl SetFaceDispById
	adds r0, r4, #0
	bl func_0808F084
	movs r0, #0
	bl SetOnHBlankB
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F0C4

	THUMB_FUNC_START func_0808F0EC
func_0808F0EC: @ 0x0808F0EC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl func_0808F2BC
	adds r0, r5, #0
	adds r0, #0x54
	movs r4, #0
	strb r4, [r0]
	movs r0, #1
	bl SetTextFontGlyphs
	adds r1, r5, #0
	adds r1, #0x59
	strb r4, [r1]
	adds r2, r5, #0
	adds r2, #0x5a
	strb r4, [r2]
	ldr r0, [r5, #0x2c]
	bl func_0808F358
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	bl func_0808FFC4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F0EC

	THUMB_FUNC_START func_0808F128
func_0808F128: @ 0x0808F128
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	str r1, [sp]
	str r2, [sp, #4]
	str r3, [sp, #8]
	ldr r7, [sp, #0x30]
	ldr r5, [sp, #0x34]
	ldr r6, .L0808F17C  @ gUnknown_08A01DBC
	adds r0, r6, #0
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L0808F18A
	ldr r0, [sp, #0x2c]
	bl GetMsg
	str r0, [r4, #0x2c]
	bl func_0808F5A0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0808F166
	bl StrExpandNames
	str r0, [r4, #0x2c]
.L0808F166:
	adds r0, r4, #0
	adds r0, #0x56
	ldrb r0, [r0]
	cmp r0, #0x10
	bne .L0808F180
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b .L0808F254
	.align 2, 0
.L0808F17C: .4byte gUnknown_08A01DBC
.L0808F180:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b .L0808F254
.L0808F18A:
	ldr r0, [sp, #0x38]
	cmp r0, #0
	beq .L0808F19A
	adds r0, r6, #0
	ldr r1, [sp, #0x38]
	bl SpawnProcLocking
	b .L0808F1A2
.L0808F19A:
	adds r0, r6, #0
	movs r1, #3
	bl SpawnProc
.L0808F1A2:
	adds r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #7
	bl func_0808E9D8
	bl ClearTalkFlags
	ldr r0, .L0808F264  @ gUnknown_0203E82C
	str r0, [r4, #0x30]
	adds r3, r4, #0
	adds r3, #0x57
	adds r6, r4, #0
	adds r6, #0x58
	movs r1, #0x5b
	adds r1, r1, r4
	mov ip, r1
	movs r1, #0x5c
	adds r1, r1, r4
	mov r8, r1
	movs r1, #0x50
	adds r1, r1, r4
	mov r9, r1
	adds r2, r4, #0
	adds r2, #0x34
	adds r0, #0x40
	adds r1, r4, #0
	adds r1, #0x48
.L0808F1D8:
	str r0, [r1]
	subs r0, #8
	subs r1, #4
	cmp r1, r2
	bge .L0808F1D8
	mov r0, sl
	strb r0, [r3]
	mov r1, sp
	ldrb r1, [r1]
	strb r1, [r6]
	mov r0, sp
	ldrb r1, [r0, #4]
	mov r0, ip
	strb r1, [r0]
	mov r0, sp
	ldrb r1, [r0, #8]
	mov r0, r8
	strb r1, [r0]
	str r7, [r4, #0x4c]
	cmp r5, #0
	bge .L0808F204
	movs r5, #5
.L0808F204:
	movs r6, #0xf
	adds r0, r6, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	cmp r7, #0
	bne .L0808F214
	ldr r7, .L0808F268  @ 0x06013000
.L0808F214:
	ldr r0, [r4, #0x30]
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	movs r0, #0
	bl SetTextFont
	ldr r0, .L0808F26C  @ gUnknown_0859EF60
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r6
	lsls r1, r5, #0xc
	adds r0, r0, r1
	mov r1, r9
	strh r0, [r1]
	ldr r0, [sp, #0x2c]
	bl GetMsg
	str r0, [r4, #0x2c]
	bl func_0808F5A0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0808F254
	bl StrExpandNames
	str r0, [r4, #0x2c]
.L0808F254:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808F264: .4byte gUnknown_0203E82C
.L0808F268: .4byte 0x06013000
.L0808F26C: .4byte gUnknown_0859EF60

	THUMB_FUNC_END func_0808F128

	THUMB_FUNC_START func_0808F270
func_0808F270: @ 0x0808F270
	push {lr}
	ldr r0, .L0808F280  @ gUnknown_08A01DBC
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L0808F280: .4byte gUnknown_08A01DBC

	THUMB_FUNC_END func_0808F270

	THUMB_FUNC_START func_0808F284
func_0808F284: @ 0x0808F284
	push {lr}
	ldr r0, .L0808F294  @ gUnknown_08A01DBC
	bl FindProc
	cmp r0, #0
	bne .L0808F298
	movs r0, #0
	b .L0808F29A
	.align 2, 0
.L0808F294: .4byte gUnknown_08A01DBC
.L0808F298:
	movs r0, #1
.L0808F29A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808F284

	THUMB_FUNC_START func_0808F2A0
func_0808F2A0: @ 0x0808F2A0
	push {lr}
	ldr r0, .L0808F2B8  @ gUnknown_08A01DBC
	bl FindProc
	cmp r0, #0
	beq .L0808F2B2
	movs r1, #0
	bl Proc_Goto
.L0808F2B2:
	pop {r0}
	bx r0
	.align 2, 0
.L0808F2B8: .4byte gUnknown_08A01DBC

	THUMB_FUNC_END func_0808F2A0

	THUMB_FUNC_START func_0808F2BC
func_0808F2BC: @ 0x0808F2BC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	bl SetTextFont
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r4, #0
	cmp r0, #0
	blt .L0808F300
.L0808F2DA:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	ble .L0808F2DA
.L0808F300:
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F2BC

	THUMB_FUNC_START func_0808F30C
func_0808F30C: @ 0x0808F30C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	bl SetTextFont
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	movs r4, #0
	cmp r0, #0
	blt .L0808F350
.L0808F32A:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0
	bl Text_SetCursor
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	ble .L0808F32A
.L0808F350:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F30C

	THUMB_FUNC_START func_0808F358
func_0808F358: @ 0x0808F358
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	adds r7, r2, #0
	movs r6, #0
	ldrb r5, [r7]
	movs r0, #1
	bl SetTextFontGlyphs
.L0808F370:
	ldrb r0, [r4]
	cmp r0, #7
	bgt .L0808F392
	cmp r0, #4
	bge .L0808F3A4
	cmp r0, #1
	beq .L0808F3A8
	cmp r0, #1
	bgt .L0808F388
	cmp r0, #0
	beq .L0808F3C4
	b .L0808F3B4
.L0808F388:
	cmp r0, #2
	beq .L0808F3A4
	cmp r0, #3
	beq .L0808F3C4
	b .L0808F3B4
.L0808F392:
	cmp r0, #0x19
	ble .L0808F39C
	cmp r0, #0x80
	beq .L0808F3B0
	b .L0808F3B4
.L0808F39C:
	cmp r0, #0x18
	bge .L0808F3C4
	cmp r0, #0x16
	blt .L0808F3B4
.L0808F3A4:
	adds r4, #1
	b .L0808F370
.L0808F3A8:
	adds r4, #1
	adds r5, #0x10
	movs r6, #0
	b .L0808F370
.L0808F3B0:
	adds r4, #2
	b .L0808F370
.L0808F3B4:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r6, r6, r0
	b .L0808F370
.L0808F3C4:
	mov r0, r8
	strb r6, [r0]
	strb r5, [r7]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F358

	THUMB_FUNC_START func_0808F3D8
func_0808F3D8: @ 0x0808F3D8
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808EA3C
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	bne .L0808F420
	bl func_0808EA3C
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq .L0808F406
	adds r1, r4, #0
	adds r1, #0x57
	adds r0, r4, #0
	adds r0, #0x5b
	ldrb r0, [r0]
	mvns r0, r0
	ldrb r2, [r1]
	adds r0, r0, r2
	b .L0808F40E
.L0808F406:
	adds r1, r4, #0
	adds r1, #0x57
	ldrb r0, [r1]
	adds r0, #2
.L0808F40E:
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x58
	adds r1, r4, #0
	adds r1, #0x5c
	ldrb r0, [r2]
	ldrb r1, [r1]
	subs r0, r0, r1
	strb r0, [r2]
.L0808F420:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F3D8

	THUMB_FUNC_START func_0808F428
func_0808F428: @ 0x0808F428
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	adds r7, r2, #0
	movs r5, #0
	movs r6, #0x10
	str r5, [r1]
	str r5, [r7]
	movs r0, #1
	bl SetTextFontGlyphs
.L0808F444:
	ldrb r2, [r4]
	cmp r2, #0x19
	bhi .L0808F4D0
	lsls r0, r2, #2
	ldr r1, .L0808F454  @ .L0808F458
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808F454: .4byte .L0808F458
.L0808F458: @ jump table
	.4byte .L0808F4C2 @ case 0
	.4byte .L0808F4C2 @ case 1
	.4byte .L0808F4C2 @ case 2
	.4byte .L0808F4C0 @ case 3
	.4byte .L0808F4D0 @ case 4
	.4byte .L0808F4D0 @ case 5
	.4byte .L0808F4D0 @ case 6
	.4byte .L0808F4D0 @ case 7
	.4byte .L0808F4D0 @ case 8
	.4byte .L0808F4D0 @ case 9
	.4byte .L0808F4D0 @ case 10
	.4byte .L0808F4D0 @ case 11
	.4byte .L0808F4D0 @ case 12
	.4byte .L0808F4D0 @ case 13
	.4byte .L0808F4D0 @ case 14
	.4byte .L0808F4D0 @ case 15
	.4byte .L0808F4D0 @ case 16
	.4byte .L0808F4D0 @ case 17
	.4byte .L0808F4D0 @ case 18
	.4byte .L0808F4D0 @ case 19
	.4byte .L0808F4D0 @ case 20
	.4byte .L0808F4D0 @ case 21
	.4byte .L0808F4D0 @ case 22
	.4byte .L0808F4D0 @ case 23
	.4byte .L0808F4C2 @ case 24
	.4byte .L0808F4C2 @ case 25
.L0808F4C0:
	adds r5, #8
.L0808F4C2:
	mov r1, r8
	ldr r0, [r1]
	cmp r0, r5
	bge .L0808F4CC
	str r5, [r1]
.L0808F4CC:
	movs r5, #0
	ldrb r2, [r4]
.L0808F4D0:
	cmp r2, #0x19
	bhi .L0808F55C
	lsls r0, r2, #2
	ldr r1, .L0808F4E0  @ .L0808F4E4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808F4E0: .4byte .L0808F4E4
.L0808F4E4: @ jump table
	.4byte .L0808F550 @ case 0
	.4byte .L0808F54C @ case 1
	.4byte .L0808F550 @ case 2
	.4byte .L0808F55C @ case 3
	.4byte .L0808F55C @ case 4
	.4byte .L0808F55C @ case 5
	.4byte .L0808F55C @ case 6
	.4byte .L0808F55C @ case 7
	.4byte .L0808F55C @ case 8
	.4byte .L0808F55C @ case 9
	.4byte .L0808F55C @ case 10
	.4byte .L0808F55C @ case 11
	.4byte .L0808F55C @ case 12
	.4byte .L0808F55C @ case 13
	.4byte .L0808F55C @ case 14
	.4byte .L0808F55C @ case 15
	.4byte .L0808F55C @ case 16
	.4byte .L0808F55C @ case 17
	.4byte .L0808F55C @ case 18
	.4byte .L0808F55C @ case 19
	.4byte .L0808F55C @ case 20
	.4byte .L0808F55C @ case 21
	.4byte .L0808F55C @ case 22
	.4byte .L0808F55C @ case 23
	.4byte .L0808F54C @ case 24
	.4byte .L0808F54C @ case 25
.L0808F54C:
	adds r6, #0x10
	b .L0808F55C
.L0808F550:
	ldr r0, [r7]
	cmp r0, r6
	bge .L0808F558
	str r6, [r7]
.L0808F558:
	movs r6, #0
	ldrb r2, [r4]
.L0808F55C:
	adds r0, r2, #0
	cmp r0, #7
	bgt .L0808F56C
	cmp r0, #1
	bge .L0808F57A
	cmp r0, #0
	beq .L0808F592
	b .L0808F582
.L0808F56C:
	cmp r2, #0x16
	blt .L0808F582
	cmp r2, #0x19
	ble .L0808F57A
	cmp r2, #0x80
	beq .L0808F57E
	b .L0808F582
.L0808F57A:
	adds r4, #1
	b .L0808F444
.L0808F57E:
	adds r4, #2
	b .L0808F444
.L0808F582:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r5, r5, r0
	b .L0808F444
.L0808F592:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F428

	THUMB_FUNC_START func_0808F5A0
func_0808F5A0: @ 0x0808F5A0
	push {lr}
	adds r1, r0, #0
.L0808F5A4:
	ldrb r0, [r1]
	cmp r0, #0
	beq .L0808F5B0
	cmp r0, #0x80
	beq .L0808F5B4
	b .L0808F5C0
.L0808F5B0:
	movs r0, #0
	b .L0808F5C4
.L0808F5B4:
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0x20
	bne .L0808F5C0
	movs r0, #1
	b .L0808F5C4
.L0808F5C0:
	adds r1, #1
	b .L0808F5A4
.L0808F5C4:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808F5A0

	THUMB_FUNC_START func_0808F5C8
func_0808F5C8: @ 0x0808F5C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov r8, r0
	adds r0, #0x57
	ldrb r0, [r0]
	lsls r6, r0, #3
	mov r0, r8
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r7, r0, #3
	movs r0, #0
	mov r9, r0
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	negs r1, r1
	asrs r1, r1, #0x1f
	movs r0, #0x80
	lsls r0, r0, #3
	ands r1, r0
	str r1, [sp, #4]
	bl func_0808EA3C
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	beq .L0808F638
	cmp r1, r0
	bhi .L0808F61C
	cmp r1, #0
	beq .L0808F62A
	b .L0808F662
.L0808F61C:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r1, r0
	beq .L0808F648
	cmp r1, r2
	beq .L0808F658
	b .L0808F662
.L0808F62A:
	ldr r0, .L0808F634  @ gDispIo
	ldrh r1, [r0, #0x1c]
	subs r6, r6, r1
	ldrh r0, [r0, #0x1e]
	b .L0808F660
	.align 2, 0
.L0808F634: .4byte gDispIo
.L0808F638:
	ldr r0, .L0808F644  @ gDispIo
	ldrh r1, [r0, #0x20]
	subs r6, r6, r1
	ldrh r0, [r0, #0x22]
	b .L0808F660
	.align 2, 0
.L0808F644: .4byte gDispIo
.L0808F648:
	ldr r0, .L0808F654  @ gDispIo
	ldrh r1, [r0, #0x24]
	subs r6, r6, r1
	ldrh r0, [r0, #0x26]
	b .L0808F660
	.align 2, 0
.L0808F654: .4byte gDispIo
.L0808F658:
	ldr r0, .L0808F6D0  @ gDispIo
	ldrh r1, [r0, #0x28]
	subs r6, r6, r1
	ldrh r0, [r0, #0x2a]
.L0808F660:
	subs r7, r7, r0
.L0808F662:
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #9
	ands r1, r0
	cmp r1, #0
	beq .L0808F6A6
	adds r1, r6, #0
	subs r1, #0x10
	ldr r5, .L0808F6D4  @ 0x000001FF
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	movs r4, #0xff
	ands r2, r4
	ldr r3, .L0808F6D8  @ gUnknown_08A01D88
	ldr r0, .L0808F6DC  @ 0x000013C8
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
	adds r1, r6, #0
	subs r1, #8
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x14
	ands r2, r4
	ldr r3, .L0808F6E0  @ gUnknown_08A01DAE
	movs r0, #0x8f
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
.L0808F6A6:
	movs r4, #0
	mov r0, r8
	adds r0, #0x5c
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	str r0, [sp, #0xc]
	movs r2, #0x50
	add r2, r8
	mov sl, r2
	movs r3, #0x5b
	add r8, r3
	cmp r4, r1
	bge .L0808F73A
.L0808F6C6:
	movs r5, #0
	mov r9, r5
	adds r0, r4, #1
	str r0, [sp, #0x10]
	b .L0808F716
	.align 2, 0
.L0808F6D0: .4byte gDispIo
.L0808F6D4: .4byte 0x000001FF
.L0808F6D8: .4byte gUnknown_08A01D88
.L0808F6DC: .4byte 0x000013C8
.L0808F6E0: .4byte gUnknown_08A01DAE
.L0808F6E4:
	mov r2, r9
	lsls r1, r2, #5
	adds r1, r6, r1
	ldr r0, .L0808F768  @ 0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	mov r3, r9
	lsls r0, r3, #2
	mov r5, sl
	ldrh r5, [r5]
	adds r0, r0, r5
	lsls r3, r4, #6
	adds r0, r0, r3
	ldr r3, [sp, #4]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, .L0808F76C  @ Sprite_32x16
	bl PutSpriteExt
	movs r5, #1
	add r9, r5
.L0808F716:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L0808F722
	adds r0, #3
.L0808F722:
	asrs r0, r0, #2
	cmp r9, r0
	blt .L0808F6E4
	ldr r4, [sp, #0x10]
	ldr r2, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	blt .L0808F6C6
.L0808F73A:
	mov r3, r8
	ldrb r0, [r3]
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	beq .L0808F7DA
	movs r1, #0
	ldrsb r1, [r3, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge .L0808F752
	adds r0, r1, #3
.L0808F752:
	asrs r0, r0, #2
	lsls r4, r0, #2
	str r4, [sp, #8]
	lsls r0, r0, #5
	adds r6, r6, r0
	movs r4, #0
	ldr r5, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r5, r0]
	b .L0808F7D0
	.align 2, 0
.L0808F768: .4byte 0x000001FF
.L0808F76C: .4byte Sprite_32x16
.L0808F770:
	movs r0, #0
	mov r9, r0
	adds r1, r4, #1
	str r1, [sp, #0x10]
	b .L0808F7AC
.L0808F77A:
	mov r2, r9
	lsls r1, r2, #3
	adds r1, r6, r1
	ldr r0, .L0808F818  @ 0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	mov r3, sl
	ldrh r0, [r3]
	ldr r5, [sp, #8]
	adds r0, r0, r5
	add r0, r9
	lsls r3, r4, #6
	adds r0, r0, r3
	ldr r3, [sp, #4]
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, .L0808F81C  @ Sprite_8x16
	bl PutSpriteExt
	movs r5, #1
	add r9, r5
.L0808F7AC:
	mov r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge .L0808F7BA
	adds r0, r1, #3
.L0808F7BA:
	asrs r0, r0, #2
	lsls r0, r0, #2
	subs r0, r1, r0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r9, r0
	blt .L0808F77A
	ldr r4, [sp, #0x10]
	ldr r1, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r1, r0]
.L0808F7D0:
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r4, r0
	blt .L0808F770
.L0808F7DA:
	mov r2, r9
	lsls r1, r2, #5
	adds r1, r6, r1
	ldr r0, .L0808F818  @ 0x000001FF
	ands r1, r0
	lsls r2, r4, #4
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	ldr r3, .L0808F820  @ Sprite_32x16
	mov r5, r9
	lsls r0, r5, #2
	mov r6, sl
	ldrh r6, [r6]
	adds r0, r0, r6
	lsls r4, r4, #6
	adds r0, r0, r4
	ldr r4, [sp, #4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl PutSpriteExt
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0808F818: .4byte 0x000001FF
.L0808F81C: .4byte Sprite_8x16
.L0808F820: .4byte Sprite_32x16

	THUMB_FUNC_END func_0808F5C8

	THUMB_FUNC_START func_0808F824
func_0808F824: @ 0x0808F824
	push {lr}
	subs r0, #0x16
	cmp r0, #9
	bhi .L0808F8AC
	lsls r0, r0, #2
	ldr r1, .L0808F838  @ .L0808F83C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808F838: .4byte .L0808F83C
.L0808F83C: @ jump table
	.4byte .L0808F864 @ case 0
	.4byte .L0808F86A @ case 1
	.4byte .L0808F870 @ case 2
	.4byte .L0808F876 @ case 3
	.4byte .L0808F87C @ case 4
	.4byte .L0808F882 @ case 5
	.4byte .L0808F88E @ case 6
	.4byte .L0808F894 @ case 7
	.4byte .L0808F89A @ case 8
	.4byte .L0808F8A0 @ case 9
.L0808F864:
	movs r0, #0
	movs r1, #0
	b .L0808F886
.L0808F86A:
	movs r0, #0
	movs r1, #1
	b .L0808F886
.L0808F870:
	movs r0, #0
	movs r1, #3
	b .L0808F886
.L0808F876:
	movs r0, #0
	movs r1, #2
	b .L0808F886
.L0808F87C:
	movs r0, #0
	movs r1, #4
	b .L0808F886
.L0808F882:
	movs r0, #0
	movs r1, #5
.L0808F886:
	bl SetFaceBlinkControlById
	movs r0, #1
	b .L0808F8AE
.L0808F88E:
	movs r0, #0
	movs r1, #0
	b .L0808F8A4
.L0808F894:
	movs r0, #0
	movs r1, #2
	b .L0808F8A4
.L0808F89A:
	movs r0, #0
	movs r1, #3
	b .L0808F8A4
.L0808F8A0:
	movs r0, #0
	movs r1, #4
.L0808F8A4:
	bl func_080064DC
	movs r0, #1
	b .L0808F8AE
.L0808F8AC:
	movs r0, #0
.L0808F8AE:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808F824

	THUMB_FUNC_START func_0808F8B4
func_0808F8B4: @ 0x0808F8B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov r8, r0
	ldr r6, [r0, #0x14]
	adds r0, r6, #0
	adds r0, #0x53
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov sl, r0
	ldr r0, .L0808F8F0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf3
	ands r0, r1
	cmp r0, #0
	beq .L0808F8F4
	bl func_0808EA3C
	movs r1, #0x20
	ands r1, r0
	cmp r1, #0
	bne .L0808F8F4
	movs r0, #0x7f
	mov sl, r0
	b .L0808F90E
	.align 2, 0
.L0808F8F0: .4byte gKeySt
.L0808F8F4:
	adds r1, r6, #0
	adds r1, #0x55
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	ble .L0808F906
	b .L0808FE94
.L0808F906:
	adds r0, r6, #0
	adds r0, #0x52
	ldrb r0, [r0]
	strb r0, [r1]
.L0808F90E:
	ldr r0, [r6, #0x30]
	bl SetTextFont
	ldr r0, .L0808F940  @ gUnknown_03005398
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0808F944
	cmp r0, #1
	beq .L0808F95E
	movs r0, #0
	bl GetFaceDispById
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #0
	movs r1, #3
	bl SetFaceBlinkControlById
	movs r0, #1
	movs r1, #1
	bl SetFaceBlinkControlById
	b .L0808F990
	.align 2, 0
.L0808F940: .4byte gUnknown_03005398
.L0808F944:
	movs r0, #0
	bl GetFaceDispById
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #0
	movs r1, #3
	bl SetFaceBlinkControlById
	movs r0, #1
	b .L0808F976
.L0808F95E:
	movs r0, #1
	bl GetFaceDispById
	movs r1, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r0, #1
	movs r1, #3
	bl SetFaceBlinkControlById
	movs r0, #0
.L0808F976:
	movs r1, #1
	bl SetFaceBlinkControlById
	b .L0808F990
.L0808F97E:
	adds r1, r6, #0
	adds r1, #0x5f
	movs r0, #1
	strb r0, [r1]
	mov r0, r8
	movs r1, #1
	bl Proc_Goto
	b .L0808FE68
.L0808F990:
	movs r0, #0
	mov r9, r0
	cmp r9, sl
	blt .L0808F99A
	b .L0808FE68
.L0808F99A:
	ldr r0, [r6, #0x2c]
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0x80
	bls .L0808F9A6
	b .L0808FDEA
.L0808F9A6:
	lsls r0, r1, #2
	ldr r1, .L0808F9B0  @ .L0808F9B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0808F9B0: .4byte .L0808F9B4
.L0808F9B4: @ jump table
	.4byte .L0808FC64 @ case 0
	.4byte .L0808FC92 @ case 1
	.4byte .L0808FD02 @ case 2
	.4byte .L0808FD48 @ case 3
	.4byte .L0808FCBE @ case 4
	.4byte .L0808FCC8 @ case 5
	.4byte .L0808FCD2 @ case 6
	.4byte .L0808FCDC @ case 7
	.4byte .L0808FDEA @ case 8
	.4byte .L0808FDEA @ case 9
	.4byte .L0808FDEA @ case 10
	.4byte .L0808FDEA @ case 11
	.4byte .L0808FDEA @ case 12
	.4byte .L0808FDEA @ case 13
	.4byte .L0808FDEA @ case 14
	.4byte .L0808FDEA @ case 15
	.4byte .L0808FDEA @ case 16
	.4byte .L0808FDEA @ case 17
	.4byte .L0808FDEA @ case 18
	.4byte .L0808FDEA @ case 19
	.4byte .L0808FDEA @ case 20
	.4byte .L0808FDEA @ case 21
	.4byte .L0808FCE6 @ case 22
	.4byte .L0808FCF4 @ case 23
	.4byte .L0808FBB8 @ case 24
	.4byte .L0808FC18 @ case 25
	.4byte .L0808FDEA @ case 26
	.4byte .L0808FDEA @ case 27
	.4byte .L0808FDEA @ case 28
	.4byte .L0808FDEA @ case 29
	.4byte .L0808FDEA @ case 30
	.4byte .L0808FDEA @ case 31
	.4byte .L0808FDEA @ case 32
	.4byte .L0808FDEA @ case 33
	.4byte .L0808FDEA @ case 34
	.4byte .L0808FDEA @ case 35
	.4byte .L0808FDEA @ case 36
	.4byte .L0808FDEA @ case 37
	.4byte .L0808FDEA @ case 38
	.4byte .L0808FDEA @ case 39
	.4byte .L0808FDEA @ case 40
	.4byte .L0808FDEA @ case 41
	.4byte .L0808FDEA @ case 42
	.4byte .L0808FDEA @ case 43
	.4byte .L0808FDEA @ case 44
	.4byte .L0808FDEA @ case 45
	.4byte .L0808FDEA @ case 46
	.4byte .L0808FDEA @ case 47
	.4byte .L0808FDEA @ case 48
	.4byte .L0808FDEA @ case 49
	.4byte .L0808FDEA @ case 50
	.4byte .L0808FDEA @ case 51
	.4byte .L0808FDEA @ case 52
	.4byte .L0808FDEA @ case 53
	.4byte .L0808FDEA @ case 54
	.4byte .L0808FDEA @ case 55
	.4byte .L0808FDEA @ case 56
	.4byte .L0808FDEA @ case 57
	.4byte .L0808FDEA @ case 58
	.4byte .L0808FDEA @ case 59
	.4byte .L0808FDEA @ case 60
	.4byte .L0808FDEA @ case 61
	.4byte .L0808FDEA @ case 62
	.4byte .L0808FDEA @ case 63
	.4byte .L0808FDEA @ case 64
	.4byte .L0808FDEA @ case 65
	.4byte .L0808FDEA @ case 66
	.4byte .L0808FDEA @ case 67
	.4byte .L0808FDEA @ case 68
	.4byte .L0808FDEA @ case 69
	.4byte .L0808FDEA @ case 70
	.4byte .L0808FDEA @ case 71
	.4byte .L0808FDEA @ case 72
	.4byte .L0808FDEA @ case 73
	.4byte .L0808FDEA @ case 74
	.4byte .L0808FDEA @ case 75
	.4byte .L0808FDEA @ case 76
	.4byte .L0808FDEA @ case 77
	.4byte .L0808FDEA @ case 78
	.4byte .L0808FDEA @ case 79
	.4byte .L0808FDEA @ case 80
	.4byte .L0808FDEA @ case 81
	.4byte .L0808FDEA @ case 82
	.4byte .L0808FDEA @ case 83
	.4byte .L0808FDEA @ case 84
	.4byte .L0808FDEA @ case 85
	.4byte .L0808FDEA @ case 86
	.4byte .L0808FDEA @ case 87
	.4byte .L0808FDEA @ case 88
	.4byte .L0808FDEA @ case 89
	.4byte .L0808FDEA @ case 90
	.4byte .L0808FDEA @ case 91
	.4byte .L0808FDEA @ case 92
	.4byte .L0808FDEA @ case 93
	.4byte .L0808FDEA @ case 94
	.4byte .L0808FDEA @ case 95
	.4byte .L0808FDEA @ case 96
	.4byte .L0808FDEA @ case 97
	.4byte .L0808FDEA @ case 98
	.4byte .L0808FDEA @ case 99
	.4byte .L0808FDEA @ case 100
	.4byte .L0808FDEA @ case 101
	.4byte .L0808FDEA @ case 102
	.4byte .L0808FDEA @ case 103
	.4byte .L0808FDEA @ case 104
	.4byte .L0808FDEA @ case 105
	.4byte .L0808FDEA @ case 106
	.4byte .L0808FDEA @ case 107
	.4byte .L0808FDEA @ case 108
	.4byte .L0808FDEA @ case 109
	.4byte .L0808FDEA @ case 110
	.4byte .L0808FDEA @ case 111
	.4byte .L0808FDEA @ case 112
	.4byte .L0808FDEA @ case 113
	.4byte .L0808FDEA @ case 114
	.4byte .L0808FDEA @ case 115
	.4byte .L0808FDEA @ case 116
	.4byte .L0808FDEA @ case 117
	.4byte .L0808FDEA @ case 118
	.4byte .L0808FDEA @ case 119
	.4byte .L0808FDEA @ case 120
	.4byte .L0808FDEA @ case 121
	.4byte .L0808FDEA @ case 122
	.4byte .L0808FDEA @ case 123
	.4byte .L0808FDEA @ case 124
	.4byte .L0808FDEA @ case 125
	.4byte .L0808FDEA @ case 126
	.4byte .L0808FDEA @ case 127
	.4byte .L0808FDCA @ case 128
.L0808FBB8:
	adds r4, r6, #0
	adds r4, #0x54
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #2
	ands r1, r0
	ldr r5, .L0808FC10  @ gUnknown_08A01E5C
	cmp r1, #0
	beq .L0808FBD4
	ldr r5, .L0808FC14  @ gUnknown_08A01E54
.L0808FBD4:
	movs r3, #0
	ldrsb r3, [r4, r3]
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r2, [r0]
	lsls r2, r2, #3
	adds r0, #1
	lsls r3, r3, #1
	ldrb r0, [r0]
	adds r3, r3, r0
	lsls r3, r3, #3
	movs r0, #0xb
	str r0, [sp]
	movs r0, #1
.L0808FBFA:
	str r0, [sp, #4]
	mov r0, r8
	str r0, [sp, #8]
	adds r0, r5, #0
	bl func_080900EC
.L0808FC06:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b .L0808FD3C
	.align 2, 0
.L0808FC10: .4byte gUnknown_08A01E5C
.L0808FC14: .4byte gUnknown_08A01E54
.L0808FC18:
	adds r4, r6, #0
	adds r4, #0x54
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #2
	ands r1, r0
	ldr r5, .L0808FC5C  @ gUnknown_08A01E5C
	cmp r1, #0
	beq .L0808FC34
	ldr r5, .L0808FC60  @ gUnknown_08A01E54
.L0808FC34:
	movs r3, #0
	ldrsb r3, [r4, r3]
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r2, [r0]
	lsls r2, r2, #3
	adds r0, #1
	lsls r3, r3, #1
	ldrb r0, [r0]
	adds r3, r3, r0
	lsls r3, r3, #3
	movs r0, #0xb
	str r0, [sp]
	movs r0, #2
	b .L0808FBFA
	.align 2, 0
.L0808FC5C: .4byte gUnknown_08A01E5C
.L0808FC60: .4byte gUnknown_08A01E54
.L0808FC64:
	bl func_0808EA3C
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq .L0808FC80
	movs r0, #4
	bl func_0808EA1C
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	b .L0808FC88
.L0808FC80:
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
.L0808FC88:
	mov r0, r8
	movs r1, #0x63
	bl Proc_Goto
	b .L0808FD3C
.L0808FC92:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	adds r3, r6, #0
	adds r3, #0x54
	movs r2, #0
	ldrsb r2, [r3, r2]
	adds r2, #1
	adds r0, r6, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r2, r0
	blt .L0808FCB6
	b .L0808F97E
.L0808FCB6:
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	b .L0808FE5E
.L0808FCBE:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #8
	strb r0, [r1]
	b .L0808FC06
.L0808FCC8:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x10
	strb r0, [r1]
	b .L0808FC06
.L0808FCD2:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x20
	strb r0, [r1]
	b .L0808FC06
.L0808FCDC:
	adds r1, r6, #0
	adds r1, #0x55
	movs r0, #0x80
	strb r0, [r1]
	b .L0808FC06
.L0808FCE6:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	ldr r0, .L0808FCF0  @ 0x0000FFF7
	ands r7, r0
	b .L0808FE5E
	.align 2, 0
.L0808FCF0: .4byte 0x0000FFF7
.L0808FCF4:
	adds r0, r2, #1
	str r0, [r6, #0x2c]
	movs r0, #8
	orrs r7, r0
	lsls r0, r7, #0x10
	lsrs r7, r0, #0x10
	b .L0808FE5E
.L0808FD02:
	adds r1, r2, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r2, #1]
	cmp r0, #1
	bne .L0808FD10
	adds r0, r1, #1
	str r0, [r6, #0x2c]
.L0808FD10:
	bl func_0808EA3C
	movs r1, #8
	ands r1, r0
	cmp r1, #0
	beq .L0808FD26
	mov r0, r8
	movs r1, #2
	bl Proc_Goto
	b .L0808FD3C
.L0808FD26:
	adds r0, r6, #0
	adds r0, #0x54
	ldrb r0, [r0]
	adds r0, #1
	adds r1, r6, #0
	adds r1, #0x5f
	strb r0, [r1]
	mov r0, r8
	movs r1, #1
	bl Proc_Goto
.L0808FD3C:
	ldr r0, .L0808FD44  @ 0x0000FFEF
	ands r7, r0
	b .L0808FE68
	.align 2, 0
.L0808FD44: .4byte 0x0000FFEF
.L0808FD48:
	ldr r0, .L0808FD90  @ 0x0000FFEF
	ands r7, r0
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	bl func_0808EA3C
	movs r1, #0x80
	lsls r1, r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0808FD94
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r1, [r0]
	adds r5, r6, #0
	adds r5, #0x59
	lsls r1, r1, #3
	ldrb r0, [r5]
	adds r1, r1, r0
	adds r1, #4
	adds r0, r6, #0
	adds r0, #0x58
	ldrb r2, [r0]
	adds r4, r6, #0
	adds r4, #0x5a
	lsls r2, r2, #3
	ldrb r0, [r4]
	adds r2, r2, r0
	adds r2, #8
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, r8
	bl func_08007D04
	b .L0808FDBE
	.align 2, 0
.L0808FD90: .4byte 0x0000FFEF
.L0808FD94:
	adds r0, r6, #0
	adds r0, #0x57
	ldrb r1, [r0]
	adds r5, r6, #0
	adds r5, #0x59
	lsls r1, r1, #3
	ldrb r0, [r5]
	adds r1, r1, r0
	adds r1, #4
	adds r0, r6, #0
	adds r0, #0x58
	ldrb r2, [r0]
	adds r4, r6, #0
	adds r4, #0x5a
	lsls r2, r2, #3
	ldrb r0, [r4]
	adds r2, r2, r0
	adds r2, #8
	mov r0, r8
	bl NewTextBluArrowAndButtonChecker
.L0808FDBE:
	adds r1, r5, #0
	adds r2, r4, #0
	ldr r0, [r6, #0x2c]
	bl func_0808F358
	b .L0808FE68
.L0808FDCA:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #1
	str r1, [r6, #0x2c]
	ldrb r0, [r0, #1]
	cmp r0, #0x21
	bne .L0808FDE2
	adds r2, r6, #0
	adds r2, #0x5e
	ldrb r1, [r2]
	movs r0, #1
	subs r0, r0, r1
	strb r0, [r2]
.L0808FDE2:
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	b .L0808FE5E
.L0808FDEA:
	adds r0, r6, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0808FE0E
	adds r5, r6, #0
	adds r5, #0x54
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xc
	bl Text_SetColor
	b .L0808FE26
.L0808FE0E:
	adds r5, r6, #0
	adds r5, #0x54
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r4, r6, #0
	adds r4, #0x34
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0xb
	bl Text_SetColor
.L0808FE26:
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldr r1, [r6, #0x2c]
	bl Text_DrawCharacter
	str r0, [r6, #0x2c]
	bl GetTextPrintDelay
	cmp r0, #1
	beq .L0808FE5E
	bl func_0808EA3C
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	bne .L0808FE5E
	ldr r0, .L0808FE80  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0808FE5E
	movs r0, #0x6e
	bl m4aSongNumStart
.L0808FE5E:
	movs r0, #1
	add r9, r0
	cmp r9, sl
	bge .L0808FE68
	b .L0808F99A
.L0808FE68:
	movs r0, #0
	bl SetTextFont
	ldr r0, .L0808FE84  @ gUnknown_03005398
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0808FE88
	cmp r0, #1
	beq .L0808FE8C
	movs r0, #0
	b .L0808FE8E
	.align 2, 0
.L0808FE80: .4byte gPlaySt
.L0808FE84: .4byte gUnknown_03005398
.L0808FE88:
	movs r0, #0
	b .L0808FE8E
.L0808FE8C:
	movs r0, #1
.L0808FE8E:
	adds r1, r7, #0
	bl SetFaceDispById
.L0808FE94:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808F8B4

	THUMB_FUNC_START func_0808FEA4
func_0808FEA4: @ 0x0808FEA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r1
	mov ip, r2
	adds r4, r0, #0
	movs r6, #0
	cmp r6, ip
	bge .L0808FF00
.L0808FEBA:
	adds r1, r4, #0
	movs r2, #0
	adds r0, r6, #1
	mov r9, r0
	cmp r2, r8
	bge .L0808FEF4
	mov r7, ip
	subs r7, #1
	mov sl, r2
.L0808FECC:
	adds r5, r2, #1
	movs r3, #6
.L0808FED0:
	ldr r0, [r1, #4]
	stm r1!, {r0}
	subs r3, #1
	cmp r3, #0
	bge .L0808FED0
	cmp r6, r7
	bne .L0808FEE2
	mov r0, sl
	b .L0808FEEC
.L0808FEE2:
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #5
	adds r0, r0, r4
	ldr r0, [r0]
.L0808FEEC:
	stm r1!, {r0}
	adds r2, r5, #0
	cmp r2, r8
	blt .L0808FECC
.L0808FEF4:
	movs r0, #0x80
	lsls r0, r0, #3
	adds r4, r4, r0
	mov r6, r9
	cmp r6, ip
	blt .L0808FEBA
.L0808FF00:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808FEA4

	THUMB_FUNC_START func_0808FF10
func_0808FF10: @ 0x0808FF10
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	THUMB_FUNC_END func_0808FF10

	THUMB_FUNC_START func_0808FF18
func_0808FF18: @ 0x0808FF18
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r5, [r7, #0x14]
	adds r6, r5, #0
	adds r6, #0x54
	movs r2, #0
	ldrsb r2, [r6, r2]
	adds r2, #1
	lsls r2, r2, #1
	ldr r0, [r5, #0x4c]
	adds r1, r5, #0
	adds r1, #0x5b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_0808FEA4
	adds r1, r7, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	movs r2, #0
	mov r8, r2
	strh r0, [r1]
	movs r0, #0
	ldrsh r1, [r1, r0]
	adds r4, r5, #0
	adds r4, #0x5f
	ldrb r0, [r4]
	lsls r0, r0, #4
	cmp r1, r0
	bne .L0808FF92
	adds r0, r5, #0
	bl func_0808F30C
	ldrb r1, [r4]
	subs r1, #1
	ldrb r0, [r6]
	subs r0, r0, r1
	strb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x59
	mov r2, r8
	strb r2, [r1]
	subs r4, #5
	strb r2, [r4]
	ldr r0, [r5, #0x2c]
	adds r2, r4, #0
	bl func_0808F358
	movs r0, #0
	ldrsb r0, [r6, r0]
	lsls r0, r0, #4
	ldrb r1, [r4]
	adds r0, r0, r1
	strb r0, [r4]
	adds r0, r7, #0
	bl Proc_Break
.L0808FF92:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808FF18

	THUMB_FUNC_START func_0808FF9C
func_0808FF9C: @ 0x0808FF9C
	push {r4, lr}
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	bl func_0808F2BC
	adds r1, r4, #0
	adds r1, #0x54
	movs r0, #0
	strb r0, [r1]
	adds r1, #5
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x5a
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl func_0808F358
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0808FF9C

	THUMB_FUNC_START func_0808FFC4
func_0808FFC4: @ 0x0808FFC4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L0808FFE4  @ gUnknown_08A01E64
	adds r0, r4, #0
	bl FindProc
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0808FFE4: .4byte gUnknown_08A01E64

	THUMB_FUNC_END func_0808FFC4

	THUMB_FUNC_START func_0808FFE8
func_0808FFE8: @ 0x0808FFE8
	push {lr}
	ldr r0, .L0808FFF8  @ gUnknown_08A01E64
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L0808FFF8: .4byte gUnknown_08A01E64

	THUMB_FUNC_END func_0808FFE8

	THUMB_FUNC_START func_0808FFFC
func_0808FFFC: @ 0x0808FFFC
	push {lr}
	bl func_0808EA3C
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne .L0809000E
	movs r0, #0
	b .L08090010
.L0809000E:
	movs r0, #1
.L08090010:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0808FFFC

	THUMB_FUNC_START func_08090014
func_08090014: @ 0x08090014
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, .L08090040  @ gKeySt
	ldr r0, [r1]
	ldrh r2, [r0, #8]
	movs r0, #2
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq .L08090048
	ldr r0, .L08090044  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809003A
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809003A:
	movs r0, #0
	b .L08090068
	.align 2, 0
.L08090040: .4byte gKeySt
.L08090044: .4byte gPlaySt
.L08090048:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r2
	cmp r0, #0
	beq .L08090078
	ldr r0, .L08090074  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08090064
	movs r0, #0x6a
	bl m4aSongNumStart
.L08090064:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
.L08090068:
	bl SetDialoguePromptResult
	adds r0, r4, #0
	bl Proc_Break
	b .L080900E2
	.align 2, 0
.L08090074: .4byte gPlaySt
.L08090078:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq .L0809009C
	movs r2, #0x2a
	ldrsh r0, [r4, r2]
	cmp r0, #2
	bne .L0809009C
	ldr r0, .L080900E8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809009A
	movs r0, #0x67
	bl m4aSongNumStart
.L0809009A:
	strh r6, [r4, #0x2a]
.L0809009C:
	ldr r0, [r5]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080900C6
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #1
	bne .L080900C6
	ldr r0, .L080900E8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080900C2
	movs r0, #0x67
	bl m4aSongNumStart
.L080900C2:
	movs r0, #2
	strh r0, [r4, #0x2a]
.L080900C6:
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	movs r1, #0x2a
	ldrsh r2, [r4, r1]
	subs r2, #1
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r0, r0, r1
	subs r0, #4
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	bl DisplayUiHand
.L080900E2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080900E8: .4byte gPlaySt

	THUMB_FUNC_END func_08090014

	THUMB_FUNC_START func_080900EC
func_080900EC: @ 0x080900EC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	mov r8, r1
	adds r4, r2, #0
	mov r9, r3
	ldr r6, [sp, #0x1c]
	ldr r7, [sp, #0x24]
	ldr r0, [r5]
	bl GetMsg
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0x10
	adds r2, r6, #0
	bl Text_InsertDrawString
	ldr r0, [r5, #4]
	bl GetMsg
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0x38
	adds r2, r6, #0
	bl Text_InsertDrawString
	ldr r0, .L08090148  @ gUnknown_08A01EC4
	adds r1, r7, #0
	bl SpawnProcLocking
	mov r1, sp
	ldrh r1, [r1, #0x20]
	strh r1, [r0, #0x2a]
	adds r4, #0x10
	strh r4, [r0, #0x2c]
	mov r2, r9
	strh r2, [r0, #0x2e]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08090148: .4byte gUnknown_08A01EC4

	THUMB_FUNC_END func_080900EC

	THUMB_FUNC_START func_0809014C
func_0809014C: @ 0x0809014C
	push {r4, r5, lr}
	ldr r0, .L080901B8  @ gUnknown_0200E158
	bl InitUnitStack
	movs r5, #1
.L08090156:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L0809017A
	ldr r0, [r4]
	cmp r0, #0
	beq .L0809017A
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809017A
	adds r0, r4, #0
	bl PushUnit
.L0809017A:
	adds r5, #1
	cmp r5, #0x3f
	ble .L08090156
	movs r5, #1
.L08090182:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L080901A6
	ldr r0, [r4]
	cmp r0, #0
	beq .L080901A6
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080901A6
	adds r0, r4, #0
	bl PushUnit
.L080901A6:
	adds r5, #1
	cmp r5, #0x3f
	ble .L08090182
	bl LoadPlayerUnitsFromUnitStack
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080901B8: .4byte gUnknown_0200E158

	THUMB_FUNC_END func_0809014C

	THUMB_FUNC_START func_080901BC
func_080901BC: @ 0x080901BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	ldr r0, .L08090234  @ gUnknown_08A17B58
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	mov r1, r8
	adds r2, r7, #0
	bl PutSpriteExt
	movs r5, #0
	subs r0, r6, #1
	cmp r5, r0
	bge .L08090210
	mov r4, r8
	adds r4, #8
.L080901F2:
	ldr r0, .L08090234  @ gUnknown_08A17B58
	ldr r3, [r0, #4]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r7, #0
	bl PutSpriteExt
	adds r4, #0x10
	adds r5, #1
	subs r0, r6, #1
	cmp r5, r0
	blt .L080901F2
.L08090210:
	lsls r1, r5, #4
	add r1, r8
	adds r1, #8
	ldr r0, .L08090234  @ gUnknown_08A17B58
	ldr r3, [r0, #8]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r2, r7, #0
	bl PutSpriteExt
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08090234: .4byte gUnknown_08A17B58

	THUMB_FUNC_END func_080901BC

	THUMB_FUNC_START func_08090238
func_08090238: @ 0x08090238
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	ldr r5, .L080902C0  @ gBg2Tm+0x6A
	adds r0, r5, #0
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, .L080902C4  @ gUnknown_0200E150
	adds r0, r4, #0
	bl ClearText
	movs r7, #0
	mov r8, r4
	mov sl, r5
.L08090266:
	movs r6, #0
	lsls r0, r7, #3
	adds r1, r7, #1
	mov r9, r1
	adds r0, r0, r7
	lsls r5, r0, #4
	ldr r2, .L080902C8  @ gUnknown_08A17C48
	adds r1, r5, r2
.L08090276:
	ldrb r0, [r1]
	ldr r2, [sp]
	cmp r0, r2
	bne .L080902FC
	ldr r4, .L080902C4  @ gUnknown_0200E150
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, .L080902CC  @ 0x000004FD
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	cmp r7, #5
	bne .L080902D0
	cmp r6, #0
	beq .L080902D0
	adds r0, r4, #0
	mov r1, sl
	bl PutText
	adds r1, r6, #0
	adds r1, #0x6f
	mov r0, sl
	adds r0, #8
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	b .L08090306
	.align 2, 0
.L080902C0: .4byte gBg2Tm+0x6A
.L080902C4: .4byte gUnknown_0200E150
.L080902C8: .4byte gUnknown_08A17C48
.L080902CC: .4byte 0x000004FD
.L080902D0:
	mov r0, r8
	movs r1, #4
	bl Text_Skip
	ldr r1, .L080902F4  @ gUnknown_08A17C4C
	adds r0, r5, r1
	ldr r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	mov r0, r8
	bl Text_DrawString
	mov r0, r8
	ldr r1, .L080902F8  @ gBg2Tm+0x6A
	bl PutText
	b .L08090306
	.align 2, 0
.L080902F4: .4byte gUnknown_08A17C4C
.L080902F8: .4byte gBg2Tm+0x6A
.L080902FC:
	adds r5, #0x10
	adds r1, #0x10
	adds r6, #1
	cmp r6, #8
	ble .L08090276
.L08090306:
	mov r7, r9
	cmp r7, #9
	ble .L08090266
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08090238

	THUMB_FUNC_START func_08090324
func_08090324: @ 0x08090324
	push {lr}
	adds r3, r0, #0
	movs r2, #0
	ldr r1, .L08090348  @ gUnknown_0200F15C
.L0809032C:
	ldr r0, [r1]
	cmp r0, r3
	beq .L08090354
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble .L0809032C
	movs r2, #0
	ldr r1, .L08090348  @ gUnknown_0200F15C
.L0809033E:
	ldr r0, [r1]
	cmp r0, #0xff
	bne .L0809034C
	str r3, [r1]
	b .L08090354
	.align 2, 0
.L08090348: .4byte gUnknown_0200F15C
.L0809034C:
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble .L0809033E
.L08090354:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08090324

	THUMB_FUNC_START func_08090358
func_08090358: @ 0x08090358
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x28
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x14
	ldr r3, .L0809040C  @ gUnknown_0200F158
	movs r2, #0xff
	add r1, sp, #0x1c
.L0809036A:
	str r2, [r1]
	subs r1, #4
	cmp r1, sp
	bge .L0809036A
	cmp r0, #0
	ble .L08090378
	subs r0, #1
.L08090378:
	movs r6, #0
	ldrb r3, [r3]
	cmp r0, r3
	bge .L080903BE
	ldr r1, .L08090410  @ gUnknown_0200D6E0
	adds r5, r0, #0
	mov r7, sp
	lsls r0, r5, #2
	adds r4, r0, r1
.L0809038A:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	cmp r0, #0
	beq .L080903AA
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	str r0, [r7]
.L080903AA:
	adds r5, #1
	adds r7, #4
	adds r4, #4
	adds r6, #1
	cmp r6, #7
	bgt .L080903BE
	ldr r0, .L0809040C  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r5, r0
	blt .L0809038A
.L080903BE:
	movs r6, #0
	ldr r7, .L08090414  @ gUnknown_0200F15C
	mov r8, r7
.L080903C4:
	lsls r1, r6, #2
	mov r2, r8
	adds r0, r1, r2
	ldr r0, [r0]
	adds r4, r1, #0
	adds r6, #1
	cmp r0, #0xff
	beq .L080903FC
	movs r5, #0
	adds r1, r0, #0
	mov r2, sp
	movs r3, #7
.L080903DC:
	ldr r0, [r2]
	cmp r0, r1
	bne .L080903E4
	movs r5, #1
.L080903E4:
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge .L080903DC
	cmp r5, #0
	bne .L080903FC
	adds r4, r4, r7
	ldr r0, [r4]
	bl ClearIcon
	movs r0, #0xff
	str r0, [r4]
.L080903FC:
	cmp r6, #7
	ble .L080903C4
	add sp, #0x28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809040C: .4byte gUnknown_0200F158
.L08090410: .4byte gUnknown_0200D6E0
.L08090414: .4byte gUnknown_0200F15C

	THUMB_FUNC_END func_08090358

	THUMB_FUNC_START func_08090418
func_08090418: @ 0x08090418
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	cmp r1, #0
	beq .L0809045A
	bl func_08095394
	b .L0809045E
.L08090430:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r3, [r0]
	strh r3, [r4, #0x3e]
	b .L08090508
.L0809043A:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r3, [r0]
	strh r1, [r4, #0x3e]
	b .L08090508
.L08090444:
	subs r1, r3, r1
	adds r0, r4, #0
	adds r0, #0x2c
	strb r1, [r0]
	b .L08090508
.L0809044E:
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	strh r7, [r4, #0x3e]
	b .L08090508
.L0809045A:
	bl GetLastStatScreenUid
.L0809045E:
	adds r1, r0, #0
	movs r3, #0
	ldr r0, .L08090498  @ gUnknown_0200F158
	ldrb r6, [r0]
	mov r9, r0
	cmp r3, r6
	bge .L08090508
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
	movs r0, #0x2c
	adds r0, r0, r4
	mov ip, r0
	movs r5, #0x40
	negs r5, r5
	movs r7, #0x10
	negs r7, r7
	ldr r2, .L0809049C  @ gUnknown_0200D6E0
.L08090482:
	mov r0, r8
	cmp r0, #0
	beq .L080904A0
	ldr r0, [r2]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r1
	beq .L080904AE
	b .L080904FC
	.align 2, 0
.L08090498: .4byte gUnknown_0200F158
.L0809049C: .4byte gUnknown_0200D6E0
.L080904A0:
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	bne .L080904FC
.L080904AE:
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r3, [r0]
	cmp r3, #0
	beq .L08090430
	mov r0, r9
	ldrb r2, [r0]
	subs r0, r2, #1
	cmp r3, r0
	bne .L080904DA
	cmp r2, #6
	bls .L0809043A
	movs r0, #5
	mov r1, ip
	strb r0, [r1]
	mov r1, r9
	ldrb r0, [r1]
	subs r0, #6
	lsls r0, r0, #4
	strh r0, [r4, #0x3e]
	b .L08090508
.L080904DA:
	ldrh r2, [r4, #0x3e]
	lsrs r1, r2, #4
	adds r0, r1, #0
	cmp r3, r0
	ble .L080904EA
	adds r0, #5
	cmp r3, r0
	blt .L08090444
.L080904EA:
	cmp r2, r7
	bgt .L0809044E
	cmp r2, r5
	bge .L08090508
	movs r0, #4
	mov r1, ip
	strb r0, [r1]
	strh r5, [r4, #0x3e]
	b .L08090508
.L080904FC:
	adds r5, #0x10
	adds r7, #0x10
	adds r2, #4
	adds r3, #1
	cmp r3, r6
	blt .L08090482
.L08090508:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08090418

	THUMB_FUNC_START func_08090514
func_08090514: @ 0x08090514
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq .L080905B4
	ldr r0, .L080905B0  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	adds r1, #0x31
	movs r0, #0x3a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2c
	movs r3, #0xf0
	strb r3, [r0]
	subs r1, #1
	movs r0, #0x98
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r5, #2
	orrs r0, r5
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r2]
	mov r7, ip
	adds r7, #0x35
	ldrb r2, [r7]
	movs r1, #2
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r6
	strb r0, [r7]
	mov r2, ip
	adds r2, #0x36
	ldrb r0, [r2]
	ands r1, r0
	orrs r1, r5
	orrs r1, r4
	orrs r1, r3
	movs r0, #0x11
	negs r0, r0
	ands r1, r0
	strb r1, [r2]
	b .L08090614
	.align 2, 0
.L080905B0: .4byte gDispIo
.L080905B4:
	ldr r0, .L0809061C  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	adds r1, #0x31
	movs r0, #0x3a
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r6, #2
	orrs r0, r6
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
.L08090614:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809061C: .4byte gDispIo

	THUMB_FUNC_END func_08090514

	THUMB_FUNC_START func_08090620
func_08090620: @ 0x08090620
	push {r4, lr}
	adds r4, r0, #0
	bl MU_EndAll
	ldr r0, [r4, #0x40]
	bl Proc_End
	ldr r0, [r4, #0x44]
	bl Proc_End
	bl EndGreenText
	ldr r2, .L08090660  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08090664
	movs r0, #0x11
	bl SetStatScreenConfig
	b .L0809066A
	.align 2, 0
.L08090660: .4byte gDispIo
.L08090664:
	movs r0, #0x1f
	bl SetStatScreenConfig
.L0809066A:
	ldr r1, .L080906A4  @ gUnknown_0200D6E0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	adds r1, r4, #0
	bl StartStatScreen
	ldr r1, .L080906A8  @ gPlaySt
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x32
	lsls r0, r0, #7
	ldrb r2, [r2]
	adds r0, r0, r2
	strb r0, [r1, #0x1a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #4
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080906A4: .4byte gUnknown_0200D6E0
.L080906A8: .4byte gPlaySt

	THUMB_FUNC_END func_08090620

	THUMB_FUNC_START func_080906AC
func_080906AC: @ 0x080906AC
	push {lr}
	bl func_08090D80
	ldr r2, .L080906D4  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
.L080906D4: .4byte gDispIo

	THUMB_FUNC_END func_080906AC

	THUMB_FUNC_START func_080906D8
func_080906D8: @ 0x080906D8
	ldr r2, .L080906F4  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080906F4: .4byte gDispIo

	THUMB_FUNC_END func_080906D8

	THUMB_FUNC_START func_080906F8
func_080906F8: @ 0x080906F8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x3b
	movs r4, #0
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r5, #0x2c]
	ldrh r0, [r0, #0x3e]
	movs r1, #0
	strh r0, [r5, #0x38]
	adds r0, r5, #0
	adds r0, #0x3a
	strb r1, [r0]
	adds r0, r5, #0
	bl Make6CMenuScroll
	str r0, [r5, #0x34]
	movs r0, #0xe0
	movs r1, #0x40
	bl func_080976AC
	ldr r0, [r5, #0x2c]
	ldrh r1, [r0, #0x3e]
	ldr r0, .L08090778  @ gUnknown_0200F158
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl func_080976CC
	movs r0, #0xe4
	lsls r0, r0, #7
	movs r1, #1
	bl func_08097700
	bl ForceSyncUnitSpriteSheet
	movs r0, #7
	strh r0, [r5, #0x3e]
	adds r1, r5, #0
	adds r1, #0x40
	movs r0, #0xe1
	strh r0, [r1]
	adds r0, r5, #0
	adds r0, #0x44
	strh r4, [r0]
	subs r0, #2
	strh r4, [r0]
	adds r0, #6
	movs r1, #4
	strh r1, [r0]
	subs r0, #2
	strh r1, [r0]
	ldr r0, .L0809077C  @ gUnknown_08A1C7D8
	ldr r1, .L08090780  @ 0x06010280
	bl Decompress
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08090778: .4byte gUnknown_0200F158
.L0809077C: .4byte gUnknown_08A1C7D8
.L08090780: .4byte 0x06010280

	THUMB_FUNC_END func_080906F8

	THUMB_FUNC_START func_08090784
func_08090784: @ 0x08090784
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	adds r6, r0, #0
	add r1, sp, #4
	ldr r0, .L08090834  @ gUnknown_08205B84
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r6, #0x2c]
	adds r0, #0x34
	ldrb r0, [r0]
	ldr r5, .L08090838  @ 0x000020E2
	cmp r0, #0
	bne .L080907AC
	movs r5, #0xe2
.L080907AC:
	adds r4, r6, #0
	adds r4, #0x3b
	ldrb r0, [r4]
	lsrs r0, r0, #3
	movs r1, #3
	ands r0, r1
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	adds r2, #7
	ldr r3, .L0809083C  @ gUnknown_08A17B64
	movs r7, #0x90
	lsls r7, r7, #8
	str r7, [sp]
	movs r0, #0xb
	adds r1, r5, #0
	bl PutSpriteExt
	ldr r1, .L08090840  @ gUnknown_08A17C20
	ldr r0, [r6, #0x2c]
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	str r7, [sp]
	movs r0, #0xd
	movs r1, #0x10
	movs r2, #8
	bl PutSpriteExt
	ldr r0, [r6, #0x2c]
	ldrh r1, [r0, #0x3e]
	ldr r0, .L08090844  @ gUnknown_0200F158
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl func_080976CC
	ldr r5, [r6, #0x2c]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	str r4, [sp, #0x14]
	cmp r0, #2
	bls .L0809084C
	ldr r2, .L08090848  @ gUnknown_08A17C48
	adds r3, r5, #0
	adds r3, #0x2d
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r3, [r3]
	adds r0, r0, r3
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	adds r1, r5, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x28
	bl DisplayUiHand
	b .L08090862
	.align 2, 0
.L08090834: .4byte gUnknown_08205B84
.L08090838: .4byte 0x000020E2
.L0809083C: .4byte gUnknown_08A17B64
.L08090840: .4byte gUnknown_08A17C20
.L08090844: .4byte gUnknown_0200F158
.L08090848: .4byte gUnknown_08A17C48
.L0809084C:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	lsls r2, r2, #4
	adds r2, #0x40
	ldr r3, .L080908B4  @ gUnknown_08A17B6C
	str r7, [sp]
	movs r0, #0xd
	movs r1, #4
	bl PutSpriteExt
.L08090862:
	ldr r1, [r6, #0x2c]
	ldrh r0, [r6, #0x38]
	ldrh r2, [r1, #0x3e]
	cmp r0, r2
	bne .L08090876
	ldrh r0, [r1, #0x3e]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq .L080908C0
.L08090876:
	ldr r0, .L080908B8  @ gPal
	ldr r1, .L080908BC  @ gUnknown_02013460
	ldrh r1, [r1, #0x10]
	movs r3, #0xcf
	lsls r3, r3, #2
	adds r0, r0, r3
	strh r1, [r0]
	bl EnablePalSync
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x20
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	ldrh r0, [r0, #0x3e]
	strh r0, [r6, #0x38]
	adds r0, r6, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	str r2, [sp, #0x18]
	mov r9, r0
	cmp r1, #0
	bne .L080908FC
	movs r0, #1
	bl func_08090514
	movs r0, #1
	mov r4, r9
	strb r0, [r4]
	b .L080908FC
	.align 2, 0
.L080908B4: .4byte gUnknown_08A17B6C
.L080908B8: .4byte gPal
.L080908BC: .4byte gUnknown_02013460
.L080908C0:
	ldr r2, .L08090B20  @ gPal
	ldr r3, .L08090B24  @ gUnknown_02013460
	adds r4, r6, #0
	adds r4, #0x3c
	ldrb r0, [r4]
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r1, #0xcf
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	adds r0, r6, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	str r4, [sp, #0x18]
	mov r9, r0
	cmp r1, #1
	bne .L080908FC
	movs r0, #0
	bl func_08090514
	movs r0, #0
	mov r2, r9
	strb r0, [r2]
.L080908FC:
	bl ForceSyncUnitSpriteSheet
	ldrh r0, [r6, #0x38]
	lsrs r7, r0, #4
	movs r1, #0xf
	ands r0, r1
	negs r0, r0
	mov r8, r0
	movs r5, #0
	ldr r0, .L08090B28  @ gUnknown_0200F158
	adds r3, r6, #0
	adds r3, #0x46
	str r3, [sp, #0x24]
	adds r4, r6, #0
	adds r4, #0x48
	str r4, [sp, #0x28]
	adds r1, r6, #0
	adds r1, #0x42
	str r1, [sp, #0x1c]
	adds r2, r6, #0
	adds r2, #0x44
	str r2, [sp, #0x20]
	ldrb r0, [r0]
	cmp r7, r0
	bge .L08090964
	ldr r1, .L08090B2C  @ gUnknown_0200D6E0
	adds r4, r7, #0
	lsls r0, r7, #2
	adds r0, r0, r1
	mov sl, r0
.L08090938:
	lsls r2, r5, #4
	mov r0, r8
	adds r0, #0x38
	adds r2, r2, r0
	mov r3, sl
	adds r3, #4
	mov sl, r3
	subs r3, #4
	ldm r3!, {r0}
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl PutUnitSprite
	adds r4, #1
	adds r5, #1
	cmp r5, #5
	bgt .L08090964
	ldr r0, .L08090B28  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt .L08090938
.L08090964:
	mov r4, r9
	ldrb r0, [r4]
	cmp r0, #0
	beq .L08090990
	adds r3, r5, r7
	ldr r0, .L08090B28  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r3, r0
	bge .L08090990
	lsls r2, r5, #4
	mov r0, r8
	adds r0, #0x38
	adds r2, r2, r0
	ldr r1, .L08090B2C  @ gUnknown_0200D6E0
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl PutUnitSprite
.L08090990:
	ldr r2, .L08090B30  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080909A8
	movs r0, #0x1f
	ldr r1, [sp, #0x24]
	strh r0, [r1]
	movs r0, #1
	strh r0, [r6, #0x3e]
.L080909A8:
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080909C2
	movs r0, #0x1f
	ldr r2, [sp, #0x28]
	strh r0, [r2]
	adds r1, r6, #0
	adds r1, #0x40
	movs r0, #0xe7
	strh r0, [r1]
.L080909C2:
	ldr r3, [sp, #0x24]
	ldrh r0, [r3]
	ldr r4, [sp, #0x1c]
	ldrh r4, [r4]
	adds r0, r0, r4
	ldr r1, [sp, #0x1c]
	strh r0, [r1]
	ldr r2, [sp, #0x28]
	ldrh r0, [r2]
	ldr r3, [sp, #0x20]
	ldrh r3, [r3]
	adds r0, r0, r3
	ldr r4, [sp, #0x20]
	strh r0, [r4]
	ldr r0, [sp, #0x24]
	ldrh r1, [r0]
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #4
	ble .L080909F0
	subs r0, r1, #1
	ldr r3, [sp, #0x24]
	strh r0, [r3]
.L080909F0:
	ldr r4, [sp, #0x28]
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #4
	ble .L08090A00
	subs r0, r1, #1
	strh r0, [r4]
.L08090A00:
	bl GetGameTime
	movs r1, #3
	ands r1, r0
	cmp r1, #0
	bne .L08090A2C
	ldrh r1, [r6, #0x3e]
	movs r3, #0x3e
	ldrsh r0, [r6, r3]
	cmp r0, #6
	bgt .L08090A1A
	adds r0, r1, #1
	strh r0, [r6, #0x3e]
.L08090A1A:
	adds r1, r6, #0
	adds r1, #0x40
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #0xe1
	ble .L08090A2C
	subs r0, r2, #1
	strh r0, [r1]
.L08090A2C:
	ldr r1, [r6, #0x2c]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bls .L08090A90
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq .L08090A90
	movs r0, #0x3e
	ldrsh r4, [r6, r0]
	ldr r5, .L08090B34  @ Sprite_8x8
	ldr r1, [sp, #0x1c]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, .L08090B38  @ 0x00001414
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x28
	adds r3, r5, #0
	bl PutSprite
	movs r3, #0x3e
	ldrsh r4, [r6, r3]
	ldr r1, [sp, #0x1c]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, .L08090B3C  @ 0x0000141A
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x30
	adds r3, r5, #0
	bl PutSprite
.L08090A90:
	ldr r1, [r6, #0x2c]
	adds r0, r1, #0
	adds r0, #0x2f
	adds r2, r1, #0
	adds r2, #0x2e
	ldrb r0, [r0]
	ldrb r2, [r2]
	cmp r0, r2
	bcs .L08090AFE
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq .L08090AFE
	adds r4, r6, #0
	adds r4, #0x40
	movs r3, #0
	ldrsh r5, [r4, r3]
	ldr r6, .L08090B40  @ Sprite_8x8_HFlipped
	ldr r1, [sp, #0x20]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, .L08090B38  @ 0x00001414
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	movs r2, #0x28
	adds r3, r6, #0
	bl PutSprite
	movs r3, #0
	ldrsh r4, [r4, r3]
	ldr r1, [sp, #0x20]
	ldrh r0, [r1]
	lsrs r0, r0, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, .L08090B3C  @ 0x0000141A
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0x30
	adds r3, r6, #0
	bl PutSprite
.L08090AFE:
	ldr r3, [sp, #0x14]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r4, [sp, #0x18]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08090B20: .4byte gPal
.L08090B24: .4byte gUnknown_02013460
.L08090B28: .4byte gUnknown_0200F158
.L08090B2C: .4byte gUnknown_0200D6E0
.L08090B30: .4byte gKeySt
.L08090B34: .4byte Sprite_8x8
.L08090B38: .4byte 0x00001414
.L08090B3C: .4byte 0x0000141A
.L08090B40: .4byte Sprite_8x8_HFlipped

	THUMB_FUNC_END func_08090784

	THUMB_FUNC_START nullsub_63
nullsub_63: @ 0x08090B44
	bx lr

	THUMB_FUNC_END nullsub_63

	THUMB_FUNC_START func_08090B48
func_08090B48: @ 0x08090B48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	mov r8, r1
	ldr r0, [r7, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L08090B66
	mov r1, r8
	adds r1, #0x3b
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L08090B66:
	ldr r5, .L08090C48  @ gUnknown_0200D3E0
	ldr r4, .L08090C4C  @ gUnknown_0200F158
	ldrb r1, [r4]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r5
	str r7, [r0]
	movs r1, #1
	negs r1, r1
	adds r0, r7, #0
	bl BattleGenerateUiStats
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	ldr r3, .L08090C50  @ gBattleUnitA
	adds r0, r3, #0
	adds r0, #0x5a
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #4]
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	adds r0, r3, #0
	adds r0, #0x60
	ldrh r0, [r0]
	adds r0, #1
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #6]
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r5
	adds r0, r3, #0
	adds r0, #0x62
	ldrh r0, [r0]
	adds r0, #1
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #8]
	adds r0, r7, #0
	bl GetUnitSupportCount
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
	cmp r6, r5
	bge .L08090BF2
.L08090BDC:
	adds r0, r7, #0
	adds r1, r4, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08090BEC
	adds r6, #1
.L08090BEC:
	adds r4, #1
	cmp r4, r5
	blt .L08090BDC
.L08090BF2:
	cmp r6, #3
	ble .L08090C0C
	mov r5, r8
	adds r5, #0x2e
	ldrb r4, [r5]
	subs r0, r6, #1
	movs r1, #3
	bl __divsi3
	adds r0, #6
	cmp r4, r0
	bge .L08090C0C
	strb r0, [r5]
.L08090C0C:
	ldr r4, .L08090C48  @ gUnknown_0200D3E0
	ldr r3, .L08090C4C  @ gUnknown_0200F158
	ldrb r1, [r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	strb r6, [r0, #0xa]
	ldr r0, .L08090C54  @ gUnknown_0200D6E0
	ldrb r1, [r3]
	lsls r2, r1, #2
	adds r2, r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	str r0, [r2]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	adds r0, r7, #0
	bl GetUnitSpriteId
	bl UseUnitSprite
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08090C48: .4byte gUnknown_0200D3E0
.L08090C4C: .4byte gUnknown_0200F158
.L08090C50: .4byte gBattleUnitA
.L08090C54: .4byte gUnknown_0200D6E0

	THUMB_FUNC_END func_08090B48

	THUMB_FUNC_START func_08090C58
func_08090C58: @ 0x08090C58
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, .L08090CAC  @ gUnknown_0200F158
	movs r1, #0
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08090CB4
	ldr r0, .L08090CB0  @ gPlaySt
	ldrb r0, [r0, #0xf]
	adds r5, r0, #1
	adds r0, #0x40
	cmp r5, r0
	bge .L08090CF0
.L08090C78:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L08090C9E
	ldr r0, [r4]
	cmp r0, #0
	beq .L08090C9E
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08090C9E
	adds r0, r4, #0
	adds r1, r6, #0
	bl func_08090B48
.L08090C9E:
	adds r5, #1
	ldr r0, .L08090CB0  @ gPlaySt
	ldrb r0, [r0, #0xf]
	adds r0, #0x40
	cmp r5, r0
	blt .L08090C78
	b .L08090CF0
	.align 2, 0
.L08090CAC: .4byte gUnknown_0200F158
.L08090CB0: .4byte gPlaySt
.L08090CB4:
	ldr r0, .L08090CBC  @ gPlaySt
	ldrb r0, [r0, #0xf]
	adds r4, r0, #1
	b .L08090CEA
	.align 2, 0
.L08090CBC: .4byte gPlaySt
.L08090CC0:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L08090CE4
	ldr r0, [r2]
	cmp r0, #0
	beq .L08090CE4
	ldr r0, [r2, #0xc]
	ldr r1, .L08090CF8  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne .L08090CE4
	adds r0, r2, #0
	adds r1, r6, #0
	bl func_08090B48
.L08090CE4:
	adds r4, #1
	ldr r0, .L08090CFC  @ gPlaySt
	ldrb r0, [r0, #0xf]
.L08090CEA:
	adds r0, #0x40
	cmp r4, r0
	blt .L08090CC0
.L08090CF0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08090CF8: .4byte 0x0001000C
.L08090CFC: .4byte gPlaySt

	THUMB_FUNC_END func_08090C58

	THUMB_FUNC_START func_08090D00
func_08090D00: @ 0x08090D00
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, .L08090D44  @ gUnknown_0200F158
	movs r1, #0
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08090D48
	movs r5, #1
.L08090D16:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L08090D3C
	ldr r0, [r4]
	cmp r0, #0
	beq .L08090D3C
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08090D3C
	adds r0, r4, #0
	adds r1, r6, #0
	bl func_08090B48
.L08090D3C:
	adds r5, #1
	cmp r5, #0x3f
	ble .L08090D16
	b .L08090D74
	.align 2, 0
.L08090D44: .4byte gUnknown_0200F158
.L08090D48:
	movs r4, #1
.L08090D4A:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L08090D6E
	ldr r0, [r2]
	cmp r0, #0
	beq .L08090D6E
	ldr r0, [r2, #0xc]
	ldr r1, .L08090D7C  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne .L08090D6E
	adds r0, r2, #0
	adds r1, r6, #0
	bl func_08090B48
.L08090D6E:
	adds r4, #1
	cmp r4, #0x3f
	ble .L08090D4A
.L08090D74:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08090D7C: .4byte 0x0001000C

	THUMB_FUNC_END func_08090D00

	THUMB_FUNC_START func_08090D80
func_08090D80: @ 0x08090D80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	mov r8, r0
	ldr r2, .L08090E60  @ gDispIo
	ldrb r0, [r2, #1]
	movs r6, #1
	orrs r0, r6
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetOnVMatch
	movs r0, #0
	bl SetupBackgrounds
	bl ResetText
	bl ResetTextFont
	bl ClearIcons
	bl ApplyUnitSpritePalettes
	movs r4, #0
	str r4, [sp, #4]
	ldr r1, .L08090E64  @ gPal+0x360
	ldr r2, .L08090E68  @ 0x01000008
	add r0, sp, #4
	bl CpuFastSet
	bl LoadObjUiGfx
	mov r0, r8
	bl StartGreenText
	mov r0, r8
	adds r0, #0x3b
	strb r4, [r0]
	subs r0, #0xd
	movs r5, #6
	strb r5, [r0]
	mov r0, r8
	bl func_08090D00
	mov r0, r8
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08090E14
	mov r0, r8
	adds r0, #0x2a
	ldrb r0, [r0]
	mov r1, r8
	adds r1, #0x32
	str r1, [sp, #0x14]
	mov r2, r8
	adds r2, #0x29
	str r2, [sp, #8]
	movs r1, #0x2f
	add r1, r8
	mov sl, r1
	cmp r0, #1
	bne .L08090E88
.L08090E14:
	ldr r4, .L08090E6C  @ gPlaySt
	ldrb r1, [r4, #0x1a]
	mov r3, r8
	adds r3, #0x34
	mov r2, r8
	adds r2, #0x32
	str r2, [sp, #0x14]
	cmp r1, #0
	beq .L08090E38
	lsrs r0, r1, #7
	ands r0, r6
	adds r2, #1
	strb r0, [r2]
	strb r0, [r3]
	movs r0, #0x7f
	ands r1, r0
	ldr r0, [sp, #0x14]
	strb r1, [r0]
.L08090E38:
	mov r0, r8
	adds r0, #0x29
	ldrb r1, [r0]
	str r0, [sp, #8]
	movs r2, #0x2f
	add r2, r8
	mov sl, r2
	cmp r1, #4
	beq .L08090E7E
	ldrb r0, [r2]
	cmp r0, #0
	beq .L08090E7E
	ldrb r0, [r4, #0x19]
	lsrs r1, r0, #4
	cmp r1, #0
	beq .L08090E7E
	cmp r1, #6
	bls .L08090E70
	strb r5, [r2]
	b .L08090E74
	.align 2, 0
.L08090E60: .4byte gDispIo
.L08090E64: .4byte gPal+0x360
.L08090E68: .4byte 0x01000008
.L08090E6C: .4byte gPlaySt
.L08090E70:
	mov r0, sl
	strb r1, [r0]
.L08090E74:
	mov r1, sl
	ldrb r0, [r1]
	mov r1, r8
	adds r1, #0x36
	strb r0, [r1]
.L08090E7E:
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldrb r1, [r3]
	bl SortUnitList
.L08090E88:
	ldr r0, .L08090F70  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r4, .L08090F74  @ gBg1Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, .L08090F78  @ gBg2Tm
	movs r1, #0
	bl TmFill
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl LoadUiFrameGraphics
	ldr r0, .L08090F7C  @ gUnknown_08A1CD68
	ldr r1, .L08090F80  @ 0x06014800
	bl Decompress
	mov r1, sl
	ldrb r0, [r1]
	ldr r2, .L08090F84  @ gUnknown_08A1D288
	cmp r0, #0
	beq .L08090EC4
	ldr r2, .L08090F88  @ gUnknown_08A1CDC4
.L08090EC4:
	ldr r1, .L08090F8C  @ 0x06015800
	adds r0, r2, #0
	bl Decompress
	ldr r0, .L08090F90  @ gUnknown_08A1B154
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	bl func_08097FDC
	ldr r1, .L08090F94  @ gUnknown_08A1C8B4
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	bl TmApplyTsa_thm
	movs r4, #0
	mov r2, r8
	adds r2, #0x2e
	str r2, [sp, #0x10]
	mov r0, r8
	adds r0, #0x2b
	str r0, [sp, #0xc]
	ldr r6, .L08090F98  @ gUnknown_0200E098
	movs r1, #0x10
	adds r1, r1, r6
	mov r9, r1
	adds r5, r6, #0
	movs r7, #0
.L08090F02:
	lsls r0, r4, #3
	ldr r1, .L08090F9C  @ gUnknown_0200E060
	adds r0, r0, r1
	movs r1, #5
	bl InitText
	adds r0, r5, #0
	movs r1, #8
	bl InitTextDb
	adds r0, r6, #0
	adds r0, #8
	adds r0, r7, r0
	movs r1, #7
	bl InitText
	mov r0, r9
	movs r1, #5
	bl InitText
	movs r2, #0x18
	add r9, r2
	adds r5, #0x18
	adds r7, #0x18
	adds r4, #1
	cmp r4, #6
	ble .L08090F02
	ldr r0, .L08090FA0  @ gUnknown_0200E140
	movs r1, #4
	bl InitText
	ldr r0, .L08090FA4  @ gUnknown_0200E148
	movs r1, #0x14
	bl InitText
	ldr r0, .L08090FA8  @ gUnknown_0200E150
	movs r1, #8
	bl InitText
	ldr r1, [sp, #0x14]
	ldrb r0, [r1]
	bl func_08090238
	ldr r2, [sp, #8]
	ldrb r0, [r2]
	cmp r0, #4
	bne .L08090FAC
	mov r0, r8
	movs r1, #0
	bl func_08090418
	movs r0, #0
	ldr r1, [sp, #8]
	strb r0, [r1]
	b .L08090FBE
	.align 2, 0
.L08090F70: .4byte gBg0Tm
.L08090F74: .4byte gBg1Tm
.L08090F78: .4byte gBg2Tm
.L08090F7C: .4byte gUnknown_08A1CD68
.L08090F80: .4byte 0x06014800
.L08090F84: .4byte gUnknown_08A1D288
.L08090F88: .4byte gUnknown_08A1CDC4
.L08090F8C: .4byte 0x06015800
.L08090F90: .4byte gUnknown_08A1B154
.L08090F94: .4byte gUnknown_08A1C8B4
.L08090F98: .4byte gUnknown_0200E098
.L08090F9C: .4byte gUnknown_0200E060
.L08090FA0: .4byte gUnknown_0200E140
.L08090FA4: .4byte gUnknown_0200E148
.L08090FA8: .4byte gUnknown_0200E150
.L08090FAC:
	mov r0, r8
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08090FBE
	mov r0, r8
	movs r1, #1
	bl func_08090418
.L08090FBE:
	movs r1, #0
	movs r0, #0
	mov r2, r8
	strh r0, [r2, #0x3c]
	ldr r0, [sp, #0xc]
	strb r1, [r0]
	ldr r4, .L08091014  @ gUnknown_0200E140
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #4
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, .L08091018  @ 0x000004E5
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, .L0809101C  @ gBg2Tm+0x146
	adds r0, r4, #0
	bl PutText
	ldr r1, .L08091020  @ gUnknown_0200F15C
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
.L08091000:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge .L08091000
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b .L08091042
	.align 2, 0
.L08091014: .4byte gUnknown_0200E140
.L08091018: .4byte 0x000004E5
.L0809101C: .4byte gBg2Tm+0x146
.L08091020: .4byte gUnknown_0200F15C
.L08091024:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	mov r2, sl
	ldrb r3, [r2]
	movs r0, #1
	str r0, [sp]
	mov r0, r8
	ldr r2, .L08091164  @ gBg0Tm
	bl func_080922F0
	adds r4, #1
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
.L08091042:
	cmp r4, r0
	bge .L0809104E
	ldr r0, .L08091168  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt .L08091024
.L0809104E:
	ldr r2, [sp, #0x10]
	ldrb r0, [r2]
	mov r2, sl
	ldrb r1, [r2]
	movs r2, #1
	bl func_08092298
	ldr r7, .L0809116C  @ gDispIo
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r5, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x3a
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	movs r6, #1
	orrs r0, r6
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r2, #8
	orrs r0, r2
	orrs r0, r5
	strb r0, [r1]
	movs r0, #0x36
	adds r0, r0, r7
	mov r9, r0
	ldrb r1, [r0]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	orrs r0, r5
	mov r1, r9
	strb r0, [r1]
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r0, r8
	ldrh r2, [r0, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrb r2, [r7, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r2, [r7, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r4
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	orrs r1, r6
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r7, #0x18]
	ldr r0, .L08091170  @ gUnknown_08A1C7D8
	ldr r1, .L08091174  @ gBg1Tm+0x500
	bl Decompress
	ldr r0, .L08091178  @ gUnknown_08A1A084
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0809117C  @ gUnknown_08A17B08
	mov r1, r8
	bl SpawnProc
	mov r1, r8
	str r0, [r1, #0x40]
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl StartScreenMenuScrollingBg
	mov r2, r8
	str r0, [r2, #0x44]
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl LoadHelpBoxGfx
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08091164: .4byte gBg0Tm
.L08091168: .4byte gUnknown_0200F158
.L0809116C: .4byte gDispIo
.L08091170: .4byte gUnknown_08A1C7D8
.L08091174: .4byte gBg1Tm+0x500
.L08091178: .4byte gUnknown_08A1A084
.L0809117C: .4byte gUnknown_08A17B08

	THUMB_FUNC_END func_08090D80

	THUMB_FUNC_START func_08091180
func_08091180: @ 0x08091180
	push {lr}
	adds r3, r0, #0
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	adds r0, #8
	movs r2, #1
	strb r2, [r0]
	subs r0, #5
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #3
	bne .L080911AC
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	b .L080911B2
.L080911AC:
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
.L080911B2:
	ldrb r0, [r0]
	adds r2, r3, #0
	adds r2, #0x36
	movs r1, #0
	strb r0, [r2]
	movs r2, #0
	strh r1, [r3, #0x3e]
	adds r1, r3, #0
	adds r1, #0x32
	movs r0, #1
	strb r0, [r1]
	subs r1, #8
	strb r2, [r1]
	adds r1, #9
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, r3, #0
	bl func_08090D80
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08091180

	THUMB_FUNC_START func_080911E4
func_080911E4: @ 0x080911E4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r2, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x3a
	adds r6, r5, #0
	adds r6, #0x3b
	ldrb r0, [r0]
	ldrb r1, [r6]
	cmp r0, r1
	bls .L08091268
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	negs r1, r1
	ands r0, r1
	str r0, [r2, #0xc]
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl func_080952EC
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b .L08091234
.L08091216:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, .L0809125C  @ gBg0Tm
	bl func_080922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
.L08091234:
	cmp r4, r0
	bge .L08091240
	ldr r0, .L08091260  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt .L08091216
.L08091240:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldr r0, .L08091264  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809127A
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L0809127A
	.align 2, 0
.L0809125C: .4byte gBg0Tm
.L08091260: .4byte gUnknown_0200F158
.L08091264: .4byte gPlaySt
.L08091268:
	ldr r0, .L08091284  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809127A
	movs r0, #0x6c
	bl m4aSongNumStart
.L0809127A:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08091284: .4byte gPlaySt

	THUMB_FUNC_END func_080911E4

	THUMB_FUNC_START func_08091288
func_08091288: @ 0x08091288
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809130C
	ldr r0, [r4, #0xc]
	movs r1, #0xa
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl func_08095314
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	adds r6, r5, #0
	adds r6, #0x3b
	b .L080912D8
.L080912BA:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, .L08091300  @ gBg0Tm
	bl func_080922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
.L080912D8:
	cmp r4, r0
	bge .L080912E4
	ldr r0, .L08091304  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080912BA
.L080912E4:
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	ldr r0, .L08091308  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809131E
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809131E
	.align 2, 0
.L08091300: .4byte gBg0Tm
.L08091304: .4byte gUnknown_0200F158
.L08091308: .4byte gPlaySt
.L0809130C:
	ldr r0, .L08091328  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809131E
	movs r0, #0x6c
	bl m4aSongNumStart
.L0809131E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08091328: .4byte gPlaySt

	THUMB_FUNC_END func_08091288

	THUMB_FUNC_START func_0809132C
func_0809132C: @ 0x0809132C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x30
	ldrb r0, [r0]
	ldr r1, .L08091358  @ gUnknown_0200D6E0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r5, [r0]
	ldr r1, [r5, #0xc]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r0, r1
	cmp r0, #0
	beq .L08091360
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x38
	ldr r2, .L0809135C  @ 0x00000C52
	b .L080913B2
	.align 2, 0
.L08091358: .4byte gUnknown_0200D6E0
.L0809135C: .4byte 0x00000C52
.L08091360:
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq .L080913CA
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08091390
	adds r0, r5, #0
	bl func_08097E74
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L08091390
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x38
	ldr r2, .L0809138C  @ 0x0000088A
	b .L080913B2
	.align 2, 0
.L0809138C: .4byte 0x0000088A
.L08091390:
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080913C0
	adds r0, r5, #0
	bl func_08097E38
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080913C0
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x38
	ldr r2, .L080913BC  @ 0x00000889
.L080913B2:
	movs r0, #0
	adds r3, r4, #0
	bl func_08097DA8
	b .L080913D2
	.align 2, 0
.L080913BC: .4byte 0x00000889
.L080913C0:
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_080911E4
	b .L080913D2
.L080913CA:
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_08091288
.L080913D2:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809132C

	THUMB_FUNC_START func_080913D8
func_080913D8: @ 0x080913D8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r2, r1, #0
	ldr r0, [r5]
	ldr r1, [r5, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809140C
	ldr r0, .L08091408  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809143C
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809143C
	.align 2, 0
.L08091408: .4byte gPlaySt
.L0809140C:
	ldr r4, [r5, #0xc]
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r0, r4
	lsrs r1, r0, #0xe
	adds r0, r1, r2
	adds r0, #3
	movs r1, #3
	bl __modsi3
	lsls r1, r0, #0xe
	ldr r0, .L08091444  @ 0xFFFF3FFF
	ands r4, r0
	orrs r4, r1
	str r4, [r5, #0xc]
	ldr r0, .L08091448  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809143C
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809143C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08091444: .4byte 0xFFFF3FFF
.L08091448: .4byte gPlaySt

	THUMB_FUNC_END func_080913D8

	THUMB_FUNC_START func_0809144C
func_0809144C: @ 0x0809144C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, .L08091474  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	mov ip, r2
	cmp r0, #0
	beq .L08091478
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #2
	b .L0809147E
	.align 2, 0
.L08091474: .4byte gKeySt
.L08091478:
	adds r1, r5, #0
	adds r1, #0x31
	movs r0, #1
.L0809147E:
	strb r0, [r1]
	mov r8, r1
	mov r0, ip
	ldr r3, [r0]
	ldrh r4, [r3, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r4
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	beq .L080914A0
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b .L080917CA
.L080914A0:
	movs r1, #1
	mov r9, r1
	mov r6, r9
	ands r6, r4
	cmp r6, #0
	beq .L0809150C
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080914C8
	cmp r0, #1
	bgt .L080914C0
	cmp r0, #0
	beq .L080914D0
	b .L080917CA
.L080914C0:
	cmp r0, #3
	bne .L080914C6
	b .L080915BE
.L080914C6:
	b .L080917CA
.L080914C8:
	adds r0, r5, #0
	bl func_0809132C
	b .L080917CA
.L080914D0:
	ldr r1, .L08091504  @ gUnknown_0200D6E0
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl SetLastStatScreenUid
	ldr r0, .L08091508  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080914FC
	movs r0, #0x6a
	bl m4aSongNumStart
.L080914FC:
	adds r0, r5, #0
	bl Proc_Break
	b .L080917CA
	.align 2, 0
.L08091504: .4byte gUnknown_0200D6E0
.L08091508: .4byte gPlaySt
.L0809150C:
	ldrh r1, [r3, #6]
	movs r2, #0x20
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	beq .L080915A0
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne .L08091560
	adds r0, r2, #0
	ands r0, r4
	cmp r0, #0
	bne .L08091530
	b .L080917CA
.L08091530:
	ldr r1, .L08091558  @ gUnknown_0200D6E0
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	negs r1, r1
	bl func_080913D8
	ldrb r1, [r4]
	ldr r2, .L0809155C  @ gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r6, [sp]
	b .L080915E0
	.align 2, 0
.L08091558: .4byte gUnknown_0200D6E0
.L0809155C: .4byte gBg0Tm
.L08091560:
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi .L0809156C
	b .L080917CA
.L0809156C:
	adds r1, r5, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	adds r0, r5, #0
	adds r0, #0x2d
	strb r6, [r0]
	ldr r0, .L0809159C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L08091592
	b .L080917CA
.L08091592:
	movs r0, #0x6f
	bl m4aSongNumStart
	b .L080917CA
	.align 2, 0
.L0809159C: .4byte gPlaySt
.L080915A0:
	movs r6, #0x10
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L08091634
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne .L080915F0
	adds r0, r6, #0
	ands r0, r4
	cmp r0, #0
	bne .L080915BE
	b .L080917CA
.L080915BE:
	ldr r1, .L080915E8  @ gUnknown_0200D6E0
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	bl func_080913D8
	ldrb r1, [r4]
	ldr r2, .L080915EC  @ gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r7, [sp]
.L080915E0:
	adds r0, r5, #0
	bl func_080922F0
	b .L080917CA
	.align 2, 0
.L080915E8: .4byte gUnknown_0200D6E0
.L080915EC: .4byte gBg0Tm
.L080915F0:
	adds r0, r5, #0
	adds r0, #0x2f
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bcc .L08091602
	b .L080917CA
.L08091602:
	adds r1, r5, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2d
	strb r7, [r0]
	ldr r0, .L08091630  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091624
	movs r0, #0x6f
	bl m4aSongNumStart
.L08091624:
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b .L080917CA
	.align 2, 0
.L08091630: .4byte gPlaySt
.L08091634:
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	bne .L08091654
	ldrh r1, [r3, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L08091716
	ldrh r1, [r3, #0x10]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L08091716
.L08091654:
	adds r6, r5, #0
	adds r6, #0x30
	ldrb r0, [r6]
	cmp r0, #0
	bne .L08091688
	adds r0, r7, #0
	ands r0, r4
	cmp r0, #0
	bne .L08091668
	b .L080917CA
.L08091668:
	ldr r0, .L08091684  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809167A
	movs r0, #0x66
	bl m4aSongNumStart
.L0809167A:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #3
	strb r0, [r1]
	b .L080917CA
	.align 2, 0
.L08091684: .4byte gPlaySt
.L08091688:
	subs r0, #1
	strb r0, [r6]
	ldr r0, .L08091708  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809169E
	movs r0, #0x66
	bl m4aSongNumStart
.L0809169E:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #1
	bhi .L08091710
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	cmp r0, #0
	beq .L08091710
	cmp r1, #0
	bne .L080916C0
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	movs r0, #1
	strb r0, [r4]
.L080916C0:
	ldrh r1, [r5, #0x3e]
	lsrs r1, r1, #4
	subs r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, .L0809170C  @ gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	mov r0, r9
	str r0, [sp]
	adds r0, r5, #0
	bl func_080922F0
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #2
	ldrh r2, [r5, #0x3e]
	subs r2, r2, r0
	strh r2, [r5, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrb r0, [r4]
	cmp r0, #0
	bne .L080917CA
	b .L080917C6
	.align 2, 0
.L08091708: .4byte gPlaySt
.L0809170C: .4byte gBg0Tm
.L08091710:
	ldrb r0, [r4]
	subs r0, #1
	b .L080917C8
.L08091716:
	mov r0, ip
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne .L0809173C
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080917CA
	ldrh r1, [r2, #0x10]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080917CA
.L0809173C:
	adds r6, r5, #0
	adds r6, #0x30
	ldrb r1, [r6]
	ldr r7, .L080917B8  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge .L080917CA
	adds r0, r1, #1
	strb r0, [r6]
	ldr r0, .L080917BC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091762
	movs r0, #0x66
	bl m4aSongNumStart
.L08091762:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #4
	bne .L080917C4
	ldrb r1, [r6]
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	beq .L080917C4
	ldrh r1, [r5, #0x3e]
	lsrs r1, r1, #4
	adds r1, #6
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, .L080917C0  @ gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r4, #1
	str r4, [sp]
	adds r0, r5, #0
	bl func_080922F0
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	mov r1, r8
	ldrb r2, [r1]
	lsls r2, r2, #2
	ldrh r0, [r5, #0x3e]
	adds r2, r2, r0
	strh r2, [r5, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	b .L080917CA
	.align 2, 0
.L080917B8: .4byte gUnknown_0200F158
.L080917BC: .4byte gPlaySt
.L080917C0: .4byte gBg0Tm
.L080917C4:
	ldrb r0, [r4]
.L080917C6:
	adds r0, #1
.L080917C8:
	strb r0, [r4]
.L080917CA:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809144C

	THUMB_FUNC_START func_080917D8
func_080917D8: @ 0x080917D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	ldr r2, .L0809180C  @ gKeySt
	cmp r0, #0
	beq .L08091810
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08091810
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strb r0, [r4]
	b .L08091AA0
	.align 2, 0
.L0809180C: .4byte gKeySt
.L08091810:
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080918F8
	adds r0, r7, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080918F8
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	str r0, [sp, #4]
	adds r2, r7, #0
	adds r2, #0x2a
	movs r0, #1
	strb r0, [r2]
	ldr r0, .L08091898  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	mov r8, r1
	cmp r0, #0
	blt .L0809184A
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809184A:
	ldr r2, .L0809189C  @ gUnknown_08A17C48
	adds r5, r7, #0
	adds r5, #0x2d
	adds r6, r7, #0
	adds r6, #0x2f
	ldrb r1, [r6]
	lsls r0, r1, #3
	adds r0, r0, r1
	ldrb r1, [r5]
	adds r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrb r0, [r0]
	mov r1, r8
	strb r0, [r1]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r4]
	mov r1, r8
	ldrb r0, [r1]
	ldrb r1, [r4]
	bl SortUnitList
	lsls r0, r0, #0x18
	mov r9, r4
	movs r1, #0x34
	adds r1, r1, r7
	mov sl, r1
	adds r1, r7, #0
	adds r1, #0x35
	str r1, [sp, #8]
	cmp r0, #0
	beq .L080918CC
	movs r4, #0
	b .L080918B8
	.align 2, 0
.L08091898: .4byte gPlaySt
.L0809189C: .4byte gUnknown_08A17C48
.L080918A0:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r6]
	movs r0, #1
	str r0, [sp]
	adds r0, r7, #0
	ldr r2, .L080918F0  @ gBg0Tm
	bl func_080922F0
	adds r4, #1
	cmp r4, #5
	bgt .L080918C0
.L080918B8:
	ldr r0, .L080918F4  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080918A0
.L080918C0:
	ldrh r0, [r7, #0x3e]
	bl func_08090358
	movs r0, #1
	bl EnableBgSync
.L080918CC:
	mov r1, r9
	ldrb r0, [r1]
	mov r1, sl
	strb r0, [r1]
	ldrb r0, [r5]
	ldr r1, [sp, #8]
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	ldr r1, [sp, #4]
	cmp r0, r1
	bne .L080918E6
	b .L08091AA0
.L080918E6:
	mov r1, r8
	ldrb r0, [r1]
	bl func_08090238
	b .L08091AA0
	.align 2, 0
.L080918F0: .4byte gBg0Tm
.L080918F4: .4byte gUnknown_0200F158
.L080918F8:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L08091934
	adds r0, r7, #0
	adds r0, #0x2b
	ldrb r4, [r0]
	cmp r4, #0
	bne .L08091934
	ldr r0, .L08091930  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091920
	movs r0, #0x66
	bl m4aSongNumStart
.L08091920:
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x29
	strb r4, [r0]
	b .L08091AA0
	.align 2, 0
.L08091930: .4byte gPlaySt
.L08091934:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L080919CA
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	subs r1, #6
	ldrb r0, [r1]
	adds r5, r1, #0
	cmp r0, #0
	bne .L080919C4
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi .L08091962
	b .L08091AA0
.L08091962:
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne .L0809196E
	b .L08091AA0
.L0809196E:
	ldr r0, .L080919BC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091980
	movs r0, #0x6f
	bl m4aSongNumStart
.L08091980:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r4, #8
	ldr r2, .L080919C0  @ gUnknown_08A17C48
	ldrb r1, [r1]
	lsls r0, r1, #3
	adds r0, r0, r1
	lsls r1, r0, #4
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne .L080919B6
	adds r0, r1, r2
	adds r1, r0, #0
	adds r1, #0x80
.L080919A8:
	subs r1, #0x10
	subs r4, #1
	cmp r4, #0
	ble .L080919B6
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq .L080919A8
.L080919B6:
	strb r4, [r5]
	b .L08091A32
	.align 2, 0
.L080919BC: .4byte gPlaySt
.L080919C0: .4byte gUnknown_08A17C48
.L080919C4:
	subs r0, #1
	strb r0, [r1]
	b .L08091A46
.L080919CA:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L08091A60
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r3, r7, #0
	adds r3, #0x2d
	ldrb r0, [r3]
	adds r6, r7, #0
	adds r6, #0x2f
	cmp r0, #8
	beq .L080919FE
	ldr r2, .L08091A3C  @ gUnknown_08A17C48
	adds r4, r0, #1
	ldrb r1, [r6]
	lsls r0, r1, #3
	adds r0, r0, r1
	adds r0, r0, r4
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne .L08091A44
.L080919FE:
	adds r1, r7, #0
	adds r1, #0x2e
	ldrb r0, [r6]
	ldrb r1, [r1]
	cmp r0, r1
	bcs .L08091AA0
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq .L08091AA0
	strb r5, [r3]
	ldr r0, .L08091A40  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091A28
	movs r0, #0x6f
	bl m4aSongNumStart
.L08091A28:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L08091A32:
	adds r0, r7, #0
	movs r1, #2
	bl Proc_Goto
	b .L08091AA0
	.align 2, 0
.L08091A3C: .4byte gUnknown_08A17C48
.L08091A40: .4byte gPlaySt
.L08091A44:
	strb r4, [r3]
.L08091A46:
	ldr r0, .L08091A5C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091AA0
	movs r0, #0x67
	bl m4aSongNumStart
	b .L08091AA0
	.align 2, 0
.L08091A5C: .4byte gPlaySt
.L08091A60:
	ldrh r1, [r2, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08091AA0
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0
	bne .L08091AA0
	movs r0, #1
	strb r0, [r1]
	ldr r2, .L08091AB0  @ gUnknown_08A17C48
	adds r3, r7, #0
	adds r3, #0x2d
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r1, r0, #3
	adds r1, r1, r0
	ldrb r3, [r3]
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl ShowTextHelpBox
.L08091AA0:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08091AB0: .4byte gUnknown_08A17C48

	THUMB_FUNC_END func_080917D8

	THUMB_FUNC_START func_08091AB4
func_08091AB4: @ 0x08091AB4
	push {r4, lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08091AB4

	THUMB_FUNC_START func_08091AEC
func_08091AEC: @ 0x08091AEC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x2d
	ldrb r6, [r0]
	ldr r0, .L08091B2C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L08091B34
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne .L08091B34
	ldr r0, .L08091B30  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08091B1E
	movs r0, #0x6b
	bl m4aSongNumStart
.L08091B1E:
	movs r0, #0
	bl SetLastStatScreenUid
	adds r0, r4, #0
	bl Proc_Break
	b .L08091BF6
	.align 2, 0
.L08091B2C: .4byte gKeySt
.L08091B30: .4byte gPlaySt
.L08091B34:
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r0, [r5]
	cmp r0, #1
	beq .L08091B62
	cmp r0, #1
	bgt .L08091B48
	cmp r0, #0
	beq .L08091B52
	b .L08091BC4
.L08091B48:
	cmp r0, #2
	beq .L08091B94
	cmp r0, #3
	beq .L08091B5A
	b .L08091BC4
.L08091B52:
	adds r0, r4, #0
	bl func_0809144C
	b .L08091BC4
.L08091B5A:
	adds r0, r4, #0
	bl func_080917D8
	b .L08091BC4
.L08091B62:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r2, [r0]
	lsls r2, r2, #2
	ldrh r0, [r4, #0x3e]
	adds r2, r2, r0
	strh r2, [r4, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrh r0, [r4, #0x3e]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L08091BC4
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4, #0x3e]
	bl func_08090358
	b .L08091BC4
.L08091B94:
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #2
	ldrh r2, [r4, #0x3e]
	subs r2, r2, r0
	strh r2, [r4, #0x3e]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrh r0, [r4, #0x3e]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L08091BC4
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4, #0x3e]
	bl func_08090358
.L08091BC4:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq .L08091BF6
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r3, [r0]
	cmp r6, r3
	beq .L08091BF6
	ldr r2, .L08091BFC  @ gUnknown_08A17C48
	adds r0, #9
	ldrb r0, [r0]
	lsls r1, r0, #3
	adds r1, r1, r0
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl ShowTextHelpBox
.L08091BF6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08091BFC: .4byte gUnknown_08A17C48

	THUMB_FUNC_END func_08091AEC

	THUMB_FUNC_START func_08091C00
func_08091C00: @ 0x08091C00
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08091C28
	ldr r1, .L08091CA8  @ gUnknown_0200D6E0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl func_080953C0
	bl func_0809014C
.L08091C28:
	ldr r3, .L08091CAC  @ gPlaySt
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x32
	lsls r0, r0, #7
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r0, [r3, #0x1a]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	cmp r2, #0
	beq .L08091C52
	lsls r2, r2, #4
	ldrb r1, [r3, #0x19]
	movs r0, #0xf
	ands r0, r1
	orrs r0, r2
	strb r0, [r3, #0x19]
.L08091C52:
	ldr r0, [r4, #0x40]
	bl Proc_End
	ldr r0, [r4, #0x44]
	cmp r0, #0
	beq .L08091C62
	bl Proc_End
.L08091C62:
	bl EndGreenText
	ldr r0, .L08091CB0  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L08091CB4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L08091CB8  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	ldr r2, .L08091CBC  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	bl ResetTextFont
	bl ClearIcons
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08091CA8: .4byte gUnknown_0200D6E0
.L08091CAC: .4byte gPlaySt
.L08091CB0: .4byte gBg0Tm
.L08091CB4: .4byte gBg1Tm
.L08091CB8: .4byte gBg2Tm
.L08091CBC: .4byte gDispIo

	THUMB_FUNC_END func_08091C00

	THUMB_FUNC_START func_08091CC0
func_08091CC0: @ 0x08091CC0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, .L08091CE4  @ gUnknown_0200D7E0
	movs r1, #0x1f
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	cmp r4, r0
	bge .L08091D12
	ldr r0, .L08091CE8  @ gUnknown_0200F158
	adds r6, r5, #0
	adds r6, #0x2f
	b .L08091D0C
	.align 2, 0
.L08091CE4: .4byte gUnknown_0200D7E0
.L08091CE8: .4byte gUnknown_0200F158
.L08091CEC:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r6]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, .L08091D48  @ gUnknown_0200D7E0
	bl func_080922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
	cmp r4, r0
	bge .L08091D12
	ldr r0, .L08091D4C  @ gUnknown_0200F158
.L08091D0C:
	ldrb r0, [r0]
	cmp r4, r0
	blt .L08091CEC
.L08091D12:
	ldr r4, .L08091D50  @ gUnknown_0200DFE0
	adds r0, r4, #0
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r6, r5, #0
	adds r6, #0x2f
	ldrb r1, [r6]
	adds r0, r4, #0
	bl func_080921CC
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x3c]
	ldrb r0, [r6]
	adds r2, r5, #0
	adds r2, #0x37
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x38
	strb r1, [r0]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08091D48: .4byte gUnknown_0200D7E0
.L08091D4C: .4byte gUnknown_0200F158
.L08091D50: .4byte gUnknown_0200DFE0

	THUMB_FUNC_END func_08091CC0

	THUMB_FUNC_START func_08091D54
func_08091D54: @ 0x08091D54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x38
	ldr r1, .L08091DB4  @ gUnknown_08A17B30
	ldrh r0, [r5, #0x3c]
	adds r0, r0, r1
	ldrb r0, [r0]
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls .L08091D80
	movs r0, #0x14
	strb r0, [r2]
.L08091D80:
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	movs r3, #0
	str r2, [sp, #0xc]
	adds r2, r5, #0
	adds r2, #0x36
	str r2, [sp, #8]
	movs r0, #0x2f
	adds r0, r0, r5
	mov sl, r0
	ldr r1, [sp, #0xc]
	str r1, [sp, #4]
.L08091D9A:
	ldr r2, [sp, #8]
	ldrb r0, [r2]
	mov r1, sl
	ldrb r1, [r1]
	cmp r0, r1
	bls .L08091DB8
	ldr r2, [sp, #4]
	ldrb r0, [r2]
	adds r0, r3, r0
	cmp r0, #0x14
	bgt .L08091DC0
	b .L08091DC6
	.align 2, 0
.L08091DB4: .4byte gUnknown_08A17B30
.L08091DB8:
	ldr r1, [sp, #4]
	ldrb r0, [r1]
	cmp r3, r0
	bge .L08091DC4
.L08091DC0:
	movs r1, #0
	b .L08091DCC
.L08091DC4:
	subs r0, r3, r0
.L08091DC6:
	adds r0, #8
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
.L08091DCC:
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	lsls r6, r1, #1
	adds r2, r3, #1
	mov r9, r2
	cmp r4, r0
	bge .L08091E10
	movs r0, #0x1f
	mov r8, r0
	ldr r1, .L08091E8C  @ gBg0Tm
	mov ip, r1
	ldr r7, .L08091E90  @ gUnknown_0200D7E0
	adds r2, r6, #0
.L08091DEA:
	adds r0, r4, #0
	mov r1, r8
	ands r0, r1
	lsls r1, r0, #5
	adds r1, #8
	adds r1, r1, r3
	lsls r1, r1, #1
	add r1, ip
	lsls r0, r0, #6
	adds r0, r2, r0
	adds r0, r0, r7
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #3
	adds r0, #0xc
	cmp r4, r0
	blt .L08091DEA
.L08091E10:
	ldr r0, .L08091E94  @ gBg2Tm
	ldr r1, .L08091E98  @ gUnknown_0200DFE0
	adds r2, r6, r1
	adds r1, r3, #0
	adds r1, #0xa8
	movs r4, #1
	lsls r1, r1, #1
	adds r1, r1, r0
.L08091E20:
	ldrh r0, [r2]
	strh r0, [r1]
	adds r2, #0x40
	adds r1, #0x40
	subs r4, #1
	cmp r4, #0
	bge .L08091E20
	mov r3, r9
	cmp r3, #0x13
	ble .L08091D9A
	movs r0, #5
	bl EnableBgSync
	ldr r2, [sp, #0xc]
	ldrb r0, [r2]
	cmp r0, #0x13
	bls .L08091EF4
	ldr r1, [sp, #8]
	ldrb r0, [r1]
	mov r2, sl
	strb r0, [r2]
	ldr r0, .L08091E9C  @ gBg2Tm+0x150
	movs r1, #0x16
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L08091EA0  @ gBg0Tm+0x10
	movs r1, #0x16
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	adds r4, r5, #0
	adds r4, #0x32
	adds r6, r5, #0
	adds r6, #0x2e
	ldr r1, .L08091EA4  @ gUnknown_0200F15C
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
.L08091E72:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge .L08091E72
	bl ClearIcons
	ldrb r0, [r4]
	bl func_08090238
	ldrh r0, [r5, #0x3e]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b .L08091EC4
	.align 2, 0
.L08091E8C: .4byte gBg0Tm
.L08091E90: .4byte gUnknown_0200D7E0
.L08091E94: .4byte gBg2Tm
.L08091E98: .4byte gUnknown_0200DFE0
.L08091E9C: .4byte gBg2Tm+0x150
.L08091EA0: .4byte gBg0Tm+0x10
.L08091EA4: .4byte gUnknown_0200F15C
.L08091EA8:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	mov r0, sl
	ldrb r3, [r0]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, .L08091F04  @ gUnknown_0200D7E0
	bl func_080922F0
	adds r4, #1
	ldrh r0, [r5, #0x3e]
	lsrs r0, r0, #4
	adds r0, #6
.L08091EC4:
	cmp r4, r0
	bge .L08091ED0
	ldr r0, .L08091F08  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	blt .L08091EA8
.L08091ED0:
	ldr r0, .L08091F0C  @ gUnknown_0200DFE0
	mov r2, sl
	ldrb r1, [r2]
	bl func_080921CC
	ldrb r0, [r6]
	mov r2, sl
	ldrb r1, [r2]
	movs r2, #0
	bl func_08092298
	movs r0, #0
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	strh r0, [r5, #0x3c]
	adds r0, r5, #0
	bl Proc_Break
.L08091EF4:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08091F04: .4byte gUnknown_0200D7E0
.L08091F08: .4byte gUnknown_0200F158
.L08091F0C: .4byte gUnknown_0200DFE0

	THUMB_FUNC_END func_08091D54

	THUMB_FUNC_START func_08091F10
func_08091F10: @ 0x08091F10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	mov r2, r8
	adds r2, #0x38
	ldr r1, .L08091FEC  @ gUnknown_08A17B36
	mov r3, r8
	ldrh r0, [r3, #0x3c]
	adds r0, r0, r1
	ldrb r0, [r0]
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls .L08091F3E
	movs r0, #0x14
	strb r0, [r2]
.L08091F3E:
	mov r3, r8
	ldrh r0, [r3, #0x3c]
	adds r0, #1
	strh r0, [r3, #0x3c]
	mov r0, r8
	adds r0, #0x36
	mov r1, r8
	adds r1, #0x37
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bls .L08092000
	movs r5, #0
	str r2, [sp]
	ldrb r0, [r2]
	cmp r5, r0
	blt .L08091F62
	b .L0809208E
.L08091F62:
	adds r7, r2, #0
.L08091F64:
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	movs r3, #8
	adds r3, r3, r5
	mov ip, r3
	adds r5, #1
	mov sl, r5
	cmp r4, r0
	bge .L08091FB6
	adds r5, r6, #0
	lsls r2, r3, #1
	movs r0, #0x1f
	mov r9, r0
.L08091F88:
	adds r3, r4, #0
	mov r1, r9
	ands r3, r1
	lsls r1, r3, #5
	ldrb r0, [r7]
	subs r0, r5, r0
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, .L08091FF0  @ gBg0Tm
	adds r1, r1, r0
	lsls r0, r3, #6
	adds r0, r2, r0
	ldr r3, .L08091FF4  @ gUnknown_0200D7E0
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r0, r0, #3
	adds r0, #0xc
	cmp r4, r0
	blt .L08091F88
.L08091FB6:
	ldr r3, .L08091FF8  @ gBg2Tm
	mov r9, r3
	adds r5, r6, #0
	mov r1, ip
	lsls r0, r1, #1
	ldr r3, .L08091FFC  @ gUnknown_0200DFE0
	adds r2, r0, r3
	movs r3, #0xa0
	movs r4, #1
.L08091FC8:
	ldrb r0, [r7]
	subs r0, r5, r0
	adds r0, r3, r0
	lsls r0, r0, #1
	add r0, r9
	ldrh r1, [r2]
	strh r1, [r0]
	adds r2, #0x40
	adds r3, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L08091FC8
	mov r5, sl
	ldrb r0, [r7]
	cmp r5, r0
	blt .L08091F64
	b .L0809208E
	.align 2, 0
.L08091FEC: .4byte gUnknown_08A17B36
.L08091FF0: .4byte gBg0Tm
.L08091FF4: .4byte gUnknown_0200D7E0
.L08091FF8: .4byte gBg2Tm
.L08091FFC: .4byte gUnknown_0200DFE0
.L08092000:
	movs r5, #0
	str r2, [sp]
	ldrb r1, [r2]
	cmp r5, r1
	bge .L0809208E
	adds r7, r2, #0
.L0809200C:
	mov r3, r8
	ldrh r0, [r3, #0x3e]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	adds r1, r5, #1
	mov sl, r1
	cmp r4, r0
	bge .L0809205C
	mov ip, r6
	movs r3, #0x1f
	mov r9, r3
.L08092028:
	adds r3, r4, #0
	mov r0, r9
	ands r3, r0
	lsls r2, r3, #5
	adds r2, #8
	adds r2, r2, r5
	lsls r2, r2, #1
	ldr r1, .L080920B4  @ gBg0Tm
	adds r2, r2, r1
	ldrb r0, [r7]
	mov r1, ip
	subs r0, r1, r0
	lsls r0, r0, #1
	lsls r1, r3, #6
	adds r0, r0, r1
	ldr r3, .L080920B8  @ gUnknown_0200D7E0
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r4, #1
	mov r1, r8
	ldrh r0, [r1, #0x3e]
	lsrs r0, r0, #3
	adds r0, #0xc
	cmp r4, r0
	blt .L08092028
.L0809205C:
	movs r4, #0
	ldr r3, .L080920BC  @ gUnknown_0200DFE0
	mov ip, r3
	adds r3, r6, #0
	adds r0, r5, #0
	adds r0, #0xa8
	lsls r0, r0, #1
	ldr r1, .L080920C0  @ gBg2Tm
	adds r2, r0, r1
.L0809206E:
	ldrb r0, [r7]
	subs r0, r3, r0
	lsls r0, r0, #1
	lsls r1, r4, #6
	adds r0, r0, r1
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #0x40
	adds r4, #1
	cmp r4, #1
	ble .L0809206E
	mov r5, sl
	ldrb r3, [r7]
	cmp r5, r3
	blt .L0809200C
.L0809208E:
	movs r0, #5
	bl EnableBgSync
	ldr r1, [sp]
	ldrb r0, [r1]
	cmp r0, #0x13
	bls .L080920A2
	mov r0, r8
	bl Proc_Break
.L080920A2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080920B4: .4byte gBg0Tm
.L080920B8: .4byte gUnknown_0200D7E0
.L080920BC: .4byte gUnknown_0200DFE0
.L080920C0: .4byte gBg2Tm

	THUMB_FUNC_END func_08091F10

	THUMB_FUNC_START StartUnitListMenu
StartUnitListMenu: @ 0x080920C4
	push {lr}
	ldr r0, .L080920D8  @ gUnknown_08A177A0
	movs r1, #3
	bl SpawnProc
	adds r0, #0x39
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
.L080920D8: .4byte gUnknown_08A177A0

	THUMB_FUNC_END StartUnitListMenu

	THUMB_FUNC_START func_080920DC
func_080920DC: @ 0x080920DC
	push {r4, lr}
	adds r1, r0, #0
	cmp r1, #0
	bne .L080920F4
	ldr r0, .L080920F0  @ gUnknown_08A178C0
	movs r1, #3
	bl SpawnProc
	b .L080920FA
	.align 2, 0
.L080920F0: .4byte gUnknown_08A178C0
.L080920F4:
	ldr r0, .L08092118  @ gUnknown_08A178C0
	bl SpawnProcLocking
.L080920FA:
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne .L0809211C
	adds r1, r4, #0
	adds r1, #0x3a
	movs r0, #5
	b .L08092124
	.align 2, 0
.L08092118: .4byte gUnknown_08A178C0
.L0809211C:
	bl GetChapterAllyUnitCount
	adds r1, r4, #0
	adds r1, #0x3a
.L08092124:
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080920DC

	THUMB_FUNC_START func_08092134
func_08092134: @ 0x08092134
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne .L0809214C
	ldr r0, .L08092148  @ gUnknown_08A17990
	movs r1, #3
	bl SpawnProc
	b .L08092152
	.align 2, 0
.L08092148: .4byte gUnknown_08A17990
.L0809214C:
	ldr r0, .L08092160  @ gUnknown_08A17990
	bl SpawnProcLocking
.L08092152:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #3
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
.L08092160: .4byte gUnknown_08A17990

	THUMB_FUNC_END func_08092134

	THUMB_FUNC_START func_08092164
func_08092164: @ 0x08092164
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne .L0809217C
	ldr r0, .L08092178  @ gUnknown_08A178C0
	movs r1, #3
	bl SpawnProc
	b .L08092182
	.align 2, 0
.L08092178: .4byte gUnknown_08A178C0
.L0809217C:
	ldr r0, .L08092190  @ gUnknown_08A178C0
	bl SpawnProcLocking
.L08092182:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #4
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
.L08092190: .4byte gUnknown_08A178C0

	THUMB_FUNC_END func_08092164

	THUMB_FUNC_START func_08092194
func_08092194: @ 0x08092194
	push {r4, lr}
	adds r1, r0, #0
	cmp r1, #0
	bne .L080921AC
	ldr r0, .L080921A8  @ gUnknown_08A17A30
	movs r1, #3
	bl SpawnProc
	b .L080921B2
	.align 2, 0
.L080921A8: .4byte gUnknown_08A17A30
.L080921AC:
	ldr r0, .L080921C8  @ gUnknown_08A17A30
	bl SpawnProcLocking
.L080921B2:
	adds r4, r0, #0
	bl ResetUnitSprites
	adds r1, r4, #0
	adds r1, #0x39
	movs r0, #5
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080921C8: .4byte gUnknown_08A17A30

	THUMB_FUNC_END func_08092194

	THUMB_FUNC_START func_080921CC
func_080921CC: @ 0x080921CC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	adds r6, r7, #0
	adds r6, #0x12
	adds r0, r6, #0
	movs r1, #0x13
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L08092214  @ gUnknown_0200E148
	mov r8, r0
	bl ClearText
	cmp r4, #5
	bne .L08092218
	movs r5, #0
	adds r4, r6, #0
.L080921FA:
	adds r1, r5, #0
	adds r1, #0x70
	adds r0, r4, #0
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	adds r4, #4
	adds r5, #1
	cmp r5, #7
	ble .L080921FA
	b .L0809227C
	.align 2, 0
.L08092214: .4byte gUnknown_0200E148
.L08092218:
	movs r5, #1
	ldr r3, .L08092290  @ gUnknown_08A17C48
	lsls r0, r4, #3
	adds r0, r0, r4
	lsls r1, r0, #4
	adds r2, r1, #0
	adds r2, #0x10
	adds r0, r2, r3
	ldrb r0, [r0, #8]
	adds r7, #0x10
	mov r9, r7
	cmp r0, #0
	beq .L08092274
	mov r7, r8
	mov r8, r3
	adds r0, r1, r3
	adds r4, r0, #0
	adds r4, #0x10
	adds r6, r2, #0
.L0809223E:
	ldrb r1, [r4, #8]
	subs r1, #0x40
	adds r0, r7, #0
	bl Text_SetCursor
	adds r0, r7, #0
	movs r1, #0
	bl Text_SetColor
	mov r0, r8
	adds r0, #4
	adds r0, r6, r0
	ldr r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r7, #0
	bl Text_DrawString
	adds r4, #0x10
	adds r6, #0x10
	adds r5, #1
	cmp r5, #8
	bgt .L08092274
	ldrb r0, [r4, #8]
	cmp r0, #0
	bne .L0809223E
.L08092274:
	ldr r0, .L08092294  @ gUnknown_0200E148
	mov r1, r9
	bl PutText
.L0809227C:
	movs r0, #4
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08092290: .4byte gUnknown_08A17C48
.L08092294: .4byte gUnknown_0200E148

	THUMB_FUNC_END func_080921CC

	THUMB_FUNC_START func_08092298
func_08092298: @ 0x08092298
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	adds r7, r3, #0
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	cmp r3, #0
	beq .L080922CE
	ldr r4, .L080922E8  @ gBg2Tm+0xF4
	adds r0, r4, #0
	movs r1, #2
	adds r2, r3, #0
	bl PutNumber
	adds r0, r4, #2
	movs r1, #0
	movs r2, #0x16
	bl PutSpecialChar
	adds r4, #4
	adds r0, r4, #0
	movs r1, #2
	adds r2, r6, #0
	bl PutNumber
.L080922CE:
	cmp r5, #0
	beq .L080922DA
	ldr r0, .L080922EC  @ gBg2Tm+0x140
	adds r1, r7, #0
	bl func_080921CC
.L080922DA:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080922E8: .4byte gBg2Tm+0xF4
.L080922EC: .4byte gBg2Tm+0x140

	THUMB_FUNC_END func_08092298

	THUMB_FUNC_START func_080922F0
func_080922F0: @ 0x080922F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x58
	str r0, [sp, #0x24]
	mov sl, r2
	ldr r4, [sp, #0x78]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #0x28]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r7, #0
	movs r1, #7
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x2c]
	lsls r0, r7, #1
	str r0, [sp, #0x30]
	movs r0, #0x1f
	ldr r1, [sp, #0x30]
	ands r1, r0
	str r1, [sp, #0x30]
	ldr r1, .L0809238C  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	negs r0, r0
	lsrs r0, r0, #0x1f
	mov r9, r0
	cmp r4, #0
	beq .L080923CA
	ldr r2, [sp, #0x2c]
	lsls r4, r2, #3
	ldr r0, .L08092390  @ gUnknown_0200E060
	adds r5, r4, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	mov r8, r4
	cmp r0, #0
	bne .L08092394
	ldr r0, [sp, #0x24]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne .L08092394
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08092394
	adds r0, r5, #0
	movs r1, #4
	bl Text_SetColor
	b .L0809239E
	.align 2, 0
.L0809238C: .4byte gUnknown_0200D6E0
.L08092390: .4byte gUnknown_0200E060
.L08092394:
	ldr r0, .L08092414  @ gUnknown_0200E060
	add r0, r8
	mov r1, r9
	bl Text_SetColor
.L0809239E:
	ldr r4, .L08092414  @ gUnknown_0200E060
	add r4, r8
	ldr r1, .L08092418  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r3, [sp, #0x30]
	lsls r1, r3, #6
	add r1, sl
	adds r1, #6
	adds r0, r4, #0
	bl PutText
.L080923CA:
	ldr r4, [sp, #0x2c]
	lsls r5, r4, #1
	adds r0, r5, r4
	lsls r0, r0, #3
	mov r8, r0
	ldr r6, .L0809241C  @ gUnknown_0200E098
	adds r0, r0, r6
	bl ClearText
	adds r0, r6, #0
	adds r0, #8
	add r0, r8
	bl ClearText
	ldr r0, [sp, #0x30]
	lsls r4, r0, #6
	mov r1, sl
	adds r1, r1, r4
	str r1, [sp, #0x34]
	adds r0, r1, #0
	adds r0, #0x10
	movs r1, #0x18
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	str r4, [sp, #0x54]
	str r5, [sp, #0x50]
	ldr r2, [sp, #0x28]
	cmp r2, #5
	bls .L0809240A
	b .L08092A48
.L0809240A:
	lsls r0, r2, #2
	ldr r1, .L08092420  @ .L08092424
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L08092414: .4byte gUnknown_0200E060
.L08092418: .4byte gUnknown_0200D6E0
.L0809241C: .4byte gUnknown_0200E098
.L08092420: .4byte .L08092424
.L08092424: @ jump table
	.4byte .L0809243C @ case 0
	.4byte .L080925A0 @ case 1
	.4byte .L08092664 @ case 2
	.4byte .L0809279A @ case 3
	.4byte .L080928B0 @ case 4
	.4byte .L080929E8 @ case 5
.L0809243C:
	ldr r0, .L080924B0  @ gUnknown_0200D6E0
	lsls r6, r7, #2
	adds r0, r0, r6
	mov r8, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	adds r5, r3, r4
	lsls r5, r5, #3
	ldr r4, .L080924B4  @ gUnknown_0200E098
	adds r0, r5, r4
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r1, r7, #0
	adds r1, #0x10
	movs r3, #0
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #0
	bl PutDrawText
	adds r4, #8
	adds r5, r5, r4
	mov r4, r9
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_SetColor
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	str r6, [sp, #0x4c]
	cmp r0, #0
	bne .L080924BC
	ldr r0, .L080924B8  @ 0x00000537
	bl GetMsg
	adds r1, r7, #0
	adds r1, #0x22
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl PutDrawText
	b .L0809251A
	.align 2, 0
.L080924B0: .4byte gUnknown_0200D6E0
.L080924B4: .4byte gUnknown_0200E098
.L080924B8: .4byte 0x00000537
.L080924BC:
	mov r3, r8
	ldr r0, [r3]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r1, r7, #0
	adds r1, #0x22
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl PutDrawText
	adds r4, r7, #0
	adds r4, #0x1e
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	mov r2, r8
	ldr r0, [r2]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	bl func_08090324
.L0809251A:
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	adds r0, r3, r4
	lsls r0, r0, #3
	ldr r1, .L08092550  @ gUnknown_0200E0A8
	adds r5, r0, r1
	adds r0, r5, #0
	bl ClearText
	ldr r0, .L08092554  @ gUnknown_0200D6E0
	ldr r6, [sp, #0x4c]
	adds r0, r6, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r4, [r0, #0xc]
	movs r0, #0xc0
	lsls r0, r0, #8
	ands r4, r0
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r4, r0
	beq .L08092562
	cmp r4, r0
	bhi .L08092558
	cmp r4, #0
	beq .L08092584
	b .L08092BC6
	.align 2, 0
.L08092550: .4byte gUnknown_0200E0A8
.L08092554: .4byte gUnknown_0200D6E0
.L08092558:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r4, r0
	beq .L08092566
	b .L08092BC6
.L08092562:
	movs r0, #0xbf
	b .L08092568
.L08092566:
	movs r0, #0xc0
.L08092568:
	bl GetMsg
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #4
	movs r3, #8
	bl PutDrawText
	b .L08092BC6
.L08092584:
	movs r0, #0xbe
	bl GetMsg
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x30
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #1
	movs r3, #4
	bl PutDrawText
	b .L08092BC6
.L080925A0:
	ldr r1, .L0809265C  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetMsg
	adds r3, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x2c]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, .L08092660  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r1, r7, #0
	adds r1, #0x10
	mov r8, r9
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	mov r2, r8
	movs r3, #4
	bl PutDrawText
	adds r3, r7, #0
	adds r3, #0x22
	movs r1, #2
	mov r4, r9
	cmp r4, #0
	beq .L080925E6
	movs r1, #1
.L080925E6:
	ldr r0, [r6]
	ldr r0, [r0]
	movs r2, #8
	ldrsb r2, [r0, r2]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r3, r7, #0
	adds r3, #0x28
	movs r1, #2
	mov r0, r9
	cmp r0, #0
	beq .L08092602
	movs r1, #1
.L08092602:
	ldr r0, [r6]
	ldr r0, [r0]
	ldrb r2, [r0, #9]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r5, r7, #0
	adds r5, #0x2e
	movs r4, #2
	mov r1, r9
	cmp r1, #0
	beq .L0809261C
	movs r4, #1
.L0809261C:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutNumberOrBlank
	adds r0, r7, #0
	adds r0, #0x30
	mov r1, r8
	movs r2, #0x16
	bl PutSpecialChar
	adds r4, r7, #0
	adds r4, #0x34
	movs r5, #2
	mov r2, r9
	cmp r2, #0
	beq .L08092648
	movs r5, #1
.L08092648:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	b .L08092BC6
	.align 2, 0
.L0809265C: .4byte gUnknown_0200D6E0
.L08092660: .4byte gUnknown_0200E098
.L08092664:
	ldr r5, [sp, #0x54]
	add r5, sl
	movs r3, #0x12
	adds r3, r3, r5
	mov r8, r3
	ldr r1, .L08092788  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r4, r0, r1
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x14
	ldrsb r1, [r0, r1]
	movs r0, #0x14
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne .L0809268A
	movs r6, #4
.L0809268A:
	adds r0, r2, #0
	bl GetUnitPower
	adds r2, r0, #0
	mov r0, r8
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x18
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x15
	ldrsb r1, [r0, r1]
	movs r0, #0x15
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne .L080926B4
	movs r6, #4
.L080926B4:
	adds r0, r2, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x1e
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x16
	ldrsb r1, [r0, r1]
	movs r0, #0x16
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne .L080926DE
	movs r6, #4
.L080926DE:
	adds r0, r2, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x24
	ldr r0, [r4]
	ldr r1, [r0]
	movs r0, #0x19
	ldrsb r0, [r1, r0]
	movs r6, #2
	cmp r0, #0x1e
	bne .L08092702
	movs r6, #4
.L08092702:
	adds r0, r1, #0
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x2a
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x17
	ldrsb r1, [r0, r1]
	movs r0, #0x17
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne .L0809272C
	movs r6, #4
.L0809272C:
	adds r0, r2, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x30
	ldr r0, [r4]
	ldr r2, [r0]
	ldr r0, [r2, #4]
	movs r1, #0x18
	ldrsb r1, [r0, r1]
	movs r0, #0x18
	ldrsb r0, [r2, r0]
	movs r6, #2
	cmp r1, r0
	bne .L08092756
	movs r6, #4
.L08092756:
	adds r0, r2, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r1, r0, #0
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	bne .L0809278C
	adds r0, r5, #0
	adds r0, #0x34
	movs r1, #2
	movs r2, #0x14
	bl PutSpecialChar
	b .L08092BC6
	.align 2, 0
.L08092788: .4byte gUnknown_0200D6E0
.L0809278C:
	adds r0, r5, #0
	adds r0, #0x34
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	b .L08092BC6
.L0809279A:
	ldr r0, .L080927DC  @ gUnknown_0200D6E0
	lsls r4, r7, #2
	adds r7, r4, r0
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	str r4, [sp, #0x4c]
	cmp r5, #0
	bne .L080927E8
	ldr r0, .L080927E0  @ 0x00000537
	bl GetMsg
	adds r3, r0, #0
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x2c]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, .L080927E4  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x14
	mov r2, r9
	str r5, [sp]
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
	b .L0809284C
	.align 2, 0
.L080927DC: .4byte gUnknown_0200D6E0
.L080927E0: .4byte 0x00000537
.L080927E4: .4byte gUnknown_0200E098
.L080927E8:
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r5, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x2c]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, .L080928A8  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r4, [sp, #0x54]
	add r4, sl
	adds r1, r4, #0
	adds r1, #0x14
	mov r2, r9
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	bl PutDrawText
	adds r4, #0x10
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	bl func_08090324
.L0809284C:
	ldr r5, [sp, #0x54]
	add r5, sl
	adds r3, r5, #0
	adds r3, #0x24
	movs r1, #2
	mov r4, r9
	cmp r4, #0
	beq .L0809285E
	movs r1, #1
.L0809285E:
	ldr r0, .L080928AC  @ gUnknown_0200D6E0
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	movs r6, #4
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r3, r5, #0
	adds r3, #0x2c
	movs r1, #2
	mov r0, r9
	cmp r0, #0
	beq .L0809287E
	movs r1, #1
.L0809287E:
	ldr r0, [r4]
	movs r6, #6
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r1, r5, #0
	adds r1, #0x34
	movs r3, #2
	mov r0, r9
	cmp r0, #0
	beq .L08092898
	movs r3, #1
.L08092898:
	ldr r0, [r4]
	movs r4, #8
	ldrsh r2, [r0, r4]
	adds r0, r1, #0
	adds r1, r3, #0
	bl PutNumberOrBlank
	b .L08092BC6
	.align 2, 0
.L080928A8: .4byte gUnknown_0200E098
.L080928AC: .4byte gUnknown_0200D6E0
.L080928B0:
	ldr r0, .L080928F4  @ gUnknown_0200D6E0
	lsls r1, r7, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, [r0]
	ldr r5, [r2, #0xc]
	movs r0, #0x10
	ands r5, r0
	str r1, [sp, #0x4c]
	cmp r5, #0
	beq .L080928FC
	adds r0, r2, #0
	bl GetUnitRescueName
	adds r5, r0, #0
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	adds r0, r6, r1
	lsls r0, r0, #3
	ldr r1, .L080928F8  @ gUnknown_0200E0A0
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x22
	mov r2, r9
	negs r4, r2
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	movs r3, #2
	bl PutDrawText
	b .L08092924
	.align 2, 0
.L080928F4: .4byte gUnknown_0200D6E0
.L080928F8: .4byte gUnknown_0200E0A0
.L080928FC:
	ldr r0, .L080929D8  @ 0x00000536
	bl GetMsg
	adds r3, r0, #0
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x2c]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, .L080929DC  @ gUnknown_0200E0A0
	adds r0, r0, r1
	ldr r1, [sp, #0x54]
	add r1, sl
	adds r1, #0x22
	mov r2, r9
	negs r4, r2
	str r5, [sp]
	str r3, [sp, #4]
	movs r3, #2
	bl PutDrawText
.L08092924:
	mov r8, r4
	ldr r7, [sp, #0x54]
	add r7, sl
	adds r3, r7, #0
	adds r3, #0x14
	movs r1, #2
	mov r4, r9
	cmp r4, #0
	beq .L08092938
	movs r1, #1
.L08092938:
	ldr r0, .L080929E0  @ gUnknown_0200D6E0
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	ldr r0, [r0]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r3, r7, #0
	adds r3, #0x1a
	movs r5, #2
	mov r0, r9
	cmp r0, #0
	beq .L08092964
	movs r5, #1
.L08092964:
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r2, #0x11
	ldrsb r2, [r0, r2]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	adds r5, r7, #0
	adds r5, #0x20
	movs r6, #2
	mov r1, r9
	cmp r1, #0
	beq .L08092994
	movs r6, #1
.L08092994:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAid
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitStatusName
	adds r4, r0, #0
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x2c]
	adds r0, r2, r3
	lsls r0, r0, #3
	ldr r1, .L080929E4  @ gUnknown_0200E098
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #0x2e
	mov r6, r8
	mov r2, r9
	orrs r6, r2
	lsrs r2, r6, #0x1f
	movs r3, #0
	str r3, [sp]
	str r4, [sp, #4]
	movs r3, #2
	bl PutDrawText
	b .L08092BC6
	.align 2, 0
.L080929D8: .4byte 0x00000536
.L080929DC: .4byte gUnknown_0200E0A0
.L080929E0: .4byte gUnknown_0200D6E0
.L080929E4: .4byte gUnknown_0200E098
.L080929E8:
	movs r6, #0
	lsls r3, r7, #2
	ldr r0, .L08092A40  @ gUnknown_0200D6E0
	adds r7, r3, r0
	ldr r5, [sp, #0x54]
	add r5, sl
.L080929F4:
	add r1, sp, #8
	ldr r0, .L08092A44  @ gUnknown_08205B94
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r7]
	ldr r0, [r0]
	adds r0, #0x28
	adds r0, r0, r6
	ldrb r0, [r0]
	bl GetWeaponLevelFromExp
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r0, r6, #2
	adds r0, #0x14
	adds r3, r5, r0
	movs r1, #2
	cmp r4, #6
	bne .L08092A24
	movs r1, #4
.L08092A24:
	lsls r0, r4, #2
	add r0, sp
	adds r0, #8
	ldr r2, [r0]
	adds r0, r3, #0
	bl PutSpecialChar
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #7
	bls .L080929F4
	b .L08092BC6
	.align 2, 0
.L08092A40: .4byte gUnknown_0200D6E0
.L08092A44: .4byte gUnknown_08205B94
.L08092A48:
	ldr r1, [sp, #0x28]
	subs r1, #6
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x38]
	movs r4, #0
	str r4, [sp, #0x3c]
	ldr r1, .L08092B10  @ gUnknown_0200D6E0
	lsls r0, r7, #2
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSupportCount
	str r0, [sp, #0x40]
	adds r0, r6, #0
	adds r0, #0x10
	add r0, r8
	bl ClearText
	movs r6, #0
	ldr r0, [sp, #0x40]
	cmp r4, r0
	blt .L08092A7E
	b .L08092B7E
.L08092A7E:
	adds r7, r5, #0
	mov r1, r8
	str r1, [sp, #0x44]
	ldr r2, [sp, #0x34]
	str r2, [sp, #0x48]
	mov r3, r9
	negs r3, r3
	mov r0, r9
	orrs r3, r0
	mov r8, r3
.L08092A92:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08092B72
	ldr r1, [sp, #0x3c]
	ldr r2, [sp, #0x38]
	cmp r1, r2
	bcc .L08092B68
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportUnit
	cmp r0, #0
	beq .L08092B72
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportUnit
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	bne .L08092B18
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportPid
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetPInfo
	ldrh r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	lsls r0, r4, #3
	ldr r1, .L08092B14  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r3, [sp, #0x44]
	adds r0, r3, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r3, [sp, #0x48]
	adds r1, r3, r1
	str r5, [sp]
	str r2, [sp, #4]
	mov r3, r8
	lsrs r2, r3, #0x1f
	movs r3, #0
	bl PutDrawText
	b .L08092B56
	.align 2, 0
.L08092B10: .4byte gUnknown_0200D6E0
.L08092B14: .4byte gUnknown_0200E098
.L08092B18:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportPid
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetPInfo
	ldrh r0, [r0]
	bl GetMsg
	adds r3, r0, #0
	lsls r0, r4, #3
	ldr r1, .L08092B64  @ gUnknown_0200E098
	adds r0, r0, r1
	ldr r1, [sp, #0x44]
	adds r0, r1, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r2, [sp, #0x48]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #1
	movs r3, #0
	bl PutDrawText
.L08092B56:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	beq .L08092B7E
	b .L08092B72
	.align 2, 0
.L08092B64: .4byte gUnknown_0200E098
.L08092B68:
	ldr r0, [sp, #0x3c]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x3c]
.L08092B72:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r3, [sp, #0x40]
	cmp r6, r3
	blt .L08092A92
.L08092B7E:
	cmp r4, #2
	bhi .L08092BC6
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x2c]
	adds r0, r6, r1
	lsls r5, r0, #3
	ldr r7, [sp, #0x54]
	add r7, sl
	mov r2, r9
	negs r6, r2
	orrs r6, r2
.L08092B94:
	ldr r0, .L08092BDC  @ 0x00000536
	bl GetMsg
	adds r3, r0, #0
	lsls r0, r4, #3
	ldr r1, .L08092BE0  @ gUnknown_0200E098
	adds r0, r0, r1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	adds r1, r7, r1
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	lsrs r2, r6, #0x1f
	movs r3, #0
	bl PutDrawText
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls .L08092B94
.L08092BC6:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x58
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08092BDC: .4byte 0x00000536
.L08092BE0: .4byte gUnknown_0200E098

	THUMB_FUNC_END func_080922F0

	THUMB_FUNC_START SortUnitList_GetUnitSoloAnimation
SortUnitList_GetUnitSoloAnimation: @ 0x08092BE4
	ldr r0, [r0, #0xc]
	movs r1, #0xc0
	lsls r1, r1, #8
	ands r0, r1
	bx lr

	THUMB_FUNC_END SortUnitList_GetUnitSoloAnimation

	THUMB_FUNC_START SortUnitList
SortUnitList: @ 0x08092BF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x60
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #1
	ands r2, r1
	subs r0, #1
	cmp r0, #0x1f
	bls .L08092C12
	bl .L08094FE0
.L08092C12:
	lsls r0, r0, #2
	ldr r1, .L08092C1C  @ .L08092C20
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L08092C1C: .4byte .L08092C20
.L08092C20: @ jump table
	.4byte .L08092CA0 @ case 0
	.4byte .L08092F90 @ case 1
	.4byte .L08092E84 @ case 2
	.4byte .L08093094 @ case 3
	.4byte .L08093190 @ case 4
	.4byte .L0809329C @ case 5
	.4byte .L080933A8 @ case 6
	.4byte .L080934B4 @ case 7
	.4byte .L080935C0 @ case 8
	.4byte .L080936CC @ case 9
	.4byte .L080937D8 @ case 10
	.4byte .L080938E4 @ case 11
	.4byte .L08093C58 @ case 12
	.4byte .L08093D64 @ case 13
	.4byte .L08093F68 @ case 14
	.4byte .L0809405C @ case 15
	.4byte .L08094150 @ case 16
	.4byte .L08094244 @ case 17
	.4byte .L080939F0 @ case 18
	.4byte .L08093B4C @ case 19
	.4byte .L08094374 @ case 20
	.4byte .L08094480 @ case 21
	.4byte .L08094608 @ case 22
	.4byte .L0809470C @ case 23
	.4byte .L08094808 @ case 24
	.4byte .L08094904 @ case 25
	.4byte .L08094A00 @ case 26
	.4byte .L08094AFC @ case 27
	.4byte .L08094BF8 @ case 28
	.4byte .L08094CF4 @ case 29
	.4byte .L08094DF0 @ case 30
	.4byte .L08094EDC @ case 31
.L08092CA0:
	cmp r2, #0
	bne .L08092D94
	movs r0, #0
	str r0, [sp, #0x40]
	movs r1, #0
	ldr r3, .L08092D8C  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge .L08092D16
	adds r7, r3, #0
	mov sl, r7
.L08092CBA:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08092D06
	ldr r7, .L08092D90  @ gUnknown_0200D6E0
	mov r9, r7
.L08092CCE:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0]
	lsls r0, r3, #2
	adds r4, r0, r1
	ldr r3, [r4]
	ldr r0, [r3]
	ldr r1, [r0]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bcs .L08092CF6
	str r5, [r4]
	str r3, [r6]
	movs r2, #1
	str r2, [sp, #0x40]
.L08092CF6:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08092CCE
.L08092D06:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L08092CBA
.L08092D16:
	movs r1, #0
	ldr r7, .L08092D8C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge .L08092D86
	mov sl, r7
.L08092D24:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08092D76
	ldr r7, .L08092D90  @ gUnknown_0200D6E0
	mov r9, r7
	movs r7, #2
	mov ip, r8
.L08092D3C:
	adds r6, r3, #1
	lsls r0, r6, #2
	mov r1, r9
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	ands r1, r7
	lsls r0, r3, #2
	mov r2, r9
	adds r3, r0, r2
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0, #0xc]
	ands r0, r7
	cmp r1, r0
	bcs .L08092D66
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x40]
.L08092D66:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r2, ip
	subs r0, r0, r2
	cmp r3, r0
	blt .L08092D3C
.L08092D76:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	ldr r7, .L08092D8C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt .L08092D24
.L08092D86:
	ldr r0, [sp, #0x40]
	bl .L080945F2
	.align 2, 0
.L08092D8C: .4byte gUnknown_0200F158
.L08092D90: .4byte gUnknown_0200D6E0
.L08092D94:
	movs r1, #0
	str r1, [sp, #0x44]
	ldr r2, .L08092E7C  @ gUnknown_0200F158
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	adds r3, r1, #0
	cmp r3, r0
	bge .L08092E06
	adds r7, r2, #0
	mov sl, r7
.L08092DAA:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08092DF6
	ldr r7, .L08092E80  @ gUnknown_0200D6E0
	mov r9, r7
.L08092DBE:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0]
	lsls r0, r3, #2
	adds r4, r0, r1
	ldr r3, [r4]
	ldr r0, [r3]
	ldr r1, [r0]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bls .L08092DE6
	str r5, [r4]
	str r3, [r6]
	movs r2, #1
	str r2, [sp, #0x44]
.L08092DE6:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08092DBE
.L08092DF6:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L08092DAA
.L08092E06:
	movs r1, #0
	ldr r7, .L08092E7C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge .L08092E76
	mov sl, r7
.L08092E14:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08092E66
	ldr r7, .L08092E80  @ gUnknown_0200D6E0
	mov r9, r7
	movs r7, #2
	mov ip, r8
.L08092E2C:
	adds r6, r3, #1
	lsls r0, r6, #2
	mov r1, r9
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	ands r1, r7
	lsls r0, r3, #2
	mov r2, r9
	adds r3, r0, r2
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0, #0xc]
	ands r0, r7
	cmp r1, r0
	bls .L08092E56
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x44]
.L08092E56:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r2, ip
	subs r0, r0, r2
	cmp r3, r0
	blt .L08092E2C
.L08092E66:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	ldr r7, .L08092E7C  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt .L08092E14
.L08092E76:
	ldr r0, [sp, #0x44]
	bl .L080945F2
	.align 2, 0
.L08092E7C: .4byte gUnknown_0200F158
.L08092E80: .4byte gUnknown_0200D6E0
.L08092E84:
	cmp r2, #0
	bne .L08092F0C
	movs r1, #0
	mov sl, r1
	ldr r3, .L08092F04  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L08092E9C
	bl .L08094EC8
.L08092E9C:
	adds r7, r3, #0
	mov r9, r7
.L08092EA0:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08092EF0
	ldr r0, .L08092F08  @ gUnknown_0200D6E0
	mov r8, r0
.L08092EB4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	ble .L08092EE2
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08092EE2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08092EB4
.L08092EF0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08092EA0
	bl .L08094EC8
	.align 2, 0
.L08092F04: .4byte gUnknown_0200F158
.L08092F08: .4byte gUnknown_0200D6E0
.L08092F0C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08092F88  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08092F22
	bl .L08094EC8
.L08092F22:
	ldr r2, .L08092F88  @ gUnknown_0200F158
	mov r9, r2
.L08092F26:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08092F76
	ldr r0, .L08092F8C  @ gUnknown_0200D6E0
	mov r8, r0
.L08092F3A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bge .L08092F68
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08092F68:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08092F3A
.L08092F76:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08092F26
	bl .L08094EC8
	.align 2, 0
.L08092F88: .4byte gUnknown_0200F158
.L08092F8C: .4byte gUnknown_0200D6E0
.L08092F90:
	cmp r2, #0
	bne .L08093014
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, .L0809300C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L08092FA8
	bl .L0809435C
.L08092FA8:
	adds r7, r3, #0
	mov sl, r7
.L08092FAC:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08092FF8
	ldr r7, .L08093010  @ gUnknown_0200D6E0
	mov r9, r7
.L08092FC0:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0, #4]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bcs .L08092FE8
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
.L08092FE8:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08092FC0
.L08092FF8:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L0809300C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L08092FAC
	bl .L0809435C
	.align 2, 0
.L0809300C: .4byte gUnknown_0200F158
.L08093010: .4byte gUnknown_0200D6E0
.L08093014:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, .L0809308C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	blt .L08093028
	bl .L0809435C
.L08093028:
	adds r3, r2, #0
	mov sl, r3
.L0809302C:
	movs r3, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08093078
	ldr r0, .L08093090  @ gUnknown_0200D6E0
	mov r9, r0
.L08093040:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	ldr r2, [r0, #4]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	ldrb r0, [r2, #0xa]
	ldrb r1, [r1, #0xa]
	cmp r0, r1
	bls .L08093068
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
.L08093068:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08093040
.L08093078:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L0809308C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L0809302C
	bl .L0809435C
	.align 2, 0
.L0809308C: .4byte gUnknown_0200F158
.L08093090: .4byte gUnknown_0200D6E0
.L08093094:
	cmp r2, #0
	bne .L08093114
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, .L0809310C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080930AC
	bl .L0809435C
.L080930AC:
	adds r7, r3, #0
	mov sl, r7
.L080930B0:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L080930F8
	ldr r7, .L08093110  @ gUnknown_0200D6E0
	mov r9, r7
.L080930C4:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r2, [r5]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r1, [r4]
	ldrb r0, [r2, #9]
	ldrb r1, [r1, #9]
	cmp r0, r1
	bls .L080930E8
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
.L080930E8:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L080930C4
.L080930F8:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L0809310C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080930B0
	bl .L0809435C
	.align 2, 0
.L0809310C: .4byte gUnknown_0200F158
.L08093110: .4byte gUnknown_0200D6E0
.L08093114:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, .L08093188  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	blt .L08093128
	bl .L0809435C
.L08093128:
	adds r3, r2, #0
	mov sl, r3
.L0809312C:
	movs r3, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L08093174
	ldr r0, .L0809318C  @ gUnknown_0200D6E0
	mov r9, r0
.L08093140:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r2, [r5]
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r1, [r4]
	ldrb r0, [r2, #9]
	ldrb r1, [r1, #9]
	cmp r0, r1
	bcs .L08093164
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
.L08093164:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08093140
.L08093174:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093188  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L0809312C
	bl .L0809435C
	.align 2, 0
.L08093188: .4byte gUnknown_0200F158
.L0809318C: .4byte gUnknown_0200D6E0
.L08093190:
	cmp r2, #0
	bne .L08093218
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, .L08093210  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080931A8
	bl .L08094EC8
.L080931A8:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L080931FA
	ldr r1, .L08093214  @ gUnknown_0200D6E0
	mov r9, r1
.L080931BA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, r9
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, r9
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	ble .L080931EA
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r0, #1
	mov sl, r0
.L080931EA:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093210  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r1, r8
	subs r0, r0, r1
	cmp r5, r0
	blt .L080931BA
.L080931FA:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093210  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080931A8
	bl .L08094EC8
	.align 2, 0
.L08093210: .4byte gUnknown_0200F158
.L08093214: .4byte gUnknown_0200D6E0
.L08093218:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, .L08093294  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L0809322C
	bl .L08094FCE
.L0809322C:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L0809327E
	ldr r0, .L08093298  @ gUnknown_0200D6E0
	mov r9, r0
.L0809323E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	bge .L0809326E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L0809326E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093294  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L0809323E
.L0809327E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08093294  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L0809322C
	bl .L08094FCE
	.align 2, 0
.L08093294: .4byte gUnknown_0200F158
.L08093298: .4byte gUnknown_0200D6E0
.L0809329C:
	cmp r2, #0
	bne .L08093324
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L0809331C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080932B4
	bl .L08094FCE
.L080932B4:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093306
	ldr r7, .L08093320  @ gUnknown_0200D6E0
	mov r9, r7
.L080932C6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	ble .L080932F6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L080932F6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L0809331C  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L080932C6
.L08093306:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L0809331C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080932B4
	bl .L08094FCE
	.align 2, 0
.L0809331C: .4byte gUnknown_0200F158
.L08093320: .4byte gUnknown_0200D6E0
.L08093324:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080933A0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093338
	bl .L08094FCE
.L08093338:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L0809338A
	ldr r7, .L080933A4  @ gUnknown_0200D6E0
	mov r9, r7
.L0809334A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	bge .L0809337A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L0809337A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080933A0  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L0809334A
.L0809338A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080933A0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093338
	bl .L08094FCE
	.align 2, 0
.L080933A0: .4byte gUnknown_0200F158
.L080933A4: .4byte gUnknown_0200D6E0
.L080933A8:
	cmp r2, #0
	bne .L08093430
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L08093428  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080933C0
	bl .L08094FCE
.L080933C0:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093412
	ldr r7, .L0809342C  @ gUnknown_0200D6E0
	mov r9, r7
.L080933D2:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	ble .L08093402
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093402:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093428  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L080933D2
.L08093412:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093428  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080933C0
	bl .L08094FCE
	.align 2, 0
.L08093428: .4byte gUnknown_0200F158
.L0809342C: .4byte gUnknown_0200D6E0
.L08093430:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080934AC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093444
	bl .L08094FCE
.L08093444:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093496
	ldr r7, .L080934B0  @ gUnknown_0200D6E0
	mov r9, r7
.L08093456:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	bge .L08093486
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093486:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080934AC  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093456
.L08093496:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080934AC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093444
	bl .L08094FCE
	.align 2, 0
.L080934AC: .4byte gUnknown_0200F158
.L080934B0: .4byte gUnknown_0200D6E0
.L080934B4:
	cmp r2, #0
	bne .L0809353C
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L08093534  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080934CC
	bl .L08094FCE
.L080934CC:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L0809351E
	ldr r7, .L08093538  @ gUnknown_0200D6E0
	mov r9, r7
.L080934DE:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	ble .L0809350E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L0809350E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093534  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L080934DE
.L0809351E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093534  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080934CC
	bl .L08094FCE
	.align 2, 0
.L08093534: .4byte gUnknown_0200F158
.L08093538: .4byte gUnknown_0200D6E0
.L0809353C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080935B8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093550
	bl .L08094FCE
.L08093550:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L080935A2
	ldr r7, .L080935BC  @ gUnknown_0200D6E0
	mov r9, r7
.L08093562:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	bge .L08093592
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093592:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080935B8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093562
.L080935A2:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080935B8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093550
	bl .L08094FCE
	.align 2, 0
.L080935B8: .4byte gUnknown_0200F158
.L080935BC: .4byte gUnknown_0200D6E0
.L080935C0:
	cmp r2, #0
	bne .L08093648
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L08093640  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080935D8
	bl .L08094FCE
.L080935D8:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L0809362A
	ldr r7, .L08093644  @ gUnknown_0200D6E0
	mov r9, r7
.L080935EA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	ble .L0809361A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L0809361A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093640  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L080935EA
.L0809362A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093640  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080935D8
	bl .L08094FCE
	.align 2, 0
.L08093640: .4byte gUnknown_0200F158
.L08093644: .4byte gUnknown_0200D6E0
.L08093648:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080936C4  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L0809365C
	bl .L08094FCE
.L0809365C:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L080936AE
	ldr r7, .L080936C8  @ gUnknown_0200D6E0
	mov r9, r7
.L0809366E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	bge .L0809369E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L0809369E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080936C4  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L0809366E
.L080936AE:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080936C4  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L0809365C
	bl .L08094FCE
	.align 2, 0
.L080936C4: .4byte gUnknown_0200F158
.L080936C8: .4byte gUnknown_0200D6E0
.L080936CC:
	cmp r2, #0
	bne .L08093754
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L0809374C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080936E4
	bl .L08094FCE
.L080936E4:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093736
	ldr r7, .L08093750  @ gUnknown_0200D6E0
	mov r9, r7
.L080936F6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	ble .L08093726
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093726:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L0809374C  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L080936F6
.L08093736:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L0809374C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080936E4
	bl .L08094FCE
	.align 2, 0
.L0809374C: .4byte gUnknown_0200F158
.L08093750: .4byte gUnknown_0200D6E0
.L08093754:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080937D0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093768
	bl .L08094FCE
.L08093768:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L080937BA
	ldr r7, .L080937D4  @ gUnknown_0200D6E0
	mov r9, r7
.L0809377A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	bge .L080937AA
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L080937AA:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080937D0  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L0809377A
.L080937BA:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080937D0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093768
	bl .L08094FCE
	.align 2, 0
.L080937D0: .4byte gUnknown_0200F158
.L080937D4: .4byte gUnknown_0200D6E0
.L080937D8:
	cmp r2, #0
	bne .L08093860
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L08093858  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080937F0
	bl .L08094FCE
.L080937F0:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093842
	ldr r7, .L0809385C  @ gUnknown_0200D6E0
	mov r9, r7
.L08093802:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	ble .L08093832
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093832:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093858  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093802
.L08093842:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093858  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080937F0
	bl .L08094FCE
	.align 2, 0
.L08093858: .4byte gUnknown_0200F158
.L0809385C: .4byte gUnknown_0200D6E0
.L08093860:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080938DC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093874
	bl .L08094FCE
.L08093874:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L080938C6
	ldr r7, .L080938E0  @ gUnknown_0200D6E0
	mov r9, r7
.L08093886:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	bge .L080938B6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L080938B6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080938DC  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093886
.L080938C6:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080938DC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093874
	bl .L08094FCE
	.align 2, 0
.L080938DC: .4byte gUnknown_0200F158
.L080938E0: .4byte gUnknown_0200D6E0
.L080938E4:
	cmp r2, #0
	bne .L0809396C
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L08093964  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L080938FC
	bl .L08094FCE
.L080938FC:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L0809394E
	ldr r7, .L08093968  @ gUnknown_0200D6E0
	mov r9, r7
.L0809390E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	ble .L0809393E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L0809393E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093964  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L0809390E
.L0809394E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093964  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080938FC
	bl .L08094FCE
	.align 2, 0
.L08093964: .4byte gUnknown_0200F158
.L08093968: .4byte gUnknown_0200D6E0
.L0809396C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L080939E8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093980
	bl .L08094FCE
.L08093980:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L080939D2
	ldr r7, .L080939EC  @ gUnknown_0200D6E0
	mov r9, r7
.L08093992:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	bge .L080939C2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L080939C2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080939E8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093992
.L080939D2:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080939E8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093980
	bl .L08094FCE
	.align 2, 0
.L080939E8: .4byte gUnknown_0200F158
.L080939EC: .4byte gUnknown_0200D6E0
.L080939F0:
	cmp r2, #0
	bne .L08093AA0
	movs r3, #0
	str r3, [sp, #0x48]
	movs r1, #0
	ldr r7, .L08093A98  @ gUnknown_0200F158
	ldrb r0, [r7]
	subs r0, #1
	cmp r2, r0
	bge .L08093A90
	adds r0, r7, #0
	mov sl, r0
.L08093A08:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L08093A80
	ldr r7, .L08093A9C  @ gUnknown_0200D6E0
	mov ip, r7
.L08093A1C:
	adds r0, r2, #1
	mov r8, r0
	lsls r0, r0, #2
	mov r1, ip
	adds r7, r0, r1
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r2, ip
	adds r4, r0, r2
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x1a
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	ble .L08093A6E
	str r6, [r4]
	str r5, [r7]
	movs r3, #1
	str r3, [sp, #0x48]
.L08093A6E:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r9
	subs r0, r0, r3
	cmp r2, r0
	blt .L08093A1C
.L08093A80:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08093A98  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093A08
.L08093A90:
	ldr r3, [sp, #0x48]
	bl .L08094ECA
	.align 2, 0
.L08093A98: .4byte gUnknown_0200F158
.L08093A9C: .4byte gUnknown_0200D6E0
.L08093AA0:
	movs r7, #0
	str r7, [sp, #0x4c]
	movs r1, #0
	ldr r2, .L08093B44  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r7, r0
	bge .L08093B3C
	adds r3, r2, #0
	mov sl, r3
.L08093AB4:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L08093B2C
	ldr r0, .L08093B48  @ gUnknown_0200D6E0
	mov ip, r0
.L08093AC8:
	adds r1, r2, #1
	mov r8, r1
	lsls r0, r1, #2
	mov r3, ip
	adds r7, r0, r3
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r1, ip
	adds r4, r0, r1
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x1a
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	bge .L08093B1A
	str r6, [r4]
	str r5, [r7]
	movs r2, #1
	str r2, [sp, #0x4c]
.L08093B1A:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r2, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r9
	subs r0, r0, r1
	cmp r2, r0
	blt .L08093AC8
.L08093B2C:
	mov r2, r9
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093B44  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L08093AB4
.L08093B3C:
	ldr r7, [sp, #0x4c]
	bl .L0809435E
	.align 2, 0
.L08093B44: .4byte gUnknown_0200F158
.L08093B48: .4byte gUnknown_0200D6E0
.L08093B4C:
	cmp r2, #0
	bne .L08093BD4
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, .L08093BCC  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L08093B64
	bl .L08094EC8
.L08093B64:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093BB6
	ldr r1, .L08093BD0  @ gUnknown_0200D6E0
	mov r9, r1
.L08093B76:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, r9
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, r9
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	ble .L08093BA6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r0, #1
	mov sl, r0
.L08093BA6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093BCC  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r1, r8
	subs r0, r0, r1
	cmp r5, r0
	blt .L08093B76
.L08093BB6:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093BCC  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L08093B64
	bl .L08094EC8
	.align 2, 0
.L08093BCC: .4byte gUnknown_0200F158
.L08093BD0: .4byte gUnknown_0200D6E0
.L08093BD4:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, .L08093C50  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093BE8
	bl .L08094FCE
.L08093BE8:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093C3A
	ldr r0, .L08093C54  @ gUnknown_0200D6E0
	mov r9, r0
.L08093BFA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	bge .L08093C2A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093C2A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093C50  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093BFA
.L08093C3A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08093C50  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093BE8
	bl .L08094FCE
	.align 2, 0
.L08093C50: .4byte gUnknown_0200F158
.L08093C54: .4byte gUnknown_0200D6E0
.L08093C58:
	cmp r2, #0
	bne .L08093CE0
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, .L08093CD8  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L08093C70
	bl .L08094FCE
.L08093C70:
	movs r5, #0
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093CC2
	ldr r7, .L08093CDC  @ gUnknown_0200D6E0
	mov r9, r7
.L08093C82:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	cmp r4, r0
	bge .L08093CB2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093CB2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093CD8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093C82
.L08093CC2:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L08093CD8  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L08093C70
	bl .L08094FCE
	.align 2, 0
.L08093CD8: .4byte gUnknown_0200F158
.L08093CDC: .4byte gUnknown_0200D6E0
.L08093CE0:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L08093D5C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt .L08093CF4
	bl .L08094FCE
.L08093CF4:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08093D46
	ldr r7, .L08093D60  @ gUnknown_0200D6E0
	mov r9, r7
.L08093D06:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	cmp r4, r0
	ble .L08093D36
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08093D36:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08093D5C  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08093D06
.L08093D46:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08093D5C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093CF4
	bl .L08094FCE
	.align 2, 0
.L08093D5C: .4byte gUnknown_0200F158
.L08093D60: .4byte gUnknown_0200D6E0
.L08093D64:
	cmp r2, #0
	beq .L08093D6A
	b .L08093E6C
.L08093D6A:
	movs r3, #0
	str r3, [sp, #0x50]
	movs r4, #0
	ldr r0, .L08093DA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r2, r0
	bcs .L08093DA2
	ldr r5, .L08093DAC  @ gUnknown_0200D6E0
.L08093D7A:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIid
	mov r7, sp
	adds r1, r7, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, .L08093DA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	bcc .L08093D7A
.L08093DA2:
	movs r4, #0
	b .L08093E56
	.align 2, 0
.L08093DA8: .4byte gUnknown_0200F158
.L08093DAC: .4byte gUnknown_0200D6E0
.L08093DB0:
	movs r6, #0
	ldrb r0, [r1]
	adds r1, r4, #1
	subs r0, r0, r1
	str r1, [sp, #0x58]
	cmp r6, r0
	bge .L08093E50
	ldr r0, .L08093DF8  @ gUnknown_0200D6E0
	mov sl, r0
.L08093DC2:
	adds r0, r6, #1
	mov r1, sp
	adds r1, r1, r0
	mov r8, r1
	mov r2, sp
	adds r5, r2, r6
	ldrb r4, [r1]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov r9, r0
	cmp r3, r2
	bls .L08093DFC
	adds r1, r2, #0
	strb r4, [r5]
	mov r3, r8
	strb r1, [r3]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	lsls r1, r0, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r7, #1
	str r7, [sp, #0x50]
	b .L08093E3E
	.align 2, 0
.L08093DF8: .4byte gUnknown_0200D6E0
.L08093DFC:
	cmp r3, r2
	bne .L08093E3E
	mov r1, r9
	lsls r0, r1, #2
	mov r2, sl
	adds r7, r0, r2
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bls .L08093E3E
	ldrb r1, [r5]
	mov r2, r8
	ldrb r0, [r2]
	strb r0, [r5]
	strb r1, [r2]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
	movs r3, #1
	str r3, [sp, #0x50]
.L08093E3E:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r6, r0, #0x18
	ldr r0, .L08093E68  @ gUnknown_0200F158
	ldrb r0, [r0]
	ldr r1, [sp, #0x58]
	subs r0, r0, r1
	cmp r6, r0
	blt .L08093DC2
.L08093E50:
	ldr r2, [sp, #0x58]
	lsls r0, r2, #0x18
	lsrs r4, r0, #0x18
.L08093E56:
	ldr r1, .L08093E68  @ gUnknown_0200F158
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt .L08093DB0
	ldr r3, [sp, #0x50]
	bl .L08094ECA
	.align 2, 0
.L08093E68: .4byte gUnknown_0200F158
.L08093E6C:
	movs r7, #0
	str r7, [sp, #0x54]
	movs r4, #0
	ldr r0, .L08093EA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r7, r0
	bcs .L08093EA4
	ldr r5, .L08093EAC  @ gUnknown_0200D6E0
.L08093E7C:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIid
	mov r2, sp
	adds r1, r2, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, .L08093EA8  @ gUnknown_0200F158
	ldrb r0, [r0]
	cmp r4, r0
	bcc .L08093E7C
.L08093EA4:
	movs r4, #0
	b .L08093F56
	.align 2, 0
.L08093EA8: .4byte gUnknown_0200F158
.L08093EAC: .4byte gUnknown_0200D6E0
.L08093EB0:
	movs r6, #0
	ldrb r0, [r1]
	adds r1, r4, #1
	subs r0, r0, r1
	str r1, [sp, #0x5c]
	cmp r6, r0
	bge .L08093F50
	ldr r3, .L08093EF8  @ gUnknown_0200D6E0
	mov sl, r3
.L08093EC2:
	adds r0, r6, #1
	mov r7, sp
	adds r7, r7, r0
	mov r8, r7
	mov r1, sp
	adds r5, r1, r6
	ldrb r4, [r7]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov r9, r0
	cmp r3, r2
	bcs .L08093EFC
	adds r1, r2, #0
	strb r4, [r5]
	strb r1, [r7]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	lsls r1, r0, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r2, #1
	str r2, [sp, #0x54]
	b .L08093F3E
	.align 2, 0
.L08093EF8: .4byte gUnknown_0200D6E0
.L08093EFC:
	cmp r3, r2
	bne .L08093F3E
	mov r3, r9
	lsls r0, r3, #2
	mov r1, sl
	adds r7, r0, r1
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bcs .L08093F3E
	ldrb r1, [r5]
	mov r3, r8
	ldrb r0, [r3]
	strb r0, [r5]
	strb r1, [r3]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
	movs r7, #1
	str r7, [sp, #0x54]
.L08093F3E:
	mov r1, r9
	lsls r0, r1, #0x18
	lsrs r6, r0, #0x18
	ldr r0, .L08093F64  @ gUnknown_0200F158
	ldrb r0, [r0]
	ldr r2, [sp, #0x5c]
	subs r0, r0, r2
	cmp r6, r0
	blt .L08093EC2
.L08093F50:
	ldr r3, [sp, #0x5c]
	lsls r0, r3, #0x18
	lsrs r4, r0, #0x18
.L08093F56:
	ldr r1, .L08093F64  @ gUnknown_0200F158
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt .L08093EB0
	ldr r7, [sp, #0x54]
	b .L0809435E
	.align 2, 0
.L08093F64: .4byte gUnknown_0200F158
.L08093F68:
	cmp r2, #0
	bne .L08093FE4
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r3, .L08093FDC  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge .L08093FD6
	adds r7, r3, #0
	mov sl, r7
.L08093F80:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L08093FC6
	mov r8, r9
.L08093F92:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, .L08093FE0  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #4
	ldrsh r1, [r4, r0]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble .L08093FB6
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
.L08093FB6:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt .L08093F92
.L08093FC6:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08093FDC  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093F80
.L08093FD6:
	mov r3, ip
	bl .L08094ECA
	.align 2, 0
.L08093FDC: .4byte gUnknown_0200F158
.L08093FE0: .4byte gUnknown_0200D6E0
.L08093FE4:
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r2, .L08094054  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge .L0809404E
	adds r3, r2, #0
	mov sl, r3
.L08093FF8:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L0809403E
	mov r8, r9
.L0809400A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, .L08094058  @ gUnknown_0200D6E0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #4
	ldrsh r1, [r4, r7]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge .L0809402E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
.L0809402E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt .L0809400A
.L0809403E:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08094054  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08093FF8
.L0809404E:
	mov r3, ip
	bl .L08094ECA
	.align 2, 0
.L08094054: .4byte gUnknown_0200F158
.L08094058: .4byte gUnknown_0200D6E0
.L0809405C:
	cmp r2, #0
	bne .L080940D8
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, .L080940D0  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge .L080940CA
	adds r7, r3, #0
	mov sl, r7
.L08094074:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L080940BA
	mov r8, r9
.L08094086:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, .L080940D4  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #6
	ldrsh r1, [r4, r0]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble .L080940AA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
.L080940AA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt .L08094086
.L080940BA:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080940D0  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094074
.L080940CA:
	mov r3, ip
	bl .L08094ECA
	.align 2, 0
.L080940D0: .4byte gUnknown_0200F158
.L080940D4: .4byte gUnknown_0200D6E0
.L080940D8:
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r2, .L08094148  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge .L08094142
	adds r3, r2, #0
	mov sl, r3
.L080940EC:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L08094132
	mov r8, r9
.L080940FE:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, .L0809414C  @ gUnknown_0200D6E0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #6
	ldrsh r1, [r4, r7]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge .L08094122
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
.L08094122:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt .L080940FE
.L08094132:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08094148  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L080940EC
.L08094142:
	mov r3, ip
	bl .L08094ECA
	.align 2, 0
.L08094148: .4byte gUnknown_0200F158
.L0809414C: .4byte gUnknown_0200D6E0
.L08094150:
	cmp r2, #0
	bne .L080941CC
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, .L080941C4  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge .L080941BE
	adds r7, r3, #0
	mov sl, r7
.L08094168:
	movs r2, #0
	mov r3, sl
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L080941AE
	mov r8, r9
.L0809417A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, .L080941C8  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble .L0809419E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
.L0809419E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt .L0809417A
.L080941AE:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L080941C4  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094168
.L080941BE:
	mov r3, ip
	bl .L08094ECA
	.align 2, 0
.L080941C4: .4byte gUnknown_0200F158
.L080941C8: .4byte gUnknown_0200D6E0
.L080941CC:
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r2, .L0809423C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge .L08094236
	adds r3, r2, #0
	mov sl, r3
.L080941E0:
	movs r2, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r9, r1
	cmp r2, r0
	bge .L08094226
	mov r8, r9
.L080941F2:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, .L08094240  @ gUnknown_0200D6E0
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #8
	ldrsh r1, [r4, r7]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge .L08094216
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
.L08094216:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r0, [r1]
	mov r3, r8
	subs r0, r0, r3
	cmp r2, r0
	blt .L080941F2
.L08094226:
	mov r7, r9
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L0809423C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L080941E0
.L08094236:
	mov r3, ip
	bl .L08094ECA
	.align 2, 0
.L0809423C: .4byte gUnknown_0200F158
.L08094240: .4byte gUnknown_0200D6E0
.L08094244:
	cmp r2, #0
	bne .L080942D8
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, .L080942D0  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L0809425A
	b .L0809435C
.L0809425A:
	adds r7, r3, #0
	mov sl, r7
.L0809425E:
	movs r3, #0
	mov r2, sl
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L080942BE
	ldr r7, .L080942D4  @ gUnknown_0200D6E0
	mov r9, r7
.L08094272:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1d
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	ble .L080942AE
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
.L080942AE:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08094272
.L080942BE:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L080942D0  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L0809425E
	b .L0809435C
	.align 2, 0
.L080942D0: .4byte gUnknown_0200F158
.L080942D4: .4byte gUnknown_0200D6E0
.L080942D8:
	movs r0, #0
	mov ip, r0
	movs r1, #0
	ldr r2, .L0809436C  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge .L0809435C
	adds r3, r2, #0
	mov sl, r3
.L080942EC:
	movs r3, #0
	mov r7, sl
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r3, r0
	bge .L0809434C
	ldr r0, .L08094370  @ gUnknown_0200D6E0
	mov r9, r0
.L08094300:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1d
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1d
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	bge .L0809433C
.L08094334:
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
.L0809433C:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	mov r1, r8
	subs r0, r0, r1
	cmp r3, r0
	blt .L08094300
.L0809434C:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, .L0809436C  @ gUnknown_0200F158
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt .L080942EC
.L0809435C:
	mov r7, ip
.L0809435E:
	cmp r7, #0
	bne .L08094366
	bl .L08094FE0
.L08094366:
	movs r0, #1
	bl .L08094FE2
	.align 2, 0
.L0809436C: .4byte gUnknown_0200F158
.L08094370: .4byte gUnknown_0200D6E0
.L08094374:
	cmp r2, #0
	bne .L080943FC
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, .L080943F4  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L0809438E
	bl .L08094EC8
.L0809438E:
	adds r7, r3, #0
	mov r9, r7
.L08094392:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L080943E2
	ldr r0, .L080943F8  @ gUnknown_0200D6E0
	mov r8, r0
.L080943A6:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x30
	ldrb r1, [r0]
	lsls r1, r1, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bls .L080943D4
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L080943D4:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L080943A6
.L080943E2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094392
	bl .L08094EC8
	.align 2, 0
.L080943F4: .4byte gUnknown_0200F158
.L080943F8: .4byte gUnknown_0200D6E0
.L080943FC:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094478  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08094412
	bl .L08094EC8
.L08094412:
	ldr r2, .L08094478  @ gUnknown_0200F158
	mov r9, r2
.L08094416:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094466
	ldr r0, .L0809447C  @ gUnknown_0200D6E0
	mov r8, r0
.L0809442A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x30
	ldrb r1, [r0]
	lsls r1, r1, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bcs .L08094458
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094458:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L0809442A
.L08094466:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094416
	bl .L08094EC8
	.align 2, 0
.L08094478: .4byte gUnknown_0200F158
.L0809447C: .4byte gUnknown_0200D6E0
.L08094480:
	cmp r2, #0
	bne .L08094540
	movs r7, #0
	mov r9, r7
	movs r1, #0
	ldr r0, .L080944B0  @ gUnknown_0200F158
	ldrb r3, [r0]
	cmp r2, r3
	bcs .L080944C8
	ldr r6, .L080944B4  @ gUnknown_0200D6E0
	movs r5, #0x10
	movs r4, #1
.L08094498:
	lsls r0, r1, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r2, [r0, #0xc]
	ands r2, r5
	cmp r2, #0
	beq .L080944B8
	mov r2, sp
	adds r0, r2, r1
	strb r4, [r0]
	b .L080944BE
	.align 2, 0
.L080944B0: .4byte gUnknown_0200F158
.L080944B4: .4byte gUnknown_0200D6E0
.L080944B8:
	mov r7, sp
	adds r0, r7, r1
	strb r2, [r0]
.L080944BE:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, r3
	bcc .L08094498
.L080944C8:
	movs r1, #0
	ldr r2, .L08094538  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L080944D6
	b .L080945F0
.L080944D6:
	mov r8, r2
	ldr r3, .L0809453C  @ gUnknown_0200D6E0
	mov ip, r3
	mov sl, r8
.L080944DE:
	movs r2, #0
	mov r7, r8
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	adds r6, r1, #0
	cmp r2, r0
	bge .L08094528
	mov r7, ip
.L080944F0:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bls .L0809451A
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov r9, r1
.L0809451A:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r0, [r3]
	subs r0, r0, r6
	cmp r2, r0
	blt .L080944F0
.L08094528:
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt .L080944DE
	b .L080945F0
	.align 2, 0
.L08094538: .4byte gUnknown_0200F158
.L0809453C: .4byte gUnknown_0200D6E0
.L08094540:
	movs r1, #0
	mov r9, r1
	ldr r0, .L0809456C  @ gUnknown_0200F158
	ldrb r2, [r0]
	cmp r9, r2
	bcs .L08094584
	ldr r6, .L08094570  @ gUnknown_0200D6E0
	adds r3, r2, #0
	movs r5, #0x10
	movs r4, #1
.L08094554:
	lsls r0, r1, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r2, [r0, #0xc]
	ands r2, r5
	cmp r2, #0
	beq .L08094574
	mov r2, sp
	adds r0, r2, r1
	strb r4, [r0]
	b .L0809457A
	.align 2, 0
.L0809456C: .4byte gUnknown_0200F158
.L08094570: .4byte gUnknown_0200D6E0
.L08094574:
	mov r7, sp
	adds r0, r7, r1
	strb r2, [r0]
.L0809457A:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, r3
	bcc .L08094554
.L08094584:
	movs r1, #0
	ldr r2, .L08094600  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	bge .L080945F0
	mov r8, r2
	ldr r3, .L08094604  @ gUnknown_0200D6E0
	mov ip, r3
	mov sl, r8
.L08094598:
	movs r2, #0
	mov r7, r8
	ldrb r0, [r7]
	adds r1, #1
	subs r0, r0, r1
	adds r6, r1, #0
	cmp r2, r0
	bge .L080945E2
	mov r7, ip
.L080945AA:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bcs .L080945D4
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
.L080945C8:
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov r9, r1
.L080945D4:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r0, [r3]
	subs r0, r0, r6
	cmp r2, r0
	blt .L080945AA
.L080945E2:
	lsls r0, r6, #0x18
	lsrs r1, r0, #0x18
	mov r7, sl
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt .L08094598
.L080945F0:
	mov r0, r9
.L080945F2:
	cmp r0, #0
	bne .L080945FA
	bl .L08094FE0
.L080945FA:
	movs r0, #1
	bl .L08094FE2
	.align 2, 0
.L08094600: .4byte gUnknown_0200F158
.L08094604: .4byte gUnknown_0200D6E0
.L08094608:
	cmp r2, #0
	bne .L0809468C
	movs r1, #0
	mov sl, r1
	ldr r3, .L08094684  @ gUnknown_0200F158
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt .L08094620
	bl .L08094EC8
.L08094620:
	adds r7, r3, #0
	mov r9, r7
.L08094624:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094670
	ldr r0, .L08094688  @ gUnknown_0200D6E0
	mov r8, r0
.L08094638:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094662
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094662:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094638
.L08094670:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094624
	bl .L08094EC8
	.align 2, 0
.L08094684: .4byte gUnknown_0200F158
.L08094688: .4byte gUnknown_0200D6E0
.L0809468C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094704  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L080946A2
	bl .L08094EC8
.L080946A2:
	ldr r2, .L08094704  @ gUnknown_0200F158
	mov r9, r2
.L080946A6:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L080946F2
	ldr r0, .L08094708  @ gUnknown_0200D6E0
	mov r8, r0
.L080946BA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L080946E4
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L080946E4:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L080946BA
.L080946F2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L080946A6
	bl .L08094EC8
	.align 2, 0
.L08094704: .4byte gUnknown_0200F158
.L08094708: .4byte gUnknown_0200D6E0
.L0809470C:
	cmp r2, #0
	bne .L0809478C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094784  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L08094724
	b .L08094EC8
.L08094724:
	ldr r2, .L08094784  @ gUnknown_0200F158
	mov r9, r2
.L08094728:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094774
	ldr r0, .L08094788  @ gUnknown_0200D6E0
	mov r8, r0
.L0809473C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094766
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094766:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L0809473C
.L08094774:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094728
	b .L08094EC8
	.align 2, 0
.L08094784: .4byte gUnknown_0200F158
.L08094788: .4byte gUnknown_0200D6E0
.L0809478C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094800  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L080947A0
	b .L08094EC8
.L080947A0:
	ldr r2, .L08094800  @ gUnknown_0200F158
	mov r9, r2
.L080947A4:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L080947F0
	ldr r0, .L08094804  @ gUnknown_0200D6E0
	mov r8, r0
.L080947B8:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L080947E2
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L080947E2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L080947B8
.L080947F0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L080947A4
	b .L08094EC8
	.align 2, 0
.L08094800: .4byte gUnknown_0200F158
.L08094804: .4byte gUnknown_0200D6E0
.L08094808:
	cmp r2, #0
	bne .L08094888
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094880  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L08094820
	b .L08094EC8
.L08094820:
	ldr r2, .L08094880  @ gUnknown_0200F158
	mov r9, r2
.L08094824:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094870
	ldr r0, .L08094884  @ gUnknown_0200D6E0
	mov r8, r0
.L08094838:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094862
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094862:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094838
.L08094870:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094824
	b .L08094EC8
	.align 2, 0
.L08094880: .4byte gUnknown_0200F158
.L08094884: .4byte gUnknown_0200D6E0
.L08094888:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L080948FC  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L0809489C
	b .L08094EC8
.L0809489C:
	ldr r2, .L080948FC  @ gUnknown_0200F158
	mov r9, r2
.L080948A0:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L080948EC
	ldr r0, .L08094900  @ gUnknown_0200D6E0
	mov r8, r0
.L080948B4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L080948DE
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L080948DE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L080948B4
.L080948EC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L080948A0
	b .L08094EC8
	.align 2, 0
.L080948FC: .4byte gUnknown_0200F158
.L08094900: .4byte gUnknown_0200D6E0
.L08094904:
	cmp r2, #0
	bne .L08094984
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L0809497C  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L0809491C
	b .L08094EC8
.L0809491C:
	ldr r2, .L0809497C  @ gUnknown_0200F158
	mov r9, r2
.L08094920:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L0809496C
	ldr r0, .L08094980  @ gUnknown_0200D6E0
	mov r8, r0
.L08094934:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L0809495E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L0809495E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094934
.L0809496C:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094920
	b .L08094EC8
	.align 2, 0
.L0809497C: .4byte gUnknown_0200F158
.L08094980: .4byte gUnknown_0200D6E0
.L08094984:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L080949F8  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08094998
	b .L08094EC8
.L08094998:
	ldr r2, .L080949F8  @ gUnknown_0200F158
	mov r9, r2
.L0809499C:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L080949E8
	ldr r0, .L080949FC  @ gUnknown_0200D6E0
	mov r8, r0
.L080949B0:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L080949DA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L080949DA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L080949B0
.L080949E8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L0809499C
	b .L08094EC8
	.align 2, 0
.L080949F8: .4byte gUnknown_0200F158
.L080949FC: .4byte gUnknown_0200D6E0
.L08094A00:
	cmp r2, #0
	bne .L08094A80
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094A78  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L08094A18
	b .L08094EC8
.L08094A18:
	ldr r2, .L08094A78  @ gUnknown_0200F158
	mov r9, r2
.L08094A1C:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094A68
	ldr r0, .L08094A7C  @ gUnknown_0200D6E0
	mov r8, r0
.L08094A30:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094A5A
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094A5A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094A30
.L08094A68:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094A1C
	b .L08094EC8
	.align 2, 0
.L08094A78: .4byte gUnknown_0200F158
.L08094A7C: .4byte gUnknown_0200D6E0
.L08094A80:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094AF4  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08094A94
	b .L08094EC8
.L08094A94:
	ldr r2, .L08094AF4  @ gUnknown_0200F158
	mov r9, r2
.L08094A98:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094AE4
	ldr r0, .L08094AF8  @ gUnknown_0200D6E0
	mov r8, r0
.L08094AAC:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L08094AD6
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094AD6:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094AAC
.L08094AE4:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094A98
	b .L08094EC8
	.align 2, 0
.L08094AF4: .4byte gUnknown_0200F158
.L08094AF8: .4byte gUnknown_0200D6E0
.L08094AFC:
	cmp r2, #0
	bne .L08094B7C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094B74  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L08094B14
	b .L08094EC8
.L08094B14:
	ldr r2, .L08094B74  @ gUnknown_0200F158
	mov r9, r2
.L08094B18:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094B64
	ldr r0, .L08094B78  @ gUnknown_0200D6E0
	mov r8, r0
.L08094B2C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094B56
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094B56:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094B2C
.L08094B64:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094B18
	b .L08094EC8
	.align 2, 0
.L08094B74: .4byte gUnknown_0200F158
.L08094B78: .4byte gUnknown_0200D6E0
.L08094B7C:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094BF0  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08094B90
	b .L08094EC8
.L08094B90:
	ldr r2, .L08094BF0  @ gUnknown_0200F158
	mov r9, r2
.L08094B94:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094BE0
	ldr r0, .L08094BF4  @ gUnknown_0200D6E0
	mov r8, r0
.L08094BA8:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L08094BD2
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094BD2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094BA8
.L08094BE0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094B94
	b .L08094EC8
	.align 2, 0
.L08094BF0: .4byte gUnknown_0200F158
.L08094BF4: .4byte gUnknown_0200D6E0
.L08094BF8:
	cmp r2, #0
	bne .L08094C78
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094C70  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L08094C10
	b .L08094EC8
.L08094C10:
	ldr r2, .L08094C70  @ gUnknown_0200F158
	mov r9, r2
.L08094C14:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094C60
	ldr r0, .L08094C74  @ gUnknown_0200D6E0
	mov r8, r0
.L08094C28:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2e
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094C52
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094C52:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094C28
.L08094C60:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094C14
	b .L08094EC8
	.align 2, 0
.L08094C70: .4byte gUnknown_0200F158
.L08094C74: .4byte gUnknown_0200D6E0
.L08094C78:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094CEC  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08094C8C
	b .L08094EC8
.L08094C8C:
	ldr r2, .L08094CEC  @ gUnknown_0200F158
	mov r9, r2
.L08094C90:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094CDC
	ldr r0, .L08094CF0  @ gUnknown_0200D6E0
	mov r8, r0
.L08094CA4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2e
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L08094CCE
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094CCE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094CA4
.L08094CDC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094C90
	b .L08094EC8
	.align 2, 0
.L08094CEC: .4byte gUnknown_0200F158
.L08094CF0: .4byte gUnknown_0200D6E0
.L08094CF4:
	cmp r2, #0
	bne .L08094D74
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094D6C  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L08094D0C
	b .L08094EC8
.L08094D0C:
	ldr r2, .L08094D6C  @ gUnknown_0200F158
	mov r9, r2
.L08094D10:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094D5C
	ldr r0, .L08094D70  @ gUnknown_0200D6E0
	mov r8, r0
.L08094D24:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2f
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls .L08094D4E
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094D4E:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094D24
.L08094D5C:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094D10
	b .L08094EC8
	.align 2, 0
.L08094D6C: .4byte gUnknown_0200F158
.L08094D70: .4byte gUnknown_0200D6E0
.L08094D74:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094DE8  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	blt .L08094D88
	b .L08094EC8
.L08094D88:
	ldr r2, .L08094DE8  @ gUnknown_0200F158
	mov r9, r2
.L08094D8C:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	adds r7, r1, #0
	cmp r2, r0
	bge .L08094DD8
	ldr r0, .L08094DEC  @ gUnknown_0200D6E0
	mov r8, r0
.L08094DA0:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2f
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2f
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bcs .L08094DCA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094DCA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, r9
	ldrb r0, [r1]
	subs r0, r0, r7
	cmp r2, r0
	blt .L08094DA0
.L08094DD8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094D8C
	b .L08094EC8
	.align 2, 0
.L08094DE8: .4byte gUnknown_0200F158
.L08094DEC: .4byte gUnknown_0200D6E0
.L08094DF0:
	cmp r2, #0
	bne .L08094E64
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094E5C  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge .L08094EC8
	ldr r2, .L08094E5C  @ gUnknown_0200F158
	mov r9, r2
.L08094E0A:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r2, r0
	bge .L08094E48
.L08094E1A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, .L08094E60  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	ldrb r0, [r4, #0xa]
	ldrb r7, [r3, #0xa]
	cmp r0, r7
	bls .L08094E3A
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094E3A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r3, r9
	ldrb r0, [r3]
	subs r0, r0, r1
	cmp r2, r0
	blt .L08094E1A
.L08094E48:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094E0A
	b .L08094EC8
	.align 2, 0
.L08094E5C: .4byte gUnknown_0200F158
.L08094E60: .4byte gUnknown_0200D6E0
.L08094E64:
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r0, .L08094ED4  @ gUnknown_0200F158
	mov ip, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp sl, r0
	bge .L08094EC8
	ldr r2, .L08094ED4  @ gUnknown_0200F158
	mov r9, r2
.L08094E7A:
	movs r2, #0
	mov r3, r9
	ldrb r0, [r3]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r2, r0
	bge .L08094EB8
.L08094E8A:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, .L08094ED8  @ gUnknown_0200D6E0
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	ldrb r0, [r4, #0xa]
	ldrb r7, [r3, #0xa]
	cmp r0, r7
	bcs .L08094EAA
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov sl, r0
.L08094EAA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r3, r9
	ldrb r0, [r3]
	subs r0, r0, r1
	cmp r2, r0
	blt .L08094E8A
.L08094EB8:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094E7A
.L08094EC8:
	mov r3, sl
.L08094ECA:
	cmp r3, #0
	bne .L08094ED0
	b .L08094FE0
.L08094ED0:
	movs r0, #1
	b .L08094FE2
	.align 2, 0
.L08094ED4: .4byte gUnknown_0200F158
.L08094ED8: .4byte gUnknown_0200D6E0
.L08094EDC:
	cmp r2, #0
	bne .L08094F5C
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r2, .L08094F54  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge .L08094FCE
.L08094EF0:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08094F42
	ldr r0, .L08094F58  @ gUnknown_0200D6E0
	mov r9, r0
.L08094F02:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl SortUnitList_GetUnitSoloAnimation
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl SortUnitList_GetUnitSoloAnimation
	cmp r4, r0
	ble .L08094F32
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08094F32:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08094F54  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08094F02
.L08094F42:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08094F54  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094EF0
	b .L08094FCE
	.align 2, 0
.L08094F54: .4byte gUnknown_0200F158
.L08094F58: .4byte gUnknown_0200D6E0
.L08094F5C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, .L08094FD8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge .L08094FCE
.L08094F6C:
	movs r5, #0
	ldrb r0, [r2]
	adds r1, #1
	subs r0, r0, r1
	mov r8, r1
	cmp r5, r0
	bge .L08094FBE
	ldr r7, .L08094FDC  @ gUnknown_0200D6E0
	mov r9, r7
.L08094F7E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, r9
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl SortUnitList_GetUnitSoloAnimation
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, r9
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl SortUnitList_GetUnitSoloAnimation
	cmp r4, r0
	bge .L08094FAE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
.L08094FAE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L08094FD8  @ gUnknown_0200F158
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt .L08094F7E
.L08094FBE:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, .L08094FD8  @ gUnknown_0200F158
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt .L08094F6C
.L08094FCE:
	mov r2, sl
	cmp r2, #0
	beq .L08094FE0
	movs r0, #1
	b .L08094FE2
	.align 2, 0
.L08094FD8: .4byte gUnknown_0200F158
.L08094FDC: .4byte gUnknown_0200D6E0
.L08094FE0:
	movs r0, #0
.L08094FE2:
	add sp, #0x60
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END SortUnitList

	THUMB_FUNC_START CanPrepScreenSave
CanPrepScreenSave: @ 0x08094FF4
	push {lr}
	ldr r0, .L08095014  @ gPlaySt
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	ldr r0, .L08095018  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809501C
	adds r0, r2, #0
	subs r0, #0x24
	cmp r0, #0x13
	bhi .L0809501C
	movs r0, #0
	b .L0809501E
	.align 2, 0
.L08095014: .4byte gPlaySt
.L08095018: .4byte gGmData
.L0809501C:
	movs r0, #1
.L0809501E:
	pop {r1}
	bx r1

	THUMB_FUNC_END CanPrepScreenSave

	THUMB_FUNC_START GetActivePrepScreenMenuItemHelpTextId
GetActivePrepScreenMenuItemHelpTextId: @ 0x08095024
	push {r4, lr}
	bl GetActivePrepScreenMenuItemId
	adds r4, r0, #0
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095048
	ldr r0, .L08095044  @ gUnknown_08A18200
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r0, #8
	b .L08095086
	.align 2, 0
.L08095044: .4byte gUnknown_08A18200
.L08095048:
	cmp r4, #4
	bne .L08095064
	movs r0, #2
	bl CanPrepScreenSupport
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809507C
	ldr r0, .L08095060  @ gUnknown_08A18200
	ldr r0, [r0, #0x30]
	b .L0809508A
	.align 2, 0
.L08095060: .4byte gUnknown_08A18200
.L08095064:
	cmp r4, #2
	bne .L0809507C
	bl CanPrepScreenSave
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809507C
	ldr r0, .L08095078  @ gUnknown_08A18200
	ldr r0, [r0, #0x18]
	b .L0809508A
	.align 2, 0
.L08095078: .4byte gUnknown_08A18200
.L0809507C:
	ldr r0, .L08095090  @ gUnknown_08A18200
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r0, #4
.L08095086:
	adds r1, r1, r0
	ldr r0, [r1]
.L0809508A:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L08095090: .4byte gUnknown_08A18200

	THUMB_FUNC_END GetActivePrepScreenMenuItemHelpTextId

	THUMB_FUNC_START func_08095094
func_08095094: @ 0x08095094
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r3, #0
	movs r2, #0
	movs r5, #1
.L0809509E:
	adds r0, r1, #0
	asrs r0, r2
	ands r0, r5
	cmp r0, #0
	beq .L080950B2
	cmp r4, r3
	bne .L080950B0
	adds r0, r2, #0
	b .L080950BC
.L080950B0:
	adds r3, #1
.L080950B2:
	adds r2, #1
	cmp r2, #3
	ble .L0809509E
	movs r0, #1
	negs r0, r0
.L080950BC:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08095094

	THUMB_FUNC_START func_080950C4
func_080950C4: @ 0x080950C4
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	movs r1, #0
	movs r4, #1
.L080950CE:
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	beq .L080950DA
	adds r2, #1
.L080950DA:
	adds r1, #1
	cmp r1, #3
	ble .L080950CE
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080950C4

	THUMB_FUNC_START func_080950E8
func_080950E8: @ 0x080950E8
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r2, r0, #0
	adds r4, r1, #0
	mov r1, sp
	ldr r0, .L0809512C  @ gUnknown_08205BB0
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, .L08095130  @ gUnknown_08A1D8D0
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	adds r1, r2, #0
	bl Decompress
	ldr r0, .L08095134  @ gPlaySt
	adds r0, #0x41
	ldrb r1, [r0]
	movs r0, #0xc
	ands r0, r1
	add r0, sp
	ldr r0, [r0]
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809512C: .4byte gUnknown_08205BB0
.L08095130: .4byte gUnknown_08A1D8D0
.L08095134: .4byte gPlaySt

	THUMB_FUNC_END func_080950E8

	THUMB_FUNC_START func_08095138
func_08095138: @ 0x08095138
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r7, r1, #0
	mov r9, r2
	mov sl, r3
	ldr r1, .L080951AC  @ gUnknown_08A1A41C
	lsls r0, r2, #0xf
	lsrs r0, r0, #0x14
	movs r3, #0x80
	lsls r3, r3, #5
	adds r2, r3, #0
	adds r0, r0, r2
	lsls r6, r0, #0x10
	lsrs r2, r6, #0x10
	mov r0, r8
	bl TmApplyTsa_thm
	movs r5, #0
	cmp r5, r7
	bge .L08095182
	mov r4, r8
	adds r4, #0x40
	adds r5, r7, #0
.L0809516E:
	adds r0, r4, #0
	ldr r1, .L080951B0  @ gUnknown_08A1A434
	lsrs r2, r6, #0x10
	bl TmApplyTsa_thm
	adds r4, #0x80
	subs r5, #1
	cmp r5, #0
	bne .L0809516E
	adds r5, r7, #0
.L08095182:
	lsls r0, r5, #7
	add r0, r8
	adds r0, #0x40
	ldr r1, .L080951B4  @ gUnknown_08A1A474
	mov r4, sl
	lsls r2, r4, #0xc
	mov r4, r9
	lsls r3, r4, #0xf
	lsrs r3, r3, #0x14
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080951AC: .4byte gUnknown_08A1A41C
.L080951B0: .4byte gUnknown_08A1A434
.L080951B4: .4byte gUnknown_08A1A474

	THUMB_FUNC_END func_08095138

	THUMB_FUNC_START PrepScreenMenu_OnPickUnits
PrepScreenMenu_OnPickUnits: @ 0x080951B8
	push {lr}
	adds r2, r0, #0
	adds r2, #0x33
	movs r1, #1
	strb r1, [r2]
	movs r1, #0xa
	bl Proc_Goto
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnPickUnits

	THUMB_FUNC_START PrepScreenMenu_OnItems
PrepScreenMenu_OnItems: @ 0x080951CC
	push {lr}
	adds r2, r0, #0
	adds r2, #0x33
	movs r1, #2
	strb r1, [r2]
	movs r1, #0xa
	bl Proc_Goto
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnItems

	THUMB_FUNC_START PrepScreenMenu_OnSupport
PrepScreenMenu_OnSupport: @ 0x080951E0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x33
	movs r1, #0
	movs r0, #4
	strb r0, [r2]
	movs r2, #0x80
	lsls r2, r2, #1
	str r1, [sp]
	movs r0, #0x37
	adds r1, r2, #0
	movs r3, #0x20
	bl func_080029E8
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnSupport

	THUMB_FUNC_START PrepScreenMenu_OnSave
PrepScreenMenu_OnSave: @ 0x08095210
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809523C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08095226
	movs r0, #0x6a
	bl m4aSongNumStart
.L08095226:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #3
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809523C: .4byte gPlaySt

	THUMB_FUNC_END PrepScreenMenu_OnSave

	THUMB_FUNC_START PrepScreenMenu_OnStartPress
PrepScreenMenu_OnStartPress: @ 0x08095240
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0809525C
	bl func_08096BC4
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
	movs r0, #1
	b .L0809525E
.L0809525C:
	movs r0, #0
.L0809525E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END PrepScreenMenu_OnStartPress

	THUMB_FUNC_START func_08095264
func_08095264: @ 0x08095264
	push {lr}
	ldr r0, .L08095278  @ gUnknown_08A1829C
	bl FindProc
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0809527C
	movs r0, #1
	b .L0809527E
	.align 2, 0
.L08095278: .4byte gUnknown_08A1829C
.L0809527C:
	movs r0, #0
.L0809527E:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08095264

	THUMB_FUNC_START PrepScreenMenu_OnCancel
PrepScreenMenu_OnCancel: @ 0x08095284
	push {lr}
	movs r1, #5
	bl Proc_Goto
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnCancel

	THUMB_FUNC_START PrepScreenMenu_OnBPress
PrepScreenMenu_OnBPress: @ 0x08095290
	push {r4, lr}
	adds r4, r0, #0
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080952AC
	bl CanPrepScreenCheckMap
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080952B8
	bl func_08096BE0
.L080952AC:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	movs r0, #1
	b .L080952BA
.L080952B8:
	movs r0, #0
.L080952BA:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END PrepScreenMenu_OnBPress

	THUMB_FUNC_START PrepScreenMenu_OnCheckMap
PrepScreenMenu_OnCheckMap: @ 0x080952C0
	push {lr}
	movs r1, #5
	bl Proc_Goto
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnCheckMap

	THUMB_FUNC_START func_080952CC
func_080952CC: @ 0x080952CC
	bx lr

	THUMB_FUNC_END func_080952CC

	THUMB_FUNC_START __malloc_unlock_1
__malloc_unlock_1: @ 0x080952D0
	bx lr

	THUMB_FUNC_END __malloc_unlock_1

	THUMB_FUNC_START func_080952D4
func_080952D4: @ 0x080952D4
	push {lr}
	ldr r1, .L080952E8  @ gUnknown_0203E87C
	movs r2, #0
	adds r0, r1, #4
.L080952DC:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge .L080952DC
	pop {r0}
	bx r0
	.align 2, 0
.L080952E8: .4byte gUnknown_0203E87C

	THUMB_FUNC_END func_080952D4

	THUMB_FUNC_START func_080952EC
func_080952EC: @ 0x080952EC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r2, #0
	ldr r4, .L08095304  @ gUnknown_0203E87C
.L080952F6:
	adds r1, r2, r4
	ldrb r0, [r1]
	cmp r0, #0
	bne .L08095308
	strb r3, [r1]
	b .L0809530E
	.align 2, 0
.L08095304: .4byte gUnknown_0203E87C
.L08095308:
	adds r2, #1
	cmp r2, #4
	ble .L080952F6
.L0809530E:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080952EC

	THUMB_FUNC_START func_08095314
func_08095314: @ 0x08095314
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	ldr r3, .L08095344  @ gUnknown_0203E87C
	adds r4, r3, #0
.L08095320:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, r2
	bne .L08095348
	adds r2, r1, #0
	cmp r1, #3
	bgt .L0809533C
	adds r1, r1, r4
.L08095330:
	ldrb r0, [r1, #1]
	strb r0, [r1]
	adds r1, #1
	adds r2, #1
	cmp r2, #3
	ble .L08095330
.L0809533C:
	movs r0, #0
	strb r0, [r3, #4]
	b .L0809534E
	.align 2, 0
.L08095344: .4byte gUnknown_0203E87C
.L08095348:
	adds r1, #1
	cmp r1, #4
	ble .L08095320
.L0809534E:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08095314

	THUMB_FUNC_START GetPrepScreenUnitListEntry
GetPrepScreenUnitListEntry: @ 0x08095354
	ldr r1, .L08095360  @ gUnknown_020121CC
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L08095360: .4byte gUnknown_020121CC

	THUMB_FUNC_END GetPrepScreenUnitListEntry

	THUMB_FUNC_START SetPrepScreenUnitListEntry
SetPrepScreenUnitListEntry: @ 0x08095364
	ldr r2, .L08095370  @ gUnknown_020121CC
	lsls r0, r0, #2
	adds r0, r0, r2
	str r1, [r0]
	bx lr
	.align 2, 0
.L08095370: .4byte gUnknown_020121CC

	THUMB_FUNC_END SetPrepScreenUnitListEntry

	THUMB_FUNC_START GetPrepScreenUnitListSize
GetPrepScreenUnitListSize: @ 0x08095374
	ldr r0, .L08095380  @ gUnknown_020121CC
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L08095380: .4byte gUnknown_020121CC

	THUMB_FUNC_END GetPrepScreenUnitListSize

	THUMB_FUNC_START SetPrepScreenUnitListSize
SetPrepScreenUnitListSize: @ 0x08095384
	ldr r1, .L08095390  @ gUnknown_020121CC
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	str r0, [r1]
	bx lr
	.align 2, 0
.L08095390: .4byte gUnknown_020121CC

	THUMB_FUNC_END SetPrepScreenUnitListSize

	THUMB_FUNC_START func_08095394
func_08095394: @ 0x08095394
	push {lr}
	ldr r0, .L080953A8  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080953AC
	bl func_080C4088
	b .L080953B6
	.align 2, 0
.L080953A8: .4byte gGmData
.L080953AC:
	ldr r0, .L080953BC  @ gUnknown_020121CC
	movs r1, #0x82
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r0, [r0]
.L080953B6:
	pop {r1}
	bx r1
	.align 2, 0
.L080953BC: .4byte gUnknown_020121CC

	THUMB_FUNC_END func_08095394

	THUMB_FUNC_START func_080953C0
func_080953C0: @ 0x080953C0
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080953D8  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080953DC
	adds r0, r2, #0
	bl func_080C409C
	b .L080953E6
	.align 2, 0
.L080953D8: .4byte gGmData
.L080953DC:
	ldr r0, .L080953EC  @ gUnknown_020121CC
	movs r1, #0x82
	lsls r1, r1, #1
	adds r0, r0, r1
	str r2, [r0]
.L080953E6:
	pop {r0}
	bx r0
	.align 2, 0
.L080953EC: .4byte gUnknown_020121CC

	THUMB_FUNC_END func_080953C0

	THUMB_FUNC_START IsCharacterForceDeployed
IsCharacterForceDeployed: @ 0x080953F0
	push {r4, lr}
	adds r4, r0, #0
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L08095414
	bl GetBattleMapKind
	cmp r0, #0
	bne .L08095414
	lsls r0, r4, #0x10
	lsrs r0, r0, #0x10
	bl IsCharacterForceDeployed_
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b .L08095416
.L08095414:
	movs r0, #0
.L08095416:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END IsCharacterForceDeployed

	THUMB_FUNC_START CountForceDeployedUnits
CountForceDeployedUnits: @ 0x0809541C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
.L08095422:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq .L0809544A
	ldr r2, [r0]
	cmp r2, #0
	beq .L0809544A
	ldr r0, [r0, #0xc]
	ldr r1, .L08095458  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L0809544A
	ldrb r0, [r2, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809544A
	adds r5, #1
.L0809544A:
	adds r4, #1
	cmp r4, #0x3f
	ble .L08095422
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L08095458: .4byte 0x00010004

	THUMB_FUNC_END CountForceDeployedUnits

	THUMB_FUNC_START SomeLeftoverFunctionThatReturns0
SomeLeftoverFunctionThatReturns0: @ 0x0809545C
	movs r0, #0
	bx lr

	THUMB_FUNC_END SomeLeftoverFunctionThatReturns0

	THUMB_FUNC_START IsUnitInCurrentRoster
IsUnitInCurrentRoster: @ 0x08095460
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0xc]
	ldr r1, .L08095488  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L08095490
	ldr r0, [r2]
	ldr r1, [r2, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne .L0809548C
	movs r0, #1
	b .L08095492
	.align 2, 0
.L08095488: .4byte 0x00010004
.L0809548C:
	movs r0, #8
	str r0, [r2, #0xc]
.L08095490:
	movs r0, #0
.L08095492:
	pop {r1}
	bx r1

	THUMB_FUNC_END IsUnitInCurrentRoster

	THUMB_FUNC_START AtMenu_AddPrepScreenSupportMenuItem
AtMenu_AddPrepScreenSupportMenuItem: @ 0x08095498
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r6, #0
	adds r2, r0, #0
	adds r2, #0x2f
	strb r6, [r2]
	ldr r0, .L080954F8  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne .L080954EE
	movs r4, #0
	adds r5, r2, #0
.L080954B4:
	adds r0, r4, #0
	bl CanPrepScreenSupport
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080954CA
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r5]
	orrs r0, r1
	strb r0, [r5]
.L080954CA:
	adds r4, #1
	cmp r4, #3
	ble .L080954B4
	movs r0, #2
	bl CanPrepScreenSupport
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080954DE
	movs r6, #1
.L080954DE:
	ldr r1, .L080954FC  @ PrepScreenMenu_OnSupport
	ldr r3, .L08095500  @ 0x00000577
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	adds r2, r6, #0
	bl SetPrepScreenMenuItem
.L080954EE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080954F8: .4byte gPlaySt
.L080954FC: .4byte PrepScreenMenu_OnSupport
.L08095500: .4byte 0x00000577

	THUMB_FUNC_END AtMenu_AddPrepScreenSupportMenuItem

	THUMB_FUNC_START CanPrepScreenCheckMap
CanPrepScreenCheckMap: @ 0x08095504
	push {lr}
	ldr r0, .L08095518  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x7d
	beq .L0809551C
	movs r0, #1
	b .L0809551E
	.align 2, 0
.L08095518: .4byte gPlaySt
.L0809551C:
	movs r0, #0
.L0809551E:
	pop {r1}
	bx r1

	THUMB_FUNC_END CanPrepScreenCheckMap

	THUMB_FUNC_START AtMenu_InitPrepScreenMenu
AtMenu_InitPrepScreenMenu: @ 0x08095524
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl StartPrepScreenMenu
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne .L080955CC
	ldr r1, .L0809557C  @ PrepScreenMenu_OnPickUnits
	ldr r3, .L08095580  @ 0x00000574
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl SetPrepScreenMenuItem
	ldr r1, .L08095584  @ PrepScreenMenu_OnItems
	ldr r3, .L08095588  @ 0x00000576
	str r4, [sp]
	movs r0, #1
	movs r2, #0
	bl SetPrepScreenMenuItem
	adds r0, r5, #0
	bl AtMenu_AddPrepScreenSupportMenuItem
	bl CanPrepScreenCheckMap
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L08095590
	ldr r1, .L0809558C  @ PrepScreenMenu_OnCheckMap
	movs r3, #0xaf
	lsls r3, r3, #3
	str r4, [sp]
	movs r0, #7
	movs r2, #0
	bl SetPrepScreenMenuItem
	b .L080955A0
	.align 2, 0
.L0809557C: .4byte PrepScreenMenu_OnPickUnits
.L08095580: .4byte 0x00000574
.L08095584: .4byte PrepScreenMenu_OnItems
.L08095588: .4byte 0x00000576
.L0809558C: .4byte PrepScreenMenu_OnCheckMap
.L08095590:
	ldr r1, .L080955C0  @ PrepScreenMenu_OnCheckMap
	movs r3, #0xaf
	lsls r3, r3, #3
	str r0, [sp]
	movs r0, #7
	movs r2, #1
	bl SetPrepScreenMenuItem
.L080955A0:
	movs r4, #0
	bl CanPrepScreenSave
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080955AE
	movs r4, #1
.L080955AE:
	ldr r1, .L080955C4  @ PrepScreenMenu_OnSave
	ldr r3, .L080955C8  @ 0x00000579
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	bl SetPrepScreenMenuItem
	b .L080955F8
	.align 2, 0
.L080955C0: .4byte PrepScreenMenu_OnCheckMap
.L080955C4: .4byte PrepScreenMenu_OnSave
.L080955C8: .4byte 0x00000579
.L080955CC:
	ldr r1, .L08095630  @ PrepScreenMenu_OnPickUnits
	ldr r3, .L08095634  @ 0x00000574
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl SetPrepScreenMenuItem
	ldr r1, .L08095638  @ PrepScreenMenu_OnItems
	ldr r3, .L0809563C  @ 0x00000576
	str r4, [sp]
	movs r0, #1
	movs r2, #0
	bl SetPrepScreenMenuItem
	ldr r1, .L08095640  @ PrepScreenMenu_OnCancel
	ldr r3, .L08095644  @ 0x0000075C
	str r4, [sp]
	movs r0, #3
	movs r2, #0
	bl SetPrepScreenMenuItem
.L080955F8:
	ldr r0, .L08095648  @ PrepScreenMenu_OnBPress
	bl SetPrepScreenMenuOnBPress
	ldr r0, .L0809564C  @ PrepScreenMenu_OnStartPress
	bl SetPrepScreenMenuOnStartPress
	ldr r0, .L08095650  @ gBg0Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L08095654  @ gBg1Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_thm
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095658
	movs r0, #1
	movs r1, #5
	bl SetPrepScreenMenuPosition
	b .L08095660
	.align 2, 0
.L08095630: .4byte PrepScreenMenu_OnPickUnits
.L08095634: .4byte 0x00000574
.L08095638: .4byte PrepScreenMenu_OnItems
.L0809563C: .4byte 0x00000576
.L08095640: .4byte PrepScreenMenu_OnCancel
.L08095644: .4byte 0x0000075C
.L08095648: .4byte PrepScreenMenu_OnBPress
.L0809564C: .4byte PrepScreenMenu_OnStartPress
.L08095650: .4byte gBg0Tm
.L08095654: .4byte gBg1Tm
.L08095658:
	movs r0, #1
	movs r1, #6
	bl SetPrepScreenMenuPosition
.L08095660:
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	bl SetPrepScreenMenuSelectedItem
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_InitPrepScreenMenu

	THUMB_FUNC_START func_08095674
func_08095674: @ 0x08095674
	push {r4, r5, lr}
	movs r5, #0
	b .L08095696
.L0809567A:
	bl GetLastStatScreenUid
	adds r4, r0, #0
	adds r0, r5, #0
	bl GetPrepScreenUnitListEntry
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r4, r0
	bne .L08095694
	adds r0, r5, #0
	b .L080956A0
.L08095694:
	adds r5, #1
.L08095696:
	bl GetPrepScreenUnitListSize
	cmp r5, r0
	blt .L0809567A
	movs r0, #0
.L080956A0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08095674

	THUMB_FUNC_START func_080956A8
func_080956A8: @ 0x080956A8
	push {r4, r5, lr}
	movs r5, #0
	b .L080956C6
.L080956AE:
	adds r0, r5, #0
	bl GetPrepScreenUnitListEntry
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	bl func_08095394
	cmp r4, r0
	bne .L080956C4
	adds r0, r5, #0
	b .L080956D0
.L080956C4:
	adds r5, #1
.L080956C6:
	bl GetPrepScreenUnitListSize
	cmp r5, r0
	blt .L080956AE
	movs r0, #0
.L080956D0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080956A8

	THUMB_FUNC_START ReorderPlayerUnitsBasedOnDeployment
ReorderPlayerUnitsBasedOnDeployment: @ 0x080956D8
	push {r4, lr}
	ldr r0, .L08095740  @ gUnknown_020111CC
	bl InitUnitStack
	movs r4, #1
.L080956E2:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L08095704
	ldr r0, [r2]
	cmp r0, #0
	beq .L08095704
	ldr r0, [r2, #0xc]
	ldr r1, .L08095744  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne .L08095704
	adds r0, r2, #0
	bl PushUnit
.L08095704:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080956E2
	movs r4, #1
.L0809570C:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L0809572E
	ldr r0, [r2]
	cmp r0, #0
	beq .L0809572E
	ldr r0, [r2, #0xc]
	ldr r1, .L08095744  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	beq .L0809572E
	adds r0, r2, #0
	bl PushUnit
.L0809572E:
	adds r4, #1
	cmp r4, #0x3f
	ble .L0809570C
	bl LoadPlayerUnitsFromUnitStack
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08095740: .4byte gUnknown_020111CC
.L08095744: .4byte 0x0001000C

	THUMB_FUNC_END ReorderPlayerUnitsBasedOnDeployment

	THUMB_FUNC_START SortPlayerUnitsForPrepScreen
SortPlayerUnitsForPrepScreen: @ 0x08095748
	push {r4, r5, r6, r7, lr}
	bl GetChapterAllyUnitCount
	adds r7, r0, #0
	movs r6, #0
	ldr r0, .L0809580C  @ gUnknown_020111CC
	bl InitUnitStack
	movs r5, #1
.L0809575A:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L08095794
	ldr r0, [r4]
	cmp r0, #0
	beq .L08095794
	ldr r0, [r4, #0xc]
	ldr r1, .L08095810  @ 0xFDFFFFFF
	ands r0, r1
	str r0, [r4, #0xc]
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095794
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095794
	adds r0, r4, #0
	bl PushUnit
.L08095794:
	adds r5, #1
	cmp r5, #0x3f
	ble .L0809575A
	movs r5, #1
.L0809579C:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L080957CE
	ldr r0, [r4]
	cmp r0, #0
	beq .L080957CE
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080957C8
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080957CE
.L080957C8:
	adds r0, r4, #0
	bl PushUnit
.L080957CE:
	adds r5, #1
	cmp r5, #0x3f
	ble .L0809579C
	bl LoadPlayerUnitsFromUnitStack
	movs r5, #1
.L080957DA:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L08095832
	ldr r0, [r4]
	cmp r0, #0
	beq .L08095832
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095832
	adds r0, r4, #0
	bl SomeLeftoverFunctionThatReturns0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095818
	ldr r0, [r4, #0xc]
	ldr r1, .L08095814  @ gUnknown_02000008
	b .L0809582E
	.align 2, 0
.L0809580C: .4byte gUnknown_020111CC
.L08095810: .4byte 0xFDFFFFFF
.L08095814: .4byte gUnknown_02000008
.L08095818:
	cmp r7, r6
	ble .L0809582A
	ldr r0, [r4, #0xc]
	movs r1, #9
	negs r1, r1
	ands r0, r1
	str r0, [r4, #0xc]
	adds r6, #1
	b .L08095832
.L0809582A:
	ldr r0, [r4, #0xc]
	movs r1, #8
.L0809582E:
	orrs r0, r1
	str r0, [r4, #0xc]
.L08095832:
	adds r5, #1
	cmp r5, #0x3f
	ble .L080957DA
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END SortPlayerUnitsForPrepScreen

	THUMB_FUNC_START func_08095840
func_08095840: @ 0x08095840
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r4, #1
.L08095848:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	mov r8, r4
	cmp r5, #0
	beq .L080958AC
	ldr r0, [r5]
	cmp r0, #0
	beq .L080958AC
	movs r7, #0
	ldr r0, [r5, #0xc]
	movs r1, #8
	orrs r0, r1
	str r0, [r5, #0xc]
	adds r0, r5, #0
	bl GetUnitItemCount
	cmp r7, r0
	bge .L080958A2
	adds r4, r5, #0
	adds r4, #0x1e
	adds r6, r0, #0
.L08095878:
	ldrh r0, [r4]
	bl GetItemIid
	cmp r0, #0xb7
	beq .L08095894
	cmp r0, #0xb7
	bgt .L08095890
	cmp r0, #0x84
	bgt .L0809589A
	cmp r0, #0x81
	blt .L0809589A
	b .L08095894
.L08095890:
	cmp r0, #0xcc
	bne .L0809589A
.L08095894:
	movs r0, #0
	strh r0, [r4]
	movs r7, #1
.L0809589A:
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bne .L08095878
.L080958A2:
	cmp r7, #0
	beq .L080958AC
	adds r0, r5, #0
	bl UnitRemoveInvalidItems
.L080958AC:
	mov r4, r8
	cmp r4, #0x3f
	ble .L08095848
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08095840

	THUMB_FUNC_START InitPrepScreenUnitList
InitPrepScreenUnitList: @ 0x080958BC
	push {r4, r5, r6, lr}
	movs r6, #0
	movs r5, #1
.L080958C2:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L080958EA
	ldr r0, [r4]
	cmp r0, #0
	beq .L080958EA
	adds r0, r4, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080958EA
	adds r0, r6, #0
	adds r1, r4, #0
	bl SetPrepScreenUnitListEntry
	adds r6, #1
.L080958EA:
	adds r5, #1
	cmp r5, #0x3f
	ble .L080958C2
	adds r0, r6, #0
	bl SetPrepScreenUnitListSize
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END InitPrepScreenUnitList

	THUMB_FUNC_START func_080958FC
func_080958FC: @ 0x080958FC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b .L08095918
.L08095904:
	adds r0, r4, #0
	bl GetPrepScreenUnitListEntry
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne .L08095916
	adds r0, r4, #0
	b .L08095922
.L08095916:
	adds r4, #1
.L08095918:
	bl GetPrepScreenUnitListSize
	cmp r4, r0
	blt .L08095904
	movs r0, #0
.L08095922:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080958FC

	THUMB_FUNC_START func_08095928
func_08095928: @ 0x08095928
	push {r4, lr}
	bl ResetUnitSprites
	movs r4, #0
	b .L0809595E
.L08095932:
	adds r0, r4, #0
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne .L0809594C
	movs r0, #3
	negs r0, r0
	ands r1, r0
	b .L08095950
.L0809594C:
	movs r0, #0xa
	orrs r1, r0
.L08095950:
	str r1, [r2, #0xc]
	adds r0, r2, #0
	bl GetUnitSpriteId
	bl UseUnitSprite
	adds r4, #1
.L0809595E:
	bl GetPrepScreenUnitListSize
	cmp r4, r0
	blt .L08095932
	bl ForceSyncUnitSpriteSheet
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08095928

	THUMB_FUNC_START func_08095970
func_08095970: @ 0x08095970
	push {r4, r5, r6, lr}
	movs r5, #0
	bl GetChapterAllyUnitCount
	adds r6, r0, #0
	movs r4, #0
	b .L080959A0
.L0809597E:
	adds r0, r4, #0
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	ldr r1, [r2, #0xc]
	movs r3, #8
	adds r0, r1, #0
	ands r0, r3
	cmp r0, #0
	bne .L0809599E
	cmp r5, r6
	blt .L0809599C
	orrs r1, r3
	str r1, [r2, #0xc]
	b .L0809599E
.L0809599C:
	adds r5, #1
.L0809599E:
	adds r4, #1
.L080959A0:
	bl GetPrepScreenUnitListSize
	cmp r4, r0
	blt .L0809597E
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08095970

	THUMB_FUNC_START AtMenu_AutoCapDeployPrepScreenUnits
AtMenu_AutoCapDeployPrepScreenUnits: @ 0x080959B4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	subs r1, #2
	strb r0, [r1]
	movs r6, #0
	adds r7, r1, #0
	b .L080959FC
.L080959CA:
	adds r0, r6, #0
	bl GetPrepScreenUnitListEntry
	adds r3, r0, #0
	ldr r0, [r3, #0xc]
	movs r5, #8
	ands r0, r5
	cmp r0, #0
	bne .L080959F4
	adds r2, r4, #0
	adds r2, #0x2b
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r2]
	ldrb r1, [r1]
	cmp r0, r1
	bcc .L080959F0
	str r5, [r3, #0xc]
	b .L080959F4
.L080959F0:
	adds r0, #1
	strb r0, [r2]
.L080959F4:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	adds r6, #1
.L080959FC:
	bl GetPrepScreenUnitListSize
	cmp r6, r0
	blt .L080959CA
	adds r2, r4, #0
	adds r2, #0x29
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r2, [r2]
	ldrb r1, [r0]
	cmp r2, r1
	bcs .L08095A16
	strb r2, [r0]
.L08095A16:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_AutoCapDeployPrepScreenUnits

	THUMB_FUNC_START RestartScreenMenuScrollingBg
RestartScreenMenuScrollingBg: @ 0x08095A1C
	push {lr}
	ldr r0, .L08095A34  @ gUnknown_08A006E4
	bl EndEachProc
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl StartScreenMenuScrollingBg
	pop {r0}
	bx r0
	.align 2, 0
.L08095A34: .4byte gUnknown_08A006E4

	THUMB_FUNC_END RestartScreenMenuScrollingBg

	THUMB_FUNC_START EndScreenMenuScrollingBg
EndScreenMenuScrollingBg: @ 0x08095A38
	push {lr}
	bl EndBG3Slider
	pop {r0}
	bx r0

	THUMB_FUNC_END EndScreenMenuScrollingBg

	THUMB_FUNC_START func_08095A44
func_08095A44: @ 0x08095A44
	push {r4, r5, lr}
	sub sp, #0x20
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, .L08095AA0  @ 0x06010000
	adds r2, r2, r0
	mov r0, sp
	adds r1, r2, #0
	adds r2, r4, #0
	bl InitSpriteTextFont
	ldr r0, .L08095AA4  @ Pal_SystemText
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add r4, sp, #0x18
	adds r0, r4, #0
	bl InitSpriteText
	mov r0, sp
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r4, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	bl GetBattleMapKind
	adds r5, r4, #0
	cmp r0, #2
	beq .L08095AAC
	ldr r0, .L08095AA8  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x8a
	ldrh r0, [r0]
	b .L08095AB0
	.align 2, 0
.L08095AA0: .4byte 0x06010000
.L08095AA4: .4byte Pal_SystemText
.L08095AA8: .4byte gPlaySt
.L08095AAC:
	movs r0, #0xcf
	lsls r0, r0, #1
.L08095AB0:
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x60
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08095A44

	THUMB_FUNC_START AtMenu_8095AD8
AtMenu_8095AD8: @ 0x08095AD8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl func_080953C0
	movs r0, #0
	str r0, [r4, #0x40]
	strh r0, [r4, #0x3c]
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095AFA
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #5
	b .L08095B02
.L08095AFA:
	bl GetChapterAllyUnitCount
	adds r1, r4, #0
	adds r1, #0x2a
.L08095B02:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_8095AD8

	THUMB_FUNC_START ClearPrepScreenMenuHelpText
ClearPrepScreenMenuHelpText: @ 0x08095B30
	push {r4, r5, lr}
	ldr r5, .L08095B5C  @ gUnknown_020111A4
	movs r4, #4
.L08095B36:
	adds r0, r5, #0
	bl ClearText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L08095B36
	ldr r0, .L08095B60  @ gBg2Tm+0x19A
	movs r1, #0xf
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08095B5C: .4byte gUnknown_020111A4
.L08095B60: .4byte gBg2Tm+0x19A

	THUMB_FUNC_END ClearPrepScreenMenuHelpText

	THUMB_FUNC_START DrawPrepScreenMenuHelpText
DrawPrepScreenMenuHelpText: @ 0x08095B64
	push {r4, lr}
	ldr r4, .L08095B80  @ gUnknown_020111A4
	bl GetMsg
.L08095B6C:
	adds r1, r0, #0
.L08095B6E:
	ldrb r0, [r1]
	cmp r0, #0
	beq .L08095B8C
	cmp r0, #1
	bne .L08095B84
	adds r4, #8
	adds r1, #1
	b .L08095B6E
	.align 2, 0
.L08095B80: .4byte gUnknown_020111A4
.L08095B84:
	adds r0, r4, #0
	bl Text_DrawCharacter
	b .L08095B6C
.L08095B8C:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END DrawPrepScreenMenuHelpText

	THUMB_FUNC_START DisplayPrepScreenMenuHelpText
DisplayPrepScreenMenuHelpText: @ 0x08095B94
	push {r4, r5, lr}
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	negs r1, r0
	orrs r1, r0
	lsrs r1, r1, #0x1f
	movs r5, #0
	negs r1, r1
	adds r4, r1, #7
.L08095BAA:
	lsls r0, r5, #3
	ldr r1, .L08095BD0  @ gUnknown_020111A4
	adds r0, r0, r1
	lsls r1, r4, #6
	ldr r2, .L08095BD4  @ gBg2Tm+0x1A
	adds r1, r1, r2
	bl PutText
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble .L08095BAA
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08095BD0: .4byte gUnknown_020111A4
.L08095BD4: .4byte gBg2Tm+0x1A

	THUMB_FUNC_END DisplayPrepScreenMenuHelpText

	THUMB_FUNC_START UpdatePrepScreenMenuHelp_Clear
UpdatePrepScreenMenuHelp_Clear: @ 0x08095BD8
	push {lr}
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bl ClearPrepScreenMenuHelpText
	pop {r0}
	bx r0

	THUMB_FUNC_END UpdatePrepScreenMenuHelp_Clear

	THUMB_FUNC_START UpdatePrepScreenMenuHelp_Draw
UpdatePrepScreenMenuHelp_Draw: @ 0x08095BE8
	push {lr}
	ldr r0, [r0, #0x58]
	bl DrawPrepScreenMenuHelpText
	pop {r0}
	bx r0

	THUMB_FUNC_END UpdatePrepScreenMenuHelp_Draw

	THUMB_FUNC_START UpdatePrepScreenMenuHelp_Display
UpdatePrepScreenMenuHelp_Display: @ 0x08095BF4
	push {lr}
	bl DisplayPrepScreenMenuHelpText
	pop {r0}
	bx r0

	THUMB_FUNC_END UpdatePrepScreenMenuHelp_Display

	THUMB_FUNC_START StartUpdatePrepScreenMenuHelp
StartUpdatePrepScreenMenuHelp: @ 0x08095C00
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r5, .L08095C28  @ gUnknown_08A1826C
	adds r0, r5, #0
	bl FindProc
	cmp r0, #0
	beq .L08095C16
	bl Proc_End
.L08095C16:
	adds r0, r5, #0
	adds r1, r4, #0
	bl SpawnProc
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08095C28: .4byte gUnknown_08A1826C

	THUMB_FUNC_END StartUpdatePrepScreenMenuHelp

	THUMB_FUNC_START func_08095C2C
func_08095C2C: @ 0x08095C2C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080AD2D4
	bl func_08096C20
	bl EndScreenMenuScrollingBg
	bl GetActivePrepScreenMenuItemId
	adds r4, #0x2d
	strb r0, [r4]
	bl EndPrepScreenMenu
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08095C2C

	THUMB_FUNC_START func_08095C50
func_08095C50: @ 0x08095C50
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, .L08095C78  @ gUnknown_08A1AC88
	ldr r1, .L08095C7C  @ 0x06010000
	adds r2, r2, r1
	adds r1, r2, #0
	bl Decompress
	ldr r0, .L08095C80  @ gUnknown_08A1B174
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08095C78: .4byte gUnknown_08A1AC88
.L08095C7C: .4byte 0x06010000
.L08095C80: .4byte gUnknown_08A1B174

	THUMB_FUNC_END func_08095C50

	THUMB_FUNC_START AtMenu_Reinitialize
AtMenu_Reinitialize: @ 0x08095C84
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, .L08095E00  @ gUnknown_08A181E8
	bl SetupBackgrounds
	bl ResetText
	bl LoadUiFrameGraphics
	movs r0, #0
	movs r1, #0xe
	bl LoadHelpBoxGfx
	ldr r2, .L08095E04  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl LoadObjUiGfx
	bl ResetUnitSprites
	bl InitPrepScreenUnitList
	adds r0, r7, #0
	bl AtMenu_AutoCapDeployPrepScreenUnits
	bl ReorderPlayerUnitsBasedOnDeployment
	ldr r0, .L08095E08  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L08095E0C  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L08095E10  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r5, .L08095E14  @ gUnknown_020111A4
	movs r4, #4
.L08095CF2:
	adds r0, r5, #0
	movs r1, #0xe
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L08095CF2
	movs r0, #0x35
	adds r0, r0, r7
	mov r8, r0
	ldr r5, .L08095E18  @ gUnknown_02011184
	movs r4, #3
.L08095D0C:
	adds r0, r5, #0
	movs r1, #8
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L08095D0C
	ldr r0, .L08095E1C  @ gUnknown_0201117C
	movs r1, #0xa
	bl InitText
	ldr r0, .L08095E20  @ gUnknown_08A1A4C8
	ldr r1, .L08095E24  @ 0x06014800
	bl Decompress
	ldr r0, .L08095E28  @ gUnknown_08A1D510
	ldr r1, .L08095E2C  @ 0x06016000
	bl Decompress
	ldr r0, .L08095E30  @ gUnknown_08A1B154
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #0xe0
	lsls r0, r0, #7
	movs r1, #6
	bl func_08095C50
	ldr r0, .L08095E34  @ gUnknown_08A1D4C8
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r3, .L08095E04  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldrb r1, [r3, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r7, #0
	bl AtMenu_InitPrepScreenMenu
	movs r0, #0xf
	bl EnableBgSync
	bl SetBlendNone
	adds r0, r7, #0
	bl func_08096BFC
	bl RestartScreenMenuScrollingBg
	ldr r0, .L08095E38  @ gUiFramePaletteB
	movs r1, #0x40
	movs r2, #0x60
	bl ApplyPaletteExt
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095E48
	ldr r0, .L08095E3C  @ gUnknown_08A1B698
	ldr r4, .L08095E40  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L08095E44  @ gBg1Tm+0x142
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	b .L08095E76
	.align 2, 0
.L08095E00: .4byte gUnknown_08A181E8
.L08095E04: .4byte gDispIo
.L08095E08: .4byte gBg0Tm
.L08095E0C: .4byte gBg1Tm
.L08095E10: .4byte gBg2Tm
.L08095E14: .4byte gUnknown_020111A4
.L08095E18: .4byte gUnknown_02011184
.L08095E1C: .4byte gUnknown_0201117C
.L08095E20: .4byte gUnknown_08A1A4C8
.L08095E24: .4byte 0x06014800
.L08095E28: .4byte gUnknown_08A1D510
.L08095E2C: .4byte 0x06016000
.L08095E30: .4byte gUnknown_08A1B154
.L08095E34: .4byte gUnknown_08A1D4C8
.L08095E38: .4byte gUiFramePaletteB
.L08095E3C: .4byte gUnknown_08A1B698
.L08095E40: .4byte gBuf
.L08095E44: .4byte gBg1Tm+0x142
.L08095E48:
	ldr r0, .L08095EAC  @ gUnknown_08A1B658
	ldr r5, .L08095EB0  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r4, .L08095EB4  @ gBg1Tm+0xA0
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L08095EB8  @ gUnknown_08A1B698
	adds r1, r5, #0
	bl Decompress
	adds r4, #0xe2
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
.L08095E76:
	movs r0, #0xb0
	lsls r0, r0, #7
	movs r1, #0xb
	bl func_08095A44
	adds r0, r7, #0
	bl func_080AD1AC
	movs r0, #0xd0
	lsls r0, r0, #7
	bl func_080AD1D0
	bl GetActivePrepScreenMenuItemId
	mov r1, r8
	strb r0, [r1]
	bl GetActivePrepScreenMenuItemHelpTextId
	bl DrawPrepScreenMenuHelpText
	bl DisplayPrepScreenMenuHelpText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08095EAC: .4byte gUnknown_08A1B658
.L08095EB0: .4byte gBuf
.L08095EB4: .4byte gBg1Tm+0xA0
.L08095EB8: .4byte gUnknown_08A1B698

	THUMB_FUNC_END AtMenu_Reinitialize

	THUMB_FUNC_START AtMenu_EndIfNoUnits
AtMenu_EndIfNoUnits: @ 0x08095EBC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r2, .L08095F28  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r4, #1
.L08095EE2:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L08095F06
	ldr r0, [r1]
	cmp r0, #0
	beq .L08095F06
	adds r0, r1, #0
	bl IsUnitInCurrentRoster
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08095F06
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
.L08095F06:
	adds r4, #1
	cmp r4, #0x3f
	ble .L08095EE2
	cmp r5, #0
	bne .L08095F20
	adds r1, r6, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
.L08095F20:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08095F28: .4byte gDispIo

	THUMB_FUNC_END AtMenu_EndIfNoUnits

	THUMB_FUNC_START AtMenu_MaintainPrepScreenMenuHelp
AtMenu_MaintainPrepScreenMenuHelp: @ 0x08095F2C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl GetActivePrepScreenMenuItemId
	adds r6, r0, #0
	adds r4, r5, #0
	adds r4, #0x35
	ldrb r0, [r4]
	cmp r0, r6
	beq .L08095F4C
	bl GetActivePrepScreenMenuItemHelpTextId
	adds r1, r5, #0
	bl StartUpdatePrepScreenMenuHelp
	strb r6, [r4]
.L08095F4C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_MaintainPrepScreenMenuHelp

	THUMB_FUNC_START func_08095F54
func_08095F54: @ 0x08095F54
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r5, .L08095FCC  @ gUnknown_02011184
	adds r0, #0x2f
	ldrb r0, [r0]
	bl func_080950C4
	adds r3, r0, #0
	lsls r3, r3, #1
	adds r3, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #3
	movs r1, #5
	movs r2, #9
	bl DrawUiFrame2
	movs r4, #0
	movs r6, #0xc0
	lsls r6, r6, #1
.L08095F7E:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L08095FB6
	adds r0, r5, #0
	bl ClearText
	ldr r1, .L08095FD0  @ gUnknown_08A196BC
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetMsg
	ldr r1, .L08095FD4  @ gBg0Tm+0x8
	adds r1, r6, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl PutDrawText
	adds r5, #8
	adds r6, #0x80
.L08095FB6:
	adds r4, #1
	cmp r4, #3
	ble .L08095F7E
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08095FCC: .4byte gUnknown_02011184
.L08095FD0: .4byte gUnknown_08A196BC
.L08095FD4: .4byte gBg0Tm+0x8

	THUMB_FUNC_END func_08095F54

	THUMB_FUNC_START func_08095FD8
func_08095FD8: @ 0x08095FD8
	push {lr}
	ldr r0, .L08095FFC  @ gBg0Tm+0x146
	movs r1, #8
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L08096000  @ gBg1Tm+0x146
	movs r1, #8
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L08095FFC: .4byte gBg0Tm+0x146
.L08096000: .4byte gBg1Tm+0x146

	THUMB_FUNC_END func_08095FD8

	THUMB_FUNC_START func_08096004
func_08096004: @ 0x08096004
	push {r4, lr}
	adds r4, r0, #0
	bl DisablePrepScreenMenu
	adds r0, r4, #0
	bl func_08095F54
	adds r4, #0x2e
	ldrb r1, [r4]
	lsls r1, r1, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x1c
	movs r2, #7
	bl func_080AD51C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08096004

	THUMB_FUNC_START func_0809602C
func_0809602C: @ 0x0809602C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	add r1, sp, #4
	ldr r0, .L08096080  @ gUnknown_08205BC0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r0, [r5]
	mov r9, r0
	movs r1, #0x1c
	mov sl, r1
	lsls r0, r0, #4
	adds r6, r0, #0
	adds r6, #0x30
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r2, [r4]
	mov r8, r2
	cmp r2, #0
	beq .L08096088
	ldr r0, .L08096084  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L08096076
	b .L08096184
.L08096076:
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strb r0, [r4]
	b .L08096246
	.align 2, 0
.L08096080: .4byte gUnknown_08205BC0
.L08096084: .4byte gKeySt
.L08096088:
	ldr r0, .L080960DC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080960E4
	ldr r0, .L080960E0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080960A8
	movs r0, #0x6a
	bl m4aSongNumStart
.L080960A8:
	ldrb r0, [r5]
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl func_08095094
	cmp r0, #2
	bne .L080960CA
	movs r2, #0x80
	lsls r2, r2, #1
	mov r3, r8
	str r3, [sp]
	movs r0, #0x37
	adds r1, r2, #0
	movs r3, #0x20
	bl func_080029E8
.L080960CA:
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #4
	strb r0, [r1]
	adds r0, r7, #0
	movs r1, #8
	bl Proc_Goto
	b .L08096246
	.align 2, 0
.L080960DC: .4byte gKeySt
.L080960E0: .4byte gPlaySt
.L080960E4:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08096110
	movs r0, #1
	strb r0, [r4]
	ldrb r0, [r5]
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	bl func_08095094
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	movs r0, #0x1c
	adds r1, r6, #0
	bl ShowTextHelpBox
	b .L08096246
.L08096110:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L08096184
	adds r0, r7, #0
	bl func_08095FD8
	ldr r0, .L08096170  @ gUnknown_08A1B658
	ldr r5, .L08096174  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r4, .L08096178  @ gBg1Tm+0xA0
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L0809617C  @ gUnknown_08A1B698
	adds r1, r5, #0
	bl Decompress
	adds r4, #0xe2
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	movs r0, #1
	movs r1, #6
	bl SetPrepScreenMenuPosition
	ldr r0, .L08096180  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08096166
	movs r0, #0x6b
	bl m4aSongNumStart
.L08096166:
	adds r0, r7, #0
	bl Proc_Break
	b .L08096246
	.align 2, 0
.L08096170: .4byte gUnknown_08A1B658
.L08096174: .4byte gBuf
.L08096178: .4byte gBg1Tm+0xA0
.L0809617C: .4byte gUnknown_08A1B698
.L08096180: .4byte gPlaySt
.L08096184:
	ldr r0, .L080961E0  @ gKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	adds r5, r7, #0
	adds r5, #0x2e
	cmp r0, #0
	beq .L080961B6
	ldrb r0, [r5]
	cmp r0, #0
	bne .L080961B2
	ldrh r1, [r2, #8]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080961B6
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	bl func_080950C4
.L080961B2:
	subs r0, #1
	strb r0, [r5]
.L080961B6:
	ldr r6, .L080961E0  @ gKeySt
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r4, #0x80
	mov r8, r4
	mov r0, r8
	ands r0, r1
	cmp r0, #0
	beq .L080961F4
	ldrb r4, [r5]
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	bl func_080950C4
	subs r0, #1
	cmp r4, r0
	bge .L080961E4
	ldrb r0, [r5]
	adds r0, #1
	b .L080961F2
	.align 2, 0
.L080961E0: .4byte gKeySt
.L080961E4:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	mov r0, r8
	ands r0, r1
	cmp r0, #0
	beq .L080961F4
	movs r0, #0
.L080961F2:
	strb r0, [r5]
.L080961F4:
	ldrb r2, [r5]
	cmp r9, r2
	beq .L08096246
	lsls r0, r2, #4
	adds r6, r0, #0
	adds r6, #0x30
	adds r0, r7, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	beq .L08096226
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r0, r2, #0
	bl func_08095094
	lsls r0, r0, #2
	add r0, sp
	adds r0, #4
	ldr r2, [r0]
	mov r0, sl
	adds r1, r6, #0
	bl ShowTextHelpBox
.L08096226:
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, sl
	adds r1, r6, #0
	movs r2, #7
	bl func_080AD51C
	ldr r0, .L08096258  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08096246
	movs r0, #0x66
	bl m4aSongNumStart
.L08096246:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08096258: .4byte gPlaySt

	THUMB_FUNC_END func_0809602C

	THUMB_FUNC_START func_0809625C
func_0809625C: @ 0x0809625C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
.L08096262:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L0809627C
	ldr r0, [r2]
	cmp r0, #0
	beq .L0809627C
	ldr r0, [r2, #0xc]
	ldr r1, .L08096290  @ 0xFDFFFFFF
	ands r0, r1
	str r0, [r2, #0xc]
.L0809627C:
	adds r4, #1
	cmp r4, #0x3f
	ble .L08096262
	adds r1, r5, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08096290: .4byte 0xFDFFFFFF

	THUMB_FUNC_END func_0809625C

	THUMB_FUNC_START func_08096294
func_08096294: @ 0x08096294
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl EndScreenMenuScrollingBg
	bl func_08096C20
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #1
	bl SetBlendBackdropA
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080962D8
	adds r0, r4, #0
	bl nullsub_20
.L080962D8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08096294

	THUMB_FUNC_START func_080962E0
func_080962E0: @ 0x080962E0
	push {r4, lr}
	adds r4, r0, #0
	bl ReorderPlayerUnitsBasedOnDeployment
	adds r4, #0x36
	ldrb r0, [r4]
	cmp r0, #0
	beq .L080962F6
	bl EndPrepScreen
	b .L08096304
.L080962F6:
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08096304
	bl func_08042EA8
.L08096304:
	bl PositionUnitsAccordingToDeployment
	bl ResetUnitSprites
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080962E0

	THUMB_FUNC_START AtMenu_StartSubmenu
AtMenu_StartSubmenu: @ 0x0809631C
	push {r4, lr}
	adds r4, r0, #0
	bl func_08095C2C
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #4
	bhi .L08096384
	lsls r0, r0, #2
	ldr r1, .L0809633C  @ .L08096340
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L0809633C: .4byte .L08096340
.L08096340: @ jump table
	.4byte .L08096364 @ case 0
	.4byte .L0809635C @ case 1
	.4byte .L0809637E @ case 2
	.4byte .L08096374 @ case 3
	.4byte .L08096354 @ case 4
.L08096354:
	adds r0, r4, #0
	bl func_0808E79C
	b .L08096384
.L0809635C:
	adds r0, r4, #0
	bl StartPrepScreenItemsMenu
	b .L08096384
.L08096364:
	ldr r0, .L08096370  @ gUnknown_08A18E8C
	adds r1, r4, #0
	bl SpawnProcLocking
	b .L08096384
	.align 2, 0
.L08096370: .4byte gUnknown_08A18E8C
.L08096374:
	movs r0, #2
	adds r1, r4, #0
	bl StartPrepScreenSupportMenu
	b .L08096384
.L0809637E:
	adds r0, r4, #0
	bl StartPrepScreenSaveMenu
.L08096384:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_StartSubmenu

	THUMB_FUNC_START AtMenu_OnSubmenuEnd
AtMenu_OnSubmenuEnd: @ 0x08096390
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x33
	ldrb r0, [r5]
	cmp r0, #3
	bne .L080963AC
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
.L080963AC:
	ldrb r0, [r5]
	subs r0, #1
	cmp r0, #4
	bhi .L080963F4
	lsls r0, r0, #2
	ldr r1, .L080963C0  @ .L080963C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080963C0: .4byte .L080963C4
.L080963C4: @ jump table
	.4byte .L080963EC @ case 0
	.4byte .L080963EC @ case 1
	.4byte .L080963E2 @ case 2
	.4byte .L080963D8 @ case 3
	.4byte .L080963EC @ case 4
.L080963D8:
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	b .L080963F4
.L080963E2:
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b .L080963F4
.L080963EC:
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
.L080963F4:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_OnSubmenuEnd

	THUMB_FUNC_START func_08096404
func_08096404: @ 0x08096404
	ldr r2, .L08096420  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L08096420: .4byte gDispIo

	THUMB_FUNC_END func_08096404

	THUMB_FUNC_START AtMenu_LockGame
AtMenu_LockGame: @ 0x08096424
	push {lr}
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L08096438
	bl LockGameLogic
	bl LockBmDisplay
.L08096438:
	pop {r0}
	bx r0

	THUMB_FUNC_END AtMenu_LockGame

	THUMB_FUNC_START func_0809643C
func_0809643C: @ 0x0809643C
	push {lr}
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L08096450
	bl UnlockBmDisplay
	bl UnlockGameLogic
.L08096450:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809643C

	THUMB_FUNC_START StartAtMenu
StartAtMenu: @ 0x08096454
	push {lr}
	ldr r0, .L08096464  @ gUnknown_08A1829C
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L08096464: .4byte gUnknown_08A1829C

	THUMB_FUNC_END StartAtMenu

	THUMB_FUNC_START StartAtMenu_LinkArena
StartAtMenu_LinkArena: @ 0x08096468
	push {lr}
	ldr r0, .L08096480  @ gUnknown_08A1829C
	movs r1, #3
	bl SpawnProc
	bl func_08095840
	bl func_080952D4
	pop {r0}
	bx r0
	.align 2, 0
.L08096480: .4byte gUnknown_08A1829C

	THUMB_FUNC_END StartAtMenu_LinkArena

	THUMB_FUNC_START func_08096484
func_08096484: @ 0x08096484
	push {lr}
	bl HasConvoyAccess
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08096484

	THUMB_FUNC_START func_08096494
func_08096494: @ 0x08096494
	push {lr}
	sub sp, #4
	bl func_0808F270
	bl ClearDialogueAndFaces
	bl EndEachSpriteAnimProc
	ldr r3, .L080964F0  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080964F0: .4byte gDispIo

	THUMB_FUNC_END func_08096494

	THUMB_FUNC_START func_080964F4
func_080964F4: @ 0x080964F4
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	bl GetUnitByPid
	adds r5, r0, #0
	cmp r5, #0
	bne .L0809650E
	adds r0, r4, #0
	bl Proc_End
	b .L08096556
.L0809650E:
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x4c
	movs r4, #0
	strh r0, [r1]
	ldr r2, .L0809655C  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	subs r1, #0x80
	adds r0, r5, #0
	movs r2, #0
	bl func_0802F598
	ldr r1, .L08096560  @ gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	ldr r0, .L08096564  @ gBattleUnitA
	adds r0, #0x4a
	strh r4, [r0]
	ldr r0, .L08096568  @ gBattleUnitB
	adds r0, #0x4a
	strh r4, [r0]
	bl BeginBattleAnimations
.L08096556:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809655C: .4byte gDispIo
.L08096560: .4byte gBattleStats
.L08096564: .4byte gBattleUnitA
.L08096568: .4byte gBattleUnitB

	THUMB_FUNC_END func_080964F4

	THUMB_FUNC_START func_0809656C
func_0809656C: @ 0x0809656C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne .L08096588
	adds r0, r5, #0
	bl Proc_Break
.L08096588:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809656C

	THUMB_FUNC_START func_08096590
func_08096590: @ 0x08096590
	push {r4, lr}
	sub sp, #4
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r4, #0
	bl GetUnitByPid
	adds r1, r0, #0
	cmp r1, #0
	beq .L080965A8
	movs r0, #0xff
	strb r0, [r1, #9]
.L080965A8:
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	ldr r2, .L080965EC  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x34
	adds r1, r4, #0
	adds r2, r4, #0
	movs r3, #0x20
	bl func_080029E8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080965EC: .4byte gDispIo

	THUMB_FUNC_END func_08096590

	THUMB_FUNC_START func_080965F0
func_080965F0: @ 0x080965F0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl func_0808F270
	bl ClearDialogueAndFaces
	bl EndEachSpriteAnimProc
	ldr r3, .L08096660  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	adds r0, r4, #0
	bl EndAllProcChildren
	ldr r0, .L08096664  @ gUnknown_08A184B4
	adds r1, r4, #0
	bl SpawnProcLocking
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08096660: .4byte gDispIo
.L08096664: .4byte gUnknown_08A184B4

	THUMB_FUNC_END func_080965F0

	THUMB_FUNC_START func_08096668
func_08096668: @ 0x08096668
	push {lr}
	sub sp, #4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	movs r3, #0x20
	bl func_080029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08096668

	THUMB_FUNC_START NewPrepScreenTraineePromotionManager
NewPrepScreenTraineePromotionManager: @ 0x08096684
	push {lr}
	ldr r0, .L08096694  @ gUnknown_08A184F4
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L08096694: .4byte gUnknown_08A184F4

	THUMB_FUNC_END NewPrepScreenTraineePromotionManager

	THUMB_FUNC_START PrepScreenTraineePromotionManagerExists
PrepScreenTraineePromotionManagerExists: @ 0x08096698
	push {lr}
	ldr r0, .L080966AC  @ gUnknown_08A184F4
	bl FindProc
	cmp r0, #0
	beq .L080966A6
	movs r0, #1
.L080966A6:
	pop {r1}
	bx r1
	.align 2, 0
.L080966AC: .4byte gUnknown_08A184F4

	THUMB_FUNC_END PrepScreenTraineePromotionManagerExists

	THUMB_FUNC_START AtMenuExists
AtMenuExists: @ 0x080966B0
	push {lr}
	ldr r0, .L080966C4  @ gUnknown_08A1829C
	bl FindProc
	cmp r0, #0
	beq .L080966BE
	movs r0, #1
.L080966BE:
	pop {r1}
	bx r1
	.align 2, 0
.L080966C4: .4byte gUnknown_08A1829C

	THUMB_FUNC_END AtMenuExists

	THUMB_FUNC_START func_080966C8
func_080966C8: @ 0x080966C8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, .L080966EC  @ gUnknown_08A1856E
	str r2, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080966EC: .4byte gUnknown_08A1856E

	THUMB_FUNC_END func_080966C8

	THUMB_FUNC_START func_080966F0
func_080966F0: @ 0x080966F0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r9, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq .L08096724
	subs r6, #4
	adds r1, r6, #0
	adds r1, #0x40
	ldr r0, .L08096750  @ gUnknown_08A18614
	ldr r3, [r0, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
.L08096724:
	ldr r3, .L08096754  @ gUnknown_08A18582
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r9
	bl PutSpriteExt
	asrs r7, r4, #1
	cmp r7, #9
	bgt .L08096758
	adds r1, r6, #0
	adds r1, #0x30
	ldr r0, .L08096750  @ gUnknown_08A18614
	ldr r3, [r0, #0x2c]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
	b .L0809677A
	.align 2, 0
.L08096750: .4byte gUnknown_08A18614
.L08096754: .4byte gUnknown_08A18582
.L08096758:
	adds r5, r6, #0
	adds r5, #0x30
	ldr r4, .L080967AC  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl PutSpriteExt
.L0809677A:
	adds r5, r6, #0
	adds r5, #0x38
	ldr r4, .L080967AC  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080967AC: .4byte gUnknown_08A18614

	THUMB_FUNC_END func_080966F0

	THUMB_FUNC_START func_080967B0
func_080967B0: @ 0x080967B0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r9, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq .L080967E4
	subs r6, #4
	adds r1, r6, #0
	adds r1, #0x40
	ldr r0, .L08096810  @ gUnknown_08A18614
	ldr r3, [r0, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
.L080967E4:
	ldr r3, .L08096814  @ gUnknown_08A18590
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r9
	bl PutSpriteExt
	asrs r7, r4, #1
	cmp r7, #9
	bgt .L08096818
	adds r1, r6, #0
	adds r1, #0x30
	ldr r0, .L08096810  @ gUnknown_08A18614
	ldr r3, [r0, #0x2c]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
	b .L0809683A
	.align 2, 0
.L08096810: .4byte gUnknown_08A18614
.L08096814: .4byte gUnknown_08A18590
.L08096818:
	adds r5, r6, #0
	adds r5, #0x30
	ldr r4, .L0809686C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl PutSpriteExt
.L0809683A:
	adds r5, r6, #0
	adds r5, #0x38
	ldr r4, .L0809686C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809686C: .4byte gUnknown_08A18614

	THUMB_FUNC_END func_080967B0

	THUMB_FUNC_START func_08096870
func_08096870: @ 0x08096870
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	mov r9, r1
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq .L080968A4
	subs r6, #4
	adds r1, r6, #0
	adds r1, #0x3c
	ldr r0, .L080968D0  @ gUnknown_08A18614
	ldr r3, [r0, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
.L080968A4:
	adds r1, r6, #4
	ldr r3, .L080968D4  @ gUnknown_08A1859E
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
	asrs r7, r4, #1
	cmp r7, #9
	bgt .L080968D8
	adds r1, r6, #0
	adds r1, #0x2c
	ldr r0, .L080968D0  @ gUnknown_08A18614
	ldr r3, [r0, #0x2c]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r2, r9
	bl PutSpriteExt
	b .L080968FA
	.align 2, 0
.L080968D0: .4byte gUnknown_08A18614
.L080968D4: .4byte gUnknown_08A1859E
.L080968D8:
	adds r5, r6, #0
	adds r5, #0x2c
	ldr r4, .L0809692C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl PutSpriteExt
.L080968FA:
	adds r5, r6, #0
	adds r5, #0x34
	ldr r4, .L0809692C  @ gUnknown_08A18614
	adds r0, r7, #0
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r2, r9
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809692C: .4byte gUnknown_08A18614

	THUMB_FUNC_END func_08096870

	THUMB_FUNC_START func_08096930
func_08096930: @ 0x08096930
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, .L08096954  @ gUnknown_08A185AC
	str r2, [sp]
	movs r0, #4
	adds r1, r4, #0
	adds r2, r5, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08096954: .4byte gUnknown_08A185AC

	THUMB_FUNC_END func_08096930

	THUMB_FUNC_START func_08096958
func_08096958: @ 0x08096958
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r4, #0xa0
	movs r5, #8
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08096974
	b .L08096A80
.L08096974:
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #4
	bhi .L080969E8
	lsls r0, r0, #2
	ldr r1, .L08096988  @ .L0809698C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L08096988: .4byte .L0809698C
.L0809698C: @ jump table
	.4byte .L080969E8 @ case 0
	.4byte .L080969A0 @ case 1
	.4byte .L080969B4 @ case 2
	.4byte .L080969C8 @ case 3
	.4byte .L080969DC @ case 4
.L080969A0:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r3, #0xc7
	lsls r3, r3, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080966F0
	b .L080969E8
.L080969B4:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r3, #0xc7
	lsls r3, r3, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080967B0
	b .L080969E8
.L080969C8:
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	movs r3, #0xc7
	lsls r3, r3, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_08096870
	b .L080969E8
.L080969DC:
	movs r2, #0xc7
	lsls r2, r2, #7
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_08096930
.L080969E8:
	movs r0, #0x33
	adds r0, r0, r7
	mov r8, r0
	movs r1, #0x34
	adds r1, r1, r7
	mov r9, r1
	ldr r6, .L08096A6C  @ 0x0000B6C0
	movs r5, #0x80
	movs r4, #2
.L080969FA:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x18
	ldr r3, .L08096A70  @ Sprite_32x16
	bl PutSpriteExt
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L080969FA
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	bne .L08096A26
	ldrh r0, [r7, #0x36]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L08096A38
.L08096A26:
	ldr r3, .L08096A74  @ gUnknown_08A18E4E
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #0x14
	movs r2, #0x8c
	bl PutSpriteExt
.L08096A38:
	mov r1, r9
	ldrb r0, [r1]
	cmp r0, #0
	bne .L08096A4C
	ldrh r0, [r7, #0x36]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L08096A5E
.L08096A4C:
	ldr r3, .L08096A78  @ gUnknown_08A18E76
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #0x64
	movs r2, #0x8c
	bl PutSpriteExt
.L08096A5E:
	ldr r2, .L08096A7C  @ 0x00009380
	movs r0, #0x74
	movs r1, #0x28
	bl func_080966C8
	b .L08096AA4
	.align 2, 0
.L08096A6C: .4byte 0x0000B6C0
.L08096A70: .4byte Sprite_32x16
.L08096A74: .4byte gUnknown_08A18E4E
.L08096A78: .4byte gUnknown_08A18E76
.L08096A7C: .4byte 0x00009380
.L08096A80:
	bl func_08095264
	cmp r0, #0
	beq .L08096A9A
	ldr r3, .L08096AB4  @ gUnknown_08A18E62
	movs r0, #0xc0
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	movs r1, #0x14
	movs r2, #0x8c
	bl PutSpriteExt
.L08096A9A:
	ldr r2, .L08096AB8  @ 0x00009380
	movs r0, #0x74
	movs r1, #0x20
	bl func_080966C8
.L08096AA4:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08096AB4: .4byte gUnknown_08A18E62
.L08096AB8: .4byte 0x00009380

	THUMB_FUNC_END func_08096958

	THUMB_FUNC_START func_08096ABC
func_08096ABC: @ 0x08096ABC
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x36]
	bl ForceSyncUnitSpriteSheet
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq .L08096AFC
	ldr r0, .L08096AF4  @ gUnknown_08A1B194
	ldr r3, .L08096AF8  @ 0x00009E40
	movs r1, #1
	str r1, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x3c
	movs r2, #0x10
	bl StartSpriteAnimProc
	str r0, [r5, #0x38]
	b .L08096B86
	.align 2, 0
.L08096AF4: .4byte gUnknown_08A1B194
.L08096AF8: .4byte 0x00009E40
.L08096AFC:
	ldr r0, .L08096B28  @ gUnknown_08A1B194
	ldr r3, .L08096B2C  @ 0x00009E40
	str r1, [sp]
	movs r1, #0xd
	str r1, [sp, #4]
	movs r1, #0x3c
	movs r2, #0x10
	bl StartSpriteAnimProc
	str r0, [r5, #0x38]
	ldr r0, .L08096B30  @ gPlaySt
	movs r4, #0xe
	ldrsb r4, [r0, r4]
	adds r0, r4, #0
	subs r0, #0x24
	cmp r0, #9
	bhi .L08096B34
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #2
	b .L08096B74
	.align 2, 0
.L08096B28: .4byte gUnknown_08A1B194
.L08096B2C: .4byte 0x00009E40
.L08096B30: .4byte gPlaySt
.L08096B34:
	adds r0, r4, #0
	subs r0, #0x2e
	cmp r0, #9
	bhi .L08096B44
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #3
	b .L08096B74
.L08096B44:
	adds r0, r4, #0
	bl func_080C0960
	cmp r0, #0
	beq .L08096B56
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #4
	b .L08096B74
.L08096B56:
	adds r0, r4, #0
	subs r0, #0x15
	cmp r0, #1
	bls .L08096B66
	cmp r4, #0x22
	beq .L08096B66
	cmp r4, #0x23
	bne .L08096B6E
.L08096B66:
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #0
	b .L08096B74
.L08096B6E:
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #1
.L08096B74:
	strb r0, [r1]
	adds r0, r4, #0
	bl GetChapterInfo
	adds r0, #0x80
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
.L08096B86:
	adds r1, r5, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x33
	movs r1, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08096ABC

	THUMB_FUNC_START func_08096BA4
func_08096BA4: @ 0x08096BA4
	push {r4, lr}
	adds r4, r0, #0
	bl func_08096958
	ldrh r0, [r4, #0x36]
	adds r0, #1
	strh r0, [r4, #0x36]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08096BA4

	THUMB_FUNC_START func_08096BB8
func_08096BB8: @ 0x08096BB8
	push {lr}
	ldr r0, [r0, #0x38]
	bl EndSpriteAnimProc
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08096BB8

	THUMB_FUNC_START func_08096BC4
func_08096BC4: @ 0x08096BC4
	push {lr}
	ldr r0, .L08096BDC  @ gUnknown_08A186B4
	bl FindProc
	cmp r0, #0
	beq .L08096BD8
	adds r1, r0, #0
	adds r1, #0x33
	movs r0, #0
	strb r0, [r1]
.L08096BD8:
	pop {r0}
	bx r0
	.align 2, 0
.L08096BDC: .4byte gUnknown_08A186B4

	THUMB_FUNC_END func_08096BC4

	THUMB_FUNC_START func_08096BE0
func_08096BE0: @ 0x08096BE0
	push {lr}
	ldr r0, .L08096BF8  @ gUnknown_08A186B4
	bl FindProc
	cmp r0, #0
	beq .L08096BF4
	adds r1, r0, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
.L08096BF4:
	pop {r0}
	bx r0
	.align 2, 0
.L08096BF8: .4byte gUnknown_08A186B4

	THUMB_FUNC_END func_08096BE0

	THUMB_FUNC_START func_08096BFC
func_08096BFC: @ 0x08096BFC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L08096C1C  @ gUnknown_08A186B4
	adds r0, r4, #0
	bl FindProc
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L08096C1C: .4byte gUnknown_08A186B4

	THUMB_FUNC_END func_08096BFC

	THUMB_FUNC_START func_08096C20
func_08096C20: @ 0x08096C20
	push {lr}
	ldr r0, .L08096C30  @ gUnknown_08A186B4
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L08096C30: .4byte gUnknown_08A186B4

	THUMB_FUNC_END func_08096C20

	THUMB_FUNC_START func_08096C34
func_08096C34: @ 0x08096C34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	adds r3, r2, #0
	subs r3, #0x38
	cmp r3, #0
	bge .L08096C4A
	movs r7, #0
	adds r6, r2, #0
	b .L08096C60
.L08096C4A:
	adds r0, r2, #0
	adds r0, #0x38
	cmp r0, #0xf0
	ble .L08096C5A
	movs r7, #0xf
	adds r6, r2, #0
	subs r6, #0x78
	b .L08096C60
.L08096C5A:
	asrs r7, r3, #3
	lsls r0, r7, #3
	subs r6, r2, r0
.L08096C60:
	adds r3, r1, #0
	subs r3, #0x28
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, #0xa0
	ble .L08096C72
	movs r5, #8
	subs r1, #0x40
	b .L08096C82
.L08096C72:
	adds r0, r3, #0
	cmp r0, #0
	bge .L08096C7C
	adds r0, r1, #0
	subs r0, #0x21
.L08096C7C:
	asrs r5, r0, #3
	lsls r0, r5, #3
	subs r1, r1, r0
.L08096C82:
	mov r8, r1
	ldr r4, .L08096CC8  @ gBg0Tm+0x8
	adds r0, r4, #0
	movs r1, #2
	adds r2, r7, #0
	bl PutNumberOrBlank
	adds r0, r4, #0
	adds r0, #0x80
	movs r1, #2
	adds r2, r5, #0
	bl PutNumberOrBlank
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	adds r2, r6, #0
	bl PutNumberOrBlank
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	mov r2, r8
	bl PutNumberOrBlank
	movs r0, #1
	bl EnableBgSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08096CC8: .4byte gBg0Tm+0x8

	THUMB_FUNC_END func_08096C34

	THUMB_FUNC_START PrepScreenMenu_OnInit
PrepScreenMenu_OnInit: @ 0x08096CCC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0
	movs r1, #7
	adds r0, #0x54
.L08096CD6:
	str r2, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge .L08096CD6
	movs r4, #0
	adds r0, r5, #0
	adds r0, #0x2a
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, r5, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	str r4, [r5, #0x58]
	str r4, [r5, #0x5c]
	str r4, [r5, #0x60]
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnInit

	THUMB_FUNC_START PrepScreenMenu_OnActiveLoop
PrepScreenMenu_OnActiveLoop: @ 0x08096D10
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	mov r9, r0
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	mov r8, r0
	movs r2, #0x36
	ldrsh r0, [r4, r2]
	adds r0, #1
	lsls r0, r0, #3
	mov r2, r9
	lsls r1, r2, #4
	adds r7, r0, r1
	movs r3, #0x80
	lsls r3, r3, #3
	mov r0, r8
	adds r1, r7, #0
	movs r2, #6
	bl func_080AD51C
	ldrb r1, [r5]
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x38
	adds r0, r0, r1
	ldr r5, [r0]
	adds r6, r4, #0
	adds r6, #0x29
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq .L08096D84
	ldr r2, .L08096D80  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L08096D74
	b .L08096E8C
.L08096D74:
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strb r0, [r6]
	b .L08096F34
	.align 2, 0
.L08096D80: .4byte gKeySt
.L08096D84:
	ldr r1, .L08096DAC  @ gKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	adds r2, r1, #0
	cmp r0, #0
	beq .L08096DB0
	ldr r2, [r5, #0x30]
	cmp r2, #0
	bne .L08096D9E
	b .L08096F34
.L08096D9E:
	mov r0, r8
	adds r1, r7, #0
	bl ShowTextHelpBox
	movs r0, #1
	strb r0, [r6]
	b .L08096F34
	.align 2, 0
.L08096DAC: .4byte gKeySt
.L08096DB0:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r3
	cmp r0, #0
	beq .L08096DF8
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r1, [r0]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne .L08096E74
	ldr r0, [r5, #0x2c]
	cmp r0, #0
	beq .L08096E74
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, [r4, #0x14]
	ldr r1, [r5, #0x2c]
	bl _call_via_r1
	ldr r0, .L08096DF4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L08096DEC
	b .L08096F34
.L08096DEC:
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L08096F34
	.align 2, 0
.L08096DF4: .4byte gPlaySt
.L08096DF8:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L08096E38
	ldr r1, [r4, #0x58]
	cmp r1, #0
	bne .L08096E08
	b .L08096F34
.L08096E08:
	ldr r0, [r4, #0x14]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08096E74
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, .L08096E34  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L08096E2A
	b .L08096F34
.L08096E2A:
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L08096F34
	.align 2, 0
.L08096E34: .4byte gPlaySt
.L08096E38:
	movs r0, #8
	ands r0, r3
	cmp r0, #0
	beq .L08096E8C
	ldr r1, [r4, #0x5c]
	cmp r1, #0
	beq .L08096F34
	ldr r0, [r4, #0x14]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08096E74
	ldr r0, .L08096E70  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08096E64
	movs r0, #0x6a
	bl m4aSongNumStart
.L08096E64:
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b .L08096F34
	.align 2, 0
.L08096E70: .4byte gPlaySt
.L08096E74:
	ldr r0, .L08096E88  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08096F34
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L08096F34
	.align 2, 0
.L08096E88: .4byte gPlaySt
.L08096E8C:
	ldr r3, [r2]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x2a
	cmp r0, #0
	beq .L08096EB8
	ldrb r0, [r5]
	cmp r0, #0
	bne .L08096EB4
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L08096EB8
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
.L08096EB4:
	subs r0, #1
	strb r0, [r5]
.L08096EB8:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L08096EE6
	ldrb r1, [r5]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L08096ED8
	adds r0, r1, #1
	b .L08096EE4
.L08096ED8:
	ldrh r1, [r2, #8]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L08096EE6
	movs r0, #0
.L08096EE4:
	strb r0, [r5]
.L08096EE6:
	ldrb r0, [r5]
	cmp r9, r0
	beq .L08096F34
	ldr r0, .L08096F40  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08096EFE
	movs r0, #0x66
	bl m4aSongNumStart
.L08096EFE:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L08096F34
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r2, #0x36
	ldrsh r1, [r4, r2]
	adds r1, #1
	lsls r1, r1, #3
	ldrb r3, [r5]
	lsls r2, r3, #4
	adds r1, r1, r2
	lsls r3, r3, #2
	adds r2, r4, #0
	adds r2, #0x38
	adds r2, r2, r3
	ldr r5, [r2]
	ldr r2, [r5, #0x30]
	bl ShowTextHelpBox
.L08096F34:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08096F40: .4byte gPlaySt

	THUMB_FUNC_END PrepScreenMenu_OnActiveLoop

	THUMB_FUNC_START PrepScreenMenu_OnLoop_2
PrepScreenMenu_OnLoop_2: @ 0x08096F44
	push {lr}
	adds r2, r0, #0
	movs r1, #0x34
	ldrsh r0, [r2, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r3, #0x36
	ldrsh r1, [r2, r3]
	adds r1, #1
	lsls r1, r1, #3
	adds r2, #0x2a
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r1, r1, r2
	bl DisplayFrozenUiHand
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnLoop_2

	THUMB_FUNC_START PrepScreenMenu_OnLoop_0
PrepScreenMenu_OnLoop_0: @ 0x08096F6C
	push {lr}
	adds r2, r0, #0
	movs r1, #0x34
	ldrsh r0, [r2, r1]
	adds r0, #1
	lsls r0, r0, #3
	adds r0, #4
	movs r3, #0x36
	ldrsh r1, [r2, r3]
	adds r1, #1
	lsls r1, r1, #3
	adds r2, #0x2a
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #6
	bl func_080AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnLoop_0

	THUMB_FUNC_START PrepScreenMenu_OnEnd
PrepScreenMenu_OnEnd: @ 0x08096F98
	push {lr}
	ldr r1, [r0, #0x60]
	cmp r1, #0
	beq .L08096FA6
	ldr r0, [r0, #0x14]
	bl _call_via_r1
.L08096FA6:
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenMenu_OnEnd

	THUMB_FUNC_START StartPrepScreenMenu
StartPrepScreenMenu: @ 0x08096FAC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L08096FCC  @ gUnknown_08A186EC
	adds r0, r4, #0
	bl FindProc
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08096FCC: .4byte gUnknown_08A186EC

	THUMB_FUNC_END StartPrepScreenMenu

	THUMB_FUNC_START SetPrepScreenMenuOnBPress
SetPrepScreenMenuOnBPress: @ 0x08096FD0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L08096FE8  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L08096FE0
	str r4, [r0, #0x58]
.L08096FE0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08096FE8: .4byte gUnknown_08A186EC

	THUMB_FUNC_END SetPrepScreenMenuOnBPress

	THUMB_FUNC_START SetPrepScreenMenuOnStartPress
SetPrepScreenMenuOnStartPress: @ 0x08096FEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L08097004  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L08096FFC
	str r4, [r0, #0x5c]
.L08096FFC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08097004: .4byte gUnknown_08A186EC

	THUMB_FUNC_END SetPrepScreenMenuOnStartPress

	THUMB_FUNC_START SetPrepScreenMenuOnEnd
SetPrepScreenMenuOnEnd: @ 0x08097008
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L08097020  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L08097018
	str r4, [r0, #0x60]
.L08097018:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08097020: .4byte gUnknown_08A186EC

	THUMB_FUNC_END SetPrepScreenMenuOnEnd

	THUMB_FUNC_START SetPrepScreenMenuItem
SetPrepScreenMenuItem: @ 0x08097024
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	mov r9, r3
	ldr r0, .L08097074  @ gUnknown_08A186EC
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080970B8
	movs r4, #0
	movs r0, #0x38
	adds r0, r0, r1
	mov sl, r0
	mov r3, sl
.L0809704C:
	ldr r2, [r3]
	cmp r2, #0
	beq .L08097078
	adds r0, r2, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, r6
	bne .L08097078
	str r7, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x38
	mov r1, r8
	strb r1, [r0]
	ldr r0, [r3]
	mov r2, r9
	str r2, [r0, #0x34]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x30]
	b .L080970B8
	.align 2, 0
.L08097074: .4byte gUnknown_08A186EC
.L08097078:
	adds r3, #4
	adds r4, #1
	cmp r4, #7
	ble .L0809704C
	adds r5, r1, #0
	adds r5, #0x2b
	ldrb r4, [r5]
	ldr r0, .L080970C8  @ gUnknown_08A186DC
	bl SpawnProc
	lsls r1, r4, #2
	add r1, sl
	str r0, [r1]
	adds r0, #0x39
	strb r6, [r0]
	ldr r0, [r1]
	str r7, [r0, #0x2c]
	adds r0, #0x38
	mov r2, r8
	strb r2, [r0]
	ldr r0, [r1]
	mov r1, r9
	str r1, [r0, #0x34]
	ldr r2, [sp, #0x20]
	str r2, [r0, #0x30]
	adds r0, #0x3c
	movs r1, #7
	bl InitText
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
.L080970B8:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080970C8: .4byte gUnknown_08A186DC

	THUMB_FUNC_END SetPrepScreenMenuItem

	THUMB_FUNC_START SetPrepScreenMenuSelectedItem
SetPrepScreenMenuSelectedItem: @ 0x080970CC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	ldr r0, .L080970F8  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L08097106
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0x2a
	adds r1, r0, #0
	adds r1, #0x38
.L080970E6:
	ldr r0, [r1]
	cmp r0, #0
	beq .L080970FE
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, r5
	bne .L080970FC
	strb r4, [r3]
	b .L08097106
	.align 2, 0
.L080970F8: .4byte gUnknown_08A186EC
.L080970FC:
	adds r4, #1
.L080970FE:
	adds r1, #4
	adds r2, #1
	cmp r2, #7
	ble .L080970E6
.L08097106:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END SetPrepScreenMenuSelectedItem

	THUMB_FUNC_START GetActivePrepScreenMenuItemId
GetActivePrepScreenMenuItemId: @ 0x0809710C
	push {r4, r5, lr}
	movs r4, #0
	ldr r0, .L0809713C  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L0809714A
	movs r3, #0
	movs r1, #0x2a
	adds r1, r1, r0
	mov ip, r1
	adds r2, r0, #0
	adds r2, #0x38
.L08097126:
	ldr r1, [r2]
	cmp r1, #0
	beq .L08097142
	mov r5, ip
	ldrb r0, [r5]
	cmp r0, r4
	bne .L08097140
	adds r0, r1, #0
	adds r0, #0x39
	ldrb r0, [r0]
	b .L0809714C
	.align 2, 0
.L0809713C: .4byte gUnknown_08A186EC
.L08097140:
	adds r4, #1
.L08097142:
	adds r2, #4
	adds r3, #1
	cmp r3, #7
	ble .L08097126
.L0809714A:
	movs r0, #0
.L0809714C:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetActivePrepScreenMenuItemId

	THUMB_FUNC_START DrawPrepScreenMenuFrameAt
DrawPrepScreenMenuFrameAt: @ 0x08097154
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r0, .L080971F8  @ gUnknown_08A186EC
	bl FindProc
	mov r8, r0
	cmp r0, #0
	beq .L080971EA
	movs r0, #0
	mov r1, r8
	strh r6, [r1, #0x34]
	strh r5, [r1, #0x36]
	mov r4, r8
	adds r4, #0x2b
	ldrb r3, [r4]
	lsls r3, r3, #1
	adds r3, #2
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl DrawUiFrame2
	ldrb r0, [r4]
	mov r9, r4
	cmp r0, #1
	bls .L080971E4
	movs r7, #0
	ldrb r0, [r4]
	cmp r7, r0
	bge .L080971E4
	adds r0, r5, #1
	lsls r0, r0, #5
	adds r0, #2
	adds r6, r0, r6
.L080971A4:
	lsls r1, r7, #2
	mov r0, r8
	adds r0, #0x38
	adds r0, r0, r1
	ldr r4, [r0]
	adds r5, r4, #0
	adds r5, #0x3c
	adds r0, r5, #0
	bl ClearText
	ldr r0, [r4, #0x34]
	bl GetMsg
	lsls r1, r6, #1
	ldr r2, .L080971FC  @ gBg0Tm
	adds r1, r1, r2
	adds r4, #0x38
	ldrb r3, [r4]
	movs r2, #1
	ands r2, r3
	movs r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl PutDrawText
	adds r6, #0x40
	adds r7, #1
	mov r1, r9
	ldrb r1, [r1]
	cmp r7, r1
	blt .L080971A4
.L080971E4:
	movs r0, #3
	bl EnableBgSync
.L080971EA:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080971F8: .4byte gUnknown_08A186EC
.L080971FC: .4byte gBg0Tm

	THUMB_FUNC_END DrawPrepScreenMenuFrameAt

	THUMB_FUNC_START SetPrepScreenMenuPosition
SetPrepScreenMenuPosition: @ 0x08097200
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, .L0809728C  @ gUnknown_08A186EC
	bl FindProc
	mov r8, r0
	cmp r0, #0
	beq .L0809727E
	strh r5, [r0, #0x34]
	strh r4, [r0, #0x36]
	adds r0, #0x2b
	ldrb r1, [r0]
	mov r9, r0
	cmp r1, #1
	bls .L08097278
	movs r7, #0
	ldrb r0, [r0]
	cmp r7, r0
	bge .L08097278
	adds r0, r4, #1
	lsls r0, r0, #5
	adds r0, #2
	adds r6, r0, r5
.L08097238:
	lsls r1, r7, #2
	mov r0, r8
	adds r0, #0x38
	adds r0, r0, r1
	ldr r4, [r0]
	adds r5, r4, #0
	adds r5, #0x3c
	adds r0, r5, #0
	bl ClearText
	ldr r0, [r4, #0x34]
	bl GetMsg
	lsls r1, r6, #1
	ldr r2, .L08097290  @ gBg0Tm
	adds r1, r1, r2
	adds r4, #0x38
	ldrb r3, [r4]
	movs r2, #1
	ands r2, r3
	movs r3, #0
	str r3, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl PutDrawText
	adds r6, #0x40
	adds r7, #1
	mov r1, r9
	ldrb r1, [r1]
	cmp r7, r1
	blt .L08097238
.L08097278:
	movs r0, #1
	bl EnableBgSync
.L0809727E:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809728C: .4byte gUnknown_08A186EC
.L08097290: .4byte gBg0Tm

	THUMB_FUNC_END SetPrepScreenMenuPosition

	THUMB_FUNC_START func_08097294
func_08097294: @ 0x08097294
	push {lr}
	ldr r0, .L080972A4  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	bne .L080972A8
	movs r0, #0
	b .L080972AC
	.align 2, 0
.L080972A4: .4byte gUnknown_08A186EC
.L080972A8:
	adds r0, #0x2b
	ldrb r0, [r0]
.L080972AC:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097294

	THUMB_FUNC_START EndPrepScreenMenu
EndPrepScreenMenu: @ 0x080972B0
	push {r4, lr}
	ldr r0, .L080972D0  @ gUnknown_08A186EC
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L080972CA
	bl ClearPrepScreenMenu
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
.L080972CA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080972D0: .4byte gUnknown_08A186EC

	THUMB_FUNC_END EndPrepScreenMenu

	THUMB_FUNC_START ClearPrepScreenMenu
ClearPrepScreenMenu: @ 0x080972D4
	push {r4, r5, lr}
	ldr r0, .L08097334  @ gUnknown_08A186EC
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L0809732C
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	lsls r0, r0, #5
	movs r2, #0x34
	ldrsh r1, [r4, r2]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, .L08097338  @ gBg0Tm
	adds r0, r0, r1
	adds r5, r4, #0
	adds r5, #0x2b
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r2, #2
	movs r1, #9
	movs r3, #0
	bl TmFillRect_thm
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	lsls r0, r0, #5
	movs r2, #0x34
	ldrsh r1, [r4, r2]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, .L0809733C  @ gBg1Tm
	adds r0, r0, r1
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r2, #2
	movs r1, #9
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #3
	bl EnableBgSync
.L0809732C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08097334: .4byte gUnknown_08A186EC
.L08097338: .4byte gBg0Tm
.L0809733C: .4byte gBg1Tm

	THUMB_FUNC_END ClearPrepScreenMenu

	THUMB_FUNC_START PrepScreenMenuExists
PrepScreenMenuExists: @ 0x08097340
	push {lr}
	ldr r0, .L08097350  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	bne .L08097354
	movs r0, #0
	b .L08097356
	.align 2, 0
.L08097350: .4byte gUnknown_08A186EC
.L08097354:
	movs r0, #1
.L08097356:
	pop {r1}
	bx r1

	THUMB_FUNC_END PrepScreenMenuExists

	THUMB_FUNC_START DisablePrepScreenMenu
DisablePrepScreenMenu: @ 0x0809735C
	push {lr}
	ldr r0, .L08097374  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L0809736E
	movs r1, #2
	bl Proc_Goto
.L0809736E:
	pop {r0}
	bx r0
	.align 2, 0
.L08097374: .4byte gUnknown_08A186EC

	THUMB_FUNC_END DisablePrepScreenMenu

	THUMB_FUNC_START func_08097378
func_08097378: @ 0x08097378
	push {lr}
	ldr r0, .L08097390  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L0809738A
	movs r1, #0
	bl Proc_Goto
.L0809738A:
	pop {r0}
	bx r0
	.align 2, 0
.L08097390: .4byte gUnknown_08A186EC

	THUMB_FUNC_END func_08097378

	THUMB_FUNC_START EnablePrepScreenMenu
EnablePrepScreenMenu: @ 0x08097394
	push {lr}
	ldr r0, .L080973AC  @ gUnknown_08A186EC
	bl FindProc
	cmp r0, #0
	beq .L080973A6
	movs r1, #1
	bl Proc_Goto
.L080973A6:
	pop {r0}
	bx r0
	.align 2, 0
.L080973AC: .4byte gUnknown_08A186EC

	THUMB_FUNC_END EnablePrepScreenMenu

	THUMB_FUNC_START func_080973B0
func_080973B0: @ 0x080973B0
	adds r3, r0, #0
	movs r2, #0
	movs r1, #0
	strh r1, [r3, #0x2a]
	adds r0, #0x2c
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	strh r1, [r3, #0x2e]
	strh r1, [r3, #0x32]
	adds r0, #7
	strb r2, [r0]
	ldrh r0, [r3, #0x2e]
	strh r0, [r3, #0x30]
	movs r0, #0xe4
	lsls r0, r0, #2
	strh r0, [r3, #0x36]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #0x38]
	adds r0, r3, #0
	adds r0, #0x3a
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bx lr

	THUMB_FUNC_END func_080973B0

	THUMB_FUNC_START func_080973E4
func_080973E4: @ 0x080973E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r4, r0, #0
	ldrh r1, [r4, #0x36]
	ldrh r0, [r4, #0x38]
	adds r1, r1, r0
	mov r9, r1
	adds r1, r4, #0
	adds r1, #0x34
	ldrh r0, [r4, #0x32]
	ldrb r1, [r1]
	cmp r0, r1
	bhi .L08097408
	b .L0809762A
.L08097408:
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x2d
	mov sl, r0
	adds r0, #0xd
	str r0, [sp, #0x14]
	adds r1, r4, #0
	adds r1, #0x3b
	str r1, [sp, #0x18]
	mov r2, sl
	ldrb r2, [r2]
	cmp r6, r2
	bge .L08097448
	movs r5, #1
.L08097424:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r2, r2, r5
	mov r3, r9
	str r3, [sp]
	movs r0, #4
	ldr r3, .L08097534  @ gUnknown_08A18744
	bl PutSpriteExt
	adds r5, #8
	adds r6, #1
	mov r0, sl
	ldrb r0, [r0]
	cmp r6, r0
	blt .L08097424
.L08097448:
	cmp r6, #0
	bne .L0809744E
	b .L080975D8
.L0809744E:
	mov r1, sl
	ldrb r0, [r1]
	lsls r7, r0, #0x13
	ldrh r2, [r4, #0x2e]
	str r2, [sp, #0xc]
	ldrh r5, [r4, #0x32]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r6, [r0]
	str r0, [sp, #0x10]
	movs r3, #0x2c
	adds r3, r3, r4
	mov r8, r3
	cmp r5, r6
	bhi .L0809746E
	b .L080975A6
.L0809746E:
	adds r0, r7, #0
	adds r1, r5, #0
	bl __udivsi3
	str r0, [sp, #4]
	adds r0, r7, #0
	muls r0, r6, r0
	adds r1, r5, #0
	bl __udivsi3
	str r0, [sp, #8]
	ldr r5, [sp, #0xc]
	cmp r5, #0
	beq .L080974AE
	ldrh r1, [r4, #0x2a]
	ldr r6, .L08097538  @ 0x00002001
	adds r1, r1, r6
	mov r0, r8
	ldrb r2, [r0]
	subs r2, #8
	ldr r3, .L0809753C  @ gUnknown_08A187F0
	ldr r5, [sp, #0x14]
	ldrb r0, [r5]
	lsrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, r9
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
.L080974AE:
	movs r6, #0
	ldr r0, [sp, #8]
	lsrs r5, r0, #0x13
	cmp r6, r5
	bcs .L080974E6
	ldr r1, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r0, r1, #0
	muls r0, r2, r0
	lsrs r0, r0, #0x14
	adds r7, r0, #1
.L080974C4:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r3, r8
	ldrb r2, [r3]
	adds r2, r2, r7
	lsls r0, r6, #3
	adds r2, r2, r0
	ldr r0, .L08097540  @ gUnknown_08A1879C
	ldr r3, [r0, #0x20]
	mov r0, r9
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	adds r6, #1
	cmp r6, r5
	bcc .L080974C4
.L080974E6:
	ldrh r0, [r4, #0x2e]
	lsrs r0, r0, #4
	ldr r1, [sp, #0x10]
	ldrb r1, [r1]
	adds r0, r0, r1
	ldrh r2, [r4, #0x32]
	cmp r0, r2
	bne .L08097544
	mov r3, sl
	ldrb r0, [r3]
	lsls r0, r0, #3
	ldr r5, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r1, r5, #0
	muls r1, r2, r1
	lsrs r2, r1, #0x14
	lsls r3, r6, #3
	adds r1, r2, r3
	subs r0, r0, r1
	cmp r0, #0
	beq .L080975A6
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	adds r2, #1
	mov r5, r8
	ldrb r5, [r5]
	adds r2, r2, r5
	adds r2, r2, r3
	ldr r3, .L08097540  @ gUnknown_08A1879C
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, r9
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
	b .L080975A6
	.align 2, 0
.L08097534: .4byte gUnknown_08A18744
.L08097538: .4byte 0x00002001
.L0809753C: .4byte gUnknown_08A187F0
.L08097540: .4byte gUnknown_08A1879C
.L08097544:
	ldr r0, [sp, #8]
	lsrs r5, r0, #0x10
	movs r0, #7
	ands r5, r0
	cmp r5, #0
	beq .L0809757C
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	ldr r3, [sp, #4]
	ldr r0, [sp, #0xc]
	adds r2, r3, #0
	muls r2, r0, r2
	lsrs r2, r2, #0x14
	adds r2, #1
	mov r3, r8
	ldrb r3, [r3]
	adds r2, r2, r3
	lsls r0, r6, #3
	adds r2, r2, r0
	ldr r3, .L0809763C  @ gUnknown_08A1879C
	lsls r0, r5, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r5, r9
	str r5, [sp]
	movs r0, #4
	bl PutSpriteExt
.L0809757C:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r6, sl
	ldrb r2, [r6]
	lsls r2, r2, #3
	mov r0, r8
	ldrb r0, [r0]
	adds r2, r2, r0
	adds r2, #2
	ldr r3, .L08097640  @ gUnknown_08A187F0
	ldr r5, [sp, #0x18]
	ldrb r0, [r5]
	lsrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	mov r6, r9
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
.L080975A6:
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r0, r8
	ldrb r2, [r0]
	subs r2, #7
	ldr r3, .L08097644  @ gUnknown_08A1874C
	mov r5, r9
	str r5, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrh r1, [r4, #0x2a]
	adds r1, #1
	mov r6, r8
	ldrb r2, [r6]
	mov r3, sl
	ldrb r0, [r3]
	lsls r0, r0, #3
	adds r0, #1
	adds r2, r2, r0
	ldr r3, .L08097648  @ gUnknown_08A18754
	str r5, [sp]
	movs r0, #4
	bl PutSpriteExt
.L080975D8:
	ldrh r1, [r4, #0x30]
	ldrh r0, [r4, #0x2e]
	cmp r1, r0
	beq .L08097600
	cmp r1, r0
	bls .L080975EC
	ldr r5, [sp, #0x14]
	ldrb r0, [r5]
	adds r0, #3
	strb r0, [r5]
.L080975EC:
	ldrh r0, [r4, #0x30]
	ldrh r6, [r4, #0x2e]
	cmp r0, r6
	bcs .L080975FC
	ldr r1, [sp, #0x18]
	ldrb r0, [r1]
	adds r0, #3
	strb r0, [r1]
.L080975FC:
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x30]
.L08097600:
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	adds r0, #1
	movs r2, #0
	ldr r3, [sp, #0x14]
	strb r0, [r3]
	ldr r1, [sp, #0x18]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r0, [r3]
	lsrs r0, r0, #3
	cmp r0, #5
	bls .L0809761E
	strb r2, [r3]
.L0809761E:
	ldr r5, [sp, #0x18]
	ldrb r0, [r5]
	lsrs r0, r0, #3
	cmp r0, #5
	bls .L0809762A
	strb r2, [r5]
.L0809762A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809763C: .4byte gUnknown_08A1879C
.L08097640: .4byte gUnknown_08A187F0
.L08097644: .4byte gUnknown_08A1874C
.L08097648: .4byte gUnknown_08A18754

	THUMB_FUNC_END func_080973E4

	THUMB_FUNC_START func_0809764C
func_0809764C: @ 0x0809764C
	push {lr}
	ldr r0, .L08097664  @ gUnknown_08A18808
	bl FindProc
	cmp r0, #0
	beq .L0809765E
	movs r1, #1
	bl Proc_Goto
.L0809765E:
	pop {r0}
	bx r0
	.align 2, 0
.L08097664: .4byte gUnknown_08A18808

	THUMB_FUNC_END func_0809764C

	THUMB_FUNC_START func_08097668
func_08097668: @ 0x08097668
	push {lr}
	ldr r0, .L08097680  @ gUnknown_08A18808
	bl FindProc
	cmp r0, #0
	beq .L0809767A
	movs r1, #0
	bl Proc_Goto
.L0809767A:
	pop {r0}
	bx r0
	.align 2, 0
.L08097680: .4byte gUnknown_08A18808

	THUMB_FUNC_END func_08097668

	THUMB_FUNC_START Delete6CMenuScroll
Delete6CMenuScroll: @ 0x08097684
	push {lr}
	ldr r0, .L08097694  @ gUnknown_08A18808
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L08097694: .4byte gUnknown_08A18808

	THUMB_FUNC_END Delete6CMenuScroll

	THUMB_FUNC_START Make6CMenuScroll
Make6CMenuScroll: @ 0x08097698
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080976A8  @ gUnknown_08A18808
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080976A8: .4byte gUnknown_08A18808

	THUMB_FUNC_END Make6CMenuScroll

	THUMB_FUNC_START func_080976AC
func_080976AC: @ 0x080976AC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080976C8  @ gUnknown_08A18808
	bl FindProc
	cmp r0, #0
	beq .L080976C2
	strh r4, [r0, #0x2a]
	adds r0, #0x2c
	strb r5, [r0]
.L080976C2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080976C8: .4byte gUnknown_08A18808

	THUMB_FUNC_END func_080976AC

	THUMB_FUNC_START func_080976CC
func_080976CC: @ 0x080976CC
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	lsls r3, r3, #0x18
	lsrs r5, r3, #0x18
	ldr r0, .L080976FC  @ gUnknown_08A18808
	bl FindProc
	cmp r0, #0
	beq .L080976F6
	adds r1, r0, #0
	adds r1, #0x2d
	strb r7, [r1]
	strh r6, [r0, #0x2e]
	strh r4, [r0, #0x32]
	adds r0, #0x34
	strb r5, [r0]
.L080976F6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080976FC: .4byte gUnknown_08A18808

	THUMB_FUNC_END func_080976CC

	THUMB_FUNC_START func_08097700
func_08097700: @ 0x08097700
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L08097738  @ gUnknown_08A19CAC
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0809773C  @ gUnknown_08A19C0C
	ldr r2, .L08097740  @ 0x06010000
	adds r1, r4, r2
	bl Decompress
	ldr r0, .L08097744  @ gUnknown_08A18808
	bl FindProc
	adds r2, r0, #0
	cmp r2, #0
	beq .L08097730
	asrs r0, r4, #5
	strh r0, [r2, #0x36]
	lsls r0, r5, #0xc
	strh r0, [r2, #0x38]
.L08097730:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L08097738: .4byte gUnknown_08A19CAC
.L0809773C: .4byte gUnknown_08A19C0C
.L08097740: .4byte 0x06010000
.L08097744: .4byte gUnknown_08A18808

	THUMB_FUNC_END func_08097700

	THUMB_FUNC_START func_08097748
func_08097748: @ 0x08097748
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	adds r4, r0, #0
	mov r8, r1
	mov r9, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x18]
	ldr r0, .L0809779C  @ gUnknown_08A18808
	adds r1, r4, #0
	bl SpawnProc
	adds r4, r0, #0
	mov r0, r8
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	adds r0, #0x2c
	mov r1, r9
	strb r1, [r0]
	ldr r0, .L080977A0  @ gUnknown_08A19CAC
	adds r1, r6, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080977A4  @ gUnknown_08A19C0C
	ldr r2, .L080977A8  @ 0x06010000
	adds r1, r5, r2
	bl Decompress
	asrs r5, r5, #5
	strh r5, [r4, #0x36]
	lsls r6, r6, #0xc
	strh r6, [r4, #0x38]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L0809779C: .4byte gUnknown_08A18808
.L080977A0: .4byte gUnknown_08A19CAC
.L080977A4: .4byte gUnknown_08A19C0C
.L080977A8: .4byte 0x06010000

	THUMB_FUNC_END func_08097748

	THUMB_FUNC_START func_080977AC
func_080977AC: @ 0x080977AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_SetCursor
	adds r0, r4, #0
	adds r1, r7, #0
	bl Text_DrawString
	adds r0, r4, #0
	mov r1, r8
	bl PutText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080977AC

	THUMB_FUNC_START func_080977EC
func_080977EC: @ 0x080977EC
	push {r4, r5, lr}
	adds r3, r0, #0
	ldr r5, .L08097800  @ gUnknown_02012F56
	ldrh r4, [r5]
	adds r2, r4, #0
	cmp r2, #0
	bne .L08097804
	strb r2, [r3]
	strh r2, [r1]
	b .L08097838
	.align 2, 0
.L08097800: .4byte gUnknown_02012F56
.L08097804:
	cmp r2, #7
	bhi .L08097816
	ldrb r0, [r3]
	cmp r0, r2
	bcc .L08097812
	subs r0, r4, #1
	strb r0, [r3]
.L08097812:
	movs r0, #0
	b .L08097836
.L08097816:
	ldrh r0, [r1]
	lsrs r0, r0, #4
	adds r2, r0, #7
	ldrh r0, [r5]
	cmp r2, r0
	bge .L0809782E
	ldrb r0, [r3]
	cmp r0, #6
	bne .L08097838
	movs r0, #5
	strb r0, [r3]
	b .L08097838
.L0809782E:
	cmp r2, r0
	ble .L08097838
	subs r0, #7
	lsls r0, r0, #4
.L08097836:
	strh r0, [r1]
.L08097838:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080977EC

	THUMB_FUNC_START func_08097840
func_08097840: @ 0x08097840
	push {lr}
	ldr r0, .L0809785C  @ 0x04000006
	ldrh r0, [r0]
	adds r3, r0, #0
	cmp r3, #0xa0
	bne .L08097864
	movs r3, #0
	ldr r0, .L08097860  @ gUnknown_02013458
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #4]
	b .L0809786C
	.align 2, 0
.L0809785C: .4byte 0x04000006
.L08097860: .4byte gUnknown_02013458
.L08097864:
	ldr r0, .L08097884  @ gUnknown_02013458
	cmp r3, #0xa0
	bls .L0809786C
	movs r3, #0
.L0809786C:
	ldr r2, .L08097888  @ 0x04000042
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r1, r1, #8
	ldrb r0, [r0, #1]
	orrs r0, r1
	strh r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
.L08097884: .4byte gUnknown_02013458
.L08097888: .4byte 0x04000042

	THUMB_FUNC_END func_08097840

	THUMB_FUNC_START func_0809788C
func_0809788C: @ 0x0809788C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r2, .L08097908  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov ip, r2
	cmp r0, #0
	bge .L08097918
	movs r0, #0x96
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, .L0809790C  @ gUnknown_02012F58
	mov r9, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, .L08097910  @ gUnknown_02013458
	mov sl, r1
	mov r7, r9
	movs r4, #0
	movs r2, #0xf0
	movs r6, #0xa0
	lsls r6, r6, #2
	ldr r5, .L08097914  @ 0x00000281
.L080978DA:
	lsls r0, r3, #2
	adds r0, r0, r7
	strb r4, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r6
	strb r4, [r1]
	adds r0, r0, r5
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls .L080978DA
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	b .L08097960
	.align 2, 0
.L08097908: .4byte gDispIo
.L0809790C: .4byte gUnknown_02012F58
.L08097910: .4byte gUnknown_02013458
.L08097914: .4byte 0x00000281
.L08097918:
	movs r0, #0
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, .L080979CC  @ gUnknown_02012F58
	mov r9, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, .L080979D0  @ gUnknown_02013458
	mov sl, r1
	mov r6, r9
	movs r2, #0x78
	movs r5, #0xa0
	lsls r5, r5, #2
	ldr r4, .L080979D4  @ 0x00000281
.L08097934:
	lsls r0, r3, #2
	adds r0, r0, r6
	strb r2, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r5
	strb r2, [r1]
	adds r0, r0, r4
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls .L08097934
	mov r2, ip
	adds r2, #0x2f
	movs r1, #0
	movs r0, #0x78
	strb r0, [r2]
	adds r2, #4
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x2e
.L08097960:
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x35
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	mov r0, r9
	mov r1, sl
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #2
	add r0, r9
	str r0, [r1, #4]
	ldr r0, .L080979D8  @ func_08097840
	bl SetOnHBlankA
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080979CC: .4byte gUnknown_02012F58
.L080979D0: .4byte gUnknown_02013458
.L080979D4: .4byte 0x00000281
.L080979D8: .4byte func_08097840

	THUMB_FUNC_END func_0809788C

	THUMB_FUNC_START func_080979DC
func_080979DC: @ 0x080979DC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r0, #0x2a
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldr r0, [r6, #0x2c]
	adds r0, r0, r1
	str r0, [r6, #0x2c]
	cmp r0, #0x96
	ble .L080979FA
	movs r0, #0x96
	str r0, [r6, #0x2c]
.L080979FA:
	ldr r0, [r6, #0x2c]
	cmp r0, #0
	bge .L08097A04
	movs r0, #0
	str r0, [r6, #0x2c]
.L08097A04:
	movs r1, #0
	movs r0, #0x29
	adds r0, r0, r6
	mov r9, r0
	ldr r7, .L08097A44  @ gUnknown_02013458
	movs r2, #0x78
	mov r8, r2
.L08097A12:
	ldr r0, [r6, #0x2c]
	lsls r5, r1, #0x10
	cmp r0, #0
	ble .L08097A32
	adds r4, r0, #0
	muls r4, r0, r4
	adds r0, r4, #0
	asrs r4, r5, #0x10
	adds r1, r4, #0
	subs r1, #0x50
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	subs r0, r0, r1
	cmp r0, #0
	bge .L08097A48
.L08097A32:
	ldr r0, [r7, #4]
	asrs r1, r5, #0xe
	adds r0, r1, r0
	mov r4, r8
	strb r4, [r0]
	ldr r0, [r7, #4]
	adds r1, r1, r0
	strb r4, [r1, #1]
	b .L08097A6E
	.align 2, 0
.L08097A44: .4byte gUnknown_02013458
.L08097A48:
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	ble .L08097A58
	movs r3, #0x78
.L08097A58:
	ldr r1, [r7, #4]
	lsls r2, r4, #2
	adds r1, r2, r1
	mov r4, r8
	subs r0, r4, r3
	strb r0, [r1]
	ldr r0, [r7, #4]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r0, #0x78
	strb r0, [r2, #1]
.L08097A6E:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r5, r1
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	ble .L08097A12
	mov r2, r9
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x28
	bne .L08097A92
	adds r0, r6, #0
	bl Proc_Break
.L08097A92:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080979DC

	THUMB_FUNC_START func_08097AA0
func_08097AA0: @ 0x08097AA0
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08097AA0

	THUMB_FUNC_START func_08097AAC
func_08097AAC: @ 0x08097AAC
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L08097AC8  @ gUnknown_08A18840
	adds r1, r2, #0
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L08097AC8: .4byte gUnknown_08A18840

	THUMB_FUNC_END func_08097AAC

	THUMB_FUNC_START func_08097ACC
func_08097ACC: @ 0x08097ACC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r1, r0, #0
	adds r1, #0x29
	movs r7, #0
	strb r7, [r1]
	ldr r1, .L08097B6C  @ gDispIo
	mov ip, r1
	ldrb r1, [r1, #1]
	movs r2, #1
	mov r8, r2
	mov r6, r8
	orrs r1, r6
	movs r2, #2
	mov r9, r2
	mov r6, r9
	orrs r1, r6
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	movs r2, #0x21
	negs r2, r2
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	movs r2, #0x7f
	ands r1, r2
	mov r2, ip
	strb r1, [r2, #1]
	adds r2, #0x35
	ldrb r1, [r2]
	mov r6, r8
	orrs r1, r6
	mov r6, r9
	orrs r1, r6
	orrs r1, r5
	orrs r1, r4
	orrs r1, r3
	strb r1, [r2]
	mov r3, ip
	adds r3, #0x36
	ldrb r2, [r3]
	movs r1, #2
	negs r1, r1
	ands r1, r2
	movs r2, #3
	negs r2, r2
	ands r1, r2
	subs r2, #2
	ands r1, r2
	subs r2, #4
	ands r1, r2
	subs r2, #8
	ands r1, r2
	strb r1, [r3]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble .L08097B70
	mov r0, ip
	adds r0, #0x2f
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	b .L08097B8A
	.align 2, 0
.L08097B6C: .4byte gDispIo
.L08097B70:
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0x78
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x33
	movs r1, #0x50
	strb r1, [r2]
	subs r2, #5
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r1, [r0]
.L08097B8A:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08097ACC

	THUMB_FUNC_START func_08097B98
func_08097B98: @ 0x08097B98
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r4, .L08097C18  @ gDispIo
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	ldrb r0, [r2]
	movs r1, #0xf
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #7
	muls r0, r1, r0
	movs r1, #0xe1
	bl __divsi3
	movs r1, #0xa0
	lsls r1, r1, #2
	subs r1, r1, r0
	asrs r5, r1, #4
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble .L08097C1C
	lsls r1, r5, #1
	adds r2, r1, r5
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r1, [r0]
	movs r3, #0x10
	negs r3, r3
	adds r0, r3, #0
	subs r0, r0, r2
	adds r2, r4, #0
	adds r2, #0x2e
	strb r0, [r2]
	movs r2, #0x60
	negs r2, r2
	adds r0, r2, #0
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x32
	strb r0, [r1]
	b .L08097C40
	.align 2, 0
.L08097C18: .4byte gDispIo
.L08097C1C:
	lsls r2, r5, #1
	adds r1, r2, r5
	movs r0, #0x78
	subs r0, r0, r1
	adds r3, r4, #0
	adds r3, #0x2f
	strb r0, [r3]
	movs r0, #0x50
	subs r0, r0, r2
	adds r3, #4
	strb r0, [r3]
	adds r1, #0x78
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r2, #0x50
	adds r0, #4
	strb r2, [r0]
.L08097C40:
	adds r2, r4, #0
	adds r2, #0x35
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r3, #3
	negs r3, r3
	mov sl, r3
	ands r0, r3
	movs r1, #5
	negs r1, r1
	mov r9, r1
	ands r0, r1
	subs r3, #6
	mov r8, r3
	ands r0, r3
	movs r7, #0x11
	negs r7, r7
	ands r0, r7
	strb r0, [r2]
	cmp r5, #0x27
	ble .L08097CB4
	adds r0, r6, #0
	bl Proc_Break
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble .L08097CB4
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	mov r1, sl
	ands r0, r1
	mov r2, r9
	ands r0, r2
	mov r3, r8
	ands r0, r3
	ands r0, r7
	strb r0, [r4, #1]
.L08097CB4:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08097B98

	THUMB_FUNC_START func_08097CC4
func_08097CC4: @ 0x08097CC4
	movs r0, #0
	bx lr

	THUMB_FUNC_END func_08097CC4

	THUMB_FUNC_START func_08097CC8
func_08097CC8: @ 0x08097CC8
	push {lr}
	bl GetConvoyItemCount
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097CC8

	THUMB_FUNC_START func_08097CD8
func_08097CD8: @ 0x08097CD8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	ldrh r1, [r4, #0x2c]
	cmp r0, r1
	bne .L08097D04
	ldr r2, .L08097D10  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	bl Proc_Break
.L08097D04:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08097D10: .4byte gDispIo

	THUMB_FUNC_END func_08097CD8

	THUMB_FUNC_START func_08097D14
func_08097D14: @ 0x08097D14
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, .L08097D4C  @ gUnknown_08A18888
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2a]
	ldr r2, .L08097D50  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08097D4C: .4byte gUnknown_08A18888
.L08097D50: .4byte gDispIo

	THUMB_FUNC_END func_08097D14

	THUMB_FUNC_START func_08097D54
func_08097D54: @ 0x08097D54
	push {lr}
	cmp r0, #0
	beq .L08097D64
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L08097D64:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08097D54

	THUMB_FUNC_START func_08097D68
func_08097D68: @ 0x08097D68
	push {lr}
	cmp r0, #0
	beq .L08097D7C
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	cmp r0, #0
	beq .L08097D7C
	subs r0, #1
	strb r0, [r1]
.L08097D7C:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08097D68

	THUMB_FUNC_START func_08097D80
func_08097D80: @ 0x08097D80
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L08097DA4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf3
	ands r0, r1
	cmp r0, #0
	beq .L08097D9C
	bl MoveableHelpBox_OnEnd
	adds r0, r4, #0
	bl Proc_Break
.L08097D9C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08097DA4: .4byte gKeySt

	THUMB_FUNC_END func_08097D80

	THUMB_FUNC_START func_08097DA8
func_08097DA8: @ 0x08097DA8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, #0
	bge .L08097DC4
	cmp r1, #0
	bge .L08097DC4
	bl GetUiHandPrevDisplayX
	adds r4, r0, #0
	bl GetUiHandPrevDisplayY
	adds r1, r0, #0
.L08097DC4:
	adds r0, r4, #0
	adds r2, r5, #0
	bl ShowTextHelpBox
	ldr r0, .L08097DDC  @ gUnknown_08A188A8
	adds r1, r6, #0
	bl SpawnProcLocking
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L08097DDC: .4byte gUnknown_08A188A8

	THUMB_FUNC_END func_08097DA8

	THUMB_FUNC_START func_08097DE0
func_08097DE0: @ 0x08097DE0
	push {r4, lr}
	adds r4, r1, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097E00
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	bne .L08097E00
	movs r0, #1
	b .L08097E02
.L08097E00:
	movs r0, #0
.L08097E02:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097DE0

	THUMB_FUNC_START func_08097E08
func_08097E08: @ 0x08097E08
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
.L08097E10:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne .L08097E2A
	adds r6, #1
.L08097E2A:
	adds r4, #1
	cmp r4, #4
	ble .L08097E10
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097E08

	THUMB_FUNC_START func_08097E38
func_08097E38: @ 0x08097E38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldr r1, [r4, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x28]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	ands r0, r1
	cmp r0, #0
	bne .L08097E6A
	adds r0, r4, #0
	bl CouldUnitUseAnyWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097E6A
	adds r0, r4, #0
	bl func_08097E08
	cmp r0, #0
	beq .L08097E6A
	movs r0, #1
	b .L08097E6C
.L08097E6A:
	movs r0, #0
.L08097E6C:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097E38

	THUMB_FUNC_START func_08097E74
func_08097E74: @ 0x08097E74
	push {r4, lr}
	movs r2, #0
	ldr r0, [r0]
	ldrb r3, [r0, #4]
	ldr r1, .L08097E8C  @ gUnknown_08205BFC
.L08097E7E:
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r3, r0
	bne .L08097E90
	movs r0, #0
	b .L08097E9A
	.align 2, 0
.L08097E8C: .4byte gUnknown_08205BFC
.L08097E90:
	adds r1, #2
	adds r2, #1
	cmp r2, #0xa
	bls .L08097E7E
	movs r0, #1
.L08097E9A:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097E74

	THUMB_FUNC_START func_08097EA0
func_08097EA0: @ 0x08097EA0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, r5
	beq .L08097F3A
	bl CheckGameLinkArenaBit
	cmp r0, #0
	beq .L08097F3A
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L08097EF6
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097EF6
	adds r0, r4, #0
	bl func_08097E08
	cmp r0, #1
	bgt .L08097EF6
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097F36
.L08097EF6:
	ldr r0, [r5, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L08097F3A
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097F3A
	adds r0, r5, #0
	bl func_08097E08
	cmp r0, #1
	bgt .L08097F3A
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L08097F3A
.L08097F36:
	movs r0, #0
	b .L08097F3C
.L08097F3A:
	movs r0, #1
.L08097F3C:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097EA0

	THUMB_FUNC_START func_08097F44
func_08097F44: @ 0x08097F44
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl CheckGameLinkArenaBit
	cmp r0, #0
	beq .L08097F90
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L08097F90
	lsls r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097F90
	adds r0, r4, #0
	bl func_08097E08
	cmp r0, #1
	bne .L08097F90
	adds r0, r4, #0
	adds r1, r6, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L08097F90
	movs r0, #0
	b .L08097F92
.L08097F90:
	movs r0, #1
.L08097F92:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097F44

	THUMB_FUNC_START func_08097F98
func_08097F98: @ 0x08097F98
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl CheckGameLinkArenaBit
	cmp r0, #0
	beq .L08097FD4
	ldr r0, [r4, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L08097FD4
	lsls r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl func_08097DE0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08097FD4
	adds r0, r4, #0
	bl func_08097E08
	cmp r0, #1
	bne .L08097FD4
	movs r0, #0
	b .L08097FD6
.L08097FD4:
	movs r0, #1
.L08097FD6:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08097F98

	THUMB_FUNC_START func_08097FDC
func_08097FDC: @ 0x08097FDC
	push {r4, lr}
	movs r1, #0
	ldr r4, .L08098008  @ gUnknown_0202BD31
	ldr r2, .L0809800C  @ gUnknown_02013460
	ldr r3, .L08098010  @ gUnknown_08A1D448
.L08097FE6:
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	lsls r0, r0, #4
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0xf
	ble .L08097FE6
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08098008: .4byte gUnknown_0202BD31
.L0809800C: .4byte gUnknown_02013460
.L08098010: .4byte gUnknown_08A1D448

	THUMB_FUNC_END func_08097FDC

	THUMB_FUNC_START func_08098014
func_08098014: @ 0x08098014
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r4, .L08098034  @ gUnknown_08A188C0
.L0809801C:
	adds r0, r6, #0
	bl GetItemKind
	ldrb r1, [r4]
	cmp r0, r1
	blt .L08098038
	ldrb r1, [r4, #1]
	cmp r0, r1
	bgt .L08098038
	adds r0, r5, #0
	b .L08098042
	.align 2, 0
.L08098034: .4byte gUnknown_08A188C0
.L08098038:
	adds r4, #4
	adds r5, #1
	cmp r5, #8
	ble .L0809801C
	movs r0, #8
.L08098042:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08098014

	THUMB_FUNC_START func_08098048
func_08098048: @ 0x08098048
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldr r0, .L08098100  @ gUnknown_02012914
	mov r8, r0
	ldr r0, .L08098104  @ gUnknown_02012F56
	movs r1, #0
	strh r1, [r0]
	movs r4, #0
	ldr r1, .L08098108  @ gUnknown_02012F54
	mov sl, r0
	adds r2, r1, #0
	ldrh r1, [r2]
	cmp r4, r1
	bge .L080980B4
	ldr r1, .L0809810C  @ gUnknown_08A188C0
	mov r3, r9
	lsls r0, r3, #2
	adds r6, r0, r1
	mov r7, sl
.L08098078:
	ldr r1, .L08098110  @ gUnknown_020122D4
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	str r2, [sp]
	bl GetItemKind
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, [sp]
	ldrb r1, [r6]
	cmp r0, r1
	bcc .L080980AA
	ldrb r3, [r6, #1]
	cmp r0, r3
	bhi .L080980AA
	ldr r0, [r5]
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	stm r1!, {r0}
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
.L080980AA:
	adds r4, #1
	ldr r0, .L08098108  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	blt .L08098078
.L080980B4:
	movs r4, #0
	ldrh r2, [r2]
	cmp r4, r2
	bge .L080980F6
	ldr r1, .L0809810C  @ gUnknown_08A188C0
	mov r2, r9
	lsls r0, r2, #2
	adds r6, r0, r1
.L080980C4:
	ldr r1, .L08098110  @ gUnknown_020122D4
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemKind
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r3, [r6]
	cmp r0, r3
	bcc .L080980E0
	ldrb r1, [r6, #1]
	cmp r0, r1
	bls .L080980EC
.L080980E0:
	ldr r0, [r5]
	mov r2, r8
	adds r2, #4
	mov r8, r2
	subs r2, #4
	stm r2!, {r0}
.L080980EC:
	adds r4, #1
	ldr r0, .L08098108  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	blt .L080980C4
.L080980F6:
	movs r2, #1
	ldr r5, .L08098100  @ gUnknown_02012914
	ldr r3, .L08098104  @ gUnknown_02012F56
	mov sl, r3
	b .L0809811A
	.align 2, 0
.L08098100: .4byte gUnknown_02012914
.L08098104: .4byte gUnknown_02012F56
.L08098108: .4byte gUnknown_02012F54
.L0809810C: .4byte gUnknown_08A188C0
.L08098110: .4byte gUnknown_020122D4
.L08098114:
	lsls r0, r2, #1
	adds r0, r0, r2
	adds r2, r0, #1
.L0809811A:
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #3
	str r2, [sp]
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, [sp]
	cmp r2, r0
	blt .L08098114
	cmp r2, #0
	ble .L080981BC
.L08098134:
	adds r4, r2, #0
	mov r3, sl
	ldrh r3, [r3]
	cmp r2, r3
	bge .L080981AE
	ldr r0, .L080981D8  @ gUnknown_02012F56
	mov sl, r0
.L08098142:
	subs r7, r4, r2
	adds r4, #1
	mov r9, r4
	cmp r7, #0
	blt .L080981A2
	ldr r1, .L080981DC  @ gUnknown_02012914
	mov r8, r1
.L08098150:
	lsls r0, r7, #2
	mov r3, r8
	adds r6, r0, r3
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIid
	adds r4, r0, #0
	ldr r2, [sp]
	adds r0, r7, r2
	lsls r0, r0, #2
	mov r1, r8
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemIid
	ldr r2, [sp]
	cmp r4, r0
	bgt .L08098194
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIid
	adds r4, r0, #0
	ldrh r0, [r5, #2]
	bl GetItemIid
	ldr r2, [sp]
	cmp r4, r0
	bne .L080981A2
	ldrh r0, [r6, #2]
	ldrh r3, [r5, #2]
	cmp r0, r3
	bls .L0809819C
.L08098194:
	ldr r1, [r6]
	ldr r0, [r5]
	str r0, [r6]
	str r1, [r5]
.L0809819C:
	subs r7, r7, r2
	cmp r7, #0
	bge .L08098150
.L080981A2:
	mov r4, r9
	ldr r0, .L080981D8  @ gUnknown_02012F56
	ldr r5, .L080981DC  @ gUnknown_02012914
	ldrh r0, [r0]
	cmp r4, r0
	blt .L08098142
.L080981AE:
	adds r0, r2, #0
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	cmp r2, #0
	bgt .L08098134
.L080981BC:
	ldr r1, .L080981E0  @ gUnknown_020122D4
	movs r2, #0xc8
	lsls r2, r2, #1
	adds r0, r5, #0
	bl CpuFastSet
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080981D8: .4byte gUnknown_02012F56
.L080981DC: .4byte gUnknown_02012914
.L080981E0: .4byte gUnknown_020122D4

	THUMB_FUNC_END func_08098048

	THUMB_FUNC_START SomethingPrepListRelated
SomethingPrepListRelated: @ 0x080981E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov sl, r1
	mov r9, r2
	ldr r6, .L080982AC  @ gUnknown_020122D4
	ldr r1, .L080982B0  @ gUnknown_02012F54
	movs r0, #0
	strh r0, [r1]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L0809825E
	movs r5, #1
.L08098206:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	adds r7, r5, #1
	cmp r4, #0
	beq .L08098258
	ldr r0, [r4]
	cmp r0, #0
	beq .L08098258
	ldr r0, [r4, #0xc]
	ldr r1, .L080982B4  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L08098258
	cmp r4, r8
	beq .L08098258
	adds r0, r4, #0
	bl GetUnitItemCount
	adds r5, r0, #0
	movs r2, #0
	cmp r2, r5
	bge .L08098258
	ldr r3, .L080982B0  @ gUnknown_02012F54
	adds r1, r4, #0
	adds r1, #0x1e
.L0809823C:
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	strb r0, [r6]
	ldrh r0, [r1]
	strh r0, [r6, #2]
	strb r2, [r6, #1]
	adds r6, #4
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r1, #2
	adds r2, #1
	cmp r2, r5
	blt .L0809823C
.L08098258:
	adds r5, r7, #0
	cmp r5, #0x3f
	ble .L08098206
.L0809825E:
	movs r0, #1
	mov r1, r9
	ands r0, r1
	cmp r0, #0
	beq .L08098298
	bl GetConvoyItemArray
	adds r1, r0, #0
	movs r2, #0
	ldrh r0, [r1]
	cmp r0, #0
	beq .L08098298
	movs r4, #0
	ldr r3, .L080982B0  @ gUnknown_02012F54
.L0809827A:
	ldrh r0, [r1]
	strh r0, [r6, #2]
	strb r4, [r6]
	strb r2, [r6, #1]
	adds r6, #4
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x63
	bgt .L08098298
	ldrh r0, [r1]
	cmp r0, #0
	bne .L0809827A
.L08098298:
	mov r0, sl
	bl func_08098048
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080982AC: .4byte gUnknown_020122D4
.L080982B0: .4byte gUnknown_02012F54
.L080982B4: .4byte 0x00010004

	THUMB_FUNC_END SomethingPrepListRelated

	THUMB_FUNC_START func_080982B8
func_080982B8: @ 0x080982B8
	push {r4, r5, lr}
	bl ClearConvoyItems
	movs r4, #0
	ldr r0, .L080982F4  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	bcs .L080982EC
	ldr r5, .L080982F8  @ gUnknown_020122D4
.L080982CA:
	lsls r0, r4, #2
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080982DE
	ldrh r0, [r1, #2]
	cmp r0, #0
	beq .L080982DE
	bl AddItemToConvoy
.L080982DE:
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, .L080982F4  @ gUnknown_02012F54
	ldrh r0, [r0]
	cmp r4, r0
	bcc .L080982CA
.L080982EC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080982F4: .4byte gUnknown_02012F54
.L080982F8: .4byte gUnknown_020122D4

	THUMB_FUNC_END func_080982B8

	THUMB_FUNC_START func_080982FC
func_080982FC: @ 0x080982FC
	push {r4, r5, lr}
	bl ClearConvoyItems
	movs r4, #0
	movs r5, #0x88
.L08098306:
	subs r0, r5, r4
	bl AddItemToConvoy
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0x63
	bls .L08098306
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080982FC

	THUMB_FUNC_START func_0809831C
func_0809831C: @ 0x0809831C
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r2, #0
	movs r1, #0
	movs r4, #1
.L08098328:
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r4
	cmp r0, #0
	beq .L08098334
	adds r2, #1
.L08098334:
	adds r1, #1
	cmp r1, #0xf
	ble .L08098328
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809831C

	THUMB_FUNC_START func_08098344
func_08098344: @ 0x08098344
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r3, #0
	movs r2, #0
	movs r1, #1
.L08098352:
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq .L08098368
	cmp r3, r5
	bne .L08098366
	adds r0, r1, #0
	lsls r0, r2
	b .L08098370
.L08098366:
	adds r3, #1
.L08098368:
	adds r2, #1
	cmp r2, #0xf
	ble .L08098352
	movs r0, #0
.L08098370:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08098344

	THUMB_FUNC_START func_08098378
func_08098378: @ 0x08098378
	push {lr}
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
	movs r3, #1
.L08098382:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq .L08098390
	adds r0, r1, #0
	b .L08098398
.L08098390:
	adds r1, #1
	cmp r1, #0xf
	ble .L08098382
	movs r0, #0
.L08098398:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08098378

	THUMB_FUNC_START CanUnitPrepScreenUse
CanUnitPrepScreenUse: @ 0x0809839C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl GetUnitItemCount
	adds r6, r0, #0
	movs r4, #0
	cmp r4, r6
	bge .L080983CA
.L080983AC:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl CanUnitUseItemPrepScreen
	cmp r0, #0
	beq .L080983C4
	movs r0, #1
	b .L080983CC
.L080983C4:
	adds r4, #1
	cmp r4, r6
	blt .L080983AC
.L080983CA:
	movs r0, #0
.L080983CC:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END CanUnitPrepScreenUse

	THUMB_FUNC_START func_080983D4
func_080983D4: @ 0x080983D4
	push {lr}
	ldr r0, .L08098400  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls .L080983E6
	movs r2, #0
.L080983E6:
	cmp r2, #0
	bne .L080983F0
	ldr r1, .L08098404  @ 0x04000012
	movs r0, #0xf8
	strh r0, [r1]
.L080983F0:
	cmp r2, #0x48
	bne .L080983FA
	ldr r1, .L08098404  @ 0x04000012
	movs r0, #0xfc
	strh r0, [r1]
.L080983FA:
	pop {r0}
	bx r0
	.align 2, 0
.L08098400: .4byte 0x04000006
.L08098404: .4byte 0x04000012

	THUMB_FUNC_END func_080983D4

	THUMB_FUNC_START func_08098408
func_08098408: @ 0x08098408
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #0xff
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	negs r0, r0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	strh r0, [r4, #0x34]
	str r0, [r4, #0x48]
	str r0, [r4, #0x44]
	bl func_08096484
	adds r1, r4, #0
	adds r1, #0x2c
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08098408

	THUMB_FUNC_START func_08098448
func_08098448: @ 0x08098448
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L08098468  @ gUnknown_08A1B1FC
	ldr r1, .L0809846C  @ 0x06013000
	bl Decompress
	ldr r0, .L08098470  @ gUnknown_08A1B638
	ldr r1, [r4, #0x34]
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08098468: .4byte gUnknown_08A1B1FC
.L0809846C: .4byte 0x06013000
.L08098470: .4byte gUnknown_08A1B638

	THUMB_FUNC_END func_08098448

	THUMB_FUNC_START func_08098474
func_08098474: @ 0x08098474
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq .L0809849C
	ldr r1, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	ldr r3, .L080984A4  @ gUnknown_08A18928
	ldr r0, [r4, #0x34]
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0xb0
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
.L0809849C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080984A4: .4byte gUnknown_08A18928

	THUMB_FUNC_END func_08098474

	THUMB_FUNC_START func_080984A8
func_080984A8: @ 0x080984A8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, .L080984C8  @ gUnknown_08A18944
	bl SpawnProc
	movs r1, #0
	str r1, [r0, #0x38]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080984C8: .4byte gUnknown_08A18944

	THUMB_FUNC_END func_080984A8

	THUMB_FUNC_START func_080984CC
func_080984CC: @ 0x080984CC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080984E8  @ gUnknown_08A18944
	bl FindProc
	movs r1, #1
	str r1, [r0, #0x38]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080984E8: .4byte gUnknown_08A18944

	THUMB_FUNC_END func_080984CC

	THUMB_FUNC_START func_080984EC
func_080984EC: @ 0x080984EC
	push {lr}
	ldr r0, .L080984FC  @ gUnknown_08A18944
	bl FindProc
	movs r1, #0
	str r1, [r0, #0x38]
	pop {r0}
	bx r0
	.align 2, 0
.L080984FC: .4byte gUnknown_08A18944

	THUMB_FUNC_END func_080984EC

	THUMB_FUNC_START func_08098500
func_08098500: @ 0x08098500
	push {lr}
	ldr r0, .L08098510  @ gUnknown_08A18944
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L08098510: .4byte gUnknown_08A18944

	THUMB_FUNC_END func_08098500

	THUMB_FUNC_START func_08098514
func_08098514: @ 0x08098514
	push {lr}
	ldr r0, .L08098528  @ gUiFramePaletteA
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
.L08098528: .4byte gUiFramePaletteA

	THUMB_FUNC_END func_08098514

	THUMB_FUNC_START func_0809852C
func_0809852C: @ 0x0809852C
	push {lr}
	sub sp, #4
	adds r2, r0, #0
	ldr r0, [r2, #0x34]
	cmp r0, #0
	beq .L0809854A
	ldr r1, [r2, #0x2c]
	ldr r2, [r2, #0x30]
	ldr r3, .L08098550  @ gUnknown_08A18964
	movs r0, #0x96
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
.L0809854A:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L08098550: .4byte gUnknown_08A18964

	THUMB_FUNC_END func_0809852C

	THUMB_FUNC_START func_08098554
func_08098554: @ 0x08098554
	push {lr}
	adds r1, r0, #0
	ldr r0, .L0809856C  @ gUnknown_08A1898C
	bl SpawnProc
	movs r1, #0
	str r1, [r0, #0x34]
	str r1, [r0, #0x2c]
	str r1, [r0, #0x30]
	pop {r0}
	bx r0
	.align 2, 0
.L0809856C: .4byte gUnknown_08A1898C

	THUMB_FUNC_END func_08098554

	THUMB_FUNC_START func_08098570
func_08098570: @ 0x08098570
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L0809858C  @ gUnknown_08A1898C
	bl FindProc
	movs r1, #1
	str r1, [r0, #0x34]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809858C: .4byte gUnknown_08A1898C

	THUMB_FUNC_END func_08098570

	THUMB_FUNC_START func_08098590
func_08098590: @ 0x08098590
	push {lr}
	ldr r0, .L080985A0  @ gUnknown_08A1898C
	bl FindProc
	movs r1, #0
	str r1, [r0, #0x34]
	pop {r0}
	bx r0
	.align 2, 0
.L080985A0: .4byte gUnknown_08A1898C

	THUMB_FUNC_END func_08098590

	THUMB_FUNC_START func_080985A4
func_080985A4: @ 0x080985A4
	push {lr}
	ldr r0, .L080985B4  @ gUnknown_08A1898C
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080985B4: .4byte gUnknown_08A1898C

	THUMB_FUNC_END func_080985A4

	THUMB_FUNC_START func_080985B8
func_080985B8: @ 0x080985B8
	push {r4, r5, lr}
	ldr r0, .L080985F8  @ gUnknown_02013588
	ldr r4, .L080985FC  @ gBg0Tm+0x466
	adds r1, r4, #0
	bl PutText
	adds r5, r4, #0
	adds r5, #0x10
	bl GetGold
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl PutNumber
	adds r4, #0x12
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl PutSpecialChar
	movs r0, #0xa8
	movs r1, #0x85
	bl func_080984CC
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080985F8: .4byte gUnknown_02013588
.L080985FC: .4byte gBg0Tm+0x466

	THUMB_FUNC_END func_080985B8

	THUMB_FUNC_START func_08098600
func_08098600: @ 0x08098600
	push {lr}
	ldr r0, .L0809861C  @ gBg0Tm+0x466
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	bl func_080984EC
	movs r0, #1
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L0809861C: .4byte gBg0Tm+0x466

	THUMB_FUNC_END func_08098600

	THUMB_FUNC_START func_08098620
func_08098620: @ 0x08098620
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	adds r7, r0, #0
	add r1, sp, #4
	ldr r0, .L08098970  @ gUnknown_08205C14
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	ldr r0, .L08098974  @ gUnknown_08A181E8
	bl SetupBackgrounds
	ldr r4, .L08098978  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	add r0, sp, #4
	bl SetFaceConfig
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldr r0, .L0809897C  @ 0x06017800
	movs r1, #0
	bl DebugInitObj
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl ResetText
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl LoadUiFrameGraphics
	ldr r0, .L08098980  @ gUiFramePaletteD
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	bl LoadObjUiGfx
	bl InitPrepScreenUnitList
	bl func_08095394
	bl func_080958FC
	adds r1, r7, #0
	adds r1, #0x2a
	movs r4, #0
	strb r0, [r1]
	adds r0, r7, #0
	bl ResetPrepScreenHandCursor
	ldr r0, .L08098984  @ func_0809A274
	adds r1, r7, #0
	bl StartParallelWorker
	adds r0, r7, #0
	bl func_080AC9C0
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r0, .L08098988  @ gPal
	strh r4, [r0]
	bl EnablePalSync
	add r4, sp, #0x24
	mov sl, r4
	ldr r5, .L0809898C  @ gUnknown_02013498
	movs r4, #0xe
.L08098726:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L08098726
	movs r0, #0x2b
	adds r0, r0, r7
	mov r8, r0
	ldr r0, .L08098990  @ gUnknown_02013510
	adds r6, r0, #0
	adds r6, #0x28
	adds r5, r0, #0
	movs r4, #4
.L08098746:
	adds r0, r5, #0
	movs r1, #7
	bl InitText
	adds r0, r6, #0
	movs r1, #7
	bl InitText
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L08098746
	ldr r4, .L08098994  @ gUnknown_02013560
	adds r0, r4, #0
	movs r1, #8
	bl InitTextDb
	adds r0, r4, #0
	adds r0, #8
	movs r1, #8
	bl InitTextDb
	adds r0, r4, #0
	adds r0, #0x10
	movs r1, #8
	bl InitText
	adds r0, r4, #0
	adds r0, #0x28
	movs r1, #7
	bl InitText
	adds r0, r4, #0
	adds r0, #0x30
	movs r1, #5
	bl InitText
	ldr r0, .L08098998  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r1, #0
	mov r9, r1
	str r1, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	mov r2, r9
	str r2, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r3, .L08098978  @ gDispIo
	movs r4, #0x36
	adds r4, r4, r3
	mov ip, r4
	ldrb r2, [r4]
	movs r1, #0x20
	orrs r2, r1
	ldrb r0, [r3, #1]
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r0, r3, #0
	adds r0, #0x2d
	mov r1, r9
	strb r1, [r0]
	adds r0, #4
	movs r4, #4
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x44
	strb r0, [r1]
	adds r6, r3, #0
	adds r6, #0x34
	ldrb r0, [r6]
	movs r5, #1
	orrs r0, r5
	movs r3, #2
	orrs r0, r3
	orrs r0, r4
	movs r4, #8
	orrs r0, r4
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r6]
	orrs r2, r5
	orrs r2, r3
	movs r0, #5
	negs r0, r0
	ands r2, r0
	orrs r2, r4
	orrs r2, r1
	mov r3, ip
	strb r2, [r3]
	ldr r2, .L0809899C  @ 0x0000FFFC
	movs r0, #0
	movs r1, #4
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #4
	bl SetBgOffset
	ldr r1, .L080989A0  @ 0x0000FFD8
	ldrh r2, [r7, #0x34]
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	movs r0, #7
	bl EnableBgSync
	bl ApplyUnitSpritePalettes
	mov r4, r9
	str r4, [sp, #0x24]
	ldr r1, .L080989A4  @ gPal+0x360
	ldr r2, .L080989A8  @ 0x01000008
	mov r0, sl
	bl CpuFastSet
	bl ForceSyncUnitSpriteSheet
	ldr r0, .L080989AC  @ gUnknown_08A1D4E8
	ldr r1, .L080989B0  @ 0x06013E00
	bl Decompress
	movs r0, #0x3c
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0xd0
	bl func_080ACA4C
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	bl RestartScreenMenuScrollingBg
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L080988E2
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r7, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl func_080AC9D4
	mov r2, r8
	ldrb r0, [r2]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	ldr r0, .L080989B4  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl func_08099E98
.L080988E2:
	movs r3, #0x80
	lsls r3, r3, #2
	movs r4, #4
	str r4, [sp]
	adds r0, r7, #0
	movs r1, #0xe0
	movs r2, #0xb
	bl func_08097748
	ldrh r4, [r7, #0x34]
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl func_080976CC
	bl func_08097668
	bl func_08095928
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	mov r0, r9
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	mov r1, r9
	str r1, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r0, .L080989B8  @ func_080983D4
	bl SetOnHBlankA
	movs r0, #0xa8
	movs r1, #0x85
	movs r2, #0xb
	adds r3, r7, #0
	bl func_080984A8
	adds r0, r7, #0
	bl func_08098554
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08098970: .4byte gUnknown_08205C14
.L08098974: .4byte gUnknown_08A181E8
.L08098978: .4byte gDispIo
.L0809897C: .4byte 0x06017800
.L08098980: .4byte gUiFramePaletteD
.L08098984: .4byte func_0809A274
.L08098988: .4byte gPal
.L0809898C: .4byte gUnknown_02013498
.L08098990: .4byte gUnknown_02013510
.L08098994: .4byte gUnknown_02013560
.L08098998: .4byte 0x06014000
.L0809899C: .4byte 0x0000FFFC
.L080989A0: .4byte 0x0000FFD8
.L080989A4: .4byte gPal+0x360
.L080989A8: .4byte 0x01000008
.L080989AC: .4byte gUnknown_08A1D4E8
.L080989B0: .4byte 0x06013E00
.L080989B4: .4byte 0x00000503
.L080989B8: .4byte func_080983D4

	THUMB_FUNC_END func_08098620

	THUMB_FUNC_START func_080989BC
func_080989BC: @ 0x080989BC
	push {lr}
	adds r0, #0x2a
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl func_080953C0
	bl EndAllParallelWorkers
	bl EndPrepScreenHandCursor
	bl func_080ACB00
	movs r0, #0
	bl func_08099F50
	movs r0, #1
	bl func_08099F50
	bl EndScreenMenuScrollingBg
	bl HideRIsInfo
	bl Delete6CMenuScroll
	bl func_08098500
	bl func_080985A4
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080989BC

	THUMB_FUNC_START func_08098A04
func_08098A04: @ 0x08098A04
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, .L08098A68  @ gUnknown_02013560
	adds r0, r4, #0
	bl ClearText
	movs r0, #8
	adds r0, r0, r4
	mov r8, r0
	bl ClearText
	ldr r0, .L08098A6C  @ 0x00000583
	bl GetMsg
	adds r1, r5, #0
	adds r1, #0x42
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, .L08098A70  @ 0x00000584
	bl GetMsg
	adds r5, #0xc2
	str r6, [sp]
	str r0, [sp, #4]
	mov r0, r8
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08098A68: .4byte gUnknown_02013560
.L08098A6C: .4byte 0x00000583
.L08098A70: .4byte 0x00000584

	THUMB_FUNC_END func_08098A04

	THUMB_FUNC_START func_08098A74
func_08098A74: @ 0x08098A74
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	movs r1, #0xa
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, .L08098AB0  @ gUnknown_02013560
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r0, #8
	bl ClearText
	adds r4, #0x10
	adds r0, r4, #0
	bl ClearText
	bl func_080C4070
	cmp r0, #1
	beq .L08098AC8
	cmp r0, #1
	bgt .L08098AB4
	cmp r0, #0
	beq .L08098ABE
	b .L08098ADA
	.align 2, 0
.L08098AB0: .4byte gUnknown_02013560
.L08098AB4:
	cmp r0, #2
	beq .L08098AD0
	cmp r0, #3
	beq .L08098AD8
	b .L08098ADA
.L08098ABE:
	ldr r5, .L08098AC4  @ 0x00000672
	b .L08098ADA
	.align 2, 0
.L08098AC4: .4byte 0x00000672
.L08098AC8:
	ldr r5, .L08098ACC  @ 0x00000673
	b .L08098ADA
	.align 2, 0
.L08098ACC: .4byte 0x00000673
.L08098AD0:
	ldr r5, .L08098AD4  @ 0x00000674
	b .L08098ADA
	.align 2, 0
.L08098AD4: .4byte 0x00000674
.L08098AD8:
	ldr r5, .L08098B38  @ 0x00000675
.L08098ADA:
	adds r0, r5, #0
	bl GetMsg
	ldr r4, .L08098B3C  @ gUnknown_02013560
	adds r1, r6, #0
	adds r1, #0x80
	movs r5, #0
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #4
	bl PutDrawText
	ldr r0, .L08098B40  @ 0x00000583
	bl GetMsg
	adds r2, r4, #0
	adds r2, #8
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r6, r3
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #4
	bl PutDrawText
	ldr r0, .L08098B44  @ 0x00000584
	bl GetMsg
	adds r4, #0x10
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r1, r6, r2
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #4
	bl PutDrawText
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08098B38: .4byte 0x00000675
.L08098B3C: .4byte gUnknown_02013560
.L08098B40: .4byte 0x00000583
.L08098B44: .4byte 0x00000584

	THUMB_FUNC_END func_08098A74

	THUMB_FUNC_START func_08098B48
func_08098B48: @ 0x08098B48
	push {lr}
	sub sp, #4
	ldr r0, .L08098B64  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x59
	movs r2, #9
	movs r3, #4
	bl func_0809A31C
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L08098B64: .4byte 0x0000A440

	THUMB_FUNC_END func_08098B48

	THUMB_FUNC_START func_08098B68
func_08098B68: @ 0x08098B68
	push {lr}
	sub sp, #4
	bl func_080C4070
	cmp r0, #3
	bne .L08098B8C
	ldr r0, .L08098B88  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x51
	movs r2, #9
	movs r3, #6
	bl func_0809A31C
	b .L08098B9C
	.align 2, 0
.L08098B88: .4byte 0x0000A440
.L08098B8C:
	ldr r0, .L08098BA4  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x51
	movs r2, #9
	movs r3, #6
	bl func_0809A31C
.L08098B9C:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L08098BA4: .4byte 0x0000A440

	THUMB_FUNC_END func_08098B68

	THUMB_FUNC_START func_08098BA8
func_08098BA8: @ 0x08098BA8
	push {lr}
	sub sp, #4
	ldr r0, .L08098BC4  @ 0x0000A440
	str r0, [sp]
	movs r0, #8
	movs r1, #0x5c
	movs r2, #0xa
	movs r3, #5
	bl func_0809A31C
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L08098BC4: .4byte 0x0000A440

	THUMB_FUNC_END func_08098BA8

	THUMB_FUNC_START func_08098BC8
func_08098BC8: @ 0x08098BC8
	push {lr}
	sub sp, #4
	ldr r0, .L08098BE4  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x88
	movs r1, #0x51
	movs r2, #9
	movs r3, #6
	bl func_0809A31C
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L08098BE4: .4byte 0x0000A840

	THUMB_FUNC_END func_08098BC8

	THUMB_FUNC_START func_08098BE8
func_08098BE8: @ 0x08098BE8
	push {lr}
	ldr r0, .L08098C04  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08098C0C
	ldr r0, .L08098C08  @ func_08098B68
	bl GetParallelWorker
	bl Proc_End
	b .L08098C16
	.align 2, 0
.L08098C04: .4byte gGmData
.L08098C08: .4byte func_08098B68
.L08098C0C:
	ldr r0, .L08098C30  @ func_08098B48
	bl GetParallelWorker
	bl Proc_End
.L08098C16:
	ldr r0, .L08098C34  @ func_08098BA8
	bl GetParallelWorker
	bl Proc_End
	ldr r0, .L08098C38  @ func_08098BC8
	bl GetParallelWorker
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L08098C30: .4byte func_08098B48
.L08098C34: .4byte func_08098BA8
.L08098C38: .4byte func_08098BC8

	THUMB_FUNC_END func_08098BE8

	THUMB_FUNC_START func_08098C3C
func_08098C3C: @ 0x08098C3C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r2, r0, #0
	adds r4, r1, #0
	mov r1, sp
	ldr r0, .L08098C80  @ gUnknown_08205C34
	ldm r0!, {r3, r5, r6}
	stm r1!, {r3, r5, r6}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, .L08098C84  @ gUnknown_08A1D8D0
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	adds r1, r2, #0
	bl Decompress
	ldr r0, .L08098C88  @ gPlaySt
	adds r0, #0x41
	ldrb r1, [r0]
	movs r0, #0xc
	ands r0, r1
	add r0, sp
	ldr r0, [r0]
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08098C80: .4byte gUnknown_08205C34
.L08098C84: .4byte gUnknown_08A1D8D0
.L08098C88: .4byte gPlaySt

	THUMB_FUNC_END func_08098C3C

	THUMB_FUNC_START func_08098C8C
func_08098C8C: @ 0x08098C8C
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, .L08098CB4  @ gUnknown_08A1D7DC
	ldr r1, .L08098CB8  @ 0x06010000
	adds r2, r2, r1
	adds r1, r2, #0
	bl Decompress
	ldr r0, .L08098CBC  @ gUiFramePaletteD
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08098CB4: .4byte gUnknown_08A1D7DC
.L08098CB8: .4byte 0x06010000
.L08098CBC: .4byte gUiFramePaletteD

	THUMB_FUNC_END func_08098C8C

	THUMB_FUNC_START func_08098CC0
func_08098CC0: @ 0x08098CC0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	bl LoadUiFrameGraphics
	movs r0, #1
	movs r1, #0
	movs r2, #4
	bl SetBgOffset
	adds r0, r6, #0
	bl func_0809A08C
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl func_08098C8C
	ldr r0, .L08098D78  @ gUnknown_08A1B8B8
	ldr r4, .L08098D7C  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L08098D80  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L08098D84  @ gUiFramePaletteD
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r5, r6, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	ldr r0, .L08098D88  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl func_08099E98
	ldr r4, .L08098D8C  @ gUnknown_02013510
	ldr r7, .L08098D90  @ gBg0Tm+0x244
	ldrb r0, [r5]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	movs r3, #2
	bl func_08099F7C
	ldr r0, .L08098D94  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08098D98
	adds r0, r7, #0
	subs r0, #0x20
	bl func_08098A74
	b .L08098DA0
	.align 2, 0
.L08098D78: .4byte gUnknown_08A1B8B8
.L08098D7C: .4byte gBuf
.L08098D80: .4byte gBg1Tm
.L08098D84: .4byte gUiFramePaletteD
.L08098D88: .4byte 0x00000503
.L08098D8C: .4byte gUnknown_02013510
.L08098D90: .4byte gBg0Tm+0x244
.L08098D94: .4byte gGmData
.L08098D98:
	adds r0, r7, #0
	adds r0, #0x60
	bl func_08098A04
.L08098DA0:
	adds r1, r6, #0
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r5, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl func_080AD51C
	adds r0, r6, #0
	movs r1, #0
	bl func_0809A504
	bl func_080ACAE4
	bl func_080ACAA4
	movs r0, #0x78
	movs r1, #0x8c
	movs r2, #9
	adds r3, r6, #0
	bl ShowRIsInfo
	bl func_08098BE8
	ldr r0, .L08098E14  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08098E1C
	ldr r0, .L08098E18  @ func_08098B68
	adds r1, r6, #0
	bl StartParallelWorker
	b .L08098E24
	.align 2, 0
.L08098E14: .4byte gGmData
.L08098E18: .4byte func_08098B68
.L08098E1C:
	ldr r0, .L08098E3C  @ func_08098B48
	adds r1, r6, #0
	bl StartParallelWorker
.L08098E24:
	bl func_080985B8
	bl func_08098590
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08098E3C: .4byte func_08098B48

	THUMB_FUNC_END func_08098CC0

	THUMB_FUNC_START func_08098E40
func_08098E40: @ 0x08098E40
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r3, r8
	adds r3, #0x2a
	ldrb r7, [r3]
	ldr r0, .L08098F1C  @ gKeySt
	ldr r2, [r0]
	ldrh r5, [r2, #6]
	mov r4, r8
	adds r4, #0x31
	movs r0, #4
	strb r0, [r4]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L08098E6E
	ldrh r5, [r2, #4]
	movs r0, #8
	strb r0, [r4]
.L08098E6E:
	movs r0, #0x40
	ands r0, r5
	cmp r0, #0
	beq .L08098E80
	ldrb r0, [r3]
	subs r0, #3
	cmp r0, #0
	blt .L08098E80
	strb r0, [r3]
.L08098E80:
	movs r0, #0x80
	ands r0, r5
	mov r6, r8
	adds r6, #0x2a
	cmp r0, #0
	beq .L08098E9E
	ldrb r4, [r6]
	adds r4, #3
	bl GetPrepScreenUnitListSize
	cmp r4, r0
	bge .L08098E9E
	ldrb r0, [r6]
	adds r0, #3
	strb r0, [r6]
.L08098E9E:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq .L08098EBA
	ldrb r4, [r6]
	adds r0, r4, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08098EBA
	subs r0, r4, #1
	strb r0, [r6]
.L08098EBA:
	movs r0, #0x10
	ands r5, r0
	cmp r5, #0
	beq .L08098EE4
	ldrb r4, [r6]
	adds r0, r4, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi .L08098EE4
	adds r4, #1
	bl GetPrepScreenUnitListSize
	cmp r4, r0
	bge .L08098EE4
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
.L08098EE4:
	ldrb r0, [r6]
	cmp r0, r7
	beq .L08098FA0
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x14
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r2, r0, #4
	mov r0, r8
	ldrh r1, [r0, #0x34]
	subs r0, r4, r1
	cmp r0, #0x20
	ble .L08098F20
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, r2
	bge .L08098F20
	lsrs r1, r1, #4
	adds r1, #4
	b .L08098F34
	.align 2, 0
.L08098F1C: .4byte gKeySt
.L08098F20:
	mov r1, r8
	ldrh r0, [r1, #0x34]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r1, #0xf
	bgt .L08098F54
	cmp r7, #0
	beq .L08098F54
	lsrs r1, r7, #4
	subs r1, #1
.L08098F34:
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r0, r8
	movs r2, #0
	bl func_0809A114
	ldrb r0, [r6]
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x12
	adds r0, #0x18
	bl func_080AD4E4
	b .L08098F84
.L08098F54:
	ldrb r5, [r6]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	subs r0, r7, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl func_080AD51C
.L08098F84:
	ldr r0, .L08098F9C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08098F96
	movs r0, #0x65
	bl m4aSongNumStart
.L08098F96:
	movs r0, #1
	b .L08098FA2
	.align 2, 0
.L08098F9C: .4byte gPlaySt
.L08098FA0:
	movs r0, #0
.L08098FA2:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_08098E40

	THUMB_FUNC_START func_08098FAC
func_08098FAC: @ 0x08098FAC
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x14
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r2, r0, #4
	ldrh r1, [r6, #0x34]
	subs r0, r7, r1
	cmp r0, #0x20
	ble .L0809904C
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, r2
	bge .L0809904C
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r2, [r0]
	adds r2, r1, r2
	strh r2, [r6, #0x34]
	ldr r1, .L080990D0  @ 0x0000FFD8
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L0809902C
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl func_080AC9D4
.L0809902C:
	ldrh r4, [r6, #0x34]
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl func_080976CC
.L0809904C:
	ldrh r1, [r6, #0x34]
	subs r0, r7, r1
	cmp r0, #0xf
	bgt .L080990C8
	cmp r1, #0
	beq .L080990C8
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r2, [r0]
	subs r2, r1, r2
	strh r2, [r6, #0x34]
	ldr r1, .L080990D0  @ 0x0000FFD8
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L080990A8
	adds r5, r0, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl func_080AC9D4
.L080990A8:
	ldrh r4, [r6, #0x34]
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl func_080976CC
.L080990C8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080990D0: .4byte 0x0000FFD8

	THUMB_FUNC_END func_08098FAC

	THUMB_FUNC_START func_080990D4
func_080990D4: @ 0x080990D4
	push {r4, lr}
	adds r4, r0, #0
	bl func_080989BC
	movs r0, #0x31
	bl SetStatScreenConfig
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r1, r4, #0
	bl StartStatScreen
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080990D4

	THUMB_FUNC_START func_08099100
func_08099100: @ 0x08099100
	push {r4, lr}
	adds r4, r0, #0
	bl func_08098620
	bl func_08095674
	adds r1, r4, #0
	adds r1, #0x2a
	strb r0, [r1]
	adds r0, r4, #0
	bl func_0809A08C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099100

	THUMB_FUNC_START func_08099120
func_08099120: @ 0x08099120
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x34]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq .L08099132
	b .L0809930E
.L08099132:
	ldr r0, .L0809914C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08099150
	adds r0, r6, #0
	bl Proc_Break
	b .L08099314
	.align 2, 0
.L0809914C: .4byte gKeySt
.L08099150:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	bne .L0809915C
	b .L08099288
.L0809915C:
	ldr r0, .L080991A4  @ gGmData
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L08099202
	bl func_080C4070
	cmp r0, #2
	beq .L080991A8
	cmp r0, #3
	bne .L080991FC
	adds r4, r6, #0
	adds r4, #0x2a
	ldrb r0, [r4]
	adds r5, r6, #0
	adds r5, #0x2b
	strb r0, [r5]
	ldrb r7, [r4]
	adds r0, r7, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi .L08099230
	bl GetPrepScreenUnitListSize
	subs r0, #1
	cmp r7, r0
	bge .L08099230
	ldrb r0, [r4]
	adds r0, #1
	b .L08099234
	.align 2, 0
.L080991A4: .4byte gGmData
.L080991A8:
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	movs r1, #0x72
	bl UnitHasItem
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080991E0
	ldr r0, .L080991DC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080991D0
	movs r0, #0x6a
	bl m4aSongNumStart
.L080991D0:
	adds r0, r6, #0
	movs r1, #0xd
	bl Proc_Goto
	b .L08099314
	.align 2, 0
.L080991DC: .4byte gPlaySt
.L080991E0:
	ldr r0, .L080991F8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080991EE
	b .L08099314
.L080991EE:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L08099314
	.align 2, 0
.L080991F8: .4byte gPlaySt
.L080991FC:
	adds r0, r6, #0
	movs r1, #0xd
	b .L0809926A
.L08099202:
	adds r4, r6, #0
	adds r4, #0x2a
	ldrb r0, [r4]
	adds r5, r6, #0
	adds r5, #0x2b
	strb r0, [r5]
	ldrb r7, [r4]
	adds r0, r7, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi .L08099230
	bl GetPrepScreenUnitListSize
	subs r0, #1
	cmp r7, r0
	bge .L08099230
	ldrb r0, [r4]
	adds r0, #1
	b .L08099234
.L08099230:
	ldrb r0, [r4]
	subs r0, #1
.L08099234:
	strb r0, [r4]
	ldrb r5, [r5]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl func_080AC9D4
	adds r0, r6, #0
	movs r1, #2
.L0809926A:
	bl Proc_Goto
	ldr r0, .L08099284  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099314
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L08099314
	.align 2, 0
.L08099284: .4byte gPlaySt
.L08099288:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080992CC
	ldr r0, .L080992C4  @ gGmData
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080992A8
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
.L080992A8:
	adds r0, r6, #0
	movs r1, #0xd
	bl Proc_Goto
	ldr r0, .L080992C8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099314
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L08099314
	.align 2, 0
.L080992C4: .4byte gGmData
.L080992C8: .4byte gPlaySt
.L080992CC:
	adds r0, r6, #0
	bl func_08098E40
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809930E
	adds r7, r6, #0
	adds r7, #0x2a
	ldrb r0, [r7]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	ldr r0, .L0809931C  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl func_08099E98
	ldr r4, .L08099320  @ gUnknown_02013510
	ldr r5, .L08099324  @ gBg0Tm+0x244
	ldrb r0, [r7]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #2
	bl func_08099F7C
	movs r0, #1
	bl EnableBgSync
.L0809930E:
	adds r0, r6, #0
	bl func_08098FAC
.L08099314:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809931C: .4byte 0x00000503
.L08099320: .4byte gUnknown_02013510
.L08099324: .4byte gBg0Tm+0x244

	THUMB_FUNC_END func_08099120

	THUMB_FUNC_START func_08099328
func_08099328: @ 0x08099328
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r9, r0
	mov r8, r1
	mov sl, r2
	mov r0, r8
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r7, .L08099454  @ gUnknown_02013560
	adds r0, r7, #0
	bl ClearText
	bl GetPrepScreenUnitListSize
	movs r4, #0
	cmp r0, #1
	bgt .L08099358
	movs r4, #1
.L08099358:
	ldr r0, .L08099458  @ 0x00000594
	bl GetMsg
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertDrawString
	bl GetPrepScreenUnitListSize
	movs r4, #0
	cmp r0, #1
	bgt .L08099376
	movs r4, #1
.L08099376:
	ldr r0, .L0809945C  @ 0x00000595
	bl GetMsg
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0x20
	adds r2, r4, #0
	bl Text_InsertDrawString
	mov r1, r8
	adds r1, #0x40
	adds r0, r7, #0
	bl PutText
	adds r5, r7, #0
	adds r5, #8
	adds r0, r5, #0
	bl ClearText
	mov r0, sl
	bl CanUnitPrepScreenUse
	movs r4, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080993AC
	movs r4, #1
.L080993AC:
	ldr r0, .L08099460  @ 0x00000596
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertDrawString
	movs r6, #0
	mov r4, r9
	adds r4, #0x2c
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne .L080993CE
	movs r6, #1
.L080993CE:
	ldr r0, .L08099464  @ 0x0000059A
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x20
	adds r2, r6, #0
	bl Text_InsertDrawString
	mov r1, r8
	adds r1, #0xc0
	adds r0, r5, #0
	bl PutText
	adds r5, r7, #0
	adds r5, #0x10
	adds r0, r5, #0
	bl ClearText
	movs r6, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne .L08099400
	movs r6, #1
.L08099400:
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	adds r2, r6, #0
	bl Text_InsertDrawString
	ldr r0, .L08099468  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08099470
	adds r6, r5, #0
	movs r5, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	beq .L0809943E
	mov r0, sl
	bl GetUnitItemCount
	cmp r0, #0
	ble .L0809943E
	bl CheckGameLinkArenaBit
	cmp r0, #0
	beq .L08099440
.L0809943E:
	movs r5, #1
.L08099440:
	ldr r0, .L0809946C  @ 0x00000597
	bl GetMsg
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x20
	adds r2, r5, #0
	bl Text_InsertDrawString
	b .L080994A2
	.align 2, 0
.L08099454: .4byte gUnknown_02013560
.L08099458: .4byte 0x00000594
.L0809945C: .4byte 0x00000595
.L08099460: .4byte 0x00000596
.L08099464: .4byte 0x0000059A
.L08099468: .4byte gGmData
.L0809946C: .4byte 0x00000597
.L08099470:
	bl CheckGameLinkArenaBit
	cmp r0, #0
	beq .L08099490
	ldr r0, .L0809948C  @ 0x00000599
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x20
	movs r2, #1
	bl Text_InsertDrawString
	b .L080994A2
	.align 2, 0
.L0809948C: .4byte 0x00000599
.L08099490:
	ldr r0, .L080994BC  @ 0x00000599
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x20
	movs r2, #0
	bl Text_InsertDrawString
.L080994A2:
	ldr r0, .L080994C0  @ gUnknown_02013570
	movs r1, #0xa0
	lsls r1, r1, #1
	add r1, r8
	bl PutText
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080994BC: .4byte 0x00000599
.L080994C0: .4byte gUnknown_02013570

	THUMB_FUNC_END func_08099328

	THUMB_FUNC_START func_080994C4
func_080994C4: @ 0x080994C4
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r4, r0, #0
	movs r0, #0x2b
	adds r0, r0, r4
	mov r9, r0
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r6, r0, #0
	adds r4, #0x32
	movs r1, #0
	mov r8, r1
	movs r0, #1
	strb r0, [r4]
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r5, .L080995B8  @ gUnknown_02013510
	ldr r7, .L080995BC  @ gBg0Tm+0x244
	mov r2, r9
	ldrb r0, [r2]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r7, #0
	movs r3, #0
	bl func_08099F7C
	ldr r0, .L080995C0  @ gUnknown_08A1B8B8
	ldr r4, .L080995C4  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080995C8  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #0
	movs r1, #0x1f
	bl func_08098570
	adds r0, r6, #0
	bl GetUnitFid
	ldr r3, .L080995CC  @ 0xFFFFFEC0
	adds r1, r7, r3
	movs r2, #0x9c
	lsls r2, r2, #2
	mov r3, r8
	str r3, [sp]
	movs r3, #3
	bl PutFaceChibi
	adds r5, #0x80
	adds r0, r5, #0
	bl ClearText
	ldr r0, [r6]
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x28
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r0, .L080995D0  @ 0xFFFFFECC
	adds r1, r7, r0
	mov r2, r8
	str r2, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r2, #0
	bl PutDrawText
	adds r0, r7, #0
	subs r0, #0xb6
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	adds r0, r7, #0
	subs r0, #0xae
	movs r1, #3
	movs r2, #0x1d
	bl PutSpecialChar
	adds r0, r7, #0
	subs r0, #0xb0
	movs r2, #8
	ldrsb r2, [r6, r2]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r7, #0
	subs r0, #0xaa
	ldrb r2, [r6, #9]
	movs r1, #2
	bl PutNumberOrBlank
	movs r0, #7
	bl EnableBgSync
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080995B8: .4byte gUnknown_02013510
.L080995BC: .4byte gBg0Tm+0x244
.L080995C0: .4byte gUnknown_08A1B8B8
.L080995C4: .4byte gBuf
.L080995C8: .4byte gBg1Tm
.L080995CC: .4byte 0xFFFFFEC0
.L080995D0: .4byte 0xFFFFFECC

	THUMB_FUNC_END func_080994C4

	THUMB_FUNC_START func_080995D4
func_080995D4: @ 0x080995D4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, .L0809963C  @ gBg0Tm+0x25E
	movs r1, #0xc
	movs r2, #0x14
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl func_08098C8C
	adds r0, r6, #0
	bl func_080994C4
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r5, [r0]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x14
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	ldrh r0, [r6, #0x34]
	subs r0, #4
	subs r1, r1, r0
	adds r0, r4, #0
	bl func_0809A21C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08099640
	bl func_080ACAC8
	b .L08099644
	.align 2, 0
.L0809963C: .4byte gBg0Tm+0x25E
.L08099640:
	bl func_080ACAE4
.L08099644:
	bl func_08098BE8
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080995D4

	THUMB_FUNC_START func_08099654
func_08099654: @ 0x08099654
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, .L080996A8  @ gBg0Tm+0x266
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_08099328
	ldr r0, .L080996AC  @ func_08098BC8
	adds r1, r4, #0
	bl StartParallelWorker
	movs r0, #0x78
	movs r1, #0x8c
	movs r2, #9
	adds r3, r4, #0
	bl ShowRIsInfo
	adds r4, #0x2e
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x90
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #3
	bl func_080AD51C
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080996A8: .4byte gBg0Tm+0x266
.L080996AC: .4byte func_08098BC8

	THUMB_FUNC_END func_08099654

	THUMB_FUNC_START func_080996B0
func_080996B0: @ 0x080996B0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r5, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl func_0809A504
	ldr r0, .L080996E0  @ gUnknown_02013510
	ldr r1, .L080996E4  @ gBg0Tm+0x244
	adds r2, r5, #0
	movs r3, #0
	bl func_08099F7C
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080996E0: .4byte gUnknown_02013510
.L080996E4: .4byte gBg0Tm+0x244

	THUMB_FUNC_END func_080996B0

	THUMB_FUNC_START func_080996E8
func_080996E8: @ 0x080996E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2e
	ldrb r0, [r6]
	mov r8, r0
	adds r4, r5, #0
	adds r4, #0x2d
	ldrb r0, [r4]
	cmp r0, #0xff
	beq .L08099704
	b .L08099930
.L08099704:
	ldr r0, .L08099734  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08099754
	mov r1, r8
	strb r1, [r4]
	ldr r0, .L08099738  @ gGmData
	ldrb r1, [r0]
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809973C
	ldrb r1, [r6]
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	b .L08099A4C
	.align 2, 0
.L08099734: .4byte gKeySt
.L08099738: .4byte gGmData
.L0809973C:
	ldrb r1, [r6]
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x88
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, .L08099750  @ gUnknown_08A188F8
	b .L08099A54
	.align 2, 0
.L08099750: .4byte gUnknown_08A188F8
.L08099754:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809975E
	b .L080998F0
.L0809975E:
	mov r0, r8
	cmp r0, #5
	bls .L08099766
	b .L080998D4
.L08099766:
	lsls r0, r0, #2
	ldr r1, .L08099770  @ .L08099774
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L08099770: .4byte .L08099774
.L08099774: @ jump table
	.4byte .L0809978C @ case 0
	.4byte .L0809979C @ case 1
	.4byte .L080997AC @ case 2
	.4byte .L080997C8 @ case 3
	.4byte .L08099854 @ case 4
	.4byte .L08099868 @ case 5
.L0809978C:
	bl GetPrepScreenUnitListSize
	cmp r0, #1
	bgt .L08099796
	b .L080998D4
.L08099796:
	adds r0, r5, #0
	movs r1, #4
	b .L080998B4
.L0809979C:
	bl GetPrepScreenUnitListSize
	cmp r0, #1
	bgt .L080997A6
	b .L080998D4
.L080997A6:
	adds r0, r5, #0
	movs r1, #8
	b .L080998B4
.L080997AC:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	bl CanUnitPrepScreenUse
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080997C2
	b .L080998D4
.L080997C2:
	adds r0, r5, #0
	movs r1, #9
	b .L080998B4
.L080997C8:
	bl CheckGameLinkArenaBit
	cmp r0, #0
	beq .L080997F8
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	ldr r0, [r0, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L080997F8
	subs r1, #9
	ldr r2, .L080997F4  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r5, #0
	bl func_08097DA8
	b .L08099A90
	.align 2, 0
.L080997F4: .4byte 0x0000088B
.L080997F8:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080998D4
	adds r6, r5, #0
	adds r6, #0x2b
	ldrb r0, [r6]
	bl GetPrepScreenUnitListEntry
	bl func_0809A538
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080998D4
	ldr r4, .L0809984C  @ gBg0Tm+0x266
	ldrb r0, [r6]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_08099328
	ldr r5, .L08099850  @ gUnknown_02013510
	subs r4, #0x22
	ldrb r0, [r6]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #0
	bl func_08099F7C
	movs r0, #1
	bl EnableBgSync
	b .L080998B8
	.align 2, 0
.L0809984C: .4byte gBg0Tm+0x266
.L08099850: .4byte gUnknown_02013510
.L08099854:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080998D4
	adds r0, r5, #0
	movs r1, #0xa
	b .L080998B4
.L08099868:
	ldr r0, .L080998A4  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080998A8
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080998D4
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	bl GetUnitItemCount
	cmp r0, #0
	ble .L080998D4
	bl CheckGameLinkArenaBit
	cmp r0, #0
	bne .L080998D4
	adds r0, r5, #0
	movs r1, #0xb
	b .L080998B4
	.align 2, 0
.L080998A4: .4byte gGmData
.L080998A8:
	bl CheckGameLinkArenaBit
	cmp r0, #0
	bne .L080998D4
	adds r0, r5, #0
	movs r1, #0xc
.L080998B4:
	bl Proc_Goto
.L080998B8:
	ldr r0, .L080998D0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080998C6
	b .L08099A90
.L080998C6:
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L08099A90
	.align 2, 0
.L080998D0: .4byte gPlaySt
.L080998D4:
	ldr r0, .L080998EC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080998E2
	b .L08099A90
.L080998E2:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L08099A90
	.align 2, 0
.L080998EC: .4byte gPlaySt
.L080998F0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L08099948
	adds r2, r5, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x2a
	strb r0, [r1]
	movs r0, #0xff
	strb r0, [r2]
	movs r0, #0
	bl func_080ACA84
	ldr r0, .L0809992C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099920
	movs r0, #0x6b
	bl m4aSongNumStart
.L08099920:
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	b .L08099A90
	.align 2, 0
.L0809992C: .4byte gPlaySt
.L08099930:
	ldr r0, .L0809996C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08099948
	bl MoveableHelpBox_OnEnd
	movs r0, #0xff
	strb r0, [r4]
.L08099948:
	ldr r2, .L0809996C  @ gKeySt
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x20
	adds r0, r7, #0
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x2e
	cmp r0, #0
	beq .L0809997E
	ldrb r3, [r4]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq .L08099970
	subs r0, r3, #1
	b .L0809997C
	.align 2, 0
.L0809996C: .4byte gKeySt
.L08099970:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809997E
	adds r0, r3, #1
.L0809997C:
	strb r0, [r4]
.L0809997E:
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x10
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080999A8
	ldrb r3, [r4]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne .L0809999A
	adds r0, r3, #1
	b .L080999A6
.L0809999A:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080999A8
	subs r0, r3, #1
.L080999A6:
	strb r0, [r4]
.L080999A8:
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080999CE
	ldrb r3, [r4]
	cmp r3, #1
	bls .L080999C0
	subs r0, r3, #2
	b .L080999CC
.L080999C0:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080999CE
	adds r0, r3, #4
.L080999CC:
	strb r0, [r4]
.L080999CE:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080999F4
	ldrb r3, [r4]
	cmp r3, #3
	bhi .L080999E6
	adds r0, r3, #2
	b .L080999F2
.L080999E6:
	ldrh r1, [r2, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080999F4
	subs r0, r3, #4
.L080999F2:
	strb r0, [r4]
.L080999F4:
	adds r6, r4, #0
	ldrb r1, [r6]
	cmp r8, r1
	beq .L08099A90
	ldr r0, .L08099A64  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099A0E
	movs r0, #0x65
	bl m4aSongNumStart
.L08099A0E:
	ldrb r1, [r6]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x90
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	movs r3, #0x80
	lsls r3, r3, #3
	movs r2, #3
	bl func_080AD51C
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0xff
	beq .L08099A90
	ldr r0, .L08099A68  @ gGmData
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L08099A70
	ldrb r1, [r6]
	adds r0, r7, #0
	ands r0, r1
	movs r2, #0x26
	muls r0, r2, r0
	adds r0, #0x90
.L08099A4C:
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, .L08099A6C  @ gUnknown_08A18910
.L08099A54:
	ldrb r2, [r6]
	lsls r2, r2, #2
	adds r2, r2, r3
	ldr r2, [r2]
	bl ShowTextHelpBox
	b .L08099A90
	.align 2, 0
.L08099A64: .4byte gPlaySt
.L08099A68: .4byte gGmData
.L08099A6C: .4byte gUnknown_08A18910
.L08099A70:
	ldrb r1, [r4]
	adds r0, r7, #0
	ands r0, r1
	movs r2, #0x26
	muls r0, r2, r0
	adds r0, #0x90
	lsrs r1, r1, #1
	lsls r1, r1, #4
	adds r1, #0x54
	ldr r3, .L08099A9C  @ gUnknown_08A188F8
	ldrb r2, [r4]
	lsls r2, r2, #2
	adds r2, r2, r3
	ldr r2, [r2]
	bl ShowTextHelpBox
.L08099A90:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08099A9C: .4byte gUnknown_08A188F8

	THUMB_FUNC_END func_080996E8

	THUMB_FUNC_START func_08099AA0
func_08099AA0: @ 0x08099AA0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r4, .L08099AF0  @ gUnknown_02013510
	ldr r5, .L08099AF4  @ gBg0Tm+0x244
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl func_08099F7C
	adds r4, #0x28
	adds r5, #0x1e
	adds r6, #0x2a
	ldrb r0, [r6]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl func_08099F7C
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08099AF0: .4byte gUnknown_02013510
.L08099AF4: .4byte gBg0Tm+0x244

	THUMB_FUNC_END func_08099AA0

	THUMB_FUNC_START func_08099AF8
func_08099AF8: @ 0x08099AF8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	mov r8, r0
	movs r0, #1
	movs r1, #0
	movs r2, #4
	bl SetBgOffset
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldr r0, .L08099C3C  @ gBg0Tm
	movs r1, #0x1f
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	ldr r0, .L08099C40  @ gUnknown_08A1B8B8
	ldr r5, .L08099C44  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r4, .L08099C48  @ gBg1Tm
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L08099C4C  @ gUnknown_08A1B990
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L08099C50  @ 0x0000025E
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	mov r1, r8
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	mov r6, r8
	adds r6, #0x2a
	ldrb r5, [r6]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x14
	mov r2, r8
	ldrh r0, [r2, #0x34]
	subs r0, #4
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r4, #0
	movs r2, #7
	bl func_080AD51C
	mov r0, r8
	movs r1, #0
	bl func_0809A504
	movs r0, #7
	bl EnableBgSync
	mov r4, r8
	adds r4, #0x2b
	ldrb r0, [r4]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	ldr r0, .L08099C54  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x3c
	movs r3, #0x4c
	bl func_08099E98
	ldrb r0, [r6]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	ldr r0, .L08099C58  @ 0x00000502
	str r0, [sp]
	movs r0, #1
	movs r2, #0xb4
	movs r3, #0x4c
	bl func_08099E98
	ldrb r5, [r4]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x12
	adds r4, #0x18
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x14
	mov r1, r8
	ldrh r0, [r1, #0x34]
	subs r0, #4
	subs r2, r2, r0
	movs r0, #0
	adds r1, r4, #0
	movs r3, #2
	bl func_080AC9D4
	ldr r0, .L08099C5C  @ func_08099AA0
	movs r1, #1
	mov r2, r8
	bl func_080ACE20
	bl func_080ACAE4
	bl func_08098590
	bl HideRIsInfo
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L08099C3C: .4byte gBg0Tm
.L08099C40: .4byte gUnknown_08A1B8B8
.L08099C44: .4byte gBuf
.L08099C48: .4byte gBg1Tm
.L08099C4C: .4byte gUnknown_08A1B990
.L08099C50: .4byte 0x0000025E
.L08099C54: .4byte 0x00000503
.L08099C58: .4byte 0x00000502
.L08099C5C: .4byte func_08099AA0

	THUMB_FUNC_END func_08099AF8

	THUMB_FUNC_START func_08099C60
func_08099C60: @ 0x08099C60
	push {lr}
	bl func_08098BE8
	movs r0, #1
	bl EnableBgSync
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099C60

	THUMB_FUNC_START func_08099C70
func_08099C70: @ 0x08099C70
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x34]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	beq .L08099C82
	b .L08099D9C
.L08099C82:
	ldr r0, .L08099C9C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08099CA0
	adds r0, r6, #0
	bl Proc_Break
	b .L08099DA2
	.align 2, 0
.L08099C9C: .4byte gKeySt
.L08099CA0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L08099D10
	adds r5, r6, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	bl GetPrepScreenUnitListEntry
	bl GetUnitItemCount
	adds r7, r0, #0
	adds r4, r6, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	bl GetPrepScreenUnitListEntry
	bl GetUnitItemCount
	adds r1, r0, #0
	ldrb r0, [r5]
	ldrb r4, [r4]
	cmp r0, r4
	beq .L08099CF8
	cmp r7, #0
	bgt .L08099CD8
	cmp r1, #0
	ble .L08099CF8
.L08099CD8:
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, .L08099CF4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099DA2
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L08099DA2
	.align 2, 0
.L08099CF4: .4byte gPlaySt
.L08099CF8:
	ldr r0, .L08099D0C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099DA2
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L08099DA2
	.align 2, 0
.L08099D0C: .4byte gPlaySt
.L08099D10:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L08099D40
	movs r0, #1
	bl func_08099F50
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, .L08099D3C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L08099DA2
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L08099DA2
	.align 2, 0
.L08099D3C: .4byte gPlaySt
.L08099D40:
	adds r0, r6, #0
	bl func_08098E40
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L08099D9C
	adds r7, r6, #0
	adds r7, #0x2a
	ldrb r0, [r7]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	ldr r0, .L08099DAC  @ 0x00000502
	str r0, [sp]
	movs r0, #1
	movs r2, #0xb4
	movs r3, #0x4c
	bl func_08099E98
	ldr r4, .L08099DB0  @ gUnknown_02013538
	ldr r5, .L08099DB4  @ gBg0Tm+0x262
	ldrb r0, [r7]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #2
	bl func_08099F7C
	subs r4, #0x28
	subs r5, #0x1e
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl func_08099F7C
	movs r0, #1
	bl EnableBgSync
.L08099D9C:
	adds r0, r6, #0
	bl func_08098FAC
.L08099DA2:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L08099DAC: .4byte 0x00000502
.L08099DB0: .4byte gUnknown_02013538
.L08099DB4: .4byte gBg0Tm+0x262

	THUMB_FUNC_END func_08099C70

	THUMB_FUNC_START func_08099DB8
func_08099DB8: @ 0x08099DB8
	push {r4, r5, lr}
	adds r4, r0, #0
	bl func_080989BC
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r5, r0, #0
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r1, r0, #0
	adds r0, r5, #0
	adds r2, r4, #0
	bl StartPrepScreenTrade
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099DB8

	THUMB_FUNC_START func_08099DE8
func_08099DE8: @ 0x08099DE8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r1, r4, #0
	bl StartPrepScreenItemUseScreen
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099DE8

	THUMB_FUNC_START func_08099E00
func_08099E00: @ 0x08099E00
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r1, r4, #0
	bl func_0809EAD8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099E00

	THUMB_FUNC_START func_08099E18
func_08099E18: @ 0x08099E18
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r1, r4, #0
	bl func_080A070C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099E18

	THUMB_FUNC_START func_08099E30
func_08099E30: @ 0x08099E30
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	adds r1, r4, #0
	bl func_0809FD88
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099E30

	THUMB_FUNC_START func_08099E48
func_08099E48: @ 0x08099E48
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl GetPrepScreenUnitListEntry
	ldr r1, .L08099E64  @ gUnknown_08A188E4
	adds r2, r4, #0
	bl StartArmoryScreen
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L08099E64: .4byte gUnknown_08A188E4

	THUMB_FUNC_END func_08099E48

	THUMB_FUNC_START func_08099E68
func_08099E68: @ 0x08099E68
	push {lr}
	adds r2, r0, #0
	ldr r0, .L08099E94  @ gGmData
	ldrb r1, [r0]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L08099E8E
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L08099E8E
	movs r0, #0
	bl func_080C409C
.L08099E8E:
	pop {r0}
	bx r0
	.align 2, 0
.L08099E94: .4byte gGmData

	THUMB_FUNC_END func_08099E68

	THUMB_FUNC_START func_08099E98
func_08099E98: @ 0x08099E98
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r0, [sp, #0x20]
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	ldr r0, .L08099EF8  @ gUnknown_08A189A4
	bl FindProc
	adds r5, r0, #0
	lsls r1, r4, #2
	adds r0, #0x44
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, r6
	beq .L08099EFC
	cmp r0, #0
	beq .L08099ED6
	adds r0, r4, #0
	bl EndFaceById
.L08099ED6:
	cmp r6, #0
	beq .L08099F18
	adds r0, r6, #0
	bl GetUnitFid
	adds r1, r0, #0
	lsls r2, r7, #0x10
	asrs r2, r2, #0x10
	mov r0, r8
	lsls r3, r0, #0x10
	asrs r3, r3, #0x10
	mov r0, r9
	str r0, [sp]
	adds r0, r4, #0
	bl NewFace2
	b .L08099F18
	.align 2, 0
.L08099EF8: .4byte gUnknown_08A189A4
.L08099EFC:
	cmp r6, #0
	beq .L08099F18
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	mov r0, r8
	lsls r2, r0, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	bl func_08006618
	adds r0, r4, #0
	mov r1, r9
	bl SetFaceDispById
.L08099F18:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x44
	adds r0, r0, r1
	str r6, [r0]
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x38
	adds r0, r0, r1
	strh r7, [r0]
	adds r0, r5, #0
	adds r0, #0x3c
	adds r0, r0, r1
	mov r2, r8
	strh r2, [r0]
	adds r0, r5, #0
	adds r0, #0x40
	adds r0, r0, r1
	mov r1, r9
	strh r1, [r0]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099E98

	THUMB_FUNC_START func_08099F50
func_08099F50: @ 0x08099F50
	push {lr}
	sub sp, #4
	movs r1, #0
	str r1, [sp]
	movs r2, #0
	movs r3, #0
	bl func_08099E98
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099F50

	THUMB_FUNC_START StartPrepScreenItemsMenu
StartPrepScreenItemsMenu: @ 0x08099F68
	push {lr}
	adds r1, r0, #0
	ldr r0, .L08099F78  @ gUnknown_08A189A4
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
.L08099F78: .4byte gUnknown_08A189A4

	THUMB_FUNC_END StartPrepScreenItemsMenu

	THUMB_FUNC_START func_08099F7C
func_08099F7C: @ 0x08099F7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	adds r4, r1, #0
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp]
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #0x14
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	beq .L08099FAE
	bl ClearIcons
.L08099FAE:
	mov r0, r8
	cmp r0, #0
	beq .L0809A07C
	bl GetUnitItemCount
	str r0, [sp, #4]
	movs r1, #0
	mov r9, r1
	cmp r9, r0
	bge .L0809A07C
	adds r0, r4, #0
	adds r0, #0x16
	str r0, [sp, #8]
	adds r1, r4, #4
	str r1, [sp, #0xc]
	mov sl, r4
.L08099FCE:
	mov r1, r9
	lsls r0, r1, #1
	mov r1, r8
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	movs r0, #4
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	beq .L08099FEE
	mov r0, r8
	adds r1, r5, #0
	bl CanUnitUseItemPrepScreen
	b .L08099FF6
.L08099FEE:
	mov r0, r8
	adds r1, r5, #0
	bl IsItemDisplayUsable
.L08099FF6:
	movs r7, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809A000
	movs r7, #1
.L0809A000:
	movs r0, #1
	ldr r1, [sp]
	ands r0, r1
	cmp r0, #0
	bne .L0809A02E
	adds r0, r6, #0
	bl ClearText
	adds r0, r6, #0
	adds r1, r7, #0
	bl Text_SetColor
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	bl GetItemName
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
.L0809A02E:
	adds r0, r5, #0
	bl GetItemIcon
	adds r1, r0, #0
	mov r0, sl
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r0, r6, #0
	ldr r1, [sp, #0xc]
	bl PutText
	movs r4, #1
	cmp r7, #0
	bne .L0809A050
	movs r4, #2
.L0809A050:
	adds r0, r5, #0
	bl GetItemUses
	adds r2, r0, #0
	ldr r0, [sp, #8]
	adds r1, r4, #0
	bl PutNumberOrBlank
	adds r6, #8
	ldr r0, [sp, #8]
	adds r0, #0x80
	str r0, [sp, #8]
	ldr r1, [sp, #0xc]
	adds r1, #0x80
	str r1, [sp, #0xc]
	movs r0, #0x80
	add sl, r0
	movs r1, #1
	add r9, r1
	ldr r0, [sp, #4]
	cmp r9, r0
	blt .L08099FCE
.L0809A07C:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_08099F7C

	THUMB_FUNC_START func_0809A08C
func_0809A08C: @ 0x0809A08C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	movs r1, #3
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x14
	adds r6, r4, #0
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	lsls r1, r0, #4
	ldrh r0, [r5, #0x34]
	subs r0, r4, r0
	cmp r0, #0x20
	ble .L0809A0C6
	cmp r4, r1
	bne .L0809A0C0
	adds r0, r4, #0
	subs r0, #0x30
	b .L0809A0D6
.L0809A0C0:
	adds r0, r4, #0
	subs r0, #0x20
	b .L0809A0D6
.L0809A0C6:
	cmp r0, #0xf
	bgt .L0809A0D8
	cmp r4, #0
	bne .L0809A0D2
	strh r4, [r5, #0x34]
	b .L0809A0D8
.L0809A0D2:
	adds r0, r6, #0
	subs r0, #0x10
.L0809A0D6:
	strh r0, [r5, #0x34]
.L0809A0D8:
	ldr r1, .L0809A110  @ 0x0000FFD8
	ldrh r2, [r5, #0x34]
	subs r2, #4
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrh r4, [r5, #0x34]
	bl GetPrepScreenUnitListSize
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #6
	adds r1, r4, #0
	movs r3, #4
	bl func_080976CC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A110: .4byte 0x0000FFD8

	THUMB_FUNC_END func_0809A08C

	THUMB_FUNC_START func_0809A114
func_0809A114: @ 0x0809A114
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	lsls r0, r1, #1
	add r0, sl
	str r0, [sp]
	movs r1, #0xf
	bl __modsi3
	lsls r0, r0, #3
	ldr r1, .L0809A1C0  @ gUnknown_02013498
	adds r4, r0, r1
	ldr r0, .L0809A1C4  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809A154
	bl func_080C4070
	movs r1, #1
	str r1, [sp, #4]
	cmp r0, #2
	beq .L0809A158
.L0809A154:
	movs r0, #0
	str r0, [sp, #4]
.L0809A158:
	movs r7, #0
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	mov r9, r0
.L0809A160:
	mov r1, r9
	cmp r1, #0
	bne .L0809A16C
	adds r0, r4, #0
	bl ClearText
.L0809A16C:
	ldr r0, [sp]
	adds r5, r0, r7
	bl GetPrepScreenUnitListSize
	cmp r5, r0
	bge .L0809A1FA
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #3
	mov r8, r0
	mov r1, sl
	lsls r6, r1, #1
	movs r0, #0x1f
	ands r6, r0
	mov r0, r9
	cmp r0, #0
	bne .L0809A1EA
	adds r0, r5, #0
	bl GetPrepScreenUnitListEntry
	adds r5, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r1, [sp, #4]
	cmp r1, #0
	beq .L0809A1D2
	adds r0, r5, #0
	movs r1, #0x72
	bl UnitHasItem
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809A1C8
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	b .L0809A1DA
	.align 2, 0
.L0809A1C0: .4byte gUnknown_02013498
.L0809A1C4: .4byte gGmData
.L0809A1C8:
	adds r0, r4, #0
	movs r1, #1
	bl Text_SetColor
	b .L0809A1DA
.L0809A1D2:
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
.L0809A1DA:
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
.L0809A1EA:
	lsls r1, r6, #5
	add r1, r8
	lsls r1, r1, #1
	ldr r0, .L0809A218  @ gBg2Tm
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
.L0809A1FA:
	adds r4, #8
	adds r7, #1
	cmp r7, #2
	ble .L0809A160
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A218: .4byte gBg2Tm

	THUMB_FUNC_END func_0809A114

	THUMB_FUNC_START func_0809A21C
func_0809A21C: @ 0x0809A21C
	push {lr}
	cmp r0, #0x60
	bhi .L0809A22A
	cmp r1, #0x1f
	ble .L0809A22A
	movs r0, #1
	b .L0809A22C
.L0809A22A:
	movs r0, #0
.L0809A22C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809A21C

	THUMB_FUNC_START func_0809A230
func_0809A230: @ 0x0809A230
	push {r4, r5, r6, lr}
	sub sp, #4
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	ldr r1, [r0, #4]
	ldrb r4, [r1, #4]
	movs r1, #0x72
	bl UnitHasItem
	lsls r0, r0, #0x18
	movs r1, #0xf0
	lsls r1, r1, #8
	cmp r0, #0
	beq .L0809A254
	movs r1, #0xc0
	lsls r1, r1, #8
.L0809A254:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r3, r0, #0
	adds r3, r1, r3
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r4, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl PutUnitSpriteForJid
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809A230

	THUMB_FUNC_START func_0809A274
func_0809A274: @ 0x0809A274
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r6, #0
	b .L0809A308
.L0809A27C:
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	lsls r5, r0, #6
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	ldrh r1, [r7, #0x34]
	subs r4, r0, r1
	adds r0, r4, #0
	adds r0, #0x14
	cmp r0, #0x44
	bhi .L0809A306
	adds r0, r7, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L0809A2B8
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_0809A21C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809A306
.L0809A2B8:
	ldr r0, .L0809A2E8  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809A2EC
	bl func_080C4070
	cmp r0, #2
	bne .L0809A2EC
	adds r0, r6, #0
	bl GetPrepScreenUnitListEntry
	adds r1, r5, #0
	adds r1, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r2, r4, #4
	movs r3, #0xff
	ands r2, r3
	bl func_0809A230
	b .L0809A306
	.align 2, 0
.L0809A2E8: .4byte gGmData
.L0809A2EC:
	adds r5, #0x18
	adds r4, #4
	movs r0, #0xff
	ands r4, r0
	adds r0, r6, #0
	bl GetPrepScreenUnitListEntry
	adds r3, r0, #0
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl PutUnitSprite
.L0809A306:
	adds r6, #1
.L0809A308:
	bl GetPrepScreenUnitListSize
	cmp r6, r0
	blt .L0809A27C
	bl SyncUnitSpriteSheet
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809A274

	THUMB_FUNC_START func_0809A31C
func_0809A31C: @ 0x0809A31C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	str r0, [sp, #4]
	mov sl, r1
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	ldr r7, [sp, #0x38]
	cmp r2, #0
	bgt .L0809A338
	b .L0809A4E6
.L0809A338:
	cmp r3, #0
	bgt .L0809A33E
	b .L0809A4E6
.L0809A33E:
	ldr r4, .L0809A4F8  @ Sprite_8x8
	str r7, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	mov r2, sl
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, [sp, #8]
	lsls r0, r0, #3
	mov r9, r0
	ldr r6, [sp, #4]
	add r6, r9
	adds r0, r7, #3
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, sl
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r1, [sp, #0xc]
	lsls r1, r1, #3
	mov r8, r1
	mov r5, sl
	add r5, r8
	adds r0, r7, #0
	adds r0, #0xd
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl PutSpriteExt
	adds r0, r7, #0
	adds r0, #0xa
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	adds r2, r5, #0
	adds r3, r4, #0
	bl PutSpriteExt
	movs r5, #1
	ldr r3, [sp, #8]
	subs r3, #1
	str r3, [sp, #0x10]
	cmp r5, r3
	bge .L0809A3D6
	ldr r6, .L0809A4FC  @ Sprite_16x8
	ldr r4, [sp, #4]
	adds r4, #8
.L0809A3A8:
	adds r0, r7, #1
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	adds r3, r6, #0
	bl PutSpriteExt
	adds r0, r7, #0
	adds r0, #0xb
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	add r2, r8
	adds r3, r6, #0
	bl PutSpriteExt
	adds r4, #0x10
	adds r5, #2
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt .L0809A3A8
.L0809A3D6:
	ldr r1, [sp, #8]
	cmp r5, r1
	bge .L0809A412
	ldr r6, .L0809A4F8  @ Sprite_8x8
	lsls r0, r5, #3
	ldr r3, [sp, #4]
	adds r4, r0, r3
	subs r5, r1, r5
.L0809A3E6:
	adds r0, r7, #1
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	adds r3, r6, #0
	bl PutSpriteExt
	adds r0, r7, #0
	adds r0, #0xb
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, sl
	add r2, r8
	adds r3, r6, #0
	bl PutSpriteExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne .L0809A3E6
.L0809A412:
	ldr r0, [sp, #0xc]
	cmp r0, #1
	ble .L0809A44E
	ldr r5, .L0809A4F8  @ Sprite_8x8
	mov r4, sl
	adds r4, #8
	adds r6, r0, #0
	subs r6, #1
.L0809A422:
	adds r0, r7, #4
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	adds r0, r7, #0
	adds r0, #9
	str r0, [sp]
	movs r0, #4
	ldr r1, [sp, #4]
	add r1, r9
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bne .L0809A422
.L0809A44E:
	movs r6, #1
	ldr r1, [sp, #0xc]
	cmp r6, r1
	bge .L0809A4E6
	ldr r3, [sp, #8]
	subs r3, #3
	mov r9, r3
	adds r7, #5
	mov r8, r7
.L0809A460:
	movs r5, #1
	adds r0, r6, #1
	str r0, [sp, #0x14]
	cmp r5, r9
	bge .L0809A48A
	ldr r4, [sp, #4]
	adds r4, #8
	lsls r7, r6, #3
.L0809A470:
	mov r1, r8
	str r1, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r7
	ldr r3, .L0809A500  @ Sprite_32x8
	bl PutSpriteExt
	adds r4, #0x20
	adds r5, #4
	cmp r5, r9
	blt .L0809A470
.L0809A48A:
	ldr r0, [sp, #0x10]
	cmp r5, r0
	bge .L0809A4B4
	lsls r0, r5, #3
	ldr r1, [sp, #4]
	adds r4, r0, r1
	lsls r7, r6, #3
.L0809A498:
	mov r3, r8
	str r3, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r7
	ldr r3, .L0809A4FC  @ Sprite_16x8
	bl PutSpriteExt
	adds r4, #0x10
	adds r5, #2
	ldr r0, [sp, #0x10]
	cmp r5, r0
	blt .L0809A498
.L0809A4B4:
	ldr r1, [sp, #8]
	cmp r5, r1
	bge .L0809A4DE
	lsls r0, r5, #3
	ldr r3, [sp, #4]
	adds r4, r0, r3
	lsls r6, r6, #3
	subs r5, r1, r5
.L0809A4C4:
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r3, sl
	adds r2, r3, r6
	ldr r3, .L0809A4F8  @ Sprite_8x8
	bl PutSpriteExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne .L0809A4C4
.L0809A4DE:
	ldr r6, [sp, #0x14]
	ldr r0, [sp, #0xc]
	cmp r6, r0
	blt .L0809A460
.L0809A4E6:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A4F8: .4byte Sprite_8x8
.L0809A4FC: .4byte Sprite_16x8
.L0809A500: .4byte Sprite_32x8

	THUMB_FUNC_END func_0809A31C

	THUMB_FUNC_START func_0809A504
func_0809A504: @ 0x0809A504
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldrh r0, [r5, #0x34]
	lsrs r4, r0, #4
	adds r0, r4, #4
	cmp r4, r0
	bge .L0809A530
	lsls r6, r1, #0x18
.L0809A518:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	asrs r2, r6, #0x18
	bl func_0809A114
	adds r4, #1
	ldrh r0, [r5, #0x34]
	lsrs r0, r0, #4
	adds r0, #4
	cmp r4, r0
	blt .L0809A518
.L0809A530:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809A504

	THUMB_FUNC_START func_0809A538
func_0809A538: @ 0x0809A538
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl GetUnitItemCount
	adds r7, r0, #0
	bl func_08097CC8
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	movs r4, #0
	cmp r4, r7
	bge .L0809A56E
	cmp r6, #0x63
	bgt .L0809A56E
.L0809A554:
	ldrh r0, [r5, #0x1e]
	bl AddItemToConvoy
	adds r0, r5, #0
	movs r1, #0
	bl UnitRemoveItem
	adds r4, #1
	cmp r4, r7
	bge .L0809A56E
	adds r0, r4, r6
	cmp r0, #0x63
	ble .L0809A554
.L0809A56E:
	cmp r4, #0
	bgt .L0809A576
	movs r0, #0
	b .L0809A578
.L0809A576:
	movs r0, #1
.L0809A578:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809A538

	THUMB_FUNC_START func_0809A580
func_0809A580: @ 0x0809A580
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r0, r1, #0
	movs r7, #0
	lsls r1, r0, #1
	mov r8, r1
	movs r1, #7
	bl __modsi3
	mov sl, r0
	movs r2, #0
	mov r9, r2
.L0809A5A0:
	mov r0, r8
	adds r4, r0, r7
	bl GetPrepScreenUnitListSize
	cmp r4, r0
	bge .L0809A61A
	adds r0, r4, #0
	bl GetPrepScreenUnitListEntry
	adds r5, r0, #0
	movs r6, #0
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809A5D2
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809A5D2
	movs r6, #4
	b .L0809A5DE
.L0809A5D2:
	ldr r0, [r5, #0xc]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq .L0809A5DE
	movs r6, #1
.L0809A5DE:
	mov r1, sl
	lsls r4, r1, #1
	adds r4, r4, r7
	lsls r4, r4, #3
	ldr r0, .L0809A63C  @ gUnknown_02013598
	adds r4, r4, r0
	adds r0, r4, #0
	bl ClearText
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetMsg
	movs r1, #0x1f
	mov r2, r8
	ands r1, r2
	lsls r1, r1, #5
	adds r1, #0x10
	add r1, r9
	lsls r1, r1, #1
	ldr r2, .L0809A640  @ gBg2Tm
	adds r1, r1, r2
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r2, r6, #0
	movs r3, #0
	bl PutDrawText
.L0809A61A:
	movs r0, #7
	add r9, r0
	adds r7, #1
	cmp r7, #1
	ble .L0809A5A0
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A63C: .4byte gUnknown_02013598
.L0809A640: .4byte gBg2Tm

	THUMB_FUNC_END func_0809A580

	THUMB_FUNC_START func_0809A644
func_0809A644: @ 0x0809A644
	push {lr}
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, .L0809A668  @ gBg2Tm+0x20
	adds r0, r0, r1
	movs r1, #0xd
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #4
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L0809A668: .4byte gBg2Tm+0x20

	THUMB_FUNC_END func_0809A644

	THUMB_FUNC_START PrepScreenUnitSelectDisplaySprites
PrepScreenUnitSelectDisplaySprites: @ 0x0809A66C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	movs r6, #0
	b .L0809A6AE
.L0809A67A:
	asrs r0, r6, #1
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2, #0x30]
	subs r5, r0, r1
	adds r0, r5, #0
	adds r0, #0xf
	cmp r0, #0x5f
	bhi .L0809A6AC
	movs r0, #1
	ands r0, r6
	lsls r4, r0, #3
	subs r4, r4, r0
	lsls r4, r4, #3
	adds r4, #0x70
	adds r5, #0x18
	adds r0, r6, #0
	bl GetPrepScreenUnitListEntry
	adds r3, r0, #0
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl PutUnitSprite
.L0809A6AC:
	adds r6, #1
.L0809A6AE:
	bl GetPrepScreenUnitListSize
	cmp r6, r0
	blt .L0809A67A
	mov r0, r8
	ldrh r1, [r0, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq .L0809A758
	ldr r1, .L0809A754  @ gDispIo
	mov ip, r1
	ldrb r0, [r1, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	movs r3, #0xf0
	strb r3, [r0]
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x1a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r1, #3
	movs r0, #0x78
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2e
	strb r3, [r0]
	subs r1, #1
	movs r0, #0xa0
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	ldrb r0, [r6]
	movs r5, #1
	orrs r0, r5
	movs r3, #2
	orrs r0, r3
	movs r4, #5
	negs r4, r4
	ands r0, r4
	movs r2, #8
	orrs r0, r2
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r6]
	mov r1, ip
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r5
	orrs r0, r3
	ands r0, r4
	orrs r0, r2
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r1]
	mov r4, ip
	adds r4, #0x36
	ldrb r0, [r4]
	orrs r0, r5
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	orrs r0, r2
	orrs r0, r6
	strb r0, [r4]
	b .L0809A76E
	.align 2, 0
.L0809A754: .4byte gDispIo
.L0809A758:
	ldr r2, .L0809A7D0  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
.L0809A76E:
	mov r0, r8
	adds r0, #0x37
	ldrb r1, [r0]
	adds r7, r0, #0
	cmp r1, #0
	beq .L0809A77E
	adds r0, r1, #1
	strb r0, [r7]
.L0809A77E:
	movs r5, #0x87
	lsls r5, r5, #8
	movs r4, #4
	movs r6, #2
.L0809A786:
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x81
	ldr r3, .L0809A7D4  @ Sprite_32x16
	bl PutSpriteExt
	adds r5, #4
	adds r4, #0x20
	subs r6, #1
	cmp r6, #0
	bge .L0809A786
	ldrb r0, [r7]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809A7EC
	mov r0, r8
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0809A7EC
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809A7DC
	ldr r3, .L0809A7D8  @ gUnknown_08A18E62
	movs r0, #0x40
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x82
	bl PutSpriteExt
	b .L0809A7EC
	.align 2, 0
.L0809A7D0: .4byte gDispIo
.L0809A7D4: .4byte Sprite_32x16
.L0809A7D8: .4byte gUnknown_08A18E62
.L0809A7DC:
	ldr r3, .L0809A80C  @ gUnknown_08A18E4E
	movs r0, #0x40
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x82
	bl PutSpriteExt
.L0809A7EC:
	ldr r3, .L0809A810  @ gUnknown_08A18E34
	movs r0, #0x40
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x8f
	bl PutSpriteExt
	bl SyncUnitSpriteSheet
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A80C: .4byte gUnknown_08A18E4E
.L0809A810: .4byte gUnknown_08A18E34

	THUMB_FUNC_END PrepScreenUnitSelectDisplaySprites

	THUMB_FUNC_START func_0809A814
func_0809A814: @ 0x0809A814
	push {r4, r5, lr}
	bl ResetText
	ldr r5, .L0809A868  @ gUnknown_02013598
	movs r4, #0xd
.L0809A81E:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L0809A81E
	ldr r5, .L0809A86C  @ gUnknown_02013608
	movs r4, #4
.L0809A832:
	adds r0, r5, #0
	movs r1, #7
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L0809A832
	ldr r4, .L0809A870  @ gUnknown_02013630
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #0xa
	bl InitText
	adds r4, #0x10
	adds r0, r4, #0
	movs r1, #0xc
	bl InitText
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A868: .4byte gUnknown_02013598
.L0809A86C: .4byte gUnknown_02013608
.L0809A870: .4byte gUnknown_02013630

	THUMB_FUNC_END func_0809A814

	THUMB_FUNC_START func_0809A874
func_0809A874: @ 0x0809A874
	push {r4, lr}
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	movs r0, #4
	bl ApplyIconPalettes
	movs r4, #0xc0
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #8
	bl func_08095A44
	adds r0, r4, #0
	movs r1, #0xf
	bl func_080950E8
	ldr r0, .L0809A8D8  @ gUnknown_08A1B730
	ldr r1, .L0809A8DC  @ 0x06000440
	bl Decompress
	ldr r0, .L0809A8E0  @ gUnknown_08A1B7C8
	ldr r4, .L0809A8E4  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L0809A8E8  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L0809A8EC  @ gUnknown_08A1D510
	ldr r1, .L0809A8F0  @ 0x06010800
	bl Decompress
	ldr r0, .L0809A8F4  @ gUnknown_08A1D79C
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A8D8: .4byte gUnknown_08A1B730
.L0809A8DC: .4byte 0x06000440
.L0809A8E0: .4byte gUnknown_08A1B7C8
.L0809A8E4: .4byte gBuf
.L0809A8E8: .4byte gBg1Tm
.L0809A8EC: .4byte gUnknown_08A1D510
.L0809A8F0: .4byte 0x06010800
.L0809A8F4: .4byte gUnknown_08A1D79C

	THUMB_FUNC_END func_0809A874

	THUMB_FUNC_START func_0809A8F8
func_0809A8F8: @ 0x0809A8F8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl ApplyUnitSpritePalettes
	movs r0, #0
	str r0, [sp]
	ldr r1, .L0809A928  @ gPal+0x360
	ldr r2, .L0809A92C  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	bl InitPrepScreenUnitList
	ldr r0, [r4, #0x14]
	bl AtMenu_AutoCapDeployPrepScreenUnits
	bl func_08095928
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A928: .4byte gPal+0x360
.L0809A92C: .4byte 0x01000008

	THUMB_FUNC_END func_0809A8F8

	THUMB_FUNC_START func_0809A930
func_0809A930: @ 0x0809A930
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, .L0809A9E0  @ gBg0Tm+0xCA
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r5, #0
	bl GetUnitFid
	adds r1, r4, #0
	subs r1, #0x88
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r3, #0
	mov r9, r3
	str r3, [sp]
	movs r3, #2
	bl PutFaceChibi
	ldr r0, .L0809A9E4  @ gUnknown_02013630
	mov r8, r0
	bl ClearText
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	movs r0, #0x38
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	ldr r0, [r5]
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r4, #0
	subs r1, #0x80
	mov r2, r9
	str r2, [sp]
	str r0, [sp, #4]
	mov r0, r8
	movs r2, #0
	adds r3, r6, #0
	bl PutDrawText
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	adds r0, r4, #0
	adds r0, #8
	movs r1, #3
	movs r2, #0x1d
	bl PutSpecialChar
	adds r0, r4, #6
	movs r2, #8
	ldrsb r2, [r5, r2]
	movs r1, #2
	bl PutNumberOrBlank
	adds r4, #0xc
	ldrb r2, [r5, #9]
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809A9E0: .4byte gBg0Tm+0xCA
.L0809A9E4: .4byte gUnknown_02013630

	THUMB_FUNC_END func_0809A930

	THUMB_FUNC_START func_0809A9E8
func_0809A9E8: @ 0x0809A9E8
	push {lr}
	ldrh r0, [r0, #0x2e]
	bl GetPrepScreenUnitListEntry
	bl func_0809A930
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809A9E8

	THUMB_FUNC_START func_0809A9F8
func_0809A9F8: @ 0x0809A9F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	bl InitIcons
	ldr r4, .L0809AAE4  @ gBg0Tm+0x142
	adds r0, r4, #0
	movs r1, #0xb
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r7, #0
	bl GetUnitItemCount
	str r0, [sp, #8]
	movs r0, #0
	mov r8, r0
	ldr r2, [sp, #8]
	cmp r8, r2
	bge .L0809AACC
	movs r0, #0x14
	adds r0, r0, r4
	mov sl, r0
	mov r9, r4
	movs r2, #0xa0
	lsls r2, r2, #1
	str r2, [sp, #0xc]
.L0809AA38:
	mov r0, r8
	lsls r1, r0, #1
	adds r0, r7, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl GetItemIcon
	adds r1, r0, #0
	mov r0, r9
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	mov r2, r8
	lsls r1, r2, #3
	ldr r0, .L0809AAE8  @ gUnknown_02013608
	adds r5, r1, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r7, #0
	adds r1, r4, #0
	bl IsItemDisplayUsable
	movs r6, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809AA76
	movs r6, #1
.L0809AA76:
	adds r0, r4, #0
	bl GetItemName
	ldr r1, .L0809AAEC  @ gBg0Tm+0x2
	adds r1, #4
	ldr r2, [sp, #0xc]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r6, #0
	movs r3, #0
	bl PutDrawText
	adds r0, r7, #0
	adds r1, r4, #0
	bl IsItemDisplayUsable
	lsls r0, r0, #0x18
	movs r5, #1
	cmp r0, #0
	beq .L0809AAA6
	movs r5, #2
.L0809AAA6:
	adds r0, r4, #0
	bl GetItemUses
	adds r2, r0, #0
	mov r0, sl
	adds r1, r5, #0
	bl PutNumberOrBlank
	movs r0, #0x80
	add sl, r0
	add r9, r0
	ldr r2, [sp, #0xc]
	adds r2, #0x80
	str r2, [sp, #0xc]
	movs r0, #1
	add r8, r0
	ldr r2, [sp, #8]
	cmp r8, r2
	blt .L0809AA38
.L0809AACC:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809AAE4: .4byte gBg0Tm+0x142
.L0809AAE8: .4byte gUnknown_02013608
.L0809AAEC: .4byte gBg0Tm+0x2

	THUMB_FUNC_END func_0809A9F8

	THUMB_FUNC_START func_0809AAF0
func_0809AAF0: @ 0x0809AAF0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	lsls r1, r1, #0x18
	asrs r6, r1, #0x18
	cmp r6, #0
	bne .L0809AB34
	ldr r4, .L0809ABBC  @ gUnknown_02013640
	adds r0, r4, #0
	bl ClearText
	ldr r0, .L0809ABC0  @ 0x000005A1
	bl GetMsg
	ldr r5, .L0809ABC4  @ gBg0Tm+0x5A
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #6
	bl PutDrawText
	ldr r0, .L0809ABC8  @ 0x000005A2
	bl GetMsg
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0x29
	bl PutDrawText
.L0809AB34:
	ldr r4, .L0809ABCC  @ gBg0Tm+0x60
	adds r0, r4, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r3, r4, #2
	adds r5, r7, #0
	adds r5, #0x29
	adds r6, r7, #0
	adds r6, #0x2a
	ldrb r0, [r5]
	movs r1, #2
	ldrb r2, [r6]
	cmp r0, r2
	bne .L0809AB58
	movs r1, #1
.L0809AB58:
	ldrb r2, [r6]
	ldrb r0, [r5]
	subs r2, r2, r0
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r0, r4, #0
	adds r0, #0x10
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r3, r4, #0
	adds r3, #0x12
	ldrb r0, [r5]
	movs r1, #2
	ldrb r2, [r6]
	cmp r0, r2
	bne .L0809AB82
	movs r1, #4
.L0809AB82:
	ldrb r2, [r5]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r0, r4, #0
	adds r0, #0x14
	movs r1, #0
	movs r2, #0x16
	bl PutSpecialChar
	adds r3, r4, #0
	adds r3, #0x18
	ldrb r0, [r5]
	movs r1, #2
	ldrb r2, [r6]
	cmp r0, r2
	bne .L0809ABA6
	movs r1, #4
.L0809ABA6:
	ldrb r2, [r6]
	adds r0, r3, #0
	bl PutNumberOrBlank
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809ABBC: .4byte gUnknown_02013640
.L0809ABC0: .4byte 0x000005A1
.L0809ABC4: .4byte gBg0Tm+0x5A
.L0809ABC8: .4byte 0x000005A2
.L0809ABCC: .4byte gBg0Tm+0x60

	THUMB_FUNC_END func_0809AAF0

	THUMB_FUNC_START func_0809ABD0
func_0809ABD0: @ 0x0809ABD0
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r1, #0
	adds r0, #0x2a
	adds r3, r4, #0
	adds r3, #0x29
	ldrb r1, [r3]
	ldrb r0, [r0]
	cmp r0, r1
	bls .L0809AC20
	adds r0, r1, #1
	strb r0, [r3]
	ldr r0, [r2, #0xc]
	movs r1, #0xb
	negs r1, r1
	ands r0, r1
	str r0, [r2, #0xc]
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl func_080952EC
	ldr r0, .L0809AC1C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809AC0C
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809AC0C:
	ldrh r1, [r4, #0x2e]
	lsrs r1, r1, #1
	adds r0, r4, #0
	bl func_0809A580
	movs r0, #1
	b .L0809AC34
	.align 2, 0
.L0809AC1C: .4byte gPlaySt
.L0809AC20:
	ldr r0, .L0809AC3C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809AC32
	movs r0, #0x6c
	bl m4aSongNumStart
.L0809AC32:
	movs r0, #0
.L0809AC34:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L0809AC3C: .4byte gPlaySt

	THUMB_FUNC_END func_0809ABD0

	THUMB_FUNC_START func_0809AC40
func_0809AC40: @ 0x0809AC40
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl IsCharacterForceDeployed
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809AC94
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldr r0, [r4, #0xc]
	movs r1, #0xa
	orrs r0, r1
	str r0, [r4, #0xc]
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl func_08095314
	ldr r0, .L0809AC90  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809AC80
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809AC80:
	ldrh r1, [r5, #0x2e]
	lsrs r1, r1, #1
	adds r0, r5, #0
	bl func_0809A580
	movs r0, #1
	b .L0809ACA8
	.align 2, 0
.L0809AC90: .4byte gPlaySt
.L0809AC94:
	ldr r0, .L0809ACB0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809ACA6
	movs r0, #0x6c
	bl m4aSongNumStart
.L0809ACA6:
	movs r0, #0
.L0809ACA8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L0809ACB0: .4byte gPlaySt

	THUMB_FUNC_END func_0809AC40

	THUMB_FUNC_START func_0809ACB4
func_0809ACB4: @ 0x0809ACB4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2e]
	bl GetPrepScreenUnitListEntry
	adds r5, r0, #0
	ldr r1, [r5, #0xc]
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r0, r1
	cmp r0, #0
	beq .L0809ACF4
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, .L0809ACF0  @ 0x00000C52
.L0809ACE6:
	adds r3, r4, #0
	bl func_08097DA8
	b .L0809AD88
	.align 2, 0
.L0809ACF0: .4byte 0x00000C52
.L0809ACF4:
	movs r0, #8
	ands r1, r0
	cmp r1, #0
	beq .L0809AD76
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809AD34
	adds r0, r5, #0
	bl func_08097E74
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809AD34
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, .L0809AD30  @ 0x0000088A
	b .L0809ACE6
	.align 2, 0
.L0809AD30: .4byte 0x0000088A
.L0809AD34:
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809AD6C
	adds r0, r5, #0
	bl func_08097E38
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809AD6C
	ldrh r1, [r4, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r4, #0x30]
	subs r1, r1, r2
	adds r1, #0x18
	ldr r2, .L0809AD68  @ 0x00000889
	b .L0809ACE6
	.align 2, 0
.L0809AD68: .4byte 0x00000889
.L0809AD6C:
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_0809ABD0
	b .L0809AD7E
.L0809AD76:
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_0809AC40
.L0809AD7E:
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809AD88
	movs r0, #1
	b .L0809AD8A
.L0809AD88:
	movs r0, #0
.L0809AD8A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809ACB4

	THUMB_FUNC_START func_0809AD90
func_0809AD90: @ 0x0809AD90
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	lsrs r1, r0, #4
	cmp r1, #0
	ble .L0809ADA4
	ldrh r0, [r4, #0x2e]
	lsrs r0, r0, #1
	cmp r0, r1
	ble .L0809ADBA
.L0809ADA4:
	adds r5, r1, #5
	bl GetPrepScreenUnitListSize
	subs r0, #1
	asrs r0, r0, #1
	cmp r5, r0
	bge .L0809ADBE
	ldrh r0, [r4, #0x2e]
	lsrs r0, r0, #1
	cmp r0, r5
	blt .L0809ADBE
.L0809ADBA:
	movs r0, #1
	b .L0809ADC0
.L0809ADBE:
	movs r0, #0
.L0809ADC0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809AD90

	THUMB_FUNC_START func_0809ADC8
func_0809ADC8: @ 0x0809ADC8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl func_0809AD90
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809AE0A
	ldrh r0, [r5, #0x2e]
	lsrs r4, r0, #1
	ldrh r0, [r5, #0x30]
	lsrs r6, r0, #4
	bl GetPrepScreenUnitListSize
	subs r0, #1
	asrs r1, r0, #1
	cmp r4, r6
	bgt .L0809ADFC
	cmp r4, #0
	bne .L0809ADF2
	strh r4, [r5, #0x30]
	b .L0809ADF8
.L0809ADF2:
	subs r0, r4, #1
	lsls r0, r0, #4
	strh r0, [r5, #0x30]
.L0809ADF8:
	cmp r4, r6
	ble .L0809AE0A
.L0809ADFC:
	cmp r4, r1
	bne .L0809AE04
	subs r0, r4, #5
	b .L0809AE06
.L0809AE04:
	subs r0, r4, #4
.L0809AE06:
	lsls r0, r0, #4
	strh r0, [r5, #0x30]
.L0809AE0A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809ADC8

	THUMB_FUNC_START func_0809AE10
func_0809AE10: @ 0x0809AE10
	push {r4, r5, lr}
	movs r5, #0
	ldrh r0, [r0, #0x30]
	lsrs r4, r0, #4
	bl GetPrepScreenUnitListSize
	subs r0, #1
	asrs r1, r0, #1
	cmp r4, #0
	ble .L0809AE26
	movs r5, #1
.L0809AE26:
	adds r0, r4, #5
	cmp r0, r1
	bge .L0809AE30
	movs r0, #2
	orrs r5, r0
.L0809AE30:
	adds r0, r5, #0
	bl func_080ACD60
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809AE10

	THUMB_FUNC_START func_0809AE3C
func_0809AE3C: @ 0x0809AE3C
	push {r4, lr}
	adds r4, r0, #0
	bl InitPrepScreenUnitList
	bl func_08095394
	bl func_080958FC
	movs r1, #0
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x14]
	adds r0, #0x2a
	ldrb r0, [r0]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	ldr r0, [r4, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r2, #1
	strb r0, [r2]
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x3c]
	strh r0, [r4, #0x30]
	ldrh r0, [r4, #0x2e]
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x37
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809AE3C

	THUMB_FUNC_START func_0809AE7C
func_0809AE7C: @ 0x0809AE7C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, .L0809AFF8  @ gUnknown_08A181E8
	bl SetupBackgrounds
	ldr r4, .L0809AFFC  @ gDispIo
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	adds r0, r5, #0
	bl func_0809ADC8
	ldr r0, .L0809B000  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L0809B004  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L0809B008  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r3, #2
	orrs r0, r3
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl func_0809A814
	bl func_0809A874
	movs r0, #7
	bl EnableBgSync
	bl SetBlendNone
	adds r0, r5, #0
	bl func_0809A8F8
	ldr r0, .L0809B00C  @ PrepScreenUnitSelectDisplaySprites
	adds r1, r5, #0
	bl StartParallelWorker
	adds r0, r5, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	ldrh r1, [r5, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl func_080AD51C
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0xe0
	movs r2, #0x20
	bl func_08097748
	ldrh r4, [r5, #0x30]
	bl GetPrepScreenUnitListSize
	adds r2, r0, #0
	subs r2, #1
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl func_080976CC
	movs r0, #0x20
	movs r1, #0x8f
	movs r2, #9
	adds r3, r5, #0
	bl ShowRIsInfo
	ldrh r0, [r5, #0x2e]
	bl GetPrepScreenUnitListEntry
	bl func_0809A9F8
	ldrh r0, [r5, #0x2e]
	bl GetPrepScreenUnitListEntry
	bl func_0809A930
	movs r4, #0
.L0809AFC4:
	ldrh r1, [r5, #0x30]
	lsrs r1, r1, #4
	adds r1, r1, r4
	adds r0, r5, #0
	bl func_0809A580
	adds r4, #1
	cmp r4, #5
	ble .L0809AFC4
	adds r0, r5, #0
	movs r1, #0
	bl func_0809AAF0
	adds r0, r5, #0
	bl StartGreenText
	ldr r0, .L0809B010  @ 0x06014800
	movs r1, #5
	bl LoadHelpBoxGfx
	bl RestartScreenMenuScrollingBg
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809AFF8: .4byte gUnknown_08A181E8
.L0809AFFC: .4byte gDispIo
.L0809B000: .4byte gBg0Tm
.L0809B004: .4byte gBg1Tm
.L0809B008: .4byte gBg2Tm
.L0809B00C: .4byte PrepScreenUnitSelectDisplaySprites
.L0809B010: .4byte 0x06014800

	THUMB_FUNC_END func_0809AE7C

	THUMB_FUNC_START func_0809B014
func_0809B014: @ 0x0809B014
	push {lr}
	bl Delete6CMenuScroll
	bl EndAllParallelWorkers
	bl func_080AD2D4
	bl EndPrepScreenHandCursor
	bl HideRIsInfo
	bl func_080ACDDC
	bl EndScreenMenuScrollingBg
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B014

	THUMB_FUNC_START func_0809B038
func_0809B038: @ 0x0809B038
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	beq .L0809B046
	b .L0809B25A
.L0809B046:
	ldr r4, .L0809B094  @ gKeySt
	ldr r2, [r4]
	ldrh r6, [r2, #6]
	adds r3, r5, #0
	adds r3, #0x36
	movs r7, #4
	strb r7, [r3]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809B066
	ldrh r6, [r2, #4]
	movs r0, #8
	strb r0, [r3]
.L0809B066:
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L0809B0BC
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0809B09C
	ldr r0, .L0809B098  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809B08A
	b .L0809B2D4
.L0809B08A:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809B2D4
	.align 2, 0
.L0809B094: .4byte gKeySt
.L0809B098: .4byte gPlaySt
.L0809B09C:
	ldr r0, .L0809B0B8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B0AE
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809B0AE:
	adds r0, r5, #0
	movs r1, #0x63
	bl Proc_Goto
	b .L0809B2D4
	.align 2, 0
.L0809B0B8: .4byte gPlaySt
.L0809B0BC:
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809B0E4
	ldr r0, .L0809B0E0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B0D6
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809B0D6:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b .L0809B2D4
	.align 2, 0
.L0809B0E0: .4byte gPlaySt
.L0809B0E4:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809B0F8
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b .L0809B2D4
.L0809B0F8:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809B11A
	adds r0, r5, #0
	bl func_0809ACB4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809B110
	b .L0809B2D4
.L0809B110:
	adds r0, r5, #0
	movs r1, #1
	bl func_0809AAF0
	b .L0809B2D4
.L0809B11A:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809B144
	ldr r0, .L0809B140  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B134
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809B134:
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
	b .L0809B2D4
	.align 2, 0
.L0809B140: .4byte gPlaySt
.L0809B144:
	movs r0, #0x20
	ands r0, r6
	cmp r0, #0
	beq .L0809B15A
	ldrh r1, [r5, #0x2e]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809B15A
	subs r0, r1, #1
	strh r0, [r5, #0x2e]
.L0809B15A:
	movs r0, #0x10
	ands r0, r6
	cmp r0, #0
	beq .L0809B17E
	ldrh r1, [r5, #0x2e]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809B17E
	ldrh r4, [r5, #0x2e]
	bl GetPrepScreenUnitListSize
	subs r0, #1
	cmp r4, r0
	bge .L0809B17E
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
.L0809B17E:
	movs r0, #0x40
	ands r0, r6
	cmp r0, #0
	beq .L0809B190
	ldrh r0, [r5, #0x2e]
	subs r0, #2
	cmp r0, #0
	blt .L0809B190
	strh r0, [r5, #0x2e]
.L0809B190:
	movs r0, #0x80
	ands r6, r0
	cmp r6, #0
	beq .L0809B1AC
	ldrh r4, [r5, #0x2e]
	adds r4, #2
	bl GetPrepScreenUnitListSize
	subs r0, #1
	cmp r4, r0
	bgt .L0809B1AC
	ldrh r0, [r5, #0x2e]
	adds r0, #2
	strh r0, [r5, #0x2e]
.L0809B1AC:
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	bne .L0809B1B6
	b .L0809B2D4
.L0809B1B6:
	ldrh r0, [r5, #0x2e]
	bl GetPrepScreenUnitListEntry
	bl func_0809A9F8
	ldr r0, .L0809B224  @ func_0809A9E8
	movs r1, #1
	adds r2, r5, #0
	bl func_080ACE20
	ldr r0, .L0809B228  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B1DC
	movs r0, #0x65
	bl m4aSongNumStart
.L0809B1DC:
	adds r0, r5, #0
	bl func_0809AD90
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809B22C
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bcs .L0809B1FC
	ldrh r1, [r5, #0x30]
	lsrs r1, r1, #4
	subs r1, #1
	adds r0, r5, #0
	bl func_0809A580
.L0809B1FC:
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bls .L0809B210
	ldrh r1, [r5, #0x30]
	lsrs r1, r1, #4
	adds r1, #6
	adds r0, r5, #0
	bl func_0809A580
.L0809B210:
	ldrh r0, [r5, #0x2e]
	movs r1, #1
	ands r1, r0
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x70
	bl func_080AD4E4
	b .L0809B252
	.align 2, 0
.L0809B224: .4byte func_0809A9E8
.L0809B228: .4byte gPlaySt
.L0809B22C:
	ldrh r1, [r5, #0x2e]
	strh r1, [r5, #0x2c]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x11
	lsls r1, r1, #4
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl func_080AD51C
.L0809B252:
	ldrh r0, [r5, #0x2c]
	ldrh r1, [r5, #0x2e]
	cmp r0, r1
	beq .L0809B2D4
.L0809B25A:
	ldrh r3, [r5, #0x2e]
	ldrh r2, [r5, #0x2c]
	cmp r3, r2
	bcs .L0809B26E
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r1, [r0]
	ldrh r0, [r5, #0x30]
	subs r0, r0, r1
	strh r0, [r5, #0x30]
.L0809B26E:
	cmp r3, r2
	bls .L0809B27E
	adds r1, r5, #0
	adds r1, #0x36
	ldrh r0, [r5, #0x30]
	ldrb r1, [r1]
	adds r0, r0, r1
	strh r0, [r5, #0x30]
.L0809B27E:
	ldrh r1, [r5, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L0809B2A4
	lsrs r0, r1, #4
	subs r0, #1
	bl func_0809A644
	ldrh r0, [r5, #0x30]
	lsrs r0, r0, #4
	adds r0, #6
	bl func_0809A644
	adds r0, r5, #0
	bl func_0809AE10
	ldrh r0, [r5, #0x2e]
	strh r0, [r5, #0x2c]
.L0809B2A4:
	ldrh r2, [r5, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldrh r4, [r5, #0x30]
	bl GetPrepScreenUnitListSize
	adds r2, r0, #0
	subs r2, #1
	lsrs r0, r2, #0x1f
	adds r2, r2, r0
	asrs r2, r2, #1
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl func_080976CC
.L0809B2D4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B038

	THUMB_FUNC_START func_0809B2DC
func_0809B2DC: @ 0x0809B2DC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x34]
	adds r1, #4
	strh r1, [r4, #0x34]
	ldrh r0, [r4, #0x30]
	adds r0, #4
	strh r0, [r4, #0x30]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmp r1, #0x20
	bne .L0809B2FA
	adds r0, r4, #0
	bl Proc_Break
.L0809B2FA:
	ldrh r2, [r4, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L0809B31C
	lsrs r0, r1, #4
	subs r0, #1
	bl func_0809A644
.L0809B31C:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B2DC

	THUMB_FUNC_START func_0809B324
func_0809B324: @ 0x0809B324
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x30]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L0809B33C
	lsrs r1, r1, #4
	subs r1, #1
	adds r0, r4, #0
	bl func_0809A580
.L0809B33C:
	ldrh r1, [r4, #0x34]
	subs r1, #4
	strh r1, [r4, #0x34]
	ldrh r0, [r4, #0x30]
	subs r0, #4
	strh r0, [r4, #0x30]
	lsls r1, r1, #0x10
	cmp r1, #0
	bne .L0809B354
	adds r0, r4, #0
	bl Proc_Break
.L0809B354:
	ldrh r2, [r4, #0x30]
	subs r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B324

	THUMB_FUNC_START nullsub_21
nullsub_21: @ 0x0809B36C
	bx lr

	THUMB_FUNC_END nullsub_21

	THUMB_FUNC_START func_0809B370
func_0809B370: @ 0x0809B370
	push {lr}
	bl nullsub_21
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0xd0
	movs r1, #0x68
	movs r2, #0
	bl func_080AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B370

	THUMB_FUNC_START func_0809B388
func_0809B388: @ 0x0809B388
	push {lr}
	adds r3, r0, #0
	ldrh r1, [r3, #0x2e]
	movs r2, #1
	ands r2, r1
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #3
	adds r0, #0x70
	lsrs r1, r1, #1
	lsls r1, r1, #4
	ldrh r2, [r3, #0x30]
	subs r2, #0x18
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl func_080AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B388

	THUMB_FUNC_START func_0809B3B4
func_0809B3B4: @ 0x0809B3B4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809B404  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809B3D8
	ldr r0, .L0809B408  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B3D8
	movs r0, #0x6c
	bl m4aSongNumStart
.L0809B3D8:
	ldr r0, .L0809B404  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L0809B3FE
	ldr r0, .L0809B408  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B3F8
	movs r0, #0x65
	bl m4aSongNumStart
.L0809B3F8:
	adds r0, r4, #0
	bl Proc_Break
.L0809B3FE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809B404: .4byte gKeySt
.L0809B408: .4byte gPlaySt

	THUMB_FUNC_END func_0809B3B4

	THUMB_FUNC_START func_0809B40C
func_0809B40C: @ 0x0809B40C
	push {lr}
	ldr r2, [r0, #0x14]
	ldrh r1, [r0, #0x30]
	strh r1, [r2, #0x3c]
	ldr r1, [r0, #0x14]
	adds r2, r0, #0
	adds r2, #0x29
	ldrb r2, [r2]
	adds r1, #0x2b
	strb r2, [r1]
	ldrh r0, [r0, #0x2e]
	bl GetPrepScreenUnitListEntry
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl func_080953C0
	bl EndScreenMenuScrollingBg
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B40C

	THUMB_FUNC_START func_0809B438
func_0809B438: @ 0x0809B438
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x36
	movs r5, #1
	strb r5, [r0]
	ldr r0, [r4, #0x14]
	movs r1, #6
	bl Proc_Goto
	adds r4, #0x37
	strb r5, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B438

	THUMB_FUNC_START func_0809B458
func_0809B458: @ 0x0809B458
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2e]
	bl GetPrepScreenUnitListEntry
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl func_080953C0
	adds r0, r4, #0
	bl func_080920DC
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B458

	THUMB_FUNC_START func_0809B478
func_0809B478: @ 0x0809B478
	push {r4, r5, lr}
	adds r4, r0, #0
	bl func_080956A8
	movs r1, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	adds r4, #0x29
	strb r1, [r4]
	movs r5, #1
.L0809B48C:
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L0809B4AE
	ldr r0, [r1]
	cmp r0, #0
	beq .L0809B4AE
	ldr r0, [r1, #0xc]
	ldr r1, .L0809B4BC  @ 0x0001000C
	ands r0, r1
	cmp r0, #0
	bne .L0809B4AE
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
.L0809B4AE:
	adds r5, #1
	cmp r5, #0x3f
	ble .L0809B48C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809B4BC: .4byte 0x0001000C

	THUMB_FUNC_END func_0809B478

	THUMB_FUNC_START func_0809B4C0
func_0809B4C0: @ 0x0809B4C0
	ldr r2, .L0809B4E0  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L0809B4E0: .4byte gDispIo

	THUMB_FUNC_END func_0809B4C0

	THUMB_FUNC_START func_0809B4E4
func_0809B4E4: @ 0x0809B4E4
	ldr r2, .L0809B500  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L0809B500: .4byte gDispIo

	THUMB_FUNC_END func_0809B4E4

	THUMB_FUNC_START func_0809B504
func_0809B504: @ 0x0809B504
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x11
	bl SetStatScreenConfig
	ldrh r0, [r4, #0x2e]
	bl GetPrepScreenUnitListEntry
	adds r1, r4, #0
	bl StartStatScreen
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B504

	THUMB_FUNC_START func_0809B520
func_0809B520: @ 0x0809B520
	push {r4, lr}
	adds r4, r0, #0
	bl InitPrepScreenUnitList
	bl func_08095674
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B520

	THUMB_FUNC_START func_0809B538
func_0809B538: @ 0x0809B538
	push {r4, r5, r6, lr}
	adds r6, r2, #0
	lsls r1, r1, #1
	adds r4, r0, #0
	adds r4, #0x1e
	adds r4, r4, r1
	ldrh r5, [r4]
	lsls r3, r3, #1
	adds r1, r6, #0
	adds r1, #0x1e
	adds r1, r1, r3
	ldrh r2, [r1]
	strh r2, [r4]
	strh r5, [r1]
	bl UnitRemoveInvalidItems
	adds r0, r6, #0
	bl UnitRemoveInvalidItems
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B538

	THUMB_FUNC_START func_0809B564
func_0809B564: @ 0x0809B564
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809B5C8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L0809B5E8
	ldr r0, [r4, #0x34]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	bne .L0809B582
	b .L0809B744
.L0809B582:
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r3, [r4, #0x38]
	cmp r3, #0xff
	beq .L0809B5B0
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne .L0809B5B0
	ldr r0, [r4, #0x34]
	adds r0, #8
	asrs r0, r0, #3
	movs r1, #1
	ands r0, r1
	asrs r1, r3, #3
	cmp r0, r1
	beq .L0809B5B0
	movs r0, #5
	cmp r2, #5
	beq .L0809B5AE
	adds r0, r2, #1
.L0809B5AE:
	adds r2, r0, #0
.L0809B5B0:
	cmp r2, #0
	bgt .L0809B5B6
	b .L0809B744
.L0809B5B6:
	ldr r1, [r4, #0x34]
	movs r0, #7
	ands r0, r1
	cmp r2, r0
	ble .L0809B5CC
	adds r0, r1, #0
	subs r0, #8
	b .L0809B5CE
	.align 2, 0
.L0809B5C8: .4byte gKeySt
.L0809B5CC:
	subs r0, r2, #1
.L0809B5CE:
	str r0, [r4, #0x34]
	ldr r0, .L0809B5E4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809B5DE
	b .L0809B738
.L0809B5DE:
	movs r0, #0x67
	b .L0809B734
	.align 2, 0
.L0809B5E4: .4byte gPlaySt
.L0809B5E8:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L0809B658
	ldr r0, [r4, #0x34]
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq .L0809B5FC
	b .L0809B744
.L0809B5FC:
	ldr r0, [r4, #0x30]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r3, [r4, #0x38]
	cmp r3, #0xff
	beq .L0809B62A
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne .L0809B62A
	ldr r0, [r4, #0x34]
	adds r0, #8
	asrs r0, r0, #3
	movs r1, #1
	ands r0, r1
	asrs r1, r3, #3
	cmp r0, r1
	beq .L0809B62A
	movs r0, #5
	cmp r2, #5
	beq .L0809B628
	adds r0, r2, #1
.L0809B628:
	adds r2, r0, #0
.L0809B62A:
	cmp r2, #0
	bgt .L0809B630
	b .L0809B744
.L0809B630:
	ldr r1, [r4, #0x34]
	movs r0, #7
	ands r0, r1
	cmp r2, r0
	ble .L0809B640
	adds r0, r1, #0
	adds r0, #8
	b .L0809B642
.L0809B640:
	adds r0, r2, #7
.L0809B642:
	str r0, [r4, #0x34]
	ldr r0, .L0809B654  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B738
	movs r0, #0x67
	b .L0809B734
	.align 2, 0
.L0809B654: .4byte gPlaySt
.L0809B658:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L0809B6C4
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r3, r0, #0
	ldr r1, [r4, #0x38]
	cmp r1, #0xff
	beq .L0809B694
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne .L0809B694
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	asrs r1, r1, #3
	cmp r0, r1
	beq .L0809B694
	movs r0, #5
	cmp r3, #5
	beq .L0809B692
	adds r0, r3, #1
.L0809B692:
	adds r3, r0, #0
.L0809B694:
	ldr r2, [r4, #0x34]
	movs r0, #7
	ands r0, r2
	cmp r0, #0
	ble .L0809B6A4
	subs r0, r2, #1
	str r0, [r4, #0x34]
	b .L0809B726
.L0809B6A4:
	ldr r0, .L0809B6C0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L0809B744
	movs r0, #8
	ands r2, r0
	adds r0, r2, r3
	subs r0, #1
	str r0, [r4, #0x34]
	b .L0809B726
	.align 2, 0
.L0809B6C0: .4byte gKeySt
.L0809B6C4:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L0809B744
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r3, r0, #0
	ldr r1, [r4, #0x38]
	cmp r1, #0xff
	beq .L0809B700
	ldr r0, [r4, #0x3c]
	cmp r0, #0xff
	bne .L0809B700
	ldr r0, [r4, #0x34]
	asrs r0, r0, #3
	asrs r1, r1, #3
	cmp r0, r1
	beq .L0809B700
	movs r0, #5
	cmp r3, #5
	beq .L0809B6FE
	adds r0, r3, #1
.L0809B6FE:
	adds r3, r0, #0
.L0809B700:
	ldr r2, [r4, #0x34]
	movs r0, #7
	ands r0, r2
	subs r1, r3, #1
	cmp r0, r1
	bge .L0809B712
	adds r0, r2, #1
	str r0, [r4, #0x34]
	b .L0809B726
.L0809B712:
	ldr r0, .L0809B73C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L0809B744
	movs r0, #8
	ands r2, r0
	str r2, [r4, #0x34]
.L0809B726:
	ldr r0, .L0809B740  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809B738
	movs r0, #0x66
.L0809B734:
	bl m4aSongNumStart
.L0809B738:
	movs r0, #1
	b .L0809B746
	.align 2, 0
.L0809B73C: .4byte gKeySt
.L0809B740: .4byte gPlaySt
.L0809B744:
	movs r0, #0
.L0809B746:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809B564

	THUMB_FUNC_START func_0809B74C
func_0809B74C: @ 0x0809B74C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r4, r0, #0
	mov r9, r1
	mov sl, r2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #8]
	movs r1, #0xb
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	mov r0, sl
	bl GetUnitItemCount
	str r0, [sp, #0x10]
	movs r0, #0
	str r0, [sp, #0xc]
	ldr r1, [sp, #0x10]
	cmp r0, r1
	bge .L0809B820
	adds r0, r4, #4
	str r0, [sp, #0x14]
	mov r8, r4
.L0809B786:
	ldr r0, [sp, #0xc]
	lsls r1, r0, #1
	mov r0, sl
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r6, [r0]
	ldr r1, [sp, #8]
	cmp r1, #0
	beq .L0809B7A2
	mov r0, sl
	adds r1, r6, #0
	bl CanUnitUseItemPrepScreen
	b .L0809B7AA
.L0809B7A2:
	mov r0, sl
	adds r1, r6, #0
	bl IsItemDisplayUsable
.L0809B7AA:
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r0, r9
	bl ClearText
	adds r0, r6, #0
	bl GetItemName
	adds r1, r0, #0
	movs r2, #0
	lsls r0, r4, #0x18
	asrs r5, r0, #0x18
	cmp r5, #0
	bne .L0809B7C8
	movs r2, #1
.L0809B7C8:
	movs r0, #0
	str r0, [sp]
	str r1, [sp, #4]
	mov r0, r9
	ldr r1, [sp, #0x14]
	movs r3, #0
	bl PutDrawText
	mov r4, r8
	adds r4, #0x16
	movs r7, #1
	cmp r5, #0
	beq .L0809B7E4
	movs r7, #2
.L0809B7E4:
	adds r0, r6, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	bl PutNumberOrBlank
	adds r0, r6, #0
	bl GetItemIcon
	adds r1, r0, #0
	mov r0, r8
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	movs r0, #8
	add r9, r0
	ldr r1, [sp, #0x14]
	adds r1, #0x80
	str r1, [sp, #0x14]
	movs r0, #0x80
	add r8, r0
	ldr r1, [sp, #0xc]
	adds r1, #1
	str r1, [sp, #0xc]
	ldr r0, [sp, #0x10]
	cmp r1, r0
	blt .L0809B786
.L0809B820:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B74C

	THUMB_FUNC_START func_0809B830
func_0809B830: @ 0x0809B830
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r0, r7, #0
	bl GetUnitItemCount
	adds r6, r0, #0
	movs r5, #0
	cmp r5, r6
	bge .L0809B866
.L0809B844:
	lsls r1, r5, #1
	adds r0, r7, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r4, #0x80
	adds r5, #1
	cmp r5, r6
	blt .L0809B844
.L0809B866:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809B830

	THUMB_FUNC_START func_0809B86C
func_0809B86C: @ 0x0809B86C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0x28
	mov r8, r0
	add r1, sp, #8
	ldr r0, .L0809B964  @ gUnknown_08205C44
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	ldr r0, .L0809B968  @ gUnknown_08A181E8
	ldrh r0, [r0]
	bl SetupBackgrounds
	add r0, sp, #8
	bl SetFaceConfig
	ldr r3, .L0809B96C  @ gDispIo
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	ldrb r1, [r3, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	bl ResetText
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L0809B970  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	movs r0, #4
	bl ApplyIconPalettes
	bl RestartScreenMenuScrollingBg
	ldr r0, .L0809B974  @ gUnknown_02013510
	adds r6, r0, #0
	adds r6, #0x28
	adds r5, r0, #0
	movs r4, #4
.L0809B932:
	adds r0, r5, #0
	movs r1, #7
	bl InitTextDb
	adds r0, r6, #0
	movs r1, #7
	bl InitTextDb
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L0809B932
	movs r0, #0xff
	mov r4, r8
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x40]
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq .L0809B978
	adds r0, r1, #0
	adds r0, #8
	str r0, [r4, #0x34]
	b .L0809B992
	.align 2, 0
.L0809B964: .4byte gUnknown_08205C44
.L0809B968: .4byte gUnknown_08A181E8
.L0809B96C: .4byte gDispIo
.L0809B970: .4byte 0x06014000
.L0809B974: .4byte gUnknown_02013510
.L0809B978:
	mov r1, r8
	ldr r0, [r1, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne .L0809B98C
	movs r0, #8
	mov r2, r8
	str r0, [r2, #0x34]
	b .L0809B992
.L0809B98C:
	movs r0, #0
	mov r3, r8
	str r0, [r3, #0x34]
.L0809B992:
	movs r0, #0xff
	mov r4, r8
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x2c]
	bl GetUnitFid
	adds r1, r0, #0
	movs r4, #4
	negs r4, r4
	ldr r0, .L0809BB24  @ 0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r4, #0
	bl NewFace2
	mov r1, r8
	ldr r0, [r1, #0x30]
	bl GetUnitFid
	adds r1, r0, #0
	ldr r0, .L0809BB28  @ 0x00000202
	str r0, [sp]
	movs r0, #1
	movs r2, #0xae
	adds r3, r4, #0
	bl NewFace2
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl DrawUiFrame2
	str r6, [sp]
	movs r0, #0xf
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl DrawUiFrame2
	movs r0, #7
	bl EnableBgSync
	mov r2, r8
	ldr r0, [r2, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r7, r0, #0
	bl GetStringTextLen
	adds r3, r0, #0
	movs r4, #0x30
	subs r3, r4, r3
	lsrs r0, r3, #0x1f
	adds r3, r3, r0
	asrs r3, r3, #1
	ldr r0, .L0809BB2C  @ gBg0Tm
	mov r9, r0
	movs r5, #6
	str r5, [sp]
	str r7, [sp, #4]
	movs r0, #0
	mov r1, r9
	movs r2, #0
	bl PutDrawText
	mov r1, r8
	ldr r0, [r1, #0x30]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r7, r0, #0
	bl GetStringTextLen
	subs r4, r4, r0
	lsrs r0, r4, #0x1f
	adds r4, r4, r0
	asrs r4, r4, #1
	mov r1, r9
	adds r1, #0x30
	str r5, [sp]
	str r7, [sp, #4]
	movs r0, #0
	movs r2, #0
	adds r3, r4, #0
	bl PutDrawText
	movs r0, #0x91
	lsls r0, r0, #2
	add r0, r9
	ldr r4, .L0809BB30  @ gUnknown_02013510
	mov r3, r8
	ldr r2, [r3, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	movs r0, #0x98
	lsls r0, r0, #2
	add r0, r9
	adds r4, #0x28
	mov r1, r8
	ldr r2, [r1, #0x30]
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	mov r0, r8
	bl func_080AC9C0
	mov r0, r8
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	mov r2, r8
	ldr r1, [r2, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #0xc8
	movs r1, #0x93
	movs r2, #2
	mov r3, r8
	bl ShowRIsInfo
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	mov r4, r8
	str r4, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl StartSmallBrownNameBoxes
	movs r1, #0x28
	negs r1, r1
	movs r4, #1
	negs r4, r4
	movs r0, #0
	adds r2, r4, #0
	movs r3, #1
	bl func_080ADBFC
	movs r0, #1
	movs r1, #0xb8
	adds r2, r4, #0
	movs r3, #0
	bl func_080ADBFC
	movs r0, #1
	movs r1, #0xe
	movs r2, #4
	movs r3, #0
	bl SetBlendConfig
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	add sp, #0x28
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809BB24: .4byte 0x00000203
.L0809BB28: .4byte 0x00000202
.L0809BB2C: .4byte gBg0Tm
.L0809BB30: .4byte gUnknown_02013510

	THUMB_FUNC_END func_0809B86C

	THUMB_FUNC_START func_0809BB34
func_0809BB34: @ 0x0809BB34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r2, [r6, #0x3c]
	cmp r2, #0xff
	beq .L0809BB60
	ldr r0, .L0809BB5C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809BB54
	b .L0809BDB8
.L0809BB54:
	bl MoveableHelpBox_OnEnd
	movs r0, #0xff
	b .L0809BE18
	.align 2, 0
.L0809BB5C: .4byte gKeySt
.L0809BB60:
	ldr r0, .L0809BB9C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809BBA0
	ldr r2, [r6, #0x34]
	asrs r3, r2, #3
	lsls r1, r3, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	movs r4, #7
	ands r4, r2
	lsls r1, r4, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	bne .L0809BB90
	b .L0809BE1A
.L0809BB90:
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r4, #4
	b .L0809BE10
	.align 2, 0
.L0809BB9C: .4byte gKeySt
.L0809BBA0:
	ldr r4, [r6, #0x38]
	cmp r4, #0xff
	bne .L0809BBA8
	b .L0809BD00
.L0809BBA8:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809BBB2
	b .L0809BCB8
.L0809BBB2:
	asrs r0, r4, #3
	lsls r0, r0, #2
	adds r7, r6, #0
	adds r7, #0x2c
	adds r0, r7, r0
	ldr r0, [r0]
	movs r1, #7
	mov r8, r1
	ands r4, r1
	ldr r3, [r6, #0x34]
	asrs r1, r3, #3
	lsls r1, r1, #2
	adds r1, r7, r1
	ldr r2, [r1]
	mov r1, r8
	ands r3, r1
	adds r1, r4, #0
	bl func_08097EA0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809BBF4
	movs r1, #1
	negs r1, r1
	ldr r2, .L0809BBF0  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r6, #0
	bl func_08097DA8
	b .L0809BE1A
	.align 2, 0
.L0809BBF0: .4byte 0x0000088B
.L0809BBF4:
	ldr r1, [r6, #0x38]
	asrs r0, r1, #3
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	mov r2, r8
	ands r1, r2
	ldr r3, [r6, #0x34]
	asrs r2, r3, #3
	lsls r2, r2, #2
	adds r2, r7, r2
	ldr r2, [r2]
	mov r4, r8
	ands r3, r4
	bl func_0809B538
	ldr r4, .L0809BC58  @ gBg0Tm+0x244
	ldr r5, .L0809BC5C  @ gUnknown_02013510
	ldr r2, [r6, #0x2c]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl func_0809B74C
	adds r4, #0x1c
	adds r5, #0x28
	ldr r2, [r6, #0x30]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl func_0809B74C
	movs r0, #1
	bl EnableBgSync
	ldr r0, [r6, #0x38]
	asrs r0, r0, #3
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #0
	bne .L0809BC60
	ldr r0, [r6, #0x38]
	adds r0, #8
	movs r1, #8
	ands r0, r1
	b .L0809BC74
	.align 2, 0
.L0809BC58: .4byte gBg0Tm+0x244
.L0809BC5C: .4byte gUnknown_02013510
.L0809BC60:
	ldr r1, [r6, #0x38]
	adds r0, r1, #0
	mov r3, r8
	ands r0, r3
	cmp r2, r0
	bgt .L0809BC76
	movs r0, #8
	ands r1, r0
	adds r0, r1, r2
	subs r0, #1
.L0809BC74:
	str r0, [r6, #0x38]
.L0809BC76:
	ldr r0, .L0809BCB4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809BC88
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809BC88:
	movs r0, #0
	bl func_080ACA84
	ldr r1, [r6, #0x38]
	str r1, [r6, #0x34]
	movs r0, #0xff
	str r0, [r6, #0x38]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl func_080AD51C
	b .L0809BE1A
	.align 2, 0
.L0809BCB4: .4byte gPlaySt
.L0809BCB8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L0809BCC2
	b .L0809BDB8
.L0809BCC2:
	str r4, [r6, #0x34]
	str r2, [r6, #0x38]
	asrs r1, r4, #3
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #4
	adds r0, #0x10
	movs r1, #7
	ands r4, r1
	lsls r1, r4, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl func_080AD51C
	ldr r0, .L0809BCFC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809BCF4
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809BCF4:
	movs r0, #0
	bl func_080ACA84
	b .L0809BE1A
	.align 2, 0
.L0809BCFC: .4byte gPlaySt
.L0809BD00:
	movs r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809BD90
	ldr r0, [r6, #0x34]
	asrs r0, r0, #3
	adds r0, #1
	ands r0, r2
	lsls r0, r0, #2
	adds r1, r6, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldr r2, [r6, #0x34]
	str r2, [r6, #0x38]
	asrs r0, r2, #3
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	adds r1, #0x10
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r3, #0
	bl func_080AC9D4
	cmp r4, #4
	bgt .L0809BD50
	ldr r0, [r6, #0x34]
	adds r0, #8
	movs r1, #8
	ands r0, r1
	adds r0, r0, r4
	b .L0809BD58
.L0809BD50:
	ldr r0, [r6, #0x34]
	adds r0, #8
	movs r1, #0xf
	ands r0, r1
.L0809BD58:
	str r0, [r6, #0x34]
	ldr r1, [r6, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl func_080AD51C
	ldr r0, .L0809BD8C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809BE1A
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L0809BE1A
	.align 2, 0
.L0809BD8C: .4byte gPlaySt
.L0809BD90:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809BDB8
	adds r0, r6, #0
	bl Proc_Break
	ldr r0, .L0809BDB4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809BE1A
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809BE1A
	.align 2, 0
.L0809BDB4: .4byte gPlaySt
.L0809BDB8:
	adds r0, r6, #0
	bl func_0809B564
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809BE1A
	ldr r1, [r6, #0x34]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r5, #7
	ands r1, r5
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #0xb
	bl func_080AD51C
	ldr r0, [r6, #0x3c]
	cmp r0, #0xff
	beq .L0809BE1A
	ldr r2, [r6, #0x34]
	asrs r4, r2, #3
	lsls r1, r4, #2
	adds r0, r6, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r3, r5, #0
	ands r3, r2
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L0809BE1A
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r3, #4
.L0809BE10:
	adds r1, #0x48
	bl ShowItemHelpBox
	ldr r0, [r6, #0x34]
.L0809BE18:
	str r0, [r6, #0x3c]
.L0809BE1A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809BB34

	THUMB_FUNC_START func_0809BE24
func_0809BE24: @ 0x0809BE24
	push {lr}
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl EndFaceById
	movs r0, #1
	bl EndFaceById
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809BE24

	THUMB_FUNC_START StartPrepScreenTrade
StartPrepScreenTrade: @ 0x0809BE3C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, .L0809BE5C  @ gUnknown_08A1901C
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	movs r1, #1
	negs r1, r1
	str r1, [r0, #0x40]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809BE5C: .4byte gUnknown_08A1901C

	THUMB_FUNC_END StartPrepScreenTrade

	THUMB_FUNC_START func_0809BE60
func_0809BE60: @ 0x0809BE60
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, .L0809BE7C  @ gUnknown_08A1901C
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x40]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809BE7C: .4byte gUnknown_08A1901C

	THUMB_FUNC_END func_0809BE60

	THUMB_FUNC_START func_0809BE80
func_0809BE80: @ 0x0809BE80
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r5, .L0809BEAC  @ gKeySt
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq .L0809BEC2
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	ble .L0809BEB0
	subs r0, #1
	str r0, [r4, #0x30]
	b .L0809BEEE
	.align 2, 0
.L0809BEAC: .4byte gKeySt
.L0809BEB0:
	ldr r0, [r5]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809BF08
	subs r0, r2, #1
	str r0, [r4, #0x30]
	b .L0809BEEE
.L0809BEC2:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809BF08
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	subs r0, #1
	ldr r1, [r4, #0x30]
	cmp r1, r0
	bge .L0809BEE0
	adds r0, r1, #1
	str r0, [r4, #0x30]
	b .L0809BEEE
.L0809BEE0:
	ldr r0, [r5]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809BF08
	str r6, [r4, #0x30]
.L0809BEEE:
	ldr r0, .L0809BF04  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809BF00
	movs r0, #0x66
	bl m4aSongNumStart
.L0809BF00:
	movs r0, #1
	b .L0809BF0A
	.align 2, 0
.L0809BF04: .4byte gPlaySt
.L0809BF08:
	movs r0, #0
.L0809BF0A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809BE80

	THUMB_FUNC_START DrawPrepScreenItemUseStatLabels
DrawPrepScreenItemUseStatLabels: @ 0x0809BF10
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov r8, r0
	ldr r6, .L0809BF78  @ gUnknown_02013498
	adds r5, r6, #0
	movs r4, #7
.L0809BF20:
	adds r0, r5, #0
	bl ClearText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L0809BF20
	ldr r0, .L0809BF7C  @ 0x000004E9
	bl GetMsg
	adds r1, r6, #0
	adds r6, #8
	ldr r5, .L0809BF80  @ gBg2Tm+0xE0
	movs r7, #0
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r5, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	mov r0, r8
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	beq .L0809BF88
	ldr r0, .L0809BF84  @ 0x000004FF
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r5, #0
	adds r1, #0x80
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	b .L0809BFA4
	.align 2, 0
.L0809BF78: .4byte gUnknown_02013498
.L0809BF7C: .4byte 0x000004E9
.L0809BF80: .4byte gBg2Tm+0xE0
.L0809BF84: .4byte 0x000004FF
.L0809BF88:
	ldr r0, .L0809C090  @ 0x000004FE
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r5, #0
	adds r1, #0x80
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
.L0809BFA4:
	ldr r0, .L0809C094  @ 0x000004EC
	bl GetMsg
	adds r1, r6, #0
	adds r6, #8
	ldr r7, .L0809C098  @ gBg2Tm+0x1E0
	movs r5, #0
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r7, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	ldr r0, .L0809C09C  @ 0x000004ED
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0x80
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	ldr r0, .L0809C0A0  @ 0x000004EE
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	subs r1, #0xf2
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	ldr r0, .L0809C0A4  @ 0x000004EF
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	subs r1, #0x72
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	movs r0, #0x9e
	lsls r0, r0, #3
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0xe
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	ldr r0, .L0809C0A8  @ 0x000004F7
	bl GetMsg
	adds r2, r6, #0
	adds r6, #8
	adds r1, r7, #0
	adds r1, #0x8e
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	mov r1, r8
	ldr r0, [r1, #4]
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x40
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	adds r0, r6, #0
	ldr r2, .L0809C0AC  @ 0xFFFFFE8A
	adds r1, r7, r2
	str r5, [sp]
	str r4, [sp, #4]
	movs r2, #0
	bl PutDrawText
	ldr r1, .L0809C0B0  @ 0xFFFFFE82
	adds r0, r7, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809C090: .4byte 0x000004FE
.L0809C094: .4byte 0x000004EC
.L0809C098: .4byte gBg2Tm+0x1E0
.L0809C09C: .4byte 0x000004ED
.L0809C0A0: .4byte 0x000004EE
.L0809C0A4: .4byte 0x000004EF
.L0809C0A8: .4byte 0x000004F7
.L0809C0AC: .4byte 0xFFFFFE8A
.L0809C0B0: .4byte 0xFFFFFE82

	THUMB_FUNC_END DrawPrepScreenItemUseStatLabels

	THUMB_FUNC_START DrawPrepScreenItemUseStatBars
DrawPrepScreenItemUseStatBars: @ 0x0809C0B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x2c
	adds r5, r0, #0
	mov r8, r1
	movs r0, #2
	bl UnpackUiBarPalette
	add r4, sp, #0xc
	adds r0, r5, #0
	bl GetUnitCurrentHp
	adds r2, r0, #0
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r3, r0, #3
	movs r0, #0xb
	ldrsb r0, [r5, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0x80
	beq .L0809C0E8
	adds r0, r3, #0
	movs r1, #0x3c
	b .L0809C0EC
.L0809C0E8:
	adds r0, r2, #0
	movs r1, #5
.L0809C0EC:
	bl __divsi3
	str r0, [r4]
	adds r0, r5, #0
	bl GetUnitPower
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x14]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x10]
	adds r0, r5, #0
	bl GetUnitSkill
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x15]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x14]
	adds r0, r5, #0
	bl GetUnitSpeed
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x16]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x18]
	adds r0, r5, #0
	bl GetUnitLuck
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #0x1c]
	adds r0, r5, #0
	bl GetUnitDefense
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r5, #4]
	ldrb r1, [r1, #0x17]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl __divsi3
	str r0, [sp, #0x20]
	adds r0, r5, #0
	bl GetUnitResistance
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r4, [r5, #4]
	movs r1, #0x18
	ldrsb r1, [r4, r1]
	bl __divsi3
	str r0, [sp, #0x24]
	movs r1, #0x11
	ldrsb r1, [r4, r1]
	ldr r0, [r5]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	movs r0, #0x1a
	ldrsb r0, [r5, r0]
	adds r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	movs r1, #0x19
	ldrsb r1, [r4, r1]
	bl __divsi3
	str r0, [sp, #0x28]
	movs r5, #0
	add r6, sp, #0xc
	movs r7, #0xe0
	lsls r7, r7, #7
.L0809C1BE:
	mov r4, r8
	asrs r4, r5
	movs r0, #1
	ands r4, r0
	cmp r4, #0
	beq .L0809C200
	lsls r0, r7, #0xf
	lsrs r0, r0, #0x14
	movs r2, #3
	ands r2, r5
	lsls r2, r2, #6
	adds r2, #0x92
	asrs r3, r5, #2
	lsls r1, r3, #3
	subs r1, r1, r3
	adds r2, r2, r1
	lsls r2, r2, #1
	ldr r1, .L0809C1FC  @ gBg0Tm
	adds r2, r2, r1
	movs r1, #0x18
	str r1, [sp]
	ldr r1, [r6]
	str r1, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	movs r1, #4
	movs r3, #0xc0
	lsls r3, r3, #6
	bl func_08086B2C
	b .L0809C22E
	.align 2, 0
.L0809C1FC: .4byte gBg0Tm
.L0809C200:
	lsls r0, r7, #0xf
	lsrs r0, r0, #0x14
	movs r2, #3
	ands r2, r5
	lsls r2, r2, #6
	adds r2, #0x92
	asrs r3, r5, #2
	lsls r1, r3, #3
	subs r1, r1, r3
	adds r2, r2, r1
	lsls r2, r2, #1
	ldr r1, .L0809C250  @ gBg0Tm
	adds r2, r2, r1
	movs r1, #0x18
	str r1, [sp]
	ldr r1, [r6]
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #4
	movs r3, #0x80
	lsls r3, r3, #6
	bl func_08086B2C
.L0809C22E:
	adds r6, #4
	movs r0, #0x80
	lsls r0, r0, #1
	adds r7, r7, r0
	adds r5, #1
	cmp r5, #7
	ble .L0809C1BE
	movs r0, #1
	bl EnableBgSync
	add sp, #0x2c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809C250: .4byte gBg0Tm

	THUMB_FUNC_END DrawPrepScreenItemUseStatBars

	THUMB_FUNC_START DrawPrepScreenItemUseStatValues
DrawPrepScreenItemUseStatValues: @ 0x0809C254
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, .L0809C274  @ gBg2Tm+0xE8
	bl GetUnitCurrentHp
	adds r2, r0, #0
	movs r0, #0xb
	ldrsb r0, [r4, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0x80
	bne .L0809C278
	cmp r2, #0x78
	beq .L0809C27C
	b .L0809C280
	.align 2, 0
.L0809C274: .4byte gBg2Tm+0xE8
.L0809C278:
	cmp r2, #0x3c
	bne .L0809C280
.L0809C27C:
	movs r5, #4
	b .L0809C282
.L0809C280:
	movs r5, #2
.L0809C282:
	adds r0, r4, #0
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	ldr r5, .L0809C3E0  @ gBg2Tm+0x168
	adds r0, r4, #0
	bl GetUnitPower
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x14]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne .L0809C2AA
	movs r6, #4
.L0809C2AA:
	adds r0, r4, #0
	bl GetUnitPower
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x80
	adds r0, r4, #0
	bl GetUnitSkill
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x15]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne .L0809C2D4
	movs r6, #4
.L0809C2D4:
	adds r0, r4, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	movs r0, #0x80
	lsls r0, r0, #1
	adds r7, r5, r0
	adds r0, r4, #0
	bl GetUnitSpeed
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x16]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne .L0809C300
	movs r6, #4
.L0809C300:
	adds r0, r4, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	subs r7, #0x72
	adds r0, r4, #0
	bl GetUnitLuck
	movs r6, #2
	cmp r0, #0x1e
	bne .L0809C322
	movs r6, #4
.L0809C322:
	adds r0, r4, #0
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0xe
	adds r0, r4, #0
	bl GetUnitDefense
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x17]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne .L0809C34C
	movs r6, #4
.L0809C34C:
	adds r0, r4, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x8e
	adds r0, r4, #0
	bl GetUnitResistance
	ldr r1, [r4, #4]
	ldrb r1, [r1, #0x18]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r6, #2
	cmp r0, r1
	bne .L0809C376
	movs r6, #4
.L0809C376:
	adds r0, r4, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	movs r1, #0x87
	lsls r1, r1, #1
	adds r6, r5, r1
	ldr r2, [r4, #4]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r0, [r4]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	movs r0, #0x1a
	ldrsb r0, [r4, r0]
	adds r3, r1, r0
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	movs r1, #2
	cmp r3, r0
	bne .L0809C3AE
	movs r1, #4
.L0809C3AE:
	adds r0, r6, #0
	adds r2, r3, #0
	bl PutNumberOrBlank
	ldr r1, .L0809C3E4  @ 0xFFFFFEFE
	adds r0, r5, r1
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r1, .L0809C3E8  @ 0xFFFFFF00
	adds r0, r5, r1
	movs r2, #8
	ldrsb r2, [r4, r2]
	movs r1, #2
	bl PutNumberOrBlank
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809C3E0: .4byte gBg2Tm+0x168
.L0809C3E4: .4byte 0xFFFFFEFE
.L0809C3E8: .4byte 0xFFFFFF00

	THUMB_FUNC_END DrawPrepScreenItemUseStatValues

	THUMB_FUNC_START DrawPrepScreenItemUseItemUseDesc
DrawPrepScreenItemUseItemUseDesc: @ 0x0809C3EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, .L0809C46C  @ gUnknown_02013560
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r0, #8
	bl ClearText
	adds r4, #0x20
	adds r0, r4, #0
	bl ClearText
	movs r0, #1
	negs r0, r0
	cmp r5, r0
	beq .L0809C4A2
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl GetItemUseDescMsg
	adds r5, r0, #0
	mov r1, sp
	ldr r0, .L0809C470  @ gUnknown_08205C64
	ldm r0!, {r2, r3, r7}
	stm r1!, {r2, r3, r7}
	cmp r5, #0
	beq .L0809C4A2
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseItemPrepScreen
	cmp r0, #0
	beq .L0809C478
	ldr r0, [sp]
	movs r1, #0
	bl Text_SetColor
	ldr r0, [sp, #4]
	movs r1, #0
	bl Text_SetColor
	ldr r0, [sp, #8]
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	bl GetMsg
	adds r1, r0, #0
	ldr r2, .L0809C474  @ gBg0Tm+0x31E
	mov r0, sp
	movs r3, #3
	bl func_08008A3C
	b .L0809C4A2
	.align 2, 0
.L0809C46C: .4byte gUnknown_02013560
.L0809C470: .4byte gUnknown_08205C64
.L0809C474: .4byte gBg0Tm+0x31E
.L0809C478:
	ldr r0, [sp]
	movs r1, #1
	bl Text_SetColor
	ldr r0, [sp, #4]
	movs r1, #1
	bl Text_SetColor
	ldr r0, [sp, #8]
	movs r1, #1
	bl Text_SetColor
	adds r0, r5, #0
	bl GetMsg
	adds r1, r0, #0
	ldr r2, .L0809C4B0  @ gBg0Tm+0x31E
	mov r0, sp
	movs r3, #3
	bl func_08008A3C
.L0809C4A2:
	movs r0, #1
	bl EnableBgSync
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809C4B0: .4byte gBg0Tm+0x31E

	THUMB_FUNC_END DrawPrepScreenItemUseItemUseDesc

	THUMB_FUNC_START PrepScreenItemUseScreen_OnUpdateSMS
PrepScreenItemUseScreen_OnUpdateSMS: @ 0x0809C4B4
	push {lr}
	sub sp, #4
	movs r3, #0xc8
	lsls r3, r3, #8
	ldr r0, [r0, #0x2c]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x78
	movs r2, #0xa
	bl PutUnitSpriteForJid
	bl SyncUnitSpriteSheet
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenItemUseScreen_OnUpdateSMS

	THUMB_FUNC_START PrepScreenItemUseScreen_OnInit
PrepScreenItemUseScreen_OnInit: @ 0x0809C4D8
	movs r1, #0
	str r1, [r0, #0x30]
	movs r1, #0xff
	str r1, [r0, #0x38]
	bx lr

	THUMB_FUNC_END PrepScreenItemUseScreen_OnInit

	THUMB_FUNC_START PrepScreenItemUseScreen_InitDisplay
PrepScreenItemUseScreen_InitDisplay: @ 0x0809C4E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	adds r7, r0, #0
	add r1, sp, #8
	ldr r0, .L0809C7E0  @ gUnknown_08205C70
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r6}
	stm r1!, {r2, r3, r6}
	ldm r0!, {r4, r6}
	stm r1!, {r4, r6}
	ldr r4, .L0809C7E4  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	ldr r0, .L0809C7E8  @ gUnknown_08A181E8
	bl SetupBackgrounds
	add r0, sp, #8
	bl SetFaceConfig
	movs r0, #0xff
	str r0, [r7, #0x34]
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r2, r0
	strb r2, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl ResetText
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	bl ApplyUnitSpritePalettes
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L0809C7EC  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	movs r0, #4
	bl ApplyIconPalettes
	bl RestartScreenMenuScrollingBg
	ldr r5, .L0809C7F0  @ gUnknown_02013510
	movs r4, #4
.L0809C5B6:
	adds r0, r5, #0
	movs r1, #7
	bl InitTextDb
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L0809C5B6
	ldr r5, .L0809C7F4  @ gUnknown_02013498
	movs r4, #7
.L0809C5CA:
	adds r0, r5, #0
	movs r1, #3
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L0809C5CA
	ldr r0, .L0809C7F4  @ gUnknown_02013498
	mov sl, r0
	adds r0, #0x40
	movs r1, #8
	bl InitText
	mov r0, sl
	adds r0, #0xc8
	movs r1, #0xf
	bl InitText
	mov r0, sl
	adds r0, #0xd0
	movs r1, #0xf
	bl InitText
	mov r0, sl
	adds r0, #0xe8
	movs r1, #0xf
	bl InitText
	mov r0, sl
	adds r0, #0xd8
	movs r1, #0xe
	bl InitText
	mov r0, sl
	adds r0, #0xe0
	movs r1, #8
	bl InitText
	ldr r0, [r7, #0x2c]
	bl DrawPrepScreenItemUseStatLabels
	ldr r0, [r7, #0x2c]
	bl DrawPrepScreenItemUseStatValues
	ldr r0, [r7, #0x2c]
	movs r1, #0
	bl DrawPrepScreenItemUseStatBars
	ldr r0, [r7, #0x2c]
	bl GetUnitFid
	adds r1, r0, #0
	movs r3, #4
	negs r3, r3
	ldr r0, .L0809C7F8  @ 0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl NewFace2
	movs r0, #0xc0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl func_08098C8C
	ldr r0, .L0809C7FC  @ gUnknown_08A1BAB8
	ldr r1, .L0809C800  @ 0x06000440
	bl Decompress
	ldr r0, .L0809C804  @ gUnknown_08A1BAE4
	ldr r4, .L0809C808  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L0809C80C  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r2, #0
	str r2, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl StartSmallBrownNameBoxes
	movs r1, #0x28
	negs r1, r1
	movs r2, #1
	negs r2, r2
	movs r0, #0
	movs r3, #1
	bl func_080ADBFC
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	bl GetStringTextLen
	movs r3, #0x30
	subs r3, r3, r0
	lsrs r0, r3, #0x1f
	adds r3, r3, r0
	asrs r3, r3, #1
	movs r0, #6
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0
	ldr r1, .L0809C810  @ gBg0Tm
	movs r2, #0
	bl PutDrawText
	adds r0, r7, #0
	bl func_080AC9C0
	adds r0, r7, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	ldr r0, .L0809C814  @ PrepScreenItemUseScreen_OnUpdateSMS
	adds r1, r7, #0
	bl StartParallelWorker
	ldr r6, .L0809C7E4  @ gDispIo
	ldrb r0, [r6, #1]
	movs r3, #0x20
	mov ip, r3
	mov r4, ip
	orrs r0, r4
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0x68
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x5e
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x92
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r6
	mov r9, r0
	ldrb r1, [r0]
	movs r2, #1
	mov r8, r2
	mov r3, r8
	orrs r1, r3
	movs r5, #2
	orrs r1, r5
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	movs r2, #0x10
	orrs r1, r2
	ldr r6, .L0809C818  @ gUnknown_030030B6
	ldrb r0, [r6]
	mov r6, r8
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	mov r2, ip
	orrs r1, r2
	mov r3, r9
	strb r1, [r3]
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	ldr r4, .L0809C818  @ gUnknown_030030B6
	strb r0, [r4]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	movs r6, #0
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetA
	adds r0, r7, #0
	bl StartGreenText
	movs r0, #0xc0
	movs r1, #0x90
	movs r2, #9
	adds r3, r7, #0
	bl ShowRIsInfo
	ldr r0, [r7, #0x2c]
	ldr r1, [r7, #0x30]
	bl DrawPrepScreenItemUseItemUseDesc
	mov r1, sl
	adds r1, #0x78
	ldr r2, [r7, #0x2c]
	ldr r0, .L0809C81C  @ gBg0Tm+0x244
	movs r3, #1
	bl func_0809B74C
	ldr r1, [r7, #0x30]
	asrs r2, r1, #3
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x48
	movs r2, #0xb
	movs r3, #0x80
	lsls r3, r3, #4
	bl func_080AD51C
	ldr r0, [r7, #0x2c]
	bl GetUnitSpriteId
	bl UseUnitSprite
	bl ForceSyncUnitSpriteSheet
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809C7E0: .4byte gUnknown_08205C70
.L0809C7E4: .4byte gDispIo
.L0809C7E8: .4byte gUnknown_08A181E8
.L0809C7EC: .4byte 0x06014000
.L0809C7F0: .4byte gUnknown_02013510
.L0809C7F4: .4byte gUnknown_02013498
.L0809C7F8: .4byte 0x00000203
.L0809C7FC: .4byte gUnknown_08A1BAB8
.L0809C800: .4byte 0x06000440
.L0809C804: .4byte gUnknown_08A1BAE4
.L0809C808: .4byte gBuf
.L0809C80C: .4byte gBg1Tm
.L0809C810: .4byte gBg0Tm
.L0809C814: .4byte PrepScreenItemUseScreen_OnUpdateSMS
.L0809C818: .4byte gUnknown_030030B6
.L0809C81C: .4byte gBg0Tm+0x244

	THUMB_FUNC_END PrepScreenItemUseScreen_InitDisplay

	THUMB_FUNC_START PrepScreenItemUseScreen_OnIdle
PrepScreenItemUseScreen_OnIdle: @ 0x0809C820
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	cmp r0, #0xff
	beq .L0809C848
	ldr r0, .L0809C844  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809C8F0
	bl MoveableHelpBox_OnEnd
	movs r0, #0xff
	b .L0809C938
	.align 2, 0
.L0809C844: .4byte gKeySt
.L0809C848:
	ldr r0, .L0809C8A8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L0809C91C
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809C8C8
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1e
	adds r1, r1, r2
	ldrh r1, [r1]
	bl CanUnitUseItemPrepScreen
	cmp r0, #0
	beq .L0809C8B0
	ldr r2, [r4, #0x30]
	str r2, [r4, #0x34]
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r1, #0x10
	movs r3, #0
	bl func_080AC9D4
	str r5, [r4, #0x3c]
	ldr r0, .L0809C8AC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809C89E
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809C89E:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b .L0809C93A
	.align 2, 0
.L0809C8A8: .4byte gKeySt
.L0809C8AC: .4byte gPlaySt
.L0809C8B0:
	ldr r0, .L0809C8C4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809C93A
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809C93A
	.align 2, 0
.L0809C8C4: .4byte gPlaySt
.L0809C8C8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809C8F0
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, .L0809C8EC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809C93A
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809C93A
	.align 2, 0
.L0809C8EC: .4byte gPlaySt
.L0809C8F0:
	adds r0, r4, #0
	bl func_0809BE80
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809C93A
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl DrawPrepScreenItemUseItemUseDesc
	ldr r0, [r4, #0x38]
	cmp r0, #0xff
	beq .L0809C93A
.L0809C91C:
	ldr r0, [r4, #0x2c]
	ldr r3, [r4, #0x30]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L0809C93A
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
	ldr r0, [r4, #0x30]
.L0809C938:
	str r0, [r4, #0x38]
.L0809C93A:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenItemUseScreen_OnIdle

	THUMB_FUNC_START func_0809C940
func_0809C940: @ 0x0809C940
	push {lr}
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl EndFaceById
	movs r0, #1
	bl EndFaceById
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809C940

	THUMB_FUNC_START DisplayAreYouSureYNBoxText
DisplayAreYouSureYNBoxText: @ 0x0809C958
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r4, .L0809C9C4  @ gUnknown_02013570
	adds r0, r4, #0
	bl ClearText
	ldr r0, .L0809C9C8  @ 0x00000585
	bl GetMsg
	adds r1, r4, #0
	adds r4, #8
	ldr r5, .L0809C9CC  @ gBg2Tm+0x362
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r0, r4, #0
	bl ClearText
	ldr r0, .L0809C9D0  @ 0x00000843
	bl GetMsg
	adds r5, #0x84
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, .L0809C9D4  @ 0x00000844
	bl GetMsg
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0x20
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809C9C4: .4byte gUnknown_02013570
.L0809C9C8: .4byte 0x00000585
.L0809C9CC: .4byte gBg2Tm+0x362
.L0809C9D0: .4byte 0x00000843
.L0809C9D4: .4byte 0x00000844

	THUMB_FUNC_END DisplayAreYouSureYNBoxText

	THUMB_FUNC_START func_0809C9D8
func_0809C9D8: @ 0x0809C9D8
	push {lr}
	ldr r0, .L0809C9F0  @ gBg2Tm+0x362
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #4
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L0809C9F0: .4byte gBg2Tm+0x362

	THUMB_FUNC_END func_0809C9D8

	THUMB_FUNC_START PrepScreenItemUseScreen_AreUSureBoxInit
PrepScreenItemUseScreen_AreUSureBoxInit: @ 0x0809C9F4
	push {r4, lr}
	adds r4, r0, #0
	bl DisplayAreYouSureYNBoxText
	ldr r0, [r4, #0x3c]
	lsls r0, r0, #5
	adds r0, #0x94
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x78
	movs r2, #0
	bl func_080AD51C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END PrepScreenItemUseScreen_AreUSureBoxInit

	THUMB_FUNC_START PrepScreenItemUseScreen_AreUSureBoxLoop
PrepScreenItemUseScreen_AreUSureBoxLoop: @ 0x0809CA14
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r7, [r4, #0x3c]
	ldr r0, .L0809CA6C  @ 0x0000A440
	str r0, [sp]
	movs r0, #0x80
	movs r1, #0x64
	movs r2, #0xc
	movs r3, #4
	bl func_0809A31C
	ldr r5, .L0809CA70  @ gKeySt
	ldr r3, [r5]
	ldrh r1, [r3, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809CA78
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #0
	bl func_080ACA84
	bl func_0809C9D8
	ldr r0, .L0809CA74  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809CADA
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809CADA
	.align 2, 0
.L0809CA6C: .4byte 0x0000A440
.L0809CA70: .4byte gKeySt
.L0809CA74: .4byte gPlaySt
.L0809CA78:
	movs r6, #1
	adds r2, r6, #0
	ands r2, r1
	cmp r2, #0
	beq .L0809CAE8
	bl func_0809C9D8
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	bne .L0809CAB0
	bl HidePrepScreenHandCursor
	ldr r0, .L0809CAAC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809CAA2
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809CAA2:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b .L0809CB2A
	.align 2, 0
.L0809CAAC: .4byte gPlaySt
.L0809CAB0:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	ldr r0, .L0809CAE4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809CAD4
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809CAD4:
	movs r0, #0
	bl func_080ACA84
.L0809CADA:
	adds r0, r4, #0
	bl Proc_Break
	b .L0809CB2A
	.align 2, 0
.L0809CAE4: .4byte gPlaySt
.L0809CAE8:
	ldrh r1, [r3, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L0809CAF4
	str r2, [r4, #0x3c]
.L0809CAF4:
	ldr r0, [r5]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L0809CB02
	str r6, [r4, #0x3c]
.L0809CB02:
	ldr r0, [r4, #0x3c]
	cmp r7, r0
	beq .L0809CB2A
	lsls r0, r0, #5
	adds r0, #0x94
	movs r3, #0x80
	lsls r3, r3, #4
	movs r1, #0x78
	movs r2, #0
	bl func_080AD51C
	ldr r0, .L0809CB34  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809CB2A
	movs r0, #0x67
	bl m4aSongNumStart
.L0809CB2A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809CB34: .4byte gPlaySt

	THUMB_FUNC_END PrepScreenItemUseScreen_AreUSureBoxLoop

	THUMB_FUNC_START func_0809CB38
func_0809CB38: @ 0x0809CB38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r1, r1, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0x8a
	beq .L0809CB78
	cmp r0, #0x8a
	bgt .L0809CB62
	cmp r0, #0x64
	blt .L0809CBA0
	cmp r0, #0x68
	ble .L0809CB78
	cmp r0, #0x88
	beq .L0809CB78
	b .L0809CBA0
.L0809CB62:
	cmp r0, #0xb7
	beq .L0809CB98
	cmp r0, #0xb7
	bgt .L0809CB74
	cmp r0, #0x99
	bgt .L0809CBA0
	cmp r0, #0x97
	blt .L0809CBA0
	b .L0809CB78
.L0809CB74:
	cmp r0, #0xc1
	bne .L0809CBA0
.L0809CB78:
	ldr r0, .L0809CB94  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809CB8A
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809CB8A:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b .L0809CBA0
	.align 2, 0
.L0809CB94: .4byte gPlaySt
.L0809CB98:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
.L0809CBA0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809CB38

	THUMB_FUNC_START func_0809CBA8
func_0809CBA8: @ 0x0809CBA8
	push {r4, lr}
	adds r4, r0, #0
	bl EndScreenMenuScrollingBg
	bl ResetText
	movs r0, #0
	bl SetupBackgrounds
	bl EndGreenText
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r4, #0x40]
	bl InitFaces
	bl HideRIsInfo
	ldr r2, .L0809CC38  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x34
	ldrb r0, [r1]
	movs r3, #0x20
	orrs r0, r3
	strb r0, [r1]
	adds r2, #0x36
	ldrb r0, [r2]
	orrs r0, r3
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	bl EndSmallBrownNameBoxes
	bl EndAllParallelWorkers
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl func_080ACA84
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	movs r1, #1
	movs r3, #0
	bl UnitPromote
	ldr r1, .L0809CC3C  @ gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	bl BeginBattleAnimations
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809CC38: .4byte gDispIo
.L0809CC3C: .4byte gBattleStats

	THUMB_FUNC_END func_0809CBA8

	THUMB_FUNC_START func_0809CC40
func_0809CC40: @ 0x0809CC40
	push {r4, lr}
	adds r4, r0, #0
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4, #0x40]
	cmp r1, r0
	bne .L0809CC58
	adds r0, r4, #0
	bl Proc_Break
.L0809CC58:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809CC40

	THUMB_FUNC_START func_0809CC60
func_0809CC60: @ 0x0809CC60
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl func_080953C0
	cmp r5, #0
	bne .L0809CC84
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b .L0809CC94
.L0809CC84:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt .L0809CC8E
	subs r0, #1
	str r0, [r4, #0x30]
.L0809CC8E:
	adds r0, r4, #0
	bl Proc_Break
.L0809CC94:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809CC60

	THUMB_FUNC_START func_0809CC9C
func_0809CC9C: @ 0x0809CC9C
	push {lr}
	movs r0, #0x80
	lsls r0, r0, #1
	bl SetBgmVolume
	bl CheckGameLinkArenaBit
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809CCB8
	movs r0, #0x38
	bl OverrideBgm
	b .L0809CCDA
.L0809CCB8:
	ldr r0, .L0809CCD0  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809CCD4
	bl MakeBgmOverridePersist
	bl func_080B9FC0
	b .L0809CCDA
	.align 2, 0
.L0809CCD0: .4byte gGmData
.L0809CCD4:
	movs r0, #0x34
	bl OverrideBgm
.L0809CCDA:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809CC9C

	THUMB_FUNC_START func_0809CCE0
func_0809CCE0: @ 0x0809CCE0
	push {lr}
	sub sp, #4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	movs r3, #0x10
	bl func_080029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809CCE0

	THUMB_FUNC_START StartPrepScreenItemUseScreen
StartPrepScreenItemUseScreen: @ 0x0809CCFC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809CD10  @ gUnknown_08A19064
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809CD10: .4byte gUnknown_08A19064

	THUMB_FUNC_END StartPrepScreenItemUseScreen

	THUMB_FUNC_START func_0809CD14
func_0809CD14: @ 0x0809CD14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	adds r7, r2, #0
	adds r0, r3, #0
	bl GetMsg
	mov r9, r0
	ldr r0, [sp, #0x28]
	bl GetItemIcon
	mov r8, r0
	mov r0, r9
	bl GetStringTextLen
	mov sl, r0
	mov r0, r8
	cmp r0, #0
	beq .L0809CD60
	lsls r4, r7, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	ldr r0, .L0809CDCC  @ gBg2Tm
	adds r4, r4, r0
	ldr r0, [sp, #0x28]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
.L0809CD60:
	ldr r4, .L0809CDD0  @ gUnknown_02013570
	adds r0, r4, #0
	bl ClearText
	lsls r0, r7, #5
	mov r1, r8
	cmp r1, #0
	beq .L0809CD72
	adds r0, #2
.L0809CD72:
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, .L0809CDCC  @ gBg2Tm
	adds r1, r0, r1
	movs r0, #0
	str r0, [sp]
	mov r0, r9
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
	lsls r0, r5, #3
	subs r0, #4
	str r0, [r6, #0x40]
	lsls r0, r7, #3
	subs r0, #4
	str r0, [r6, #0x44]
	mov r0, sl
	cmp r0, #0
	bge .L0809CDA6
	adds r0, #7
.L0809CDA6:
	asrs r1, r0, #3
	adds r0, r1, #1
	str r0, [r6, #0x48]
	mov r0, r8
	cmp r0, #0
	beq .L0809CDB6
	adds r0, r1, #3
	str r0, [r6, #0x48]
.L0809CDB6:
	movs r0, #2
	str r0, [r6, #0x4c]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809CDCC: .4byte gBg2Tm
.L0809CDD0: .4byte gUnknown_02013570

	THUMB_FUNC_END func_0809CD14

	THUMB_FUNC_START func_0809CDD4
func_0809CDD4: @ 0x0809CDD4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, [r7, #0x14]
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #3
	movs r2, #0
	adds r3, r7, #0
	bl func_0807EDF8
	ldr r0, [r4, #0x2c]
	bl GetUnitCurrentHp
	adds r1, r7, #0
	adds r1, #0x30
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitPower
	adds r1, r7, #0
	adds r1, #0x31
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSkill
	adds r1, r7, #0
	adds r1, #0x32
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSpeed
	adds r1, r7, #0
	adds r1, #0x33
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitLuck
	adds r1, r7, #0
	adds r1, #0x34
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitDefense
	adds r1, r7, #0
	adds r1, #0x35
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitResistance
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	ldrb r2, [r2, #0x11]
	adds r0, r0, r2
	ldrb r1, [r1, #0x1a]
	adds r1, r1, r0
	adds r0, r7, #0
	adds r0, #0x37
	strb r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r3, r1, #1
	adds r2, r0, #0
	adds r2, #0x1e
	adds r2, r2, r3
	ldrh r5, [r2]
	bl ApplyStatBoosterAndGetMessageId
	adds r6, r0, #0
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl DrawPrepScreenItemUseStatBars
	ldr r0, [r4, #0x2c]
	bl DrawPrepScreenItemUseStatValues
	ldr r0, [r4, #0x2c]
	bl GetUnitCurrentHp
	adds r1, r7, #0
	adds r1, #0x38
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitPower
	adds r1, r7, #0
	adds r1, #0x39
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSkill
	adds r1, r7, #0
	adds r1, #0x3a
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitSpeed
	adds r1, r7, #0
	adds r1, #0x3b
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitLuck
	adds r1, r7, #0
	adds r1, #0x3c
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitDefense
	adds r1, r7, #0
	adds r1, #0x3d
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	bl GetUnitResistance
	adds r1, r7, #0
	adds r1, #0x3e
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	ldrb r2, [r2, #0x11]
	adds r0, r0, r2
	ldrb r1, [r1, #0x1a]
	adds r1, r1, r0
	adds r0, r7, #0
	adds r0, #0x3f
	strb r1, [r0]
	str r5, [sp]
	adds r0, r7, #0
	movs r1, #0xe
	movs r2, #0xe
	adds r3, r6, #0
	bl func_0809CD14
	movs r4, #0
.L0809CEF0:
	adds r0, r7, #0
	adds r0, #0x30
	adds r3, r0, r4
	adds r0, #8
	adds r2, r0, r4
	ldrb r0, [r3]
	ldrb r1, [r2]
	cmp r0, r1
	beq .L0809CF1E
	asrs r1, r4, #2
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0xb0
	movs r1, #3
	ands r1, r4
	lsls r1, r1, #4
	adds r1, #0x2a
	ldrb r2, [r2]
	ldrb r3, [r3]
	subs r2, r2, r3
	bl func_0807EFF0
.L0809CF1E:
	adds r4, #1
	cmp r4, #7
	ble .L0809CEF0
	movs r0, #0x78
	str r0, [r7, #0x2c]
	ldr r0, .L0809CF44  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809CF3A
	movs r0, #0x5a
	bl m4aSongNumStart
.L0809CF3A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809CF44: .4byte gPlaySt

	THUMB_FUNC_END func_0809CDD4

	THUMB_FUNC_START func_0809CF48
func_0809CF48: @ 0x0809CF48
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x40]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x4c]
	ldr r4, .L0809CF84  @ 0x0000A440
	str r4, [sp]
	bl func_0809A31C
	ldr r0, [r5, #0x2c]
	subs r0, #1
	str r0, [r5, #0x2c]
	cmp r0, #0
	beq .L0809CF76
	ldr r0, .L0809CF88  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq .L0809CF7C
.L0809CF76:
	adds r0, r5, #0
	bl Proc_Break
.L0809CF7C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809CF84: .4byte 0x0000A440
.L0809CF88: .4byte gKeySt

	THUMB_FUNC_END func_0809CF48

	THUMB_FUNC_START func_0809CF8C
func_0809CF8C: @ 0x0809CF8C
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, .L0809CFB4  @ gBg2Tm+0x39C
	movs r1, #0xe
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	cmp r5, #0
	bne .L0809CFB8
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	b .L0809CFD4
	.align 2, 0
.L0809CFB4: .4byte gBg2Tm+0x39C
.L0809CFB8:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt .L0809CFC2
	subs r0, #1
	str r0, [r4, #0x30]
.L0809CFC2:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
.L0809CFD4:
	ldr r0, .L0809D008  @ gBg0Tm+0x244
	ldr r1, .L0809D00C  @ gUnknown_02013510
	ldr r2, [r4, #0x2c]
	movs r3, #1
	bl func_0809B74C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl DrawPrepScreenItemUseItemUseDesc
	movs r0, #0
	bl func_080ACA84
	bl func_0807EE74
	movs r0, #5
	bl EnableBgSync
	ldr r0, .L0809D010  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D008: .4byte gBg0Tm+0x244
.L0809D00C: .4byte gUnknown_02013510
.L0809D010: .4byte 0x06014000

	THUMB_FUNC_END func_0809CF8C

	THUMB_FUNC_START func_0809D014
func_0809D014: @ 0x0809D014
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	adds r7, r2, #0
	movs r0, #0x1f
	bl GetMsg
	mov r9, r0
	ldr r0, [sp, #0x28]
	bl GetItemIcon
	mov r8, r0
	mov r0, r9
	bl GetStringTextLen
	mov sl, r0
	mov r0, r8
	cmp r0, #0
	beq .L0809D060
	lsls r4, r7, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	ldr r0, .L0809D0CC  @ gBg2Tm
	adds r4, r4, r0
	ldr r0, [sp, #0x28]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
.L0809D060:
	ldr r4, .L0809D0D0  @ gUnknown_02013570
	adds r0, r4, #0
	bl ClearText
	lsls r0, r7, #5
	mov r1, r8
	cmp r1, #0
	beq .L0809D072
	adds r0, #2
.L0809D072:
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, .L0809D0CC  @ gBg2Tm
	adds r1, r0, r1
	movs r0, #0
	str r0, [sp]
	mov r0, r9
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
	lsls r0, r5, #3
	subs r0, #4
	str r0, [r6, #0x34]
	lsls r0, r7, #3
	subs r0, #4
	str r0, [r6, #0x38]
	mov r0, sl
	cmp r0, #0
	bge .L0809D0A6
	adds r0, #7
.L0809D0A6:
	asrs r1, r0, #3
	adds r0, r1, #1
	str r0, [r6, #0x3c]
	mov r0, r8
	cmp r0, #0
	beq .L0809D0B6
	adds r0, r1, #3
	str r0, [r6, #0x3c]
.L0809D0B6:
	movs r0, #2
	str r0, [r6, #0x40]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D0CC: .4byte gBg2Tm
.L0809D0D0: .4byte gUnknown_02013570

	THUMB_FUNC_END func_0809D014

	THUMB_FUNC_START func_0809D0D4
func_0809D0D4: @ 0x0809D0D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, [r7, #0x14]
	movs r0, #0xe0
	lsls r0, r0, #1
	movs r1, #3
	movs r2, #0
	adds r3, r7, #0
	bl func_0807EDF8
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0, #8]
	movs r1, #0x30
	adds r1, r1, r7
	mov r8, r1
	strb r0, [r1]
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	lsls r3, r1, #1
	adds r2, r0, #0
	adds r2, #0x1e
	adds r2, r2, r3
	ldrh r5, [r2]
	bl func_0802F978
	adds r6, r0, #0
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl DrawPrepScreenItemUseStatBars
	ldr r0, [r4, #0x2c]
	bl DrawPrepScreenItemUseStatValues
	ldr r0, [r4, #0x2c]
	ldrb r0, [r0, #8]
	adds r4, r7, #0
	adds r4, #0x31
	strb r0, [r4]
	str r5, [sp]
	adds r0, r7, #0
	movs r1, #0x11
	movs r2, #0xe
	adds r3, r6, #0
	bl func_0809D014
	mov r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r1, r0
	beq .L0809D154
	adds r2, r0, #0
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	subs r2, r2, r0
	movs r0, #0xb0
	movs r1, #0x1a
	bl func_0807EFF0
.L0809D154:
	movs r0, #0x78
	str r0, [r7, #0x2c]
	ldr r0, .L0809D178  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809D16A
	movs r0, #0x5a
	bl m4aSongNumStart
.L0809D16A:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D178: .4byte gPlaySt

	THUMB_FUNC_END func_0809D0D4

	THUMB_FUNC_START func_0809D17C
func_0809D17C: @ 0x0809D17C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x34]
	ldr r1, [r5, #0x38]
	ldr r2, [r5, #0x3c]
	ldr r3, [r5, #0x40]
	ldr r4, .L0809D1B8  @ 0x0000A440
	str r4, [sp]
	bl func_0809A31C
	ldr r0, [r5, #0x2c]
	subs r0, #1
	str r0, [r5, #0x2c]
	cmp r0, #0
	beq .L0809D1AA
	ldr r0, .L0809D1BC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq .L0809D1B0
.L0809D1AA:
	adds r0, r5, #0
	bl Proc_Break
.L0809D1B0:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D1B8: .4byte 0x0000A440
.L0809D1BC: .4byte gKeySt

	THUMB_FUNC_END func_0809D17C

	THUMB_FUNC_START func_0809D1C0
func_0809D1C0: @ 0x0809D1C0
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r5, r0, #0
	ldr r0, .L0809D1E8  @ gBg2Tm+0x3A2
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	cmp r5, #0
	bne .L0809D1EC
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	b .L0809D208
	.align 2, 0
.L0809D1E8: .4byte gBg2Tm+0x3A2
.L0809D1EC:
	ldr r0, [r4, #0x30]
	cmp r0, r5
	blt .L0809D1F6
	subs r0, #1
	str r0, [r4, #0x30]
.L0809D1F6:
	ldr r1, [r4, #0x30]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
.L0809D208:
	ldr r0, .L0809D238  @ gBg0Tm+0x244
	ldr r1, .L0809D23C  @ gUnknown_02013510
	ldr r2, [r4, #0x2c]
	movs r3, #1
	bl func_0809B74C
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl DrawPrepScreenItemUseItemUseDesc
	movs r0, #0
	bl func_080ACA84
	movs r0, #5
	bl EnableBgSync
	ldr r0, .L0809D240  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D238: .4byte gBg0Tm+0x244
.L0809D23C: .4byte gUnknown_02013510
.L0809D240: .4byte 0x06014000

	THUMB_FUNC_END func_0809D1C0

	THUMB_FUNC_START func_0809D244
func_0809D244: @ 0x0809D244
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, .L0809D270  @ 0x0000DFC0
	movs r5, #0x30
	movs r4, #3
.L0809D24E:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x10
	ldr r3, .L0809D274  @ Sprite_32x16
	bl PutSpriteExt
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L0809D24E
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D270: .4byte 0x0000DFC0
.L0809D274: .4byte Sprite_32x16

	THUMB_FUNC_END func_0809D244

	THUMB_FUNC_START func_0809D278
func_0809D278: @ 0x0809D278
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L0809D2B8  @ func_0809D244
	bl StartParallelWorker
	ldr r0, .L0809D2BC  @ gUnknown_08A191F4
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	ldr r1, .L0809D2C0  @ gUnknown_08A19200
	ldr r1, [r1]
	bl GetMsgTo
	adds r2, r0, #0
	movs r0, #0xf0
	lsls r0, r0, #7
	movs r1, #2
	str r1, [sp]
	movs r1, #3
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0xd
	movs r3, #1
	bl func_080ADD24
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D2B8: .4byte func_0809D244
.L0809D2BC: .4byte gUnknown_08A191F4
.L0809D2C0: .4byte gUnknown_08A19200

	THUMB_FUNC_END func_0809D278

	THUMB_FUNC_START UnpackConvoyWeaponIconGraphics
UnpackConvoyWeaponIconGraphics: @ 0x0809D2C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809D2F0  @ gUnknown_08A1A3FC
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L0809D2F4  @ gUnknown_08A1A0A4
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl Decompress
	ldr r0, .L0809D2F8  @ gUnknown_08A1A23C
	ldr r1, .L0809D2FC  @ 0x06000200
	adds r4, r4, r1
	adds r1, r4, #0
	bl Decompress
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D2F0: .4byte gUnknown_08A1A3FC
.L0809D2F4: .4byte gUnknown_08A1A0A4
.L0809D2F8: .4byte gUnknown_08A1A23C
.L0809D2FC: .4byte 0x06000200

	THUMB_FUNC_END UnpackConvoyWeaponIconGraphics

	THUMB_FUNC_START func_0809D300
func_0809D300: @ 0x0809D300
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	mov sl, r1
	str r2, [sp, #4]
	str r3, [sp, #8]
	mov r0, sl
	movs r1, #0xc
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_thm
	ldr r1, .L0809D350  @ gUnknown_02012F56
	ldrh r0, [r1]
	cmp r0, #0
	bne .L0809D354
	ldr r0, [sp]
	bl ClearText
	movs r0, #0xb5
	lsls r0, r0, #3
	bl GetMsg
	adds r3, r0, #0
	ldr r0, [sp]
	movs r1, #0
	movs r2, #1
	bl Text_InsertDrawString
	mov r1, sl
	adds r1, #6
	ldr r0, [sp]
	bl PutText
	b .L0809D3FE
	.align 2, 0
.L0809D350: .4byte gUnknown_02012F56
.L0809D354:
	ldr r6, [sp, #4]
	adds r0, r6, #7
	cmp r6, r0
	bge .L0809D3FE
	ldrh r1, [r1]
	cmp r6, r1
	bge .L0809D3FE
.L0809D362:
	movs r0, #7
	ands r0, r6
	lsls r0, r0, #3
	ldr r1, [sp]
	adds r1, r1, r0
	mov r8, r1
	ldr r1, .L0809D410  @ gUnknown_020122D4
	lsls r0, r6, #2
	adds r0, r0, r1
	ldrh r7, [r0, #2]
	ldr r0, [sp, #8]
	adds r1, r7, #0
	bl IsItemDisplayUsable
	movs r1, #0
	mov r9, r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809D38C
	movs r0, #1
	mov r9, r0
.L0809D38C:
	mov r0, r8
	bl ClearText
	adds r0, r7, #0
	bl GetItemName
	adds r3, r0, #0
	mov r0, r8
	movs r1, #0
	mov r2, r9
	bl Text_InsertDrawString
	lsls r5, r6, #1
	movs r0, #0x1f
	ands r5, r0
	lsls r5, r5, #6
	adds r4, r5, #2
	add r4, sl
	adds r0, r7, #0
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r1, r5, #6
	add r1, sl
	mov r0, r8
	bl PutText
	adds r5, #0x18
	mov r1, sl
	adds r4, r1, r5
	movs r5, #1
	mov r0, r9
	cmp r0, #0
	bne .L0809D3DC
	movs r5, #2
.L0809D3DC:
	adds r0, r7, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	adds r6, #1
	ldr r0, [sp, #4]
	adds r0, #7
	cmp r6, r0
	bge .L0809D3FE
	ldr r0, .L0809D414  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r6, r0
	blt .L0809D362
.L0809D3FE:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D410: .4byte gUnknown_020122D4
.L0809D414: .4byte gUnknown_02012F56

	THUMB_FUNC_END func_0809D300

	THUMB_FUNC_START func_0809D418
func_0809D418: @ 0x0809D418
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r5, r1, #0
	adds r7, r5, #0
	adds r0, r5, #7
	cmp r5, r0
	bge .L0809D468
	ldr r0, .L0809D474  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r5, r0
	bge .L0809D468
	ldr r1, .L0809D478  @ gUnknown_020122D4
	lsls r0, r5, #2
	adds r6, r0, r1
.L0809D438:
	ldrh r0, [r6, #2]
	lsls r4, r5, #1
	movs r1, #0x1f
	ands r4, r1
	lsls r4, r4, #6
	adds r4, #2
	add r4, r8
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	adds r6, #4
	adds r5, #1
	adds r0, r7, #7
	cmp r5, r0
	bge .L0809D468
	ldr r0, .L0809D474  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r5, r0
	blt .L0809D438
.L0809D468:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D474: .4byte gUnknown_02012F56
.L0809D478: .4byte gUnknown_020122D4

	THUMB_FUNC_END func_0809D418

	THUMB_FUNC_START func_0809D47C
func_0809D47C: @ 0x0809D47C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	mov r9, r1
	ldr r0, .L0809D528  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, r2
	ble .L0809D51C
	lsls r4, r2, #1
	movs r0, #0x1f
	ands r4, r0
	movs r0, #7
	ands r0, r2
	lsls r0, r0, #3
	adds r7, r5, r0
	ldr r1, .L0809D52C  @ gUnknown_020122D4
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r6, [r0, #2]
	adds r0, r3, #0
	adds r1, r6, #0
	bl IsItemDisplayUsable
	movs r1, #0
	mov r8, r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809D4BC
	movs r0, #1
	mov r8, r0
.L0809D4BC:
	lsls r4, r4, #6
	add r4, r9
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	adds r0, r7, #0
	bl ClearText
	adds r0, r6, #0
	bl GetItemName
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	mov r2, r8
	bl Text_InsertDrawString
	adds r5, r4, #2
	adds r0, r6, #0
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r5, #0
	bl PutIcon
	adds r1, r4, #6
	adds r0, r7, #0
	bl PutText
	adds r4, #0x18
	movs r5, #1
	mov r1, r8
	cmp r1, #0
	bne .L0809D50C
	movs r5, #2
.L0809D50C:
	adds r0, r6, #0
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
.L0809D51C:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D528: .4byte gUnknown_02012F56
.L0809D52C: .4byte gUnknown_020122D4

	THUMB_FUNC_END func_0809D47C

	THUMB_FUNC_START func_0809D530
func_0809D530: @ 0x0809D530
	push {lr}
	ldr r0, .L0809D568  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls .L0809D542
	movs r2, #0
.L0809D542:
	cmp r2, #0xc
	bne .L0809D552
	ldr r1, .L0809D56C  @ 0x04000050
	movs r0, #0xc8
	strh r0, [r1]
	adds r1, #4
	movs r0, #8
	strh r0, [r1]
.L0809D552:
	cmp r2, #0x34
	beq .L0809D55A
	cmp r2, #0
	bne .L0809D564
.L0809D55A:
	ldr r0, .L0809D56C  @ 0x04000050
	movs r1, #0
	strh r1, [r0]
	adds r0, #4
	strh r1, [r0]
.L0809D564:
	pop {r0}
	bx r0
	.align 2, 0
.L0809D568: .4byte 0x04000006
.L0809D56C: .4byte 0x04000050

	THUMB_FUNC_END func_0809D530

	THUMB_FUNC_START func_0809D570
func_0809D570: @ 0x0809D570
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x38]
	movs r0, #0xff
	strh r0, [r4, #0x36]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne .L0809D58E
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #1
	b .L0809D594
.L0809D58E:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
.L0809D594:
	strb r0, [r1]
	ldr r0, .L0809D5B0  @ gGmData
	ldrb r0, [r0]
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq .L0809D5B4
	bl GM_GetBaseMenuProc
	cmp r0, #0
	beq .L0809D5C8
	adds r0, #0x2b
	b .L0809D5C6
	.align 2, 0
.L0809D5B0: .4byte gGmData
.L0809D5B4:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0809D5D4
	ldr r0, .L0809D5D0  @ gUnknown_08A1829C
	bl FindProc
	adds r0, #0x32
.L0809D5C6:
	ldrb r0, [r0]
.L0809D5C8:
	adds r1, r4, #0
	adds r1, #0x35
	strb r0, [r1]
	b .L0809D5DA
	.align 2, 0
.L0809D5D0: .4byte gUnknown_08A1829C
.L0809D5D4:
	adds r0, r4, #0
	adds r0, #0x35
	strb r1, [r0]
.L0809D5DA:
	adds r2, r4, #0
	adds r2, #0x32
	movs r1, #0
	movs r0, #4
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x31
	strb r1, [r0]
	movs r3, #0
	adds r1, r4, #0
	adds r1, #0x4c
	adds r0, #9
	movs r2, #8
.L0809D5F4:
	strh r3, [r0]
	strh r3, [r1]
	adds r1, #2
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge .L0809D5F4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809D570

	THUMB_FUNC_START func_0809D608
func_0809D608: @ 0x0809D608
	push {r4, lr}
	ldr r4, .L0809D638  @ gUnknown_02013648
	ldr r1, .L0809D63C  @ 0x06011000
	adds r0, r4, #0
	movs r2, #0xb
	bl InitSpriteTextFont
	ldr r0, .L0809D640  @ Pal_SystemText
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r4, #0x90
	adds r0, r4, #0
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D638: .4byte gUnknown_02013648
.L0809D63C: .4byte 0x06011000
.L0809D640: .4byte Pal_SystemText

	THUMB_FUNC_END func_0809D608

	THUMB_FUNC_START func_0809D644
func_0809D644: @ 0x0809D644
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl func_08097CC8
	adds r5, r0, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r6, r0, #0
	ldr r4, .L0809D6BC  @ gUnknown_02013648
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r4, #0x90
	adds r0, r4, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	adds r7, r4, #0
	movs r4, #0
	cmp r5, #0x64
	beq .L0809D67E
	cmp r6, #0
	bne .L0809D680
.L0809D67E:
	movs r4, #1
.L0809D680:
	ldr r0, .L0809D6C0  @ 0x0000059E
	bl GetMsg
	adds r3, r0, #0
	adds r0, r7, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertDrawString
	ldr r5, .L0809D6C4  @ gUnknown_020136D8
	movs r4, #0
	cmp r6, #5
	bne .L0809D69C
	movs r4, #1
.L0809D69C:
	ldr r0, .L0809D6C8  @ 0x0000059F
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x40
	adds r2, r4, #0
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D6BC: .4byte gUnknown_02013648
.L0809D6C0: .4byte 0x0000059E
.L0809D6C4: .4byte gUnknown_020136D8
.L0809D6C8: .4byte 0x0000059F

	THUMB_FUNC_END func_0809D644

	THUMB_FUNC_START func_0809D6CC
func_0809D6CC: @ 0x0809D6CC
	push {r4, r5, r6, lr}
	sub sp, #8
	movs r0, #0
	bl SetTextFont
	ldr r6, .L0809D77C  @ gBg0Tm+0x68
	adds r0, r6, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetMsg
	ldr r4, .L0809D780  @ gUnknown_02013660
	adds r1, r6, #0
	adds r1, #0xda
	movs r5, #0
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #2
	bl PutDrawText
	adds r1, r6, #0
	subs r1, #0x26
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xab
	movs r3, #2
	bl PutFaceChibi
	movs r0, #0xb4
	lsls r0, r0, #3
	bl GetMsg
	adds r4, #8
	subs r1, r6, #2
	str r5, [sp]
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0
	movs r3, #4
	bl PutDrawText
	adds r5, r6, #0
	adds r5, #0xa
	bl func_08097CC8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #2
	cmp r0, #0x64
	bne .L0809D744
	movs r4, #4
.L0809D744:
	bl func_08097CC8
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutNumber
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #0
	movs r2, #0x16
	bl PutSpecialChar
	adds r0, r6, #0
	adds r0, #0x12
	movs r1, #2
	movs r2, #0x64
	bl PutNumber
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D77C: .4byte gBg0Tm+0x68
.L0809D780: .4byte gUnknown_02013660

	THUMB_FUNC_END func_0809D6CC

	THUMB_FUNC_START func_0809D784
func_0809D784: @ 0x0809D784
	push {r4, lr}
	sub sp, #4
	ldr r0, .L0809D7C4  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x21
	movs r2, #5
	movs r3, #4
	bl func_0809A31C
	ldr r4, .L0809D7C8  @ Sprite_32x16
	ldr r0, .L0809D7CC  @ 0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x25
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L0809D7D0  @ 0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x35
	adds r3, r4, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D7C4: .4byte 0x0000A840
.L0809D7C8: .4byte Sprite_32x16
.L0809D7CC: .4byte 0x0000B080
.L0809D7D0: .4byte 0x0000B088

	THUMB_FUNC_END func_0809D784

	THUMB_FUNC_START func_0809D7D4
func_0809D7D4: @ 0x0809D7D4
	push {lr}
	sub sp, #4
	ldr r0, .L0809D800  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x21
	movs r2, #5
	movs r3, #2
	bl func_0809A31C
	ldr r3, .L0809D804  @ Sprite_32x16
	ldr r0, .L0809D808  @ 0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x25
	bl PutSpriteExt
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L0809D800: .4byte 0x0000A840
.L0809D804: .4byte Sprite_32x16
.L0809D808: .4byte 0x0000B080

	THUMB_FUNC_END func_0809D7D4

	THUMB_FUNC_START func_0809D80C
func_0809D80C: @ 0x0809D80C
	push {lr}
	sub sp, #4
	ldr r0, .L0809D838  @ 0x0000A840
	str r0, [sp]
	movs r0, #0x40
	movs r1, #0x31
	movs r2, #5
	movs r3, #2
	bl func_0809A31C
	ldr r3, .L0809D83C  @ Sprite_32x16
	ldr r0, .L0809D840  @ 0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0x48
	movs r2, #0x35
	bl PutSpriteExt
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L0809D838: .4byte 0x0000A840
.L0809D83C: .4byte Sprite_32x16
.L0809D840: .4byte 0x0000B088

	THUMB_FUNC_END func_0809D80C

	THUMB_FUNC_START func_0809D844
func_0809D844: @ 0x0809D844
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x35
	ldrb r0, [r7]
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, #0x7c
	bl GetGameTime
	ldr r2, .L0809D8BC  @ gPal
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, .L0809D8C0  @ gUnknown_08A1BD60
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, .L0809D8C4  @ 0x0000029A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, .L0809D8C8  @ gUnknown_08A19608
	ldrb r0, [r7]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x85
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl PutSprite
	ldr r3, .L0809D8CC  @ gUnknown_08A195F8
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl PutSprite
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r6, #0x4c
	adds r6, r6, r0
	ldrh r1, [r6]
	ldr r0, .L0809D8D0  @ gUnknown_02012F56
	ldrh r2, [r0]
	movs r0, #0xc
	movs r3, #7
	bl func_080976CC
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D8BC: .4byte gPal
.L0809D8C0: .4byte gUnknown_08A1BD60
.L0809D8C4: .4byte 0x0000029A
.L0809D8C8: .4byte gUnknown_08A19608
.L0809D8CC: .4byte gUnknown_08A195F8
.L0809D8D0: .4byte gUnknown_02012F56

	THUMB_FUNC_END func_0809D844

	THUMB_FUNC_START func_0809D8D4
func_0809D8D4: @ 0x0809D8D4
	push {r4, r5, r6, lr}
	movs r5, #0
	lsls r2, r2, #0xc
	ldr r4, .L0809D910  @ 0x0001FFFF
	adds r3, r1, #0
	ands r3, r4
	lsrs r3, r3, #5
	adds r6, r2, r3
	movs r3, #0x80
	lsls r3, r3, #2
	adds r1, r1, r3
	ands r1, r4
	lsrs r1, r1, #5
	adds r2, r2, r1
	adds r3, r0, #0
	adds r3, #0x40
	adds r1, r0, #0
.L0809D8F6:
	adds r0, r6, r5
	strh r0, [r1]
	adds r0, r2, r5
	strh r0, [r3]
	adds r3, #2
	adds r1, #2
	adds r5, #1
	cmp r5, #0xe
	ble .L0809D8F6
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D910: .4byte 0x0001FFFF

	THUMB_FUNC_END func_0809D8D4

	THUMB_FUNC_START func_0809D914
func_0809D914: @ 0x0809D914
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L0809D9F8  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r2, r0
	strb r2, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl InitFaces
	bl ResetText
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r5, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r5, #0x4c
	adds r5, r5, r0
	ldrh r2, [r5]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r0, .L0809D9FC  @ 0x06013000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	movs r0, #4
	bl ApplyIconPalettes
	bl RestartScreenMenuScrollingBg
	movs r0, #8
	bl EnableBgSync
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809D9F8: .4byte gDispIo
.L0809D9FC: .4byte 0x06013000

	THUMB_FUNC_END func_0809D914

	THUMB_FUNC_START func_0809DA00
func_0809DA00: @ 0x0809DA00
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #0xa
	bl func_08098C8C
	ldr r0, .L0809DC38  @ gUnknown_08A1B9EC
	ldr r4, .L0809DC3C  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r5, .L0809DC40  @ gBg1Tm
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L0809DC44  @ gUnknown_08A1BCC0
	adds r1, r4, #0
	bl Decompress
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0
	str r0, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl StartSmallBrownNameBoxes
	movs r0, #0
	movs r1, #0x90
	movs r2, #6
	movs r3, #2
	bl func_080ADBFC
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r0, r7, #0
	bl func_080AC9C0
	adds r0, r7, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	ldr r5, .L0809DC48  @ gDispIo
	ldrb r0, [r5, #1]
	movs r1, #0x20
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r5
	mov r9, r0
	ldrb r1, [r0]
	movs r6, #1
	orrs r1, r6
	movs r2, #2
	orrs r1, r2
	movs r0, #4
	orrs r1, r0
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	adds r5, #0x36
	ldrb r0, [r5]
	orrs r0, r6
	orrs r0, r2
	movs r2, #5
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r2, r8
	orrs r1, r2
	mov r2, r9
	strb r1, [r2]
	mov r1, r8
	orrs r0, r1
	strb r0, [r5]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	adds r0, r7, #0
	bl StartGreenText
	movs r0, #0xc3
	movs r1, #0x93
	movs r2, #9
	adds r3, r7, #0
	bl ShowRIsInfo
	ldr r4, .L0809DC4C  @ gUnknown_02013660
	adds r0, r4, #0
	movs r1, #4
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #4
	bl InitText
	bl func_0809D608
	adds r4, #0x10
	movs r5, #4
.L0809DB3C:
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L0809DB3C
	movs r2, #0x35
	adds r2, r2, r7
	mov r8, r2
	movs r0, #0x4c
	adds r0, r0, r7
	mov r9, r0
	ldr r4, .L0809DC50  @ gUnknown_02013698
	movs r5, #7
.L0809DB5C:
	adds r0, r4, #0
	movs r1, #7
	bl InitTextDb
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L0809DB5C
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, .L0809DC54  @ func_0809D530
	bl SetOnHBlankA
	movs r4, #0x80
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #6
	bl UnpackConvoyWeaponIconGraphics
	ldr r5, .L0809DC58  @ gBg0Tm+0xDE
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #6
	bl func_0809D8D4
	ldr r0, .L0809DC5C  @ gUnknown_08A19CCC
	ldr r1, .L0809DC60  @ 0x06015000
	bl Decompress
	ldr r0, .L0809DC64  @ gUnknown_08A1A084
	movs r6, #0xa0
	lsls r6, r6, #2
	adds r1, r6, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r3, #0xb0
	lsls r3, r3, #7
	movs r0, #9
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0xe1
	movs r2, #0x2f
	bl func_08097748
	bl func_08097668
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #1
	bl SomethingPrepListRelated
	ldr r4, .L0809DC50  @ gUnknown_02013698
	ldr r1, .L0809DC68  @ gBg2Tm+0x1E
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #1
	add r0, r9
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r7, #0x2c]
	adds r0, r4, #0
	bl func_0809D300
	movs r0, #4
	bl EnableBgSync
	movs r0, #0xb3
	lsls r0, r0, #1
	adds r5, r5, r0
	subs r4, #0x28
	ldr r2, [r7, #0x2c]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	bl func_0809D6CC
	adds r0, r7, #0
	bl func_080ACCE0
	movs r0, #0
	adds r1, r6, #0
	movs r2, #2
	bl func_080ACCF4
	movs r0, #0x78
	movs r1, #0x18
	movs r2, #0xe9
	movs r3, #0x18
	bl func_080ACD7C
	movs r0, #3
	bl func_080ACD60
	ldr r0, .L0809DC6C  @ func_0809D844
	adds r1, r7, #0
	bl StartParallelWorker
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809DC38: .4byte gUnknown_08A1B9EC
.L0809DC3C: .4byte gBuf
.L0809DC40: .4byte gBg1Tm
.L0809DC44: .4byte gUnknown_08A1BCC0
.L0809DC48: .4byte gDispIo
.L0809DC4C: .4byte gUnknown_02013660
.L0809DC50: .4byte gUnknown_02013698
.L0809DC54: .4byte func_0809D530
.L0809DC58: .4byte gBg0Tm+0xDE
.L0809DC5C: .4byte gUnknown_08A19CCC
.L0809DC60: .4byte 0x06015000
.L0809DC64: .4byte gUnknown_08A1A084
.L0809DC68: .4byte gBg2Tm+0x1E
.L0809DC6C: .4byte func_0809D844

	THUMB_FUNC_END func_0809DA00

	THUMB_FUNC_START func_0809DC70
func_0809DC70: @ 0x0809DC70
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	adds r1, r4, #0
	bl func_0809D278
	movs r0, #0
	bl func_080ACA84
	adds r0, r4, #0
	bl func_0809D644
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x44
	movs r2, #4
	bl func_080AD51C
	ldr r0, .L0809DCC8  @ func_0809D7D4
	bl GetParallelWorker
	bl Proc_End
	ldr r0, .L0809DCCC  @ func_0809D80C
	bl GetParallelWorker
	bl Proc_End
	ldr r0, .L0809DCD0  @ func_0809D784
	adds r1, r4, #0
	bl StartParallelWorker
	movs r0, #7
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809DCC8: .4byte func_0809D7D4
.L0809DCCC: .4byte func_0809D80C
.L0809DCD0: .4byte func_0809D784

	THUMB_FUNC_END func_0809DC70

	THUMB_FUNC_START func_0809DCD4
func_0809DCD4: @ 0x0809DCD4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x33
	ldrb r6, [r4]
	ldrh r0, [r5, #0x38]
	cmp r0, #0
	beq .L0809DCE6
	b .L0809DE34
.L0809DCE6:
	ldr r1, .L0809DD04  @ gKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r3
	mov ip, r1
	cmp r0, #0
	beq .L0809DDE8
	cmp r6, #0
	beq .L0809DD08
	cmp r6, #1
	beq .L0809DD70
	b .L0809DEEC
	.align 2, 0
.L0809DD04: .4byte gKeySt
.L0809DD08:
	bl func_08097CC8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x63
	bhi .L0809DDCC
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	ble .L0809DDCC
	ldrb r2, [r4]
	lsls r2, r2, #4
	adds r2, #0x24
	movs r0, #0
	movs r1, #0x44
	movs r3, #2
	bl func_080AC9D4
	ldr r0, .L0809DD64  @ func_0809D784
	bl GetParallelWorker
	bl Proc_End
	ldr r0, .L0809DD68  @ func_0809D7D4
	adds r1, r5, #0
	bl StartParallelWorker
	movs r0, #1
	adds r1, r5, #0
	bl func_0809D278
	ldr r0, .L0809DD6C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809DD5A
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809DD5A:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b .L0809DEEC
	.align 2, 0
.L0809DD64: .4byte func_0809D784
.L0809DD68: .4byte func_0809D7D4
.L0809DD6C: .4byte gPlaySt
.L0809DD70:
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	cmp r0, #4
	bgt .L0809DDCC
	ldrb r2, [r4]
	lsls r2, r2, #4
	adds r2, #0x24
	movs r0, #0
	movs r1, #0x44
	movs r3, #2
	bl func_080AC9D4
	ldr r0, .L0809DDC0  @ func_0809D784
	bl GetParallelWorker
	bl Proc_End
	ldr r0, .L0809DDC4  @ func_0809D80C
	adds r1, r5, #0
	bl StartParallelWorker
	movs r0, #2
	adds r1, r5, #0
	bl func_0809D278
	ldr r0, .L0809DDC8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809DDB6
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809DDB6:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b .L0809DEEC
	.align 2, 0
.L0809DDC0: .4byte func_0809D784
.L0809DDC4: .4byte func_0809D80C
.L0809DDC8: .4byte gPlaySt
.L0809DDCC:
	ldr r0, .L0809DDE4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809DDDA
	b .L0809DEEC
.L0809DDDA:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809DEEC
	.align 2, 0
.L0809DDE4: .4byte gPlaySt
.L0809DDE8:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L0809DE10
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
	ldr r0, .L0809DE0C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809DEEC
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809DEEC
	.align 2, 0
.L0809DE0C: .4byte gPlaySt
.L0809DE10:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	cmp r0, #0
	beq .L0809DE54
	lsls r1, r6, #4
	adds r1, #0x24
	ldr r2, .L0809DE30  @ gUnknown_08A19204
	lsls r0, r6, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0x44
	bl ShowTextHelpBox
	strh r7, [r5, #0x38]
	b .L0809DEEC
	.align 2, 0
.L0809DE30: .4byte gUnknown_08A19204
.L0809DE34:
	ldr r2, .L0809DE50  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	mov ip, r2
	cmp r0, #0
	beq .L0809DE54
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strh r0, [r5, #0x38]
	b .L0809DEEC
	.align 2, 0
.L0809DE50: .4byte gKeySt
.L0809DE54:
	mov r0, ip
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x33
	cmp r0, #0
	beq .L0809DE80
	ldrb r0, [r4]
	cmp r0, #0
	beq .L0809DE72
	subs r0, #1
	b .L0809DE7E
.L0809DE72:
	ldrh r1, [r3, #8]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809DE80
	movs r0, #1
.L0809DE7E:
	strb r0, [r4]
.L0809DE80:
	mov r0, ip
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809DEA8
	ldrb r0, [r4]
	cmp r0, #0
	bne .L0809DE9A
	adds r0, #1
	b .L0809DEA6
.L0809DE9A:
	ldrh r1, [r2, #8]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809DEA8
	movs r0, #0
.L0809DEA6:
	strb r0, [r4]
.L0809DEA8:
	ldrb r0, [r4]
	cmp r6, r0
	beq .L0809DEEC
	ldr r0, .L0809DEF4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809DEC0
	movs r0, #0x66
	bl m4aSongNumStart
.L0809DEC0:
	ldrb r1, [r4]
	lsls r1, r1, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x44
	movs r2, #4
	bl func_080AD51C
	ldrh r0, [r5, #0x38]
	cmp r0, #0
	beq .L0809DEEC
	ldrb r0, [r4]
	lsls r1, r0, #4
	adds r1, #0x24
	ldr r2, .L0809DEF8  @ gUnknown_08A19204
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0x44
	bl ShowTextHelpBox
.L0809DEEC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809DEF4: .4byte gPlaySt
.L0809DEF8: .4byte gUnknown_08A19204

	THUMB_FUNC_END func_0809DCD4

	THUMB_FUNC_START func_0809DEFC
func_0809DEFC: @ 0x0809DEFC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl InitIcons
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x35
	ldrb r1, [r5]
	movs r2, #1
	bl SomethingPrepListRelated
	ldr r0, .L0809DF8C  @ gUnknown_02013698
	ldr r1, .L0809DF90  @ gBg2Tm+0x1E
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r6, r4, #0
	adds r6, #0x4c
	adds r2, r6, r2
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldr r3, [r4, #0x2c]
	bl func_0809D300
	ldr r0, .L0809DF94  @ gBg0Tm+0x244
	ldr r1, [r4, #0x2c]
	bl func_0809B830
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r7, r4, #0
	adds r7, #0x3a
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r6, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #5
	bl EnableBgSync
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq .L0809DFA8
	ldr r0, .L0809DF98  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq .L0809DFA0
	ldr r2, .L0809DF9C  @ gUnknown_020122D4
	ldrb r3, [r5]
	lsls r3, r3, #1
	adds r0, r7, r3
	ldrh r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r2, [r0, #2]
	lsls r1, r1, #4
	adds r3, r6, r3
	ldrh r0, [r3]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl ShowItemHelpBox
	movs r0, #1
	b .L0809DFA6
	.align 2, 0
.L0809DF8C: .4byte gUnknown_02013698
.L0809DF90: .4byte gBg2Tm+0x1E
.L0809DF94: .4byte gBg0Tm+0x244
.L0809DF98: .4byte gUnknown_02012F56
.L0809DF9C: .4byte gUnknown_020122D4
.L0809DFA0:
	bl MoveableHelpBox_OnEnd
	movs r0, #0xff
.L0809DFA6:
	strh r0, [r4, #0x38]
.L0809DFA8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809DEFC

	THUMB_FUNC_START func_0809DFB0
func_0809DFB0: @ 0x0809DFB0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r3, #0
	movs r7, #4
	adds r1, r6, #0
	adds r1, #0x34
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge .L0809DFDE
	subs r1, r7, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	adds r3, r0, #0
	subs r3, #0x60
.L0809DFDE:
	adds r5, r6, #0
	adds r5, #0x35
	cmp r4, #4
	bne .L0809DFFE
	ldrb r0, [r5]
	cmp r0, #0
	bne .L0809DFF0
	movs r0, #8
	b .L0809DFF2
.L0809DFF0:
	subs r0, #1
.L0809DFF2:
	strb r0, [r5]
	adds r0, r6, #0
	str r3, [sp]
	bl func_0809DEFC
	ldr r3, [sp]
.L0809DFFE:
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r1, [r4]
	cmp r1, r7
	blt .L0809E01E
	subs r1, r1, r7
	subs r1, r7, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	adds r1, r7, #0
	muls r1, r7, r1
	bl __divsi3
	adds r3, r0, #0
.L0809E01E:
	movs r0, #0xff
	ands r3, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r6, #0
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r3, #0
	bl SetBgOffset
	ldrb r1, [r4]
	lsls r0, r7, #1
	cmp r1, r0
	bne .L0809E04C
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
.L0809E04C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809DFB0

	THUMB_FUNC_START func_0809E054
func_0809E054: @ 0x0809E054
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge .L0809E086
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	movs r1, #0x60
	subs r6, r1, r0
.L0809E086:
	adds r5, r7, #0
	adds r5, #0x35
	cmp r4, #4
	bne .L0809E0A2
	ldrb r0, [r5]
	cmp r0, #8
	bne .L0809E098
	movs r0, #0
	b .L0809E09A
.L0809E098:
	adds r0, #1
.L0809E09A:
	strb r0, [r5]
	adds r0, r7, #0
	bl func_0809DEFC
.L0809E0A2:
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r1, [r4]
	cmp r1, r8
	blt .L0809E0C6
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	negs r6, r0
.L0809E0C6:
	movs r0, #0xff
	ands r6, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r7, #0
	adds r0, #0x4c
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl SetBgOffset
	ldrb r1, [r4]
	mov r2, r8
	lsls r0, r2, #1
	cmp r1, r0
	bne .L0809E0F6
	adds r0, r7, #0
	movs r1, #4
	bl Proc_Goto
.L0809E0F6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809E054

	THUMB_FUNC_START func_0809E100
func_0809E100: @ 0x0809E100
	push {r4, r5, lr}
	mov ip, r0
	ldr r0, .L0809E128  @ gUnknown_02012F56
	ldrh r4, [r0]
	adds r5, r0, #0
	cmp r4, #0
	bne .L0809E12C
	mov r3, ip
	adds r3, #0x35
	ldrb r0, [r3]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x3a
	adds r1, r1, r0
	mov r2, ip
	adds r2, #0x4c
	adds r0, r2, r0
	strh r4, [r0]
	strh r4, [r1]
	b .L0809E14A
	.align 2, 0
.L0809E128: .4byte gUnknown_02012F56
.L0809E12C:
	mov r2, ip
	adds r2, #0x35
	ldrb r0, [r2]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x3a
	adds r4, r1, r0
	ldrh r1, [r4]
	ldrh r0, [r5]
	subs r0, #1
	adds r3, r2, #0
	adds r2, #0x17
	cmp r1, r0
	ble .L0809E14A
	strh r0, [r4]
.L0809E14A:
	ldrh r0, [r5]
	cmp r0, #6
	bls .L0809E168
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r4, r2, r0
	ldrh r0, [r4]
	lsrs r0, r0, #4
	adds r0, #7
	ldrh r1, [r5]
	cmp r0, r1
	ble .L0809E168
	subs r0, r1, #7
	lsls r0, r0, #4
	strh r0, [r4]
.L0809E168:
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r2, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809E100

	THUMB_FUNC_START func_0809E184
func_0809E184: @ 0x0809E184
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	adds r0, #0x35
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #5
	adds r4, r0, r1
	ldrh r3, [r4]
	lsls r2, r3, #4
	adds r0, #0x12
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	cmp r2, #0x37
	bgt .L0809E1B0
	cmp r3, #0
	beq .L0809E1B0
	adds r0, r3, #1
	strh r0, [r4]
.L0809E1B0:
	mov r4, ip
	adds r4, #0x35
	ldrb r0, [r4]
	lsls r0, r0, #1
	mov r3, ip
	adds r3, #0x3a
	adds r6, r3, r0
	ldrh r5, [r6]
	lsls r1, r5, #4
	mov r2, ip
	adds r2, #0x4c
	adds r0, r2, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	adds r7, r3, #0
	mov r8, r2
	cmp r1, #0x78
	ble .L0809E1E4
	ldr r0, .L0809E214  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r5, r0
	beq .L0809E1E4
	subs r0, r5, #1
	strh r0, [r6]
.L0809E1E4:
	mov r0, ip
	bl func_0809E100
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809E214: .4byte gUnknown_02012F56

	THUMB_FUNC_END func_0809E184

	THUMB_FUNC_START func_0809E218
func_0809E218: @ 0x0809E218
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r7, r1, #0
	bl InitIcons
	ldr r0, .L0809E2B0  @ gBg2Tm+0x1E
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x35
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r5, r4, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r1, [r0]
	lsrs r1, r1, #4
	mov r0, r8
	bl func_0809D418
	ldr r0, .L0809E2B4  @ gBg0Tm+0x244
	ldr r1, [r4, #0x2c]
	bl func_0809B830
	movs r0, #5
	bl EnableBgSync
	cmp r7, #0
	bge .L0809E26A
	ldr r0, .L0809E2B8  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	subs r2, #1
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl func_0809D47C
.L0809E26A:
	cmp r7, #0
	ble .L0809E284
	ldr r0, .L0809E2B8  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	adds r2, #7
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl func_0809D47C
.L0809E284:
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r0, [r1]
	adds r0, r0, r7
	strh r0, [r1]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809E2B0: .4byte gBg2Tm+0x1E
.L0809E2B4: .4byte gBg0Tm+0x244
.L0809E2B8: .4byte gUnknown_02013698

	THUMB_FUNC_END func_0809E218

	THUMB_FUNC_START func_0809E2BC
func_0809E2BC: @ 0x0809E2BC
	push {lr}
	bl func_0809D6CC
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809E2BC

	THUMB_FUNC_START func_0809E2C8
func_0809E2C8: @ 0x0809E2C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #5
	beq .L0809E2E4
	ldr r0, .L0809E2FC  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	bne .L0809E304
.L0809E2E4:
	ldr r0, .L0809E300  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809E2F2
	b .L0809E412
.L0809E2F2:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809E412
	.align 2, 0
.L0809E2FC: .4byte gUnknown_02012F56
.L0809E300: .4byte gPlaySt
.L0809E304:
	movs r5, #0
	strh r5, [r7, #0x38]
	ldr r1, [r7, #0x2c]
	lsls r0, r2, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldr r4, .L0809E3E4  @ gUnknown_020122D4
	movs r0, #0x35
	adds r0, r0, r7
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r6, r7, #0
	adds r6, #0x3a
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r7, #0x2c]
	bl UnitRemoveInvalidItems
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r4
	strh r5, [r0, #2]
	bl func_080982B8
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #1
	bl SomethingPrepListRelated
	adds r0, r7, #0
	bl func_0809E100
	bl InitIcons
	ldr r0, .L0809E3E8  @ gBg0Tm+0x244
	ldr r4, .L0809E3EC  @ gUnknown_02013670
	ldr r2, [r7, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	adds r4, #0x28
	ldr r1, .L0809E3F0  @ gBg2Tm+0x1E
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r5, r7, #0
	adds r5, #0x4c
	adds r0, r5, r0
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r7, #0x2c]
	adds r0, r4, #0
	bl func_0809D300
	ldr r0, .L0809E3F4  @ func_0809E2BC
	movs r1, #1
	adds r2, r7, #0
	bl func_080ACE20
	mov r1, r8
	ldrb r0, [r1]
	lsls r0, r0, #1
	adds r6, r6, r0
	ldrh r1, [r6]
	lsls r1, r1, #4
	adds r5, r5, r0
	ldrh r0, [r5]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #5
	bl EnableBgSync
	ldr r1, .L0809E3F8  @ gAction
	movs r0, #0x1c
	strb r0, [r1, #0x11]
	ldr r0, [r7, #0x2c]
	bl GetUnitItemCount
	cmp r0, #5
	bne .L0809E400
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0809E3FC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E412
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809E412
	.align 2, 0
.L0809E3E4: .4byte gUnknown_020122D4
.L0809E3E8: .4byte gBg0Tm+0x244
.L0809E3EC: .4byte gUnknown_02013670
.L0809E3F0: .4byte gBg2Tm+0x1E
.L0809E3F4: .4byte func_0809E2BC
.L0809E3F8: .4byte gAction
.L0809E3FC: .4byte gPlaySt
.L0809E400:
	ldr r0, .L0809E41C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E412
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809E412:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809E41C: .4byte gPlaySt

	THUMB_FUNC_END func_0809E2C8

	THUMB_FUNC_START func_0809E420
func_0809E420: @ 0x0809E420
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r7, r4, #0
	adds r7, #0x35
	ldrb r0, [r7]
	lsls r0, r0, #1
	movs r1, #0x3a
	adds r1, r1, r4
	mov r8, r1
	adds r1, r1, r0
	ldrh r1, [r1]
	mov sl, r1
	adds r5, r4, #0
	adds r5, #0x4c
	adds r6, r5, r0
	ldrh r0, [r6]
	movs r2, #0xf
	mov r9, r2
	mov r1, r9
	ands r1, r0
	mov r9, r1
	cmp r1, #0
	beq .L0809E458
	b .L0809E648
.L0809E458:
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq .L0809E462
	cmp r0, #0xff
	bne .L0809E500
.L0809E462:
	ldr r1, .L0809E49C  @ gKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	mov r8, r1
	cmp r0, #0
	beq .L0809E4C4
	ldr r0, .L0809E4A0  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq .L0809E4A8
	ldr r1, .L0809E4A4  @ gUnknown_020122D4
	mov r2, sl
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	mov r0, sl
	lsls r1, r0, #4
	ldrh r0, [r6]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl ShowItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x38]
	b .L0809E79A
	.align 2, 0
.L0809E49C: .4byte gKeySt
.L0809E4A0: .4byte gUnknown_02012F56
.L0809E4A4: .4byte gUnknown_020122D4
.L0809E4A8:
	ldr r0, .L0809E4C0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809E4B6
	b .L0809E79A
.L0809E4B6:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809E79A
	.align 2, 0
.L0809E4C0: .4byte gPlaySt
.L0809E4C4:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq .L0809E4D4
	adds r0, r4, #0
	bl func_0809E2C8
	b .L0809E79A
.L0809E4D4:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L0809E520
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0809E4FC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E4F6
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809E4F6:
	mov r1, r9
	strh r1, [r4, #0x38]
	b .L0809E79A
	.align 2, 0
.L0809E4FC: .4byte gPlaySt
.L0809E500:
	ldr r2, .L0809E51C  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq .L0809E520
	bl MoveableHelpBox_OnEnd
	mov r2, r9
	strh r2, [r4, #0x38]
	b .L0809E79A
	.align 2, 0
.L0809E51C: .4byte gKeySt
.L0809E520:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L0809E568
	movs r0, #0
	bl func_080ACDA4
	ldr r0, .L0809E564  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E54A
	movs r0, #0x67
	bl m4aSongNumStart
.L0809E54A:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	adds r1, r4, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	bl func_0809DFB0
	b .L0809E79A
	.align 2, 0
.L0809E564: .4byte gPlaySt
.L0809E568:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L0809E5A4
	movs r0, #1
	bl func_080ACDA4
	ldr r0, .L0809E5A0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E588
	movs r0, #0x67
	bl m4aSongNumStart
.L0809E588:
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	adds r0, r4, #0
	adds r0, #0x34
	strb r5, [r0]
	adds r0, r4, #0
	bl func_0809E054
	b .L0809E79A
	.align 2, 0
.L0809E5A0: .4byte gPlaySt
.L0809E5A4:
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809E5B8
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #8
	b .L0809E5BE
.L0809E5B8:
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #4
.L0809E5BE:
	strb r0, [r1]
	adds r7, r1, #0
	mov r1, r8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne .L0809E5EC
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	adds r6, r4, #0
	adds r6, #0x35
	adds r5, r4, #0
	adds r5, #0x3a
	cmp r0, #0
	beq .L0809E608
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne .L0809E608
.L0809E5EC:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r2, r4, #0
	adds r2, #0x3a
	adds r3, r2, r1
	ldrh r1, [r3]
	adds r6, r0, #0
	adds r5, r2, #0
	cmp r1, #0
	beq .L0809E608
	subs r0, r1, #1
	strh r0, [r3]
.L0809E608:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne .L0809E62A
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809E6A8
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne .L0809E6A8
.L0809E62A:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r2, r5, r0
	ldrh r1, [r2]
	ldr r0, .L0809E644  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L0809E6A8
	adds r0, r1, #1
	strh r0, [r2]
	b .L0809E6A8
	.align 2, 0
.L0809E644: .4byte gUnknown_02012F56
.L0809E648:
	mov r1, sl
	lsls r0, r1, #4
	ldrh r2, [r6]
	adds r1, r2, #0
	subs r1, #0x28
	subs r0, r0, r1
	cmp r0, #0x37
	bgt .L0809E666
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	strh r0, [r6]
.L0809E666:
	ldrb r0, [r7]
	lsls r0, r0, #1
	mov r2, r8
	adds r1, r2, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r3, r5, r0
	ldrh r2, [r3]
	adds r0, r2, #0
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble .L0809E68E
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r2, r0
	strh r0, [r3]
.L0809E68E:
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	adds r6, r7, #0
	mov r5, r8
.L0809E6A8:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	cmp sl, r0
	beq .L0809E79A
	ldr r1, .L0809E710  @ gUnknown_020122D4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	mov r8, r0
	ldr r0, .L0809E714  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E6D0
	movs r0, #0x66
	bl m4aSongNumStart
.L0809E6D0:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r3, [r1]
	lsls r2, r3, #4
	adds r1, r4, #0
	adds r1, #0x4c
	adds r0, r1, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	adds r7, r1, #0
	cmp r2, #0x37
	bgt .L0809E718
	cmp r3, #0
	beq .L0809E718
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq .L0809E702
	adds r1, r2, #0
	adds r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl ShowItemHelpBox
.L0809E702:
	adds r0, r4, #0
	adds r0, #0x32
	movs r1, #0
	ldrsb r1, [r0, r1]
	negs r1, r1
	b .L0809E750
	.align 2, 0
.L0809E710: .4byte gUnknown_020122D4
.L0809E714: .4byte gPlaySt
.L0809E718:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r2, [r1]
	lsls r1, r2, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble .L0809E75C
	ldr r0, .L0809E758  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r2, r0
	beq .L0809E75C
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq .L0809E748
	subs r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl ShowItemHelpBox
.L0809E748:
	adds r0, r4, #0
	adds r0, #0x32
	movs r1, #0
	ldrsb r1, [r0, r1]
.L0809E750:
	adds r0, r4, #0
	bl func_0809E218
	b .L0809E79A
	.align 2, 0
.L0809E758: .4byte gUnknown_02012F56
.L0809E75C:
	ldrh r0, [r4, #0x38]
	cmp r0, #0
	beq .L0809E77C
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	mov r2, r8
	bl ShowItemHelpBox
.L0809E77C:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
.L0809E79A:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809E420

	THUMB_FUNC_START func_0809E7A8
func_0809E7A8: @ 0x0809E7A8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, .L0809E7D8  @ gKeySt
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L0809E7EE
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r3, r0, #0
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	cmp r0, #0
	beq .L0809E7DC
	subs r0, #1
	strb r0, [r2]
	b .L0809E81E
	.align 2, 0
.L0809E7D8: .4byte gKeySt
.L0809E7DC:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809E838
	subs r0, r3, #1
	strb r0, [r2]
	b .L0809E81E
.L0809E7EE:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809E838
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r1, [r2]
	subs r0, #1
	cmp r1, r0
	bge .L0809E810
	adds r0, r1, #1
	strb r0, [r2]
	b .L0809E81E
.L0809E810:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809E838
	strb r5, [r2]
.L0809E81E:
	ldr r0, .L0809E834  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E830
	movs r0, #0x66
	bl m4aSongNumStart
.L0809E830:
	movs r0, #1
	b .L0809E83A
	.align 2, 0
.L0809E834: .4byte gPlaySt
.L0809E838:
	movs r0, #0
.L0809E83A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809E7A8

	THUMB_FUNC_START func_0809E840
func_0809E840: @ 0x0809E840
	push {lr}
	adds r0, #0x31
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809E840

	THUMB_FUNC_START func_0809E85C
func_0809E85C: @ 0x0809E85C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r7, r5, #0
	adds r7, #0x31
	ldrb r2, [r7]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1e
	adds r1, r1, r2
	ldrh r4, [r1]
	bl GetUnitItemCount
	ldr r1, [r5, #0x2c]
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r5, #0x2c]
	bl UnitRemoveInvalidItems
	adds r0, r4, #0
	bl func_08098014
	adds r6, r5, #0
	adds r6, #0x35
	strb r0, [r6]
	adds r0, r4, #0
	bl AddItemToConvoy
	ldr r0, [r5, #0x2c]
	ldrb r1, [r6]
	movs r2, #1
	bl SomethingPrepListRelated
	adds r0, r5, #0
	bl func_0809E100
	bl InitIcons
	ldr r0, .L0809E924  @ gBg0Tm+0x244
	ldr r4, .L0809E928  @ gUnknown_02013670
	ldr r2, [r5, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	adds r4, #0x28
	ldr r1, .L0809E92C  @ gBg2Tm+0x1E
	ldrb r2, [r6]
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x4c
	adds r0, r0, r2
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r5, #0x2c]
	adds r0, r4, #0
	bl func_0809D300
	ldr r0, .L0809E930  @ func_0809E2BC
	movs r1, #1
	adds r2, r5, #0
	bl func_080ACE20
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldr r1, .L0809E934  @ gAction
	movs r0, #0x1c
	strb r0, [r1, #0x11]
	cmp r4, #0
	beq .L0809E906
	bl func_08097CC8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x64
	bne .L0809E93C
.L0809E906:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0809E938  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E96A
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809E96A
	.align 2, 0
.L0809E924: .4byte gBg0Tm+0x244
.L0809E928: .4byte gUnknown_02013670
.L0809E92C: .4byte gBg2Tm+0x1E
.L0809E930: .4byte func_0809E2BC
.L0809E934: .4byte gAction
.L0809E938: .4byte gPlaySt
.L0809E93C:
	ldr r0, .L0809E970  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809E94E
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809E94E:
	ldrb r0, [r7]
	cmp r4, r0
	bgt .L0809E96A
	subs r0, r4, #1
	strb r0, [r7]
	ldrb r1, [r7]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
.L0809E96A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809E970: .4byte gPlaySt

	THUMB_FUNC_END func_0809E85C

	THUMB_FUNC_START func_0809E974
func_0809E974: @ 0x0809E974
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	cmp r0, #1
	bne .L0809E99C
	ldr r0, .L0809E998  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809EA34
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strh r0, [r4, #0x38]
	b .L0809EA76
	.align 2, 0
.L0809E998: .4byte gKeySt
.L0809E99C:
	ldr r0, .L0809E9D0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809E9D4
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L0809EA76
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x38]
	b .L0809EA76
	.align 2, 0
.L0809E9D0: .4byte gKeySt
.L0809E9D4:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809EA0C
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r1, [r1]
	bl func_08097F98
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809EA04
	movs r1, #1
	negs r1, r1
	ldr r2, .L0809EA00  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r4, #0
	bl func_08097DA8
	b .L0809EA76
	.align 2, 0
.L0809EA00: .4byte 0x0000088B
.L0809EA04:
	adds r0, r4, #0
	bl func_0809E85C
	b .L0809EA76
.L0809EA0C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809EA34
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0809EA30  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809EA76
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809EA76
	.align 2, 0
.L0809EA30: .4byte gPlaySt
.L0809EA34:
	adds r0, r4, #0
	bl func_0809E7A8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809EA76
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r1, [r5]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	ldrh r0, [r4, #0x38]
	cmp r0, #1
	bne .L0809EA76
	ldr r0, [r4, #0x2c]
	ldrb r3, [r5]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L0809EA76
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
.L0809EA76:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809E974

	THUMB_FUNC_START func_0809EA7C
func_0809EA7C: @ 0x0809EA7C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809EAA0  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809EAA4
	bl GM_GetBaseMenuProc
	cmp r0, #0
	beq .L0809EABE
	adds r1, r4, #0
	adds r1, #0x35
	ldrb r1, [r1]
	adds r0, #0x2b
	b .L0809EABC
	.align 2, 0
.L0809EAA0: .4byte gGmData
.L0809EAA4:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne .L0809EABE
	ldr r0, .L0809EAD4  @ gUnknown_08A1829C
	bl FindProc
	adds r1, r4, #0
	adds r1, #0x35
	ldrb r1, [r1]
	adds r0, #0x32
.L0809EABC:
	strb r1, [r0]
.L0809EABE:
	adds r0, r4, #0
	bl EndAllProcChildren
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EAD4: .4byte gUnknown_08A1829C

	THUMB_FUNC_END func_0809EA7C

	THUMB_FUNC_START func_0809EAD8
func_0809EAD8: @ 0x0809EAD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809EAF0  @ gUnknown_08A1920C
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EAF0: .4byte gUnknown_08A1920C

	THUMB_FUNC_END func_0809EAD8

	THUMB_FUNC_START func_0809EAF4
func_0809EAF4: @ 0x0809EAF4
	push {r4, lr}
	ldr r4, .L0809EB10  @ gActiveUnit
	ldr r0, [r4]
	cmp r0, #0
	beq .L0809EB08
	bl MU_EndAll
	ldr r0, [r4]
	bl ShowUnitSprite
.L0809EB08:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EB10: .4byte gActiveUnit

	THUMB_FUNC_END func_0809EAF4

	THUMB_FUNC_START func_0809EB14
func_0809EB14: @ 0x0809EB14
	push {r4, lr}
	ldr r4, .L0809EB34  @ gActiveUnit
	ldr r0, [r4]
	cmp r0, #0
	beq .L0809EB2C
	bl HideUnitSprite
	ldr r0, [r4]
	bl MU_Create
	bl MU_SetDefaultFacing_Auto
.L0809EB2C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EB34: .4byte gActiveUnit

	THUMB_FUNC_END func_0809EB14

	THUMB_FUNC_START func_0809EB38
func_0809EB38: @ 0x0809EB38
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809EB54  @ gUnknown_08A192EC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EB54: .4byte gUnknown_08A192EC

	THUMB_FUNC_END func_0809EB38

	THUMB_FUNC_START func_0809EB58
func_0809EB58: @ 0x0809EB58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809EB74  @ gUnknown_08A192EC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x2c]
	adds r0, #0x30
	movs r1, #2
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EB74: .4byte gUnknown_08A192EC

	THUMB_FUNC_END func_0809EB58

	THUMB_FUNC_START func_0809EB78
func_0809EB78: @ 0x0809EB78
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809EBA4  @ gUnknown_08A1829C
	bl FindProc
	adds r2, r0, #0
	movs r0, #0
	strh r0, [r4, #0x36]
	movs r0, #0xff
	strh r0, [r4, #0x34]
	ldr r0, .L0809EBA8  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809EBB4
	bl GM_GetBaseMenuProc
	cmp r0, #0
	beq .L0809EBAC
	adds r0, #0x2a
	b .L0809EBB8
	.align 2, 0
.L0809EBA4: .4byte gUnknown_08A1829C
.L0809EBA8: .4byte gGmData
.L0809EBAC:
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0
	b .L0809EBBE
.L0809EBB4:
	adds r0, r2, #0
	adds r0, #0x31
.L0809EBB8:
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x33
.L0809EBBE:
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x31
	movs r0, #0
	movs r1, #4
	strb r1, [r2]
	adds r1, r4, #0
	adds r1, #0x30
	strb r0, [r1]
	movs r3, #0
	adds r1, #0x1a
	adds r0, r4, #0
	adds r0, #0x38
	movs r2, #8
.L0809EBDA:
	strh r3, [r0]
	strh r3, [r1]
	adds r1, #2
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge .L0809EBDA
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809EB78

	THUMB_FUNC_START func_0809EBF0
func_0809EBF0: @ 0x0809EBF0
	push {r4, lr}
	sub sp, #8
	ldr r4, .L0809EC2C  @ gBg0Tm+0x68
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L0809EC30  @ 0x000005A9
	bl GetMsg
	ldr r2, .L0809EC34  @ gUnknown_020136D8
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809EC2C: .4byte gBg0Tm+0x68
.L0809EC30: .4byte 0x000005A9
.L0809EC34: .4byte gUnknown_020136D8

	THUMB_FUNC_END func_0809EBF0

	THUMB_FUNC_START func_0809EC38
func_0809EC38: @ 0x0809EC38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r6, #0x33
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r5, r0, #0
	adds r5, #0x38
	adds r1, r5, r1
	ldrh r4, [r1]
	ldr r0, .L0809EC84  @ gBg0Tm+0x70
	mov r8, r0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	ldr r7, .L0809EC88  @ gUnknown_02013668
	adds r0, r7, #0
	bl ClearText
	ldr r0, .L0809EC8C  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, r4
	bgt .L0809EC94
	ldr r0, .L0809EC90  @ 0x00000536
	bl GetMsg
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #1
	b .L0809ECBA
	.align 2, 0
.L0809EC84: .4byte gBg0Tm+0x70
.L0809EC88: .4byte gUnknown_02013668
.L0809EC8C: .4byte gUnknown_02012F56
.L0809EC90: .4byte 0x00000536
.L0809EC94:
	ldr r0, .L0809ECC4  @ gUnknown_020122D4
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r1, [r1]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r4, [r1]
	cmp r4, #0
	bne .L0809ECC8
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetMsg
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #3
.L0809ECBA:
	movs r3, #0
	bl PutDrawText
	b .L0809ECE8
	.align 2, 0
.L0809ECC4: .4byte gUnknown_020122D4
.L0809ECC8:
	adds r0, r4, #0
	bl GetUnitByPid
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #0
	movs r3, #0
	bl PutDrawText
.L0809ECE8:
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809EC38

	THUMB_FUNC_START func_0809ECFC
func_0809ECFC: @ 0x0809ECFC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r0, [r7]
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r4, #0x7c
	bl GetGameTime
	ldr r2, .L0809ED74  @ gPal
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, .L0809ED78  @ gUnknown_08A1BD60
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, .L0809ED7C  @ 0x0000029A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, .L0809ED80  @ gUnknown_08A19608
	ldrb r0, [r7]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x85
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl PutSprite
	ldr r3, .L0809ED84  @ gUnknown_08A195F8
	str r5, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x18
	bl PutSprite
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r6, #0x4a
	adds r6, r6, r0
	ldrh r1, [r6]
	ldr r0, .L0809ED88  @ gUnknown_02012F56
	ldrh r2, [r0]
	movs r0, #0xc
	movs r3, #7
	bl func_080976CC
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809ED74: .4byte gPal
.L0809ED78: .4byte gUnknown_08A1BD60
.L0809ED7C: .4byte 0x0000029A
.L0809ED80: .4byte gUnknown_08A19608
.L0809ED84: .4byte gUnknown_08A195F8
.L0809ED88: .4byte gUnknown_02012F56

	THUMB_FUNC_END func_0809ECFC

	THUMB_FUNC_START func_0809ED8C
func_0809ED8C: @ 0x0809ED8C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, .L0809F0C0  @ gDispIo
	mov r8, r0
	ldrb r1, [r0]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	mov r1, r8
	strb r0, [r1]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	mov r0, r8
	ldrb r2, [r0, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	mov r9, r2
	mov r2, r9
	orrs r0, r2
	mov r2, r8
	strb r0, [r2, #0xc]
	ldrb r2, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r5, #2
	orrs r0, r5
	mov r2, r8
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	bl InitFaces
	bl ResetText
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r7, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #0x17
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r0, .L0809F0C4  @ 0x06012000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	movs r0, #4
	bl ApplyIconPalettes
	bl RestartScreenMenuScrollingBg
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	ldr r0, .L0809F0C8  @ gUnknown_08A1B9EC
	ldr r4, .L0809F0CC  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L0809F0D0  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	adds r0, r7, #0
	bl func_080AC9C0
	adds r0, r7, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	mov r1, r8
	ldrb r0, [r1, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, r8
	strb r0, [r2, #1]
	mov r1, r8
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r2, #0x34
	ldrb r0, [r2]
	mov r1, r9
	orrs r0, r1
	orrs r0, r5
	movs r1, #4
	orrs r0, r1
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	ldrb r0, [r2]
	mov r1, r9
	orrs r0, r1
	orrs r0, r5
	movs r1, #5
	negs r1, r1
	ands r0, r1
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
	adds r0, r7, #0
	bl StartGreenText
	movs r0, #0xc3
	movs r1, #0x93
	movs r2, #9
	adds r3, r7, #0
	bl ShowRIsInfo
	ldr r4, .L0809F0D4  @ gUnknown_02013660
	adds r0, r4, #0
	movs r1, #6
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #5
	bl InitText
	adds r0, r4, #0
	adds r0, #0x78
	movs r1, #4
	bl InitText
	adds r4, #0x10
	movs r5, #4
.L0809EF2C:
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L0809EF2C
	movs r2, #0x33
	adds r2, r2, r7
	mov r8, r2
	adds r6, r7, #0
	adds r6, #0x4a
	ldr r4, .L0809F0D8  @ gUnknown_02013698
	movs r5, #7
.L0809EF4A:
	adds r0, r4, #0
	movs r1, #7
	bl InitTextDb
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L0809EF4A
	movs r4, #0x80
	lsls r4, r4, #7
	adds r0, r4, #0
	movs r1, #6
	bl UnpackConvoyWeaponIconGraphics
	ldr r0, .L0809F0DC  @ gBg0Tm+0xDE
	mov r9, r0
	adds r1, r4, #0
	movs r2, #6
	bl func_0809D8D4
	ldr r0, .L0809F0E0  @ gUnknown_08A19CCC
	ldr r1, .L0809F0E4  @ 0x06015000
	bl Decompress
	ldr r0, .L0809F0E8  @ gUnknown_08A1A084
	movs r4, #0xa0
	lsls r4, r4, #2
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r3, #0xb0
	lsls r3, r3, #7
	movs r0, #9
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0xe1
	movs r2, #0x2f
	bl func_08097748
	bl func_08097668
	ldr r0, [r7, #0x2c]
	mov r2, r8
	ldrb r1, [r2]
	movs r2, #3
	bl SomethingPrepListRelated
	adds r0, r7, #0
	bl func_0809F5F4
	ldr r5, .L0809F0D8  @ gUnknown_02013698
	ldr r1, .L0809F0EC  @ gBg2Tm+0x1E
	mov r2, r8
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r0, r6, r0
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r7, #0x2c]
	adds r0, r5, #0
	bl func_0809D300
	movs r0, #4
	bl EnableBgSync
	movs r0, #0xb3
	lsls r0, r0, #1
	add r0, r9
	adds r1, r5, #0
	subs r1, #0x28
	ldr r2, [r7, #0x2c]
	movs r3, #0
	bl func_0809B74C
	bl func_0809EBF0
	adds r0, r7, #0
	bl func_080ACCE0
	movs r0, #0
	adds r1, r4, #0
	movs r2, #2
	bl func_080ACCF4
	movs r0, #0x78
	movs r1, #0x18
	movs r2, #0xe9
	movs r3, #0x18
	bl func_080ACD7C
	movs r0, #3
	bl func_080ACD60
	ldr r0, .L0809F0F0  @ func_0809ECFC
	adds r1, r7, #0
	bl StartParallelWorker
	ldr r0, [r7, #0x2c]
	bl GetUnitFid
	adds r1, r0, #0
	movs r3, #4
	negs r3, r3
	ldr r0, .L0809F0F4  @ 0x00000203
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl NewFace2
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	mov r8, r0
	movs r1, #0xe0
	lsls r1, r1, #4
	movs r3, #0xc0
	lsls r3, r3, #4
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp]
	str r7, [sp, #4]
	movs r0, #0xd
	movs r2, #0xf
	bl StartSmallBrownNameBoxes
	movs r1, #0x28
	negs r1, r1
	movs r2, #1
	negs r2, r2
	movs r0, #0
	movs r3, #1
	bl func_080ADBFC
	movs r0, #1
	movs r1, #0x98
	movs r2, #6
	movs r3, #2
	bl func_080ADBFC
	movs r0, #1
	movs r1, #0xe
	movs r2, #4
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0x30
	mov r1, r8
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	subs r5, #0x38
	str r4, [sp]
	mov r0, r8
	str r0, [sp, #4]
	adds r0, r5, #0
	ldr r1, .L0809F0F8  @ gBg0Tm
	movs r2, #0
	bl PutDrawText
	adds r0, r7, #0
	bl func_0809EC38
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809F0C0: .4byte gDispIo
.L0809F0C4: .4byte 0x06012000
.L0809F0C8: .4byte gUnknown_08A1B9EC
.L0809F0CC: .4byte gBuf
.L0809F0D0: .4byte gBg1Tm
.L0809F0D4: .4byte gUnknown_02013660
.L0809F0D8: .4byte gUnknown_02013698
.L0809F0DC: .4byte gBg0Tm+0xDE
.L0809F0E0: .4byte gUnknown_08A19CCC
.L0809F0E4: .4byte 0x06015000
.L0809F0E8: .4byte gUnknown_08A1A084
.L0809F0EC: .4byte gBg2Tm+0x1E
.L0809F0F0: .4byte func_0809ECFC
.L0809F0F4: .4byte 0x00000203
.L0809F0F8: .4byte gBg0Tm

	THUMB_FUNC_END func_0809ED8C

	THUMB_FUNC_START func_0809F0FC
func_0809F0FC: @ 0x0809F0FC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809F120  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809F124
	bl GM_GetBaseMenuProc
	cmp r0, #0
	beq .L0809F134
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r1, [r1]
	adds r0, #0x2a
	b .L0809F132
	.align 2, 0
.L0809F120: .4byte gGmData
.L0809F124:
	ldr r0, .L0809F14C  @ gUnknown_08A1829C
	bl FindProc
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r1, [r1]
	adds r0, #0x31
.L0809F132:
	strb r1, [r0]
.L0809F134:
	adds r0, r4, #0
	bl EndAllProcChildren
	movs r0, #0
	bl EndFaceById
	bl EndScreenMenuScrollingBg
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809F14C: .4byte gUnknown_08A1829C

	THUMB_FUNC_END func_0809F0FC

	THUMB_FUNC_START func_0809F150
func_0809F150: @ 0x0809F150
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl InitIcons
	ldr r0, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x33
	ldrb r1, [r5]
	movs r2, #3
	bl SomethingPrepListRelated
	adds r0, r4, #0
	bl func_0809F370
	ldr r0, .L0809F1F0  @ gUnknown_02013698
	ldr r1, .L0809F1F4  @ gBg2Tm+0x1E
	ldrb r2, [r5]
	lsls r2, r2, #1
	adds r6, r4, #0
	adds r6, #0x4a
	adds r2, r6, r2
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldr r3, [r4, #0x2c]
	bl func_0809D300
	ldr r0, .L0809F1F8  @ gBg0Tm+0x244
	ldr r1, [r4, #0x2c]
	bl func_0809B830
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r7, r4, #0
	adds r7, #0x38
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r6, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #5
	bl EnableBgSync
	ldr r0, .L0809F1FC  @ func_0809EC38
	movs r1, #2
	adds r2, r4, #0
	bl func_080ACE20
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq .L0809F210
	ldr r0, .L0809F200  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq .L0809F208
	ldr r2, .L0809F204  @ gUnknown_020122D4
	ldrb r3, [r5]
	lsls r3, r3, #1
	adds r0, r7, r3
	ldrh r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r2, [r0, #2]
	lsls r1, r1, #4
	adds r3, r6, r3
	ldrh r0, [r3]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl ShowItemHelpBox
	movs r0, #1
	b .L0809F20E
	.align 2, 0
.L0809F1F0: .4byte gUnknown_02013698
.L0809F1F4: .4byte gBg2Tm+0x1E
.L0809F1F8: .4byte gBg0Tm+0x244
.L0809F1FC: .4byte func_0809EC38
.L0809F200: .4byte gUnknown_02012F56
.L0809F204: .4byte gUnknown_020122D4
.L0809F208:
	bl MoveableHelpBox_OnEnd
	movs r0, #0xff
.L0809F20E:
	strh r0, [r4, #0x36]
.L0809F210:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809F150

	THUMB_FUNC_START func_0809F218
func_0809F218: @ 0x0809F218
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge .L0809F24A
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	adds r6, r0, #0
	subs r6, #0x60
.L0809F24A:
	adds r5, r7, #0
	adds r5, #0x33
	cmp r4, #4
	bne .L0809F266
	ldrb r0, [r5]
	cmp r0, #0
	bne .L0809F25C
	movs r0, #8
	b .L0809F25E
.L0809F25C:
	subs r0, #1
.L0809F25E:
	strb r0, [r5]
	adds r0, r7, #0
	bl func_0809F150
.L0809F266:
	adds r4, r7, #0
	adds r4, #0x32
	ldrb r1, [r4]
	cmp r1, r8
	blt .L0809F28A
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	adds r6, r0, #0
.L0809F28A:
	movs r0, #0xff
	ands r6, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl SetBgOffset
	ldrb r1, [r4]
	mov r2, r8
	lsls r0, r2, #1
	cmp r1, r0
	bne .L0809F2BA
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
.L0809F2BA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809F218

	THUMB_FUNC_START func_0809F2C4
func_0809F2C4: @ 0x0809F2C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #4
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r4, [r1]
	cmp r4, #4
	bge .L0809F2F6
	mov r2, r8
	subs r1, r2, r4
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	movs r1, #0x10
	bl __divsi3
	movs r1, #0x60
	subs r6, r1, r0
.L0809F2F6:
	adds r5, r7, #0
	adds r5, #0x33
	cmp r4, #4
	bne .L0809F312
	ldrb r0, [r5]
	cmp r0, #8
	bne .L0809F308
	movs r0, #0
	b .L0809F30A
.L0809F308:
	adds r0, #1
.L0809F30A:
	strb r0, [r5]
	adds r0, r7, #0
	bl func_0809F150
.L0809F312:
	adds r4, r7, #0
	adds r4, #0x32
	ldrb r1, [r4]
	cmp r1, r8
	blt .L0809F336
	mov r0, r8
	subs r1, r1, r0
	subs r1, r0, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #5
	muls r0, r1, r0
	mov r2, r8
	mov r1, r8
	muls r1, r2, r1
	bl __divsi3
	negs r6, r0
.L0809F336:
	movs r0, #0xff
	ands r6, r0
	ldrb r1, [r5]
	lsls r1, r1, #1
	adds r0, r7, #0
	adds r0, #0x4a
	adds r0, r0, r1
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r6, #0
	bl SetBgOffset
	ldrb r1, [r4]
	mov r2, r8
	lsls r0, r2, #1
	cmp r1, r0
	bne .L0809F366
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
.L0809F366:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809F2C4

	THUMB_FUNC_START func_0809F370
func_0809F370: @ 0x0809F370
	push {r4, r5, lr}
	mov ip, r0
	ldr r0, .L0809F398  @ gUnknown_02012F56
	ldrh r4, [r0]
	adds r5, r0, #0
	cmp r4, #0
	bne .L0809F39C
	mov r3, ip
	adds r3, #0x33
	ldrb r0, [r3]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x38
	adds r1, r1, r0
	mov r2, ip
	adds r2, #0x4a
	adds r0, r2, r0
	strh r4, [r0]
	strh r4, [r1]
	b .L0809F3BA
	.align 2, 0
.L0809F398: .4byte gUnknown_02012F56
.L0809F39C:
	mov r2, ip
	adds r2, #0x33
	ldrb r0, [r2]
	lsls r0, r0, #1
	mov r1, ip
	adds r1, #0x38
	adds r4, r1, r0
	ldrh r1, [r4]
	ldrh r0, [r5]
	subs r0, #1
	adds r3, r2, #0
	adds r2, #0x17
	cmp r1, r0
	ble .L0809F3BA
	strh r0, [r4]
.L0809F3BA:
	ldrh r0, [r5]
	cmp r0, #6
	bls .L0809F3D8
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r4, r2, r0
	ldrh r0, [r4]
	lsrs r0, r0, #4
	adds r0, #7
	ldrh r1, [r5]
	cmp r0, r1
	ble .L0809F3D8
	subs r0, r1, #7
	lsls r0, r0, #4
	strh r0, [r4]
.L0809F3D8:
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r0, r2, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809F370

	THUMB_FUNC_START func_0809F3F4
func_0809F3F4: @ 0x0809F3F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r7, r1, #0
	bl InitIcons
	ldr r0, .L0809F48C  @ gBg2Tm+0x1E
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x33
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r5, r4, #0
	adds r5, #0x4a
	adds r0, r5, r0
	ldrh r1, [r0]
	lsrs r1, r1, #4
	mov r0, r8
	bl func_0809D418
	ldr r0, .L0809F490  @ gBg0Tm+0x244
	ldr r1, [r4, #0x2c]
	bl func_0809B830
	movs r0, #5
	bl EnableBgSync
	cmp r7, #0
	bge .L0809F446
	ldr r0, .L0809F494  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	subs r2, #1
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl func_0809D47C
.L0809F446:
	cmp r7, #0
	ble .L0809F460
	ldr r0, .L0809F494  @ gUnknown_02013698
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r2, [r1]
	lsrs r2, r2, #4
	adds r2, #7
	ldr r3, [r4, #0x2c]
	mov r1, r8
	bl func_0809D47C
.L0809F460:
	ldrb r1, [r6]
	lsls r1, r1, #1
	adds r1, r5, r1
	ldrh r0, [r1]
	adds r0, r0, r7
	strh r0, [r1]
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809F48C: .4byte gBg2Tm+0x1E
.L0809F490: .4byte gBg0Tm+0x244
.L0809F494: .4byte gUnknown_02013698

	THUMB_FUNC_END func_0809F3F4

	THUMB_FUNC_START func_0809F498
func_0809F498: @ 0x0809F498
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x2c]
	bl GetUnitItemCount
	adds r2, r0, #0
	cmp r2, #5
	beq .L0809F4B6
	ldr r0, .L0809F4CC  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	bne .L0809F4D4
.L0809F4B6:
	ldr r0, .L0809F4D0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809F4C4
	b .L0809F5E2
.L0809F4C4:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809F5E2
	.align 2, 0
.L0809F4CC: .4byte gUnknown_02012F56
.L0809F4D0: .4byte gPlaySt
.L0809F4D4:
	movs r4, #0
	strh r4, [r6, #0x36]
	ldr r1, [r6, #0x2c]
	lsls r0, r2, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldr r0, .L0809F5B8  @ gUnknown_020122D4
	mov r9, r0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r5, r6, #0
	adds r5, #0x38
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, r9
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	bl UnitRemoveInvalidItems
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, r9
	strh r4, [r0, #2]
	bl func_080982B8
	ldr r0, [r6, #0x2c]
	ldrb r1, [r7]
	movs r2, #3
	bl SomethingPrepListRelated
	adds r0, r6, #0
	bl func_0809F370
	bl InitIcons
	ldr r0, .L0809F5BC  @ gBg0Tm+0x244
	ldr r4, .L0809F5C0  @ gUnknown_02013670
	ldr r2, [r6, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	adds r4, #0x28
	ldr r1, .L0809F5C4  @ gBg2Tm+0x1E
	ldrb r0, [r7]
	lsls r0, r0, #1
	movs r2, #0x4a
	adds r2, r2, r6
	mov r8, r2
	add r0, r8
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl func_0809D300
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsls r0, r0, #2
	add r0, r9
	ldrb r0, [r0]
	cmp r0, #0
	beq .L0809F56E
	ldr r0, .L0809F5C8  @ func_0809EC38
	movs r1, #1
	adds r2, r6, #0
	bl func_080ACE20
.L0809F56E:
	ldrb r0, [r7]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #5
	bl EnableBgSync
	ldr r0, [r6, #0x2c]
	bl GetUnitItemCount
	cmp r0, #5
	bne .L0809F5D0
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L0809F5CC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809F5E2
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809F5E2
	.align 2, 0
.L0809F5B8: .4byte gUnknown_020122D4
.L0809F5BC: .4byte gBg0Tm+0x244
.L0809F5C0: .4byte gUnknown_02013670
.L0809F5C4: .4byte gBg2Tm+0x1E
.L0809F5C8: .4byte func_0809EC38
.L0809F5CC: .4byte gPlaySt
.L0809F5D0:
	ldr r0, .L0809F5F0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809F5E2
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809F5E2:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809F5F0: .4byte gPlaySt

	THUMB_FUNC_END func_0809F498

	THUMB_FUNC_START func_0809F5F4
func_0809F5F4: @ 0x0809F5F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #5
	adds r4, r0, r1
	ldrh r3, [r4]
	lsls r2, r3, #4
	adds r0, #0x12
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	cmp r2, #0x37
	bgt .L0809F620
	cmp r3, #0
	beq .L0809F620
	adds r0, r3, #1
	strh r0, [r4]
.L0809F620:
	mov r4, ip
	adds r4, #0x33
	ldrb r0, [r4]
	lsls r0, r0, #1
	mov r3, ip
	adds r3, #0x38
	adds r6, r3, r0
	ldrh r5, [r6]
	lsls r1, r5, #4
	mov r2, ip
	adds r2, #0x4a
	adds r0, r2, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	adds r7, r3, #0
	mov r8, r2
	cmp r1, #0x78
	ble .L0809F654
	ldr r0, .L0809F684  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r5, r0
	beq .L0809F654
	subs r0, r5, #1
	strh r0, [r6]
.L0809F654:
	mov r0, ip
	bl func_0809F370
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, r7, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	add r0, r8
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809F684: .4byte gUnknown_02012F56

	THUMB_FUNC_END func_0809F5F4

	THUMB_FUNC_START func_0809F688
func_0809F688: @ 0x0809F688
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x33
	ldrb r0, [r6]
	lsls r0, r0, #1
	movs r1, #0x38
	adds r1, r1, r4
	mov r8, r1
	adds r1, r1, r0
	ldrh r1, [r1]
	mov r9, r1
	adds r5, r4, #0
	adds r5, #0x4a
	adds r7, r5, r0
	ldrh r0, [r7]
	movs r2, #0xf
	mov sl, r2
	mov r1, sl
	ands r1, r0
	mov sl, r1
	cmp r1, #0
	beq .L0809F6C0
	b .L0809F908
.L0809F6C0:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq .L0809F6CC
	cmp r0, #0xff
	beq .L0809F6CC
	b .L0809F7C0
.L0809F6CC:
	ldr r1, .L0809F708  @ gKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	mov r8, r1
	cmp r0, #0
	beq .L0809F714
	ldr r0, .L0809F70C  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	beq .L0809F724
	ldr r1, .L0809F710  @ gUnknown_020122D4
	mov r2, r9
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	mov r0, r9
	lsls r1, r0, #4
	ldrh r0, [r7]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	bl ShowItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x36]
	b .L0809FA7A
	.align 2, 0
.L0809F708: .4byte gKeySt
.L0809F70C: .4byte gUnknown_02012F56
.L0809F710: .4byte gUnknown_020122D4
.L0809F714:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq .L0809F794
	ldr r0, .L0809F73C  @ gUnknown_02012F56
	ldrh r0, [r0]
	cmp r0, #0
	bne .L0809F744
.L0809F724:
	ldr r0, .L0809F740  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809F732
	b .L0809FA7A
.L0809F732:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L0809FA7A
	.align 2, 0
.L0809F73C: .4byte gUnknown_02012F56
.L0809F740: .4byte gPlaySt
.L0809F744:
	ldr r0, .L0809F76C  @ gUnknown_020122D4
	mov r2, r9
	lsls r1, r2, #2
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #0
	bne .L0809F770
	lsls r2, r2, #4
	ldrh r0, [r7]
	subs r0, #0x28
	subs r2, r2, r0
	movs r0, #0
	movs r1, #0x80
	movs r3, #2
	bl func_080AC9D4
	adds r0, r4, #0
	movs r1, #7
	b .L0809F774
	.align 2, 0
.L0809F76C: .4byte gUnknown_020122D4
.L0809F770:
	adds r0, r4, #0
	movs r1, #6
.L0809F774:
	bl Proc_Goto
	ldr r0, .L0809F790  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L0809F786
	b .L0809FA7A
.L0809F786:
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L0809FA7A
	.align 2, 0
.L0809F790: .4byte gPlaySt
.L0809F794:
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L0809F7E0
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
	ldr r0, .L0809F7BC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809F7B6
	movs r0, #0x6b
	bl m4aSongNumStart
.L0809F7B6:
	mov r0, sl
	strh r0, [r4, #0x36]
	b .L0809FA7A
	.align 2, 0
.L0809F7BC: .4byte gPlaySt
.L0809F7C0:
	ldr r2, .L0809F7DC  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq .L0809F7E0
	bl MoveableHelpBox_OnEnd
	mov r1, sl
	strh r1, [r4, #0x36]
	b .L0809FA7A
	.align 2, 0
.L0809F7DC: .4byte gKeySt
.L0809F7E0:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L0809F828
	movs r0, #0
	bl func_080ACDA4
	ldr r0, .L0809F824  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809F80A
	movs r0, #0x67
	bl m4aSongNumStart
.L0809F80A:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	adds r1, r4, #0
	adds r1, #0x32
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	bl func_0809F218
	b .L0809FA7A
	.align 2, 0
.L0809F824: .4byte gPlaySt
.L0809F828:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L0809F864
	movs r0, #1
	bl func_080ACDA4
	ldr r0, .L0809F860  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809F848
	movs r0, #0x67
	bl m4aSongNumStart
.L0809F848:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	adds r0, r4, #0
	adds r0, #0x32
	strb r5, [r0]
	adds r0, r4, #0
	bl func_0809F2C4
	b .L0809FA7A
	.align 2, 0
.L0809F860: .4byte gPlaySt
.L0809F864:
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809F878
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #8
	b .L0809F87E
.L0809F878:
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #4
.L0809F87E:
	strb r0, [r1]
	adds r7, r1, #0
	mov r1, r8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne .L0809F8AC
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	adds r6, r4, #0
	adds r6, #0x33
	adds r5, r4, #0
	adds r5, #0x38
	cmp r0, #0
	beq .L0809F8C8
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne .L0809F8C8
.L0809F8AC:
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r2, r4, #0
	adds r2, #0x38
	adds r3, r2, r1
	ldrh r1, [r3]
	adds r6, r0, #0
	adds r5, r2, #0
	cmp r1, #0
	beq .L0809F8C8
	subs r0, r1, #1
	strh r0, [r3]
.L0809F8C8:
	mov r0, r8
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r3, #0x80
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne .L0809F8EA
	ldrh r1, [r2, #4]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809F966
	movs r0, #0
	ldrsb r0, [r7, r0]
	cmp r0, #8
	bne .L0809F966
.L0809F8EA:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r2, r5, r0
	ldrh r1, [r2]
	ldr r0, .L0809F904  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L0809F966
	adds r0, r1, #1
	strh r0, [r2]
	b .L0809F966
	.align 2, 0
.L0809F904: .4byte gUnknown_02012F56
.L0809F908:
	mov r1, r9
	lsls r0, r1, #4
	ldrh r2, [r7]
	adds r1, r2, #0
	subs r1, #0x28
	subs r0, r0, r1
	cmp r0, #0x37
	bgt .L0809F926
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	strh r0, [r7]
.L0809F926:
	ldrb r0, [r6]
	lsls r0, r0, #1
	mov r2, r8
	adds r1, r2, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r3, r5, r0
	ldrh r2, [r3]
	adds r0, r2, #0
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble .L0809F94E
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, r2, r0
	strh r0, [r3]
.L0809F94E:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	mov r5, r8
.L0809F966:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	cmp r9, r0
	bne .L0809F974
	b .L0809FA7A
.L0809F974:
	ldr r7, .L0809F9F0  @ gUnknown_020122D4
	lsls r0, r0, #2
	adds r0, r0, r7
	ldrh r0, [r0, #2]
	mov r8, r0
	ldr r0, .L0809F9F4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809F990
	movs r0, #0x66
	bl m4aSongNumStart
.L0809F990:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r1, [r0]
	lsls r1, r1, #2
	adds r1, r1, r7
	mov r2, r9
	lsls r0, r2, #2
	adds r0, r0, r7
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	beq .L0809F9B0
	adds r0, r4, #0
	bl func_0809EC38
.L0809F9B0:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r3, [r1]
	lsls r2, r3, #4
	adds r1, r4, #0
	adds r1, #0x4a
	adds r0, r1, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r2, r2, r0
	adds r7, r1, #0
	cmp r2, #0x37
	bgt .L0809F9F8
	cmp r3, #0
	beq .L0809F9F8
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq .L0809F9E2
	adds r1, r2, #0
	adds r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl ShowItemHelpBox
.L0809F9E2:
	adds r0, r4, #0
	adds r0, #0x31
	movs r1, #0
	ldrsb r1, [r0, r1]
	negs r1, r1
	b .L0809FA30
	.align 2, 0
.L0809F9F0: .4byte gUnknown_020122D4
.L0809F9F4: .4byte gPlaySt
.L0809F9F8:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r2, [r1]
	lsls r1, r2, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	cmp r1, #0x78
	ble .L0809FA3C
	ldr r0, .L0809FA38  @ gUnknown_02012F56
	ldrh r0, [r0]
	subs r0, #1
	cmp r2, r0
	beq .L0809FA3C
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq .L0809FA28
	subs r1, #0x10
	movs r0, #0x80
	mov r2, r8
	bl ShowItemHelpBox
.L0809FA28:
	adds r0, r4, #0
	adds r0, #0x31
	movs r1, #0
	ldrsb r1, [r0, r1]
.L0809FA30:
	adds r0, r4, #0
	bl func_0809F3F4
	b .L0809FA7A
	.align 2, 0
.L0809FA38: .4byte gUnknown_02012F56
.L0809FA3C:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq .L0809FA5C
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r0, #0x80
	mov r2, r8
	bl ShowItemHelpBox
.L0809FA5C:
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, r5, r0
	ldrh r1, [r1]
	lsls r1, r1, #4
	adds r0, r7, r0
	ldrh r0, [r0]
	subs r0, #0x28
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x80
	movs r2, #0xb
	bl func_080AD51C
.L0809FA7A:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809F688

	THUMB_FUNC_START func_0809FA88
func_0809FA88: @ 0x0809FA88
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov ip, r0
	adds r5, r1, #0
	cmp r5, #5
	bne .L0809FAA6
	movs r5, #4
	b .L0809FAAE
.L0809FAA6:
	ldrh r0, [r4, #0x36]
	cmp r0, #0
	beq .L0809FAAE
	subs r5, #1
.L0809FAAE:
	cmp r1, #0
	beq .L0809FB2C
	ldr r2, .L0809FAD4  @ gKeySt
	ldr r6, [r2]
	ldrh r1, [r6, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	adds r3, r4, #0
	adds r3, #0x30
	cmp r0, #0
	beq .L0809FAE4
	ldrb r0, [r3]
	cmp r0, #0
	beq .L0809FAD8
	subs r0, #1
	strb r0, [r3]
	b .L0809FAE4
	.align 2, 0
.L0809FAD4: .4byte gKeySt
.L0809FAD8:
	ldrh r1, [r6, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809FAE4
	strb r5, [r3]
.L0809FAE4:
	ldr r2, [r2]
	ldrh r1, [r2, #6]
	movs r4, #0x80
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809FB0A
	ldrb r0, [r3]
	cmp r0, r5
	bge .L0809FAFC
	adds r0, #1
	b .L0809FB08
.L0809FAFC:
	ldrh r1, [r2, #8]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L0809FB0A
	movs r0, #0
.L0809FB08:
	strb r0, [r3]
.L0809FB0A:
	ldrb r3, [r3]
	cmp ip, r3
	beq .L0809FB2C
	ldr r0, .L0809FB28  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809FB22
	movs r0, #0x66
	bl m4aSongNumStart
.L0809FB22:
	movs r0, #1
	b .L0809FB2E
	.align 2, 0
.L0809FB28: .4byte gPlaySt
.L0809FB2C:
	movs r0, #0
.L0809FB2E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_0809FA88

	THUMB_FUNC_START func_0809FB34
func_0809FB34: @ 0x0809FB34
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r0, #0
	cmp r1, #5
	bne .L0809FB50
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #4
	strb r0, [r1]
	adds r0, r1, #0
	b .L0809FB56
.L0809FB50:
	adds r0, r4, #0
	adds r0, #0x30
	strb r1, [r0]
.L0809FB56:
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809FB34

	THUMB_FUNC_START func_0809FB70
func_0809FB70: @ 0x0809FB70
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	ldrb r1, [r7]
	lsls r1, r1, #1
	adds r0, #0x38
	adds r0, r0, r1
	ldrh r4, [r0]
	ldr r1, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	ldr r0, .L0809FC0C  @ gUnknown_020122D4
	lsls r4, r4, #2
	adds r4, r4, r0
	ldrh r0, [r4, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	bl UnitRemoveInvalidItems
	strh r5, [r4, #2]
	bl func_080982B8
	cmp r5, #0
	bne .L0809FBB6
	ldr r0, [r6, #0x2c]
	ldrb r1, [r7]
	movs r2, #3
	bl SomethingPrepListRelated
.L0809FBB6:
	adds r0, r6, #0
	bl func_0809F370
	ldr r0, .L0809FC10  @ gBg0Tm+0x244
	ldr r4, .L0809FC14  @ gUnknown_02013670
	ldr r2, [r6, #0x2c]
	adds r1, r4, #0
	movs r3, #0
	bl func_0809B74C
	adds r4, #0x28
	ldr r1, .L0809FC18  @ gBg2Tm+0x1E
	ldrb r2, [r7]
	lsls r2, r2, #1
	adds r0, r6, #0
	adds r0, #0x4a
	adds r0, r0, r2
	ldrh r2, [r0]
	lsrs r2, r2, #4
	ldr r3, [r6, #0x2c]
	adds r0, r4, #0
	bl func_0809D300
	ldr r0, .L0809FC1C  @ func_0809EC38
	movs r1, #1
	adds r2, r6, #0
	bl func_080ACE20
	movs r0, #4
	bl EnableBgSync
	ldr r0, .L0809FC20  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809FC06
	movs r0, #0x6a
	bl m4aSongNumStart
.L0809FC06:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FC0C: .4byte gUnknown_020122D4
.L0809FC10: .4byte gBg0Tm+0x244
.L0809FC14: .4byte gUnknown_02013670
.L0809FC18: .4byte gBg2Tm+0x1E
.L0809FC1C: .4byte func_0809EC38
.L0809FC20: .4byte gPlaySt

	THUMB_FUNC_END func_0809FB70

	THUMB_FUNC_START func_0809FC24
func_0809FC24: @ 0x0809FC24
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x36]
	cmp r0, #1
	bne .L0809FC4C
	ldr r0, .L0809FC48  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809FD0C
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strh r0, [r5, #0x36]
	b .L0809FD4E
	.align 2, 0
.L0809FC48: .4byte gKeySt
.L0809FC4C:
	ldr r0, .L0809FC80  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809FC84
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L0809FD4E
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
	movs r0, #1
	strh r0, [r5, #0x36]
	b .L0809FD4E
	.align 2, 0
.L0809FC80: .4byte gKeySt
.L0809FC84:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L0809FCE0
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x30
	ldrb r1, [r1]
	ldr r4, .L0809FCC4  @ gUnknown_020122D4
	adds r2, r5, #0
	adds r2, #0x33
	ldrb r3, [r2]
	lsls r3, r3, #1
	adds r2, #5
	adds r2, r2, r3
	ldrh r2, [r2]
	lsls r2, r2, #2
	adds r2, r2, r4
	ldrh r2, [r2, #2]
	bl func_08097F44
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L0809FCCC
	movs r1, #1
	negs r1, r1
	ldr r2, .L0809FCC8  @ 0x0000088B
	adds r0, r1, #0
	adds r3, r5, #0
	bl func_08097DA8
	b .L0809FD4E
	.align 2, 0
.L0809FCC4: .4byte gUnknown_020122D4
.L0809FCC8: .4byte 0x0000088B
.L0809FCCC:
	movs r0, #0
	bl func_080ACA84
	adds r0, r5, #0
	bl Proc_Break
	adds r0, r5, #0
	bl func_0809FB70
	b .L0809FD4E
.L0809FCE0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L0809FD0C
	movs r0, #0
	bl func_080ACA84
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, .L0809FD08  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L0809FD4E
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L0809FD4E
	.align 2, 0
.L0809FD08: .4byte gPlaySt
.L0809FD0C:
	adds r0, r5, #0
	bl func_0809FA88
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L0809FD4E
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r1, [r4]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	ldrh r0, [r5, #0x36]
	cmp r0, #1
	bne .L0809FD4E
	ldr r0, [r5, #0x2c]
	ldrb r3, [r4]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L0809FD4E
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
.L0809FD4E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_0809FC24

	THUMB_FUNC_START func_0809FD54
func_0809FD54: @ 0x0809FD54
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x33
	ldrb r1, [r0]
	lsls r1, r1, #1
	adds r0, #5
	adds r0, r0, r1
	ldrh r4, [r0]
	lsls r4, r4, #2
	ldr r0, .L0809FD84  @ gUnknown_020122D4
	adds r4, r4, r0
	ldr r6, [r5, #0x2c]
	ldrb r0, [r4]
	bl GetUnitByPid
	adds r1, r0, #0
	ldrb r2, [r4, #1]
	adds r0, r6, #0
	adds r3, r5, #0
	bl func_0809BE60
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FD84: .4byte gUnknown_020122D4

	THUMB_FUNC_END func_0809FD54

	THUMB_FUNC_START func_0809FD88
func_0809FD88: @ 0x0809FD88
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L0809FD9C  @ gUnknown_08A19424
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FD9C: .4byte gUnknown_08A19424

	THUMB_FUNC_END func_0809FD88

	THUMB_FUNC_START func_0809FDA0
func_0809FDA0: @ 0x0809FDA0
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, .L0809FDCC  @ 0x0000DF80
	movs r5, #0x30
	movs r4, #3
.L0809FDAA:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x10
	ldr r3, .L0809FDD0  @ Sprite_32x16
	bl PutSpriteExt
	adds r6, #4
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L0809FDAA
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FDCC: .4byte 0x0000DF80
.L0809FDD0: .4byte Sprite_32x16

	THUMB_FUNC_END func_0809FDA0

	THUMB_FUNC_START func_0809FDD4
func_0809FDD4: @ 0x0809FDD4
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L0809FE10  @ func_0809FDA0
	bl StartParallelWorker
	ldr r0, .L0809FE14  @ gUnknown_08A1951C
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	ldr r1, .L0809FE18  @ gUnknown_08A19524
	ldr r1, [r1]
	bl GetMsgTo
	adds r2, r0, #0
	movs r0, #0xe0
	lsls r0, r0, #7
	movs r1, #1
	str r1, [sp]
	str r1, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0xd
	movs r3, #1
	bl func_080ADD24
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FE10: .4byte func_0809FDA0
.L0809FE14: .4byte gUnknown_08A1951C
.L0809FE18: .4byte gUnknown_08A19524

	THUMB_FUNC_END func_0809FDD4

	THUMB_FUNC_START func_0809FE1C
func_0809FE1C: @ 0x0809FE1C
	push {lr}
	ldr r0, .L0809FE4C  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls .L0809FE2E
	movs r2, #0
.L0809FE2E:
	cmp r2, #0xc
	bne .L0809FE38
	ldr r1, .L0809FE50  @ 0x04000050
	movs r0, #0xc8
	strh r0, [r1]
.L0809FE38:
	cmp r2, #0x34
	beq .L0809FE40
	cmp r2, #0
	bne .L0809FE48
.L0809FE40:
	ldr r1, .L0809FE50  @ 0x04000050
	ldr r2, .L0809FE54  @ 0x00000242
	adds r0, r2, #0
	strh r0, [r1]
.L0809FE48:
	pop {r0}
	bx r0
	.align 2, 0
.L0809FE4C: .4byte 0x04000006
.L0809FE50: .4byte 0x04000050
.L0809FE54: .4byte 0x00000242

	THUMB_FUNC_END func_0809FE1C

	THUMB_FUNC_START func_0809FE58
func_0809FE58: @ 0x0809FE58
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x34]
	movs r1, #0xff
	strh r1, [r0, #0x32]
	adds r0, #0x30
	strb r2, [r0]
	bx lr

	THUMB_FUNC_END func_0809FE58

	THUMB_FUNC_START func_0809FE68
func_0809FE68: @ 0x0809FE68
	push {r4, r5, lr}
	ldr r4, .L0809FEE4  @ gUnknown_02013648
	ldr r1, .L0809FEE8  @ 0x06011000
	adds r0, r4, #0
	movs r2, #0xb
	bl InitSpriteTextFont
	ldr r0, .L0809FEEC  @ Pal_SystemText
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r5, r4, #0
	adds r5, #0x90
	adds r0, r5, #0
	bl InitSpriteText
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r5, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	ldr r0, .L0809FEF0  @ 0x0000059C
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, .L0809FEF4  @ 0x0000059B
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x40
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, .L0809FEF8  @ 0x0000059D
	bl GetMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x80
	movs r2, #3
	bl Text_InsertDrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FEE4: .4byte gUnknown_02013648
.L0809FEE8: .4byte 0x06011000
.L0809FEEC: .4byte Pal_SystemText
.L0809FEF0: .4byte 0x0000059C
.L0809FEF4: .4byte 0x0000059B
.L0809FEF8: .4byte 0x0000059D

	THUMB_FUNC_END func_0809FE68

	THUMB_FUNC_START func_0809FEFC
func_0809FEFC: @ 0x0809FEFC
	push {r4, lr}
	sub sp, #4
	ldr r0, .L0809FF5C  @ 0x00008840
	str r0, [sp]
	movs r0, #0xa0
	movs r1, #0x5b
	movs r2, #8
	movs r3, #4
	bl func_0809A31C
	ldr r4, .L0809FF60  @ Sprite_32x16
	ldr r0, .L0809FF64  @ 0x0000B088
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb0
	movs r2, #0x5e
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L0809FF68  @ 0x0000B08C
	str r0, [sp]
	movs r0, #4
	movs r1, #0xd0
	movs r2, #0x5e
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L0809FF6C  @ 0x0000B080
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa8
	movs r2, #0x6e
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L0809FF70  @ 0x0000B084
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc8
	movs r2, #0x6e
	adds r3, r4, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L0809FF5C: .4byte 0x00008840
.L0809FF60: .4byte Sprite_32x16
.L0809FF64: .4byte 0x0000B088
.L0809FF68: .4byte 0x0000B08C
.L0809FF6C: .4byte 0x0000B080
.L0809FF70: .4byte 0x0000B084

	THUMB_FUNC_END func_0809FEFC

	THUMB_FUNC_START func_0809FF74
func_0809FF74: @ 0x0809FF74
	push {lr}
	sub sp, #4
	ldr r3, .L0809FFA0  @ Sprite_32x16
	ldr r0, .L0809FFA4  @ 0x0000B090
	str r0, [sp]
	movs r0, #4
	movs r1, #0x88
	movs r2, #0x48
	bl PutSpriteExt
	ldr r3, .L0809FFA8  @ Sprite_8x16
	ldr r0, .L0809FFAC  @ 0x0000B094
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa8
	movs r2, #0x48
	bl PutSpriteExt
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L0809FFA0: .4byte Sprite_32x16
.L0809FFA4: .4byte 0x0000B090
.L0809FFA8: .4byte Sprite_8x16
.L0809FFAC: .4byte 0x0000B094

	THUMB_FUNC_END func_0809FF74

	THUMB_FUNC_START func_0809FFB0
func_0809FFB0: @ 0x0809FFB0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, .L080A0008  @ gBg0Tm+0x268
	adds r0, r6, #0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	cmp r4, #0
	beq .L080A0022
	adds r0, r4, #0
	bl func_080B5268
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L0809FFE2
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L080A000C
.L0809FFE2:
	adds r0, r6, #0
	adds r0, #0xa
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	adds r0, r6, #0
	adds r0, #0xe
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	b .L080A0018
	.align 2, 0
.L080A0008: .4byte gBg0Tm+0x268
.L080A000C:
	adds r0, r6, #0
	adds r0, #0xc
	movs r1, #2
	adds r2, r5, #0
	bl PutNumber
.L080A0018:
	ldr r0, .L080A0030  @ gBg0Tm+0x276
	movs r1, #3
	movs r2, #0x1e
	bl PutSpecialChar
.L080A0022:
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0030: .4byte gBg0Tm+0x276

	THUMB_FUNC_END func_0809FFB0

	THUMB_FUNC_START func_080A0034
func_080A0034: @ 0x080A0034
	push {r4, r5, lr}
	ldr r4, .L080A0074  @ gBg0Tm+0x1E8
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xa3
	lsls r0, r0, #2
	adds r5, r4, r0
	bl GetGold
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl PutNumber
	ldr r0, .L080A0078  @ 0x0000028E
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl PutSpecialChar
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0074: .4byte gBg0Tm+0x1E8
.L080A0078: .4byte 0x0000028E

	THUMB_FUNC_END func_080A0034

	THUMB_FUNC_START func_080A007C
func_080A007C: @ 0x080A007C
	push {r4, lr}
	sub sp, #8
	movs r0, #0
	bl SetTextFont
	ldr r4, .L080A00D4  @ gBg0Tm+0x68
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0xb3
	lsls r0, r0, #3
	bl GetMsg
	ldr r3, .L080A00D8  @ gUnknown_02013660
	adds r1, r4, #0
	adds r1, #0xda
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r3, #0
	movs r3, #2
	bl PutDrawText
	subs r4, #0x26
	movs r2, #0x9c
	lsls r2, r2, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xab
	adds r1, r4, #0
	movs r3, #2
	bl PutFaceChibi
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A00D4: .4byte gBg0Tm+0x68
.L080A00D8: .4byte gUnknown_02013660

	THUMB_FUNC_END func_080A007C

	THUMB_FUNC_START func_080A00DC
func_080A00DC: @ 0x080A00DC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, .L080A0300  @ gDispIo
	ldrb r1, [r5]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r5]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r2, [r5, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r5, #0xc]
	ldrb r2, [r5, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	mov r9, r2
	mov r2, r9
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	strb r1, [r5, #0x14]
	ldrb r0, [r5, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r5, #0x18]
	bl InitFaces
	bl ResetText
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080A0304  @ 0x06014000
	movs r1, #1
	negs r1, r1
	bl LoadHelpBoxGfx
	movs r0, #4
	bl ApplyIconPalettes
	bl RestartScreenMenuScrollingBg
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	movs r0, #0x80
	lsls r0, r0, #4
	movs r1, #8
	bl func_08098C8C
	ldr r0, .L080A0308  @ gUnknown_08A1BBD0
	ldr r4, .L080A030C  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080A0310  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #7
	bl EnableBgSync
	ldr r0, [r7, #0x2c]
	bl GetUnitFid
	adds r1, r0, #0
	ldr r0, .L080A0314  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r2, #0x44
	movs r3, #0x48
	bl NewFace2
	adds r0, r7, #0
	bl func_080AC9C0
	adds r0, r7, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	ldrb r0, [r5, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r5
	mov r8, r0
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	mov r0, r9
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	adds r5, #0x36
	ldrb r0, [r5]
	orrs r0, r2
	mov r2, r9
	orrs r0, r2
	movs r2, #5
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r2, r8
	strb r1, [r2]
	orrs r0, r6
	strb r0, [r5]
	movs r0, #0
	movs r1, #8
	movs r2, #8
	movs r3, #8
	bl SetBlendConfig
	adds r0, r7, #0
	bl StartGreenText
	movs r0, #0x78
	movs r1, #0x8c
	movs r2, #2
	adds r3, r7, #0
	bl ShowRIsInfo
	movs r0, #0xa5
	movs r1, #0x80
	movs r2, #0xa
	adds r3, r7, #0
	bl func_080984A8
	movs r0, #0xa5
	movs r1, #0x80
	bl func_080984CC
	ldr r4, .L080A0318  @ gUnknown_02013660
	adds r0, r4, #0
	movs r1, #4
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #2
	bl InitText
	bl func_0809FE68
	adds r4, #0x10
	movs r5, #4
.L080A029E:
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L080A029E
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, .L080A031C  @ func_0809FE1C
	bl SetOnHBlankA
	movs r0, #4
	bl EnableBgSync
	ldr r0, .L080A0320  @ gBg0Tm+0x244
	ldr r1, .L080A0324  @ gUnknown_02013670
	ldr r2, [r7, #0x2c]
	movs r3, #0
	bl func_0809B74C
	bl func_080A007C
	ldr r0, .L080A0328  @ func_0809FF74
	adds r1, r7, #0
	bl StartParallelWorker
	ldr r1, [r7, #0x2c]
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_0809FFB0
	bl func_080A0034
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0300: .4byte gDispIo
.L080A0304: .4byte 0x06014000
.L080A0308: .4byte gUnknown_08A1BBD0
.L080A030C: .4byte gBuf
.L080A0310: .4byte gBg1Tm
.L080A0314: .4byte 0x00000503
.L080A0318: .4byte gUnknown_02013660
.L080A031C: .4byte func_0809FE1C
.L080A0320: .4byte gBg0Tm+0x244
.L080A0324: .4byte gUnknown_02013670
.L080A0328: .4byte func_0809FF74

	THUMB_FUNC_END func_080A00DC

	THUMB_FUNC_START func_080A032C
func_080A032C: @ 0x080A032C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, .L080A035C  @ gKeySt
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L080A0372
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r3, r0, #0
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0
	beq .L080A0360
	subs r0, #1
	strb r0, [r2]
	b .L080A03A2
	.align 2, 0
.L080A035C: .4byte gKeySt
.L080A0360:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A03BC
	subs r0, r3, #1
	strb r0, [r2]
	b .L080A03A2
.L080A0372:
	movs r7, #0x80
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A03BC
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	subs r0, #1
	cmp r1, r0
	bge .L080A0394
	adds r0, r1, #1
	strb r0, [r2]
	b .L080A03A2
.L080A0394:
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A03BC
	strb r5, [r2]
.L080A03A2:
	ldr r0, .L080A03B8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A03B4
	movs r0, #0x66
	bl m4aSongNumStart
.L080A03B4:
	movs r0, #1
	b .L080A03BE
	.align 2, 0
.L080A03B8: .4byte gPlaySt
.L080A03BC:
	movs r0, #0
.L080A03BE:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A032C

	THUMB_FUNC_START func_080A03C4
func_080A03C4: @ 0x080A03C4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, .L080A0418  @ gBg0Tm+0x244
	ldr r1, .L080A041C  @ gUnknown_02013670
	ldr r2, [r4, #0x2c]
	movs r3, #0
	bl func_0809B74C
	ldr r1, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_0809FFB0
	movs r0, #0
	bl func_080ACA84
	ldr r0, .L080A0420  @ func_0809FEFC
	bl GetParallelWorker
	bl Proc_End
	ldrb r1, [r5]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	movs r0, #0
	adds r1, r4, #0
	bl func_0809FDD4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0418: .4byte gBg0Tm+0x244
.L080A041C: .4byte gUnknown_02013670
.L080A0420: .4byte func_0809FEFC

	THUMB_FUNC_END func_080A03C4

	THUMB_FUNC_START func_080A0424
func_080A0424: @ 0x080A0424
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x34]
	cmp r0, #1
	bne .L080A044C
	ldr r0, .L080A0448  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A0518
	bl MoveableHelpBox_OnEnd
	movs r0, #0
	strh r0, [r4, #0x34]
	b .L080A056A
	.align 2, 0
.L080A0448: .4byte gKeySt
.L080A044C:
	ldr r0, .L080A0484  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A0488
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	bne .L080A0472
	b .L080A056A
.L080A0472:
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
	movs r0, #1
	strh r0, [r4, #0x34]
	b .L080A056A
	.align 2, 0
.L080A0484: .4byte gKeySt
.L080A0488:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A04F0
	ldr r1, [r4, #0x2c]
	adds r6, r4, #0
	adds r6, #0x30
	ldrb r0, [r6]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r5, [r1]
	adds r0, r5, #0
	bl func_080B5268
	lsls r0, r0, #0x10
	cmp r0, #0
	beq .L080A04BA
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq .L080A04CE
.L080A04BA:
	ldrb r1, [r6]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r2, #0x85
	lsls r2, r2, #4
	movs r0, #0x10
	adds r3, r4, #0
	bl func_08097DA8
	b .L080A056A
.L080A04CE:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, .L080A04EC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A056A
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L080A056A
	.align 2, 0
.L080A04EC: .4byte gPlaySt
.L080A04F0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A0518
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, .L080A0514  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A056A
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080A056A
	.align 2, 0
.L080A0514: .4byte gPlaySt
.L080A0518:
	adds r0, r4, #0
	bl func_080A032C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A056A
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	lsls r1, r1, #4
	adds r1, #0x48
	movs r3, #0x80
	lsls r3, r3, #3
	movs r0, #0x10
	movs r2, #0xb
	bl func_080AD51C
	ldr r1, [r4, #0x2c]
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_0809FFB0
	ldrh r0, [r4, #0x34]
	cmp r0, #1
	bne .L080A056A
	ldr r0, [r4, #0x2c]
	ldrb r3, [r5]
	lsls r1, r3, #1
	adds r0, #0x1e
	adds r0, r0, r1
	ldrh r2, [r0]
	cmp r2, #0
	beq .L080A056A
	lsls r1, r3, #4
	adds r1, #0x48
	movs r0, #0x10
	bl ShowItemHelpBox
.L080A056A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A0424

	THUMB_FUNC_START func_080A0570
func_080A0570: @ 0x080A0570
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x31
	movs r0, #1
	strb r0, [r5]
	ldr r0, .L080A05B8  @ func_0809FEFC
	adds r1, r4, #0
	bl StartParallelWorker
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r2, [r0]
	lsls r2, r2, #4
	adds r2, #0x48
	movs r0, #0
	movs r1, #0x10
	movs r3, #2
	bl func_080AC9D4
	ldrb r0, [r5]
	lsls r0, r0, #5
	adds r0, #0xa4
	movs r3, #0x80
	lsls r3, r3, #3
	movs r1, #0x6f
	movs r2, #0
	bl func_080AD51C
	movs r0, #1
	adds r1, r4, #0
	bl func_0809FDD4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A05B8: .4byte func_0809FEFC

	THUMB_FUNC_END func_080A0570

	THUMB_FUNC_START func_080A05BC
func_080A05BC: @ 0x080A05BC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_080B5268
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl AddGold
	ldr r1, [r4, #0x2c]
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r4, #0x2c]
	bl UnitRemoveInvalidItems
	ldr r0, .L080A0628  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A0602
	movs r0, #0xb9
	bl m4aSongNumStart
.L080A0602:
	bl func_080A0034
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne .L080A0634
	ldr r0, .L080A062C  @ gBg0Tm+0x244
	ldr r1, .L080A0630  @ gUnknown_02013670
	ldr r2, [r4, #0x2c]
	movs r3, #0
	bl func_0809B74C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b .L080A0646
	.align 2, 0
.L080A0628: .4byte gPlaySt
.L080A062C: .4byte gBg0Tm+0x244
.L080A0630: .4byte gUnknown_02013670
.L080A0634:
	ldrb r1, [r5]
	cmp r0, r1
	bne .L080A063E
	subs r0, #1
	strb r0, [r5]
.L080A063E:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
.L080A0646:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A05BC

	THUMB_FUNC_START func_080A064C
func_080A064C: @ 0x080A064C
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	adds r4, r1, #0
	adds r4, #0x31
	ldrb r5, [r4]
	ldr r6, .L080A0670  @ gKeySt
	ldr r3, [r6]
	ldrh r2, [r3, #8]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq .L080A0674
	cmp r5, #0
	bne .L080A0680
	adds r0, r1, #0
	bl func_080A05BC
	b .L080A06E6
	.align 2, 0
.L080A0670: .4byte gKeySt
.L080A0674:
	movs r0, #2
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0
	beq .L080A06A0
.L080A0680:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L080A069C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A06E6
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080A06E6
	.align 2, 0
.L080A069C: .4byte gPlaySt
.L080A06A0:
	ldrh r1, [r3, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080A06AC
	strb r2, [r4]
.L080A06AC:
	ldr r0, [r6]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080A06BC
	movs r0, #1
	strb r0, [r4]
.L080A06BC:
	ldrb r0, [r4]
	cmp r5, r0
	beq .L080A06E6
	ldr r0, .L080A06EC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A06D4
	movs r0, #0x67
	bl m4aSongNumStart
.L080A06D4:
	ldrb r0, [r4]
	lsls r0, r0, #5
	adds r0, #0xa4
	movs r3, #0x80
	lsls r3, r3, #3
	movs r1, #0x6f
	movs r2, #0
	bl func_080AD51C
.L080A06E6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A06EC: .4byte gPlaySt

	THUMB_FUNC_END func_080A064C

	THUMB_FUNC_START func_080A06F0
func_080A06F0: @ 0x080A06F0
	push {lr}
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	bl func_08098500
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A06F0

	THUMB_FUNC_START func_080A070C
func_080A070C: @ 0x080A070C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A0720  @ gUnknown_08A19528
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0720: .4byte gUnknown_08A19528

	THUMB_FUNC_END func_080A070C

	THUMB_FUNC_START func_080A0724
func_080A0724: @ 0x080A0724
	push {lr}
	sub sp, #0x10
	ldr r0, [r0, #0x2c]
	str r0, [sp]
	ldr r0, .L080A0754  @ 0x06011000
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0xa
	movs r1, #7
	movs r2, #0x11
	movs r3, #4
	bl func_0808F128
	movs r0, #0x7c
	bl func_0808E9D8
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
.L080A0754: .4byte 0x06011000

	THUMB_FUNC_END func_080A0724

	THUMB_FUNC_START nullsub_19
nullsub_19: @ 0x080A0758
	bx lr

	THUMB_FUNC_END nullsub_19

	THUMB_FUNC_START __malloc_unlock_2
__malloc_unlock_2: @ 0x080A075C
	bx lr

	THUMB_FUNC_END __malloc_unlock_2

	THUMB_FUNC_START func_080A0760
func_080A0760: @ 0x080A0760
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x30
	movs r4, #1
	strb r4, [r0]
	bl func_080A0A34
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	bl func_080A0A70
	adds r1, r5, #0
	adds r1, #0x32
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x33
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A0760

	THUMB_FUNC_START func_080A078C
func_080A078C: @ 0x080A078C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r9, r0
	ldr r6, .L080A084C  @ gUnknown_02013498
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	ldr r0, .L080A0850  @ gBg0Tm+0x280
	movs r1, #0x1f
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	movs r4, #0
.L080A07B4:
	adds r0, r6, #0
	bl ClearText
	ldr r1, .L080A0854  @ gUnknown_08A196D0
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetMsg
	adds r3, r0, #0
	adds r5, r6, #0
	adds r6, #8
	asrs r2, r4, #1
	lsls r2, r2, #6
	movs r0, #0xa2
	lsls r0, r0, #1
	adds r2, r2, r0
	movs r1, #1
	ands r1, r4
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #1
	ldr r0, .L080A0858  @ gBg0Tm
	mov r8, r0
	adds r1, r2, r0
	movs r2, #0
	mov r0, r9
	adds r0, #0x30
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080A07FE
	movs r2, #1
.L080A07FE:
	movs r7, #0
	str r7, [sp]
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl PutDrawText
	adds r4, #1
	cmp r4, #3
	ble .L080A07B4
	ldr r0, .L080A084C  @ gUnknown_02013498
	adds r6, r0, #0
	adds r6, #0xf0
	adds r0, r6, #0
	bl ClearText
	ldr r0, .L080A085C  @ gUnknown_08A196BC
	ldr r0, [r0, #0xc]
	bl GetMsg
	mov r1, r8
	adds r1, #0x2c
	str r7, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A084C: .4byte gUnknown_02013498
.L080A0850: .4byte gBg0Tm+0x280
.L080A0854: .4byte gUnknown_08A196D0
.L080A0858: .4byte gBg0Tm
.L080A085C: .4byte gUnknown_08A196BC

	THUMB_FUNC_END func_080A078C

	THUMB_FUNC_START func_080A0860
func_080A0860: @ 0x080A0860
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r3, r5, #0
	adds r3, #0x29
	ldrb r4, [r3]
	ldr r2, .L080A08F0  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080A0884
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq .L080A0884
	subs r0, r4, #1
	strb r0, [r3]
.L080A0884:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	adds r3, r5, #0
	adds r3, #0x29
	cmp r0, #0
	beq .L080A08A2
	ldrb r1, [r3]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080A08A2
	adds r0, r1, #1
	strb r0, [r3]
.L080A08A2:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A08BA
	ldrb r1, [r3]
	lsrs r0, r1, #1
	cmp r0, #0
	bne .L080A08BA
	adds r0, r1, #2
	strb r0, [r3]
.L080A08BA:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080A08D2
	ldrb r1, [r3]
	lsrs r0, r1, #1
	cmp r0, #0
	beq .L080A08D2
	subs r0, r1, #2
	strb r0, [r3]
.L080A08D2:
	ldrb r3, [r3]
	cmp r4, r3
	beq .L080A08F8
	ldr r0, .L080A08F4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A08EA
	movs r0, #0x65
	bl m4aSongNumStart
.L080A08EA:
	movs r0, #1
	b .L080A08FA
	.align 2, 0
.L080A08F0: .4byte gKeySt
.L080A08F4: .4byte gPlaySt
.L080A08F8:
	movs r0, #0
.L080A08FA:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0860

	THUMB_FUNC_START func_080A0900
func_080A0900: @ 0x080A0900
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808F270
	adds r0, r4, #0
	bl EndAllProcChildren
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A0900

	THUMB_FUNC_START func_080A0924
func_080A0924: @ 0x080A0924
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #0
	blt .L080A093E
	cmp r1, #1
	ble .L080A093E
	cmp r1, #2
	bne .L080A093E
	movs r1, #4
	bl Proc_Goto
.L080A093E:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A0924

	THUMB_FUNC_START StartPrepScreenSupportMenu
StartPrepScreenSupportMenu: @ 0x080A0944
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A0958  @ gUnknown_08A1962C
	bl SpawnProcLocking
	adds r0, #0x29
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0958: .4byte gUnknown_08A1962C

	THUMB_FUNC_END StartPrepScreenSupportMenu

	THUMB_FUNC_START CanPrepScreenSupport
CanPrepScreenSupport: @ 0x080A095C
	push {lr}
	cmp r0, #1
	beq .L080A0976
	cmp r0, #1
	bgt .L080A096C
	cmp r0, #0
	beq .L080A0972
	b .L080A0986
.L080A096C:
	cmp r0, #2
	beq .L080A097C
	b .L080A0986
.L080A0972:
	movs r0, #1
	b .L080A0988
.L080A0976:
	bl func_080A0A34
	b .L080A0980
.L080A097C:
	bl func_080A0A70
.L080A0980:
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b .L080A0988
.L080A0986:
	movs r0, #0
.L080A0988:
	pop {r1}
	bx r1

	THUMB_FUNC_END CanPrepScreenSupport

	THUMB_FUNC_START func_080A098C
func_080A098C: @ 0x080A098C
	push {lr}
	ldr r0, .L080A09A4  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x7a
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
.L080A09A4: .4byte gPlaySt

	THUMB_FUNC_END func_080A098C

	THUMB_FUNC_START func_080A09A8
func_080A09A8: @ 0x080A09A8
	push {lr}
	ldr r0, .L080A09C0  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x76
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
.L080A09C0: .4byte gPlaySt

	THUMB_FUNC_END func_080A09A8

	THUMB_FUNC_START func_080A09C4
func_080A09C4: @ 0x080A09C4
	push {lr}
	ldr r0, .L080A09DC  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x7c
	ldrh r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
.L080A09DC: .4byte gPlaySt

	THUMB_FUNC_END func_080A09C4

	THUMB_FUNC_START func_080A09E0
func_080A09E0: @ 0x080A09E0
	push {lr}
	ldr r0, .L080A09F8  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x7f
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
.L080A09F8: .4byte gPlaySt

	THUMB_FUNC_END func_080A09E0

	THUMB_FUNC_START func_080A09FC
func_080A09FC: @ 0x080A09FC
	push {lr}
	ldr r0, .L080A0A14  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x7e
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
.L080A0A14: .4byte gPlaySt

	THUMB_FUNC_END func_080A09FC

	THUMB_FUNC_START func_080A0A18
func_080A0A18: @ 0x080A0A18
	push {lr}
	bl func_080A098C
	cmp r0, #0
	beq .L080A0A2E
	bl func_080A09A8
	cmp r0, #0
	bne .L080A0A2E
	movs r0, #1
	b .L080A0A30
.L080A0A2E:
	movs r0, #0
.L080A0A30:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0A18

	THUMB_FUNC_START func_080A0A34
func_080A0A34: @ 0x080A0A34
	push {lr}
	ldr r0, .L080A0A50  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne .L080A0A4A
	bl func_080A098C
	cmp r0, #0
	bne .L080A0A54
.L080A0A4A:
	movs r0, #0
	b .L080A0A56
	.align 2, 0
.L080A0A50: .4byte gPlaySt
.L080A0A54:
	movs r0, #1
.L080A0A56:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0A34

	THUMB_FUNC_START func_080A0A5C
func_080A0A5C: @ 0x080A0A5C
	push {lr}
	bl func_080A09FC
	cmp r0, #1
	beq .L080A0A6A
	movs r0, #0
	b .L080A0A6C
.L080A0A6A:
	movs r0, #1
.L080A0A6C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0A5C

	THUMB_FUNC_START func_080A0A70
func_080A0A70: @ 0x080A0A70
	movs r0, #1
	bx lr

	THUMB_FUNC_END func_080A0A70

	THUMB_FUNC_START func_080A0A74
func_080A0A74: @ 0x080A0A74
	push {lr}
	ldr r0, .L080A0A88  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x61
	bgt .L080A0A8C
	movs r0, #0
	b .L080A0A8E
	.align 2, 0
.L080A0A88: .4byte gPlaySt
.L080A0A8C:
	movs r0, #1
.L080A0A8E:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0A74

	THUMB_FUNC_START func_080A0A94
func_080A0A94: @ 0x080A0A94
	ldr r0, .L080A0A9C  @ gUnknown_020136F0
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L080A0A9C: .4byte gUnknown_020136F0

	THUMB_FUNC_END func_080A0A94

	THUMB_FUNC_START func_080A0AA0
func_080A0AA0: @ 0x080A0AA0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A0AB4  @ gUnknown_020136F0
	ldr r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L080A0AB8
	adds r0, r1, #1
	b .L080A0ABA
	.align 2, 0
.L080A0AB4: .4byte gUnknown_020136F0
.L080A0AB8:
	movs r0, #0
.L080A0ABA:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0AA0

	THUMB_FUNC_START func_080A0AC0
func_080A0AC0: @ 0x080A0AC0
	push {lr}
	cmp r0, #0
	bne .L080A0ACA
	ldr r0, .L080A0AD0  @ gUnknown_020136F0
	ldr r0, [r0]
.L080A0ACA:
	subs r0, #1
	pop {r1}
	bx r1
	.align 2, 0
.L080A0AD0: .4byte gUnknown_020136F0

	THUMB_FUNC_END func_080A0AC0

	THUMB_FUNC_START func_080A0AD4
func_080A0AD4: @ 0x080A0AD4
	ldr r2, .L080A0AE8  @ gUnknown_08A196FC
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #2
	adds r2, r2, r1
	ldrb r0, [r2]
	bx lr
	.align 2, 0
.L080A0AE8: .4byte gUnknown_08A196FC

	THUMB_FUNC_END func_080A0AD4

	THUMB_FUNC_START func_080A0AEC
func_080A0AEC: @ 0x080A0AEC
	ldr r2, .L080A0B00  @ gUnknown_08A196FC
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #9
	adds r2, r2, r1
	ldrb r0, [r2]
	bx lr
	.align 2, 0
.L080A0B00: .4byte gUnknown_08A196FC

	THUMB_FUNC_END func_080A0AEC

	THUMB_FUNC_START func_080A0B04
func_080A0B04: @ 0x080A0B04
	ldr r2, .L080A0B1C  @ gUnknown_08A196FC
	ldr r3, [r2]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #0x10
	adds r2, r2, r1
	movs r0, #0
	ldrsb r0, [r2, r0]
	bx lr
	.align 2, 0
.L080A0B1C: .4byte gUnknown_08A196FC

	THUMB_FUNC_END func_080A0B04

	THUMB_FUNC_START func_080A0B20
func_080A0B20: @ 0x080A0B20
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r4, .L080A0B40  @ gCharacterData
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r4, #0x2c
	adds r0, r0, r4
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A0B40: .4byte gCharacterData

	THUMB_FUNC_END func_080A0B20

	THUMB_FUNC_START func_080A0B44
func_080A0B44: @ 0x080A0B44
	ldr r1, .L080A0B54  @ gUnknown_08A196FC
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r0, [r1]
	bx lr
	.align 2, 0
.L080A0B54: .4byte gUnknown_08A196FC

	THUMB_FUNC_END func_080A0B44

	THUMB_FUNC_START func_080A0B58
func_080A0B58: @ 0x080A0B58
	ldr r1, .L080A0B68  @ gUnknown_08A196FC
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	ldrb r0, [r1, #1]
	bx lr
	.align 2, 0
.L080A0B68: .4byte gUnknown_08A196FC

	THUMB_FUNC_END func_080A0B58

	THUMB_FUNC_START func_080A0B6C
func_080A0B6C: @ 0x080A0B6C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
.L080A0B72:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L080A0BA0
	ldr r3, [r2]
	cmp r3, #0
	beq .L080A0BA0
	ldr r0, [r2, #0xc]
	ldr r1, .L080A0B9C  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L080A0BA0
	ldrb r0, [r3, #4]
	cmp r0, r5
	bne .L080A0BA0
	ldr r0, [r2, #4]
	ldrb r0, [r0, #4]
	b .L080A0BB2
	.align 2, 0
.L080A0B9C: .4byte 0x00010004
.L080A0BA0:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080A0B72
	ldr r2, .L080A0BB8  @ gCharacterData
	subs r1, r5, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrb r0, [r0, #5]
.L080A0BB2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A0BB8: .4byte gCharacterData

	THUMB_FUNC_END func_080A0B6C

	THUMB_FUNC_START func_080A0BBC
func_080A0BBC: @ 0x080A0BBC
	push {r4, lr}
	adds r4, r0, #0
	bl GetSupportTalkInfoList
	adds r1, r0, #0
	ldrh r0, [r1]
	ldr r2, .L080A0BE0  @ 0x0000FFFF
	cmp r0, r2
	beq .L080A0BEC
.L080A0BCE:
	ldrh r0, [r1]
	cmp r0, r4
	beq .L080A0BDA
	ldrh r0, [r1, #2]
	cmp r0, r4
	bne .L080A0BE4
.L080A0BDA:
	movs r0, #1
	b .L080A0BEE
	.align 2, 0
.L080A0BE0: .4byte 0x0000FFFF
.L080A0BE4:
	adds r1, #0x10
	ldrh r0, [r1]
	cmp r0, r2
	bne .L080A0BCE
.L080A0BEC:
	movs r0, #0
.L080A0BEE:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0BBC

	THUMB_FUNC_START func_080A0BF4
func_080A0BF4: @ 0x080A0BF4
	push {r4, r5, r6, r7, lr}
	bl GetSupportTalkInfoList
	adds r6, r0, #0
	ldrh r0, [r6]
	ldr r1, .L080A0C3C  @ 0x0000FFFF
	cmp r0, r1
	beq .L080A0C34
	adds r7, r1, #0
.L080A0C06:
	ldrh r0, [r6]
	movs r1, #0
	bl SGM_SetCharacterKnown
	ldrh r0, [r6, #2]
	movs r1, #0
	bl SGM_SetCharacterKnown
	ldrh r4, [r6]
	ldrh r5, [r6, #2]
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080A3468
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl SGM_SetSupportLevelKnown
	adds r6, #0x10
	ldrh r0, [r6]
	cmp r0, r7
	bne .L080A0C06
.L080A0C34:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0C3C: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080A0BF4

	THUMB_FUNC_START func_080A0C40
func_080A0C40: @ 0x080A0C40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x90
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r7, .L080A0DC0  @ gUnknown_08A196FC
	ldr r1, [r7]
	ldr r2, .L080A0DC4  @ 0x01000600
	mov r0, sp
	bl CpuSet
	ldr r5, .L080A0DC8  @ gUnknown_020136F0
	movs r1, #0
	str r1, [r5]
	adds r4, #0x42
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne .L080A0C72
	b .L080A0DD8
.L080A0C72:
	add r0, sp, #0x24
	strh r1, [r0]
	add r1, sp, #4
	ldr r2, .L080A0DCC  @ 0x01000010
	bl CpuSet
	movs r4, #1
.L080A0C80:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq .L080A0CB0
	ldr r2, [r0]
	cmp r2, #0
	beq .L080A0CB0
	ldr r0, [r0, #0xc]
	ldr r1, .L080A0DD0  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L080A0CB0
	ldrb r1, [r2, #4]
	lsrs r2, r1, #5
	lsls r2, r2, #2
	add r2, sp
	movs r0, #0x1f
	ands r0, r1
	movs r1, #1
	lsls r1, r0
	ldr r0, [r2, #4]
	orrs r0, r1
	str r0, [r2, #4]
.L080A0CB0:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080A0C80
	movs r4, #1
	ldr r0, .L080A0DC8  @ gUnknown_020136F0
	mov sl, r0
.L080A0CBC:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	str r4, [sp, #0x8c]
	cmp r5, #0
	beq .L080A0DB6
	ldr r2, [r5]
	cmp r2, #0
	beq .L080A0DB6
	ldr r0, [r5, #0xc]
	ldr r1, .L080A0DD0  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L080A0DB6
	ldrb r0, [r2, #4]
	bl func_080A1B6C
	cmp r0, #0
	beq .L080A0DB6
	mov r0, sl
	ldr r1, [r0]
	ldr r0, .L080A0DC0  @ gUnknown_08A196FC
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r5]
	ldrb r1, [r1, #4]
	strb r1, [r0]
	mov r0, sl
	ldr r1, [r0]
	ldr r0, .L080A0DC0  @ gUnknown_08A196FC
	ldr r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r5, #4]
	ldrb r1, [r1, #4]
	strb r1, [r0, #1]
	movs r6, #0
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, .L080A0DD4  @ gCharacterData+0x2C
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r6, r0
	bge .L080A0DAE
	ldr r7, .L080A0DC8  @ gUnknown_020136F0
	ldr r0, .L080A0DC0  @ gUnknown_08A196FC
	mov r8, r0
.L080A0D30:
	ldr r0, [r7]
	adds r1, r6, #0
	bl func_080A0B20
	adds r4, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl GetUnitSupportLevel
	ldr r2, [r7]
	mov r1, r8
	ldr r3, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #2
	adds r1, r1, r6
	strb r0, [r1]
	adds r0, r4, #0
	bl func_080A0B6C
	ldr r2, [r7]
	mov r1, r8
	ldr r3, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #9
	adds r1, r1, r6
	strb r0, [r1]
	ldr r0, [r7]
	mov r1, r8
	ldr r2, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	adds r1, #0x10
	add r1, r9
	asrs r0, r4, #5
	lsls r0, r0, #2
	add r0, sp
	movs r2, #0x1f
	ands r2, r4
	ldr r0, [r0, #4]
	lsrs r0, r2
	movs r2, #1
	ands r0, r2
	strb r0, [r1]
	adds r6, #1
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, .L080A0DD4  @ gCharacterData+0x2C
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r6, r0
	blt .L080A0D30
.L080A0DAE:
	mov r1, sl
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
.L080A0DB6:
	ldr r4, [sp, #0x8c]
	cmp r4, #0x3f
	bgt .L080A0DBE
	b .L080A0CBC
.L080A0DBE:
	b .L080A0EAE
	.align 2, 0
.L080A0DC0: .4byte gUnknown_08A196FC
.L080A0DC4: .4byte 0x01000600
.L080A0DC8: .4byte gUnknown_020136F0
.L080A0DCC: .4byte 0x01000010
.L080A0DD0: .4byte 0x00010004
.L080A0DD4: .4byte gCharacterData+0x2C
.L080A0DD8:
	add r4, sp, #0x28
	adds r0, r4, #0
	bl LoadGeneralGameMetadata
	ldr r0, .L080A0E50  @ 0x0000026A
	bl GetMsg
	bl SetTacticianName
	movs r6, #0
	add r0, sp, #0x28
	mov sl, r0
	ldr r1, .L080A0E54  @ gCharacterData
	mov r8, r1
.L080A0DF4:
	adds r0, r6, #0
	mov r1, sl
	bl GGM_IsCharacterKnown
	lsls r0, r0, #0x18
	adds r4, r6, #1
	cmp r0, #0
	beq .L080A0EA8
	adds r0, r6, #0
	bl func_080A1B6C
	cmp r0, #0
	beq .L080A0EA8
	ldr r1, [r5]
	ldr r2, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, r0, r2
	strb r6, [r0]
	ldr r0, [r5]
	ldr r2, [r7]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, r1, r2
	subs r2, r6, #1
	movs r0, #0x34
	muls r0, r2, r0
	add r0, r8
	ldrb r0, [r0, #5]
	strb r0, [r1, #1]
	ldr r1, [r5]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r1, [r7]
	adds r1, r1, r0
	adds r1, #2
	adds r0, r6, #0
	mov r2, sl
	bl func_080A35EC
	movs r0, #0
	mov r9, r0
	b .L080A0E98
	.align 2, 0
.L080A0E50: .4byte 0x0000026A
.L080A0E54: .4byte gCharacterData
.L080A0E58:
	ldr r0, [r5]
	mov r1, r9
	bl func_080A0B20
	ldr r1, [r5]
	ldr r3, [r7]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r2, r3
	adds r2, #9
	add r2, r9
	subs r3, r0, #1
	movs r1, #0x34
	muls r1, r3, r1
	add r1, r8
	ldrb r1, [r1, #5]
	strb r1, [r2]
	add r1, sp, #0x28
	bl GGM_IsCharacterKnown
	ldr r2, [r5]
	ldr r3, [r7]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #3
	adds r1, r1, r3
	adds r1, #0x10
	add r1, r9
	strb r0, [r1]
	movs r1, #1
	add r9, r1
.L080A0E98:
	adds r0, r6, #0
	bl func_080A1B6C
	cmp r9, r0
	blt .L080A0E58
	ldr r0, [r5]
	adds r0, #1
	str r0, [r5]
.L080A0EA8:
	adds r6, r4, #0
	cmp r6, #0xff
	ble .L080A0DF4
.L080A0EAE:
	add sp, #0x90
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A0C40

	THUMB_FUNC_START func_080A0EC0
func_080A0EC0: @ 0x080A0EC0
	push {r4, r5, lr}
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080A0EF4
	movs r4, #1
.L080A0ED0:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L080A0EEC
	ldr r0, [r1]
	cmp r0, #0
	beq .L080A0EEC
	adds r0, r1, #0
	bl GetUnitSpriteId
	bl UseUnitSprite
.L080A0EEC:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080A0ED0
	b .L080A0F1C
.L080A0EF4:
	movs r4, #0
	ldr r0, .L080A0F28  @ gUnknown_020136F0
	ldr r0, [r0]
	cmp r4, r0
	bge .L080A0F1C
	movs r5, #0
.L080A0F00:
	ldr r0, .L080A0F2C  @ gUnknown_08A196FC
	ldr r0, [r0]
	adds r0, r5, r0
	ldrb r0, [r0, #1]
	bl GetUnitSpriteByJid
	bl UseUnitSprite
	adds r5, #0x18
	adds r4, #1
	ldr r0, .L080A0F28  @ gUnknown_020136F0
	ldr r0, [r0]
	cmp r4, r0
	blt .L080A0F00
.L080A0F1C:
	bl ForceSyncUnitSpriteSheet
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A0F28: .4byte gUnknown_020136F0
.L080A0F2C: .4byte gUnknown_08A196FC

	THUMB_FUNC_END func_080A0EC0

	THUMB_FUNC_START func_080A0F30
func_080A0F30: @ 0x080A0F30
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
	ldr r7, .L080A0F3C  @ gCharacterData+0x2C
	b .L080A0F4C
	.align 2, 0
.L080A0F3C: .4byte gCharacterData+0x2C
.L080A0F40:
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_080A0AD4
	adds r6, r6, r0
	adds r4, #1
.L080A0F4C:
	adds r0, r5, #0
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r7
	ldr r0, [r0]
	ldrb r0, [r0, #0x15]
	cmp r4, r0
	blt .L080A0F40
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0F30

	THUMB_FUNC_START func_080A0F6C
func_080A0F6C: @ 0x080A0F6C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A0F88
	adds r0, r6, #0
	bl func_080A0F30
	cmp r0, #5
	beq .L080A0FCA
	b .L080A0FD0
.L080A0F88:
	movs r0, #0
	mov r8, r0
	adds r0, r6, #0
	bl func_080A0F30
	mov r9, r0
	adds r0, r6, #0
	bl func_080A0B44
	bl func_080A1B6C
	adds r7, r0, #0
	movs r5, #0
	cmp r8, r7
	bge .L080A0FC6
.L080A0FA6:
	adds r0, r6, #0
	bl func_080A0B44
	adds r4, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl func_080A0B20
	adds r1, r0, #0
	adds r0, r4, #0
	bl func_080A3468
	add r8, r0
	adds r5, #1
	cmp r5, r7
	blt .L080A0FA6
.L080A0FC6:
	cmp r8, r9
	bne .L080A0FCE
.L080A0FCA:
	movs r0, #2
	b .L080A0FDA
.L080A0FCE:
	mov r0, r9
.L080A0FD0:
	cmp r0, #0
	beq .L080A0FD8
	movs r0, #1
	b .L080A0FDA
.L080A0FD8:
	movs r0, #0
.L080A0FDA:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A0F6C

	THUMB_FUNC_START func_080A0FE8
func_080A0FE8: @ 0x080A0FE8
	push {r4, r5, r6, r7, lr}
	ldr r6, .L080A10A4  @ gUnknown_02013590
	bl func_080A3544
	adds r7, r0, #0
	adds r4, r6, #0
	subs r4, #8
	adds r0, r4, #0
	movs r1, #0x10
	bl InitText
	adds r0, r6, #0
	movs r1, #9
	bl InitText
	adds r0, r4, #0
	bl ClearText
	ldr r0, .L080A10A8  @ 0x000005AD
	bl GetMsg
	adds r5, r0, #0
	movs r0, #0x80
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	ldr r5, .L080A10AC  @ gBg0Tm+0x48E
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutText
	adds r0, r6, #0
	bl ClearText
	movs r4, #0
	cmp r7, #0x64
	bne .L080A1044
	movs r4, #4
.L080A1044:
	ldr r0, .L080A10B0  @ 0x000005AA
	bl GetMsg
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0
	adds r2, r4, #0
	bl Text_InsertDrawString
	adds r0, r6, #0
	movs r1, #0x34
	bl Text_SetCursor
	movs r1, #2
	cmp r7, #0x64
	bne .L080A1066
	movs r1, #4
.L080A1066:
	adds r0, r6, #0
	bl Text_SetColor
	adds r0, r6, #0
	adds r1, r7, #0
	bl Text_DrawNumberOrBlank
	movs r4, #0
	cmp r7, #0x64
	bne .L080A107C
	movs r4, #4
.L080A107C:
	ldr r0, .L080A10B4  @ 0x000005AE
	bl GetMsg
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x3c
	adds r2, r4, #0
	bl Text_InsertDrawString
	ldr r0, .L080A10B8  @ 0xFFFFFC18
	adds r1, r5, r0
	adds r0, r6, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A10A4: .4byte gUnknown_02013590
.L080A10A8: .4byte 0x000005AD
.L080A10AC: .4byte gBg0Tm+0x48E
.L080A10B0: .4byte 0x000005AA
.L080A10B4: .4byte 0x000005AE
.L080A10B8: .4byte 0xFFFFFC18

	THUMB_FUNC_END func_080A0FE8

	THUMB_FUNC_START func_080A10BC
func_080A10BC: @ 0x080A10BC
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r2, r0, #0
	adds r2, #0x40
	strb r1, [r2]
	str r1, [r0, #0x34]
	str r1, [r0, #0x38]
	subs r1, #1
	str r1, [r0, #0x3c]
	bx lr

	THUMB_FUNC_END func_080A10BC

	THUMB_FUNC_START func_080A10D0
func_080A10D0: @ 0x080A10D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A10F0  @ gUnknown_08A1DD0C
	ldr r1, .L080A10F4  @ 0x06017800
	bl Decompress
	ldr r0, .L080A10F8  @ gUnknown_08A1E0D8
	ldr r1, [r4, #0x34]
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A10F0: .4byte gUnknown_08A1DD0C
.L080A10F4: .4byte 0x06017800
.L080A10F8: .4byte gUnknown_08A1E0D8

	THUMB_FUNC_END func_080A10D0

	THUMB_FUNC_START func_080A10FC
func_080A10FC: @ 0x080A10FC
	push {r4, lr}
	sub sp, #4
	ldr r1, [r0, #0x2c]
	ldr r2, [r0, #0x30]
	ldr r3, .L080A1138  @ gUnknown_08A19700
	ldr r0, [r0, #0x34]
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0xfc
	lsls r4, r4, #4
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldr r3, .L080A113C  @ gUnknown_08A19726
	movs r0, #0x87
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	movs r2, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1138: .4byte gUnknown_08A19700
.L080A113C: .4byte gUnknown_08A19726

	THUMB_FUNC_END func_080A10FC

	THUMB_FUNC_START func_080A1140
func_080A1140: @ 0x080A1140
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, .L080A115C  @ gUnknown_08A1973C
	bl SpawnProc
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A115C: .4byte gUnknown_08A1973C

	THUMB_FUNC_END func_080A1140

	THUMB_FUNC_START func_080A1160
func_080A1160: @ 0x080A1160
	push {lr}
	ldr r0, .L080A1170  @ gUnknown_08A1973C
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080A1170: .4byte gUnknown_08A1973C

	THUMB_FUNC_END func_080A1160

	THUMB_FUNC_START func_080A1174
func_080A1174: @ 0x080A1174
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	bl func_080A0A94
	adds r7, r0, #0
	movs r6, #0
	cmp r6, r7
	bge .L080A11CE
.L080A118A:
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	lsls r0, r0, #4
	mov r2, r8
	ldr r1, [r2, #0x34]
	subs r1, #0x24
	subs r5, r0, r1
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r4, r0, #0
	adds r4, #0x18
	adds r0, r5, #0
	subs r0, #0x24
	cmp r0, #0x52
	bhi .L080A11C8
	adds r0, r6, #0
	bl func_080A0B58
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0xc8
	lsls r3, r3, #8
	bl PutUnitSpriteForJid
.L080A11C8:
	adds r6, #1
	cmp r6, r7
	blt .L080A118A
.L080A11CE:
	bl SyncUnitSpriteSheet
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A1174

	THUMB_FUNC_START func_080A11E0
func_080A11E0: @ 0x080A11E0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x3c]
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	beq .L080A1268
	str r0, [r4, #0x38]
	str r1, [r4, #0x3c]
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	bge .L080A1202
	adds r0, #0xf
.L080A1202:
	asrs r0, r0, #4
	subs r0, r1, r0
	lsls r0, r0, #4
	adds r0, #0x24
	cmp r0, #0x24
	bgt .L080A121C
	cmp r1, #0
	bne .L080A1216
	str r1, [r4, #0x34]
	b .L080A121C
.L080A1216:
	subs r0, r1, #1
	lsls r0, r0, #4
	str r0, [r4, #0x34]
.L080A121C:
	ldr r0, [r4, #0x38]
	movs r1, #3
	bl __divsi3
	adds r5, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	bge .L080A122E
	adds r0, #0xf
.L080A122E:
	asrs r0, r0, #4
	subs r0, r5, r0
	lsls r0, r0, #4
	adds r0, #0x24
	cmp r0, #0x73
	ble .L080A1268
	bl func_080A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	cmp r5, r0
	bne .L080A125A
	bl func_080A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	subs r0, #5
	b .L080A1264
.L080A125A:
	ldr r0, [r4, #0x38]
	movs r1, #3
	bl __divsi3
	subs r0, #4
.L080A1264:
	lsls r0, r0, #4
	str r0, [r4, #0x34]
.L080A1268:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A11E0

	THUMB_FUNC_START func_080A1270
func_080A1270: @ 0x080A1270
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r7, .L080A14D0  @ gDispIo
	ldrb r1, [r7]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r2, [r7, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r0, [r7, #0x10]
	movs r2, #3
	orrs r0, r2
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	movs r0, #1
	mov r9, r0
	mov r0, r9
	orrs r1, r0
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	orrs r0, r2
	strb r0, [r7, #0x18]
	bl InitFaces
	bl ResetText
	bl InitIcons
	movs r0, #0x80
	lsls r0, r0, #7
	movs r1, #1
	negs r1, r1
	bl LoadUiFrameGraphicsTo
	bl LoadObjUiGfx
	movs r0, #0xe
	bl ApplyIconPalettes
	adds r0, r6, #0
	bl func_080A11E0
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #2
	bl SetBgOffset
	ldr r1, .L080A14D4  @ 0x0000FFD8
	ldr r2, [r6, #0x34]
	subs r2, #0x24
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
	movs r5, #0
	str r5, [sp]
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0x12
	movs r3, #2
	bl func_08086CE8
	bl ApplyUnitSpritePalettes
	bl ResetUnitSprites
	adds r0, r6, #0
	bl func_080A0EC0
	movs r0, #0xa0
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	ldr r0, .L080A14D8  @ gUnknown_08A1DB80
	ldr r4, .L080A14DC  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080A14E0  @ gBg1Tm+0x102
	movs r2, #0x90
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080A14E4  @ gUnknown_08A1A8E4
	ldr r1, .L080A14E8  @ 0x06013800
	bl Decompress
	ldr r0, .L080A14EC  @ gUnknown_08A1B174
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #7
	bl EnableBgSync
	ldrb r0, [r7, #1]
	movs r1, #0x20
	mov ip, r1
	mov r2, ip
	orrs r0, r2
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	strb r5, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x26
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x86
	strb r0, [r1]
	movs r0, #0x34
	adds r0, r0, r7
	mov r8, r0
	ldrb r1, [r0]
	mov r2, r9
	orrs r1, r2
	movs r2, #2
	orrs r1, r2
	movs r0, #4
	orrs r1, r0
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	adds r5, r7, #0
	adds r5, #0x36
	ldrb r0, [r5]
	mov r7, r9
	orrs r0, r7
	orrs r0, r2
	movs r2, #5
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r2, ip
	orrs r1, r2
	mov r7, r8
	strb r1, [r7]
	orrs r0, r2
	strb r0, [r5]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	ldr r5, .L080A14F0  @ gUnknown_02013498
	movs r4, #0x14
.L080A140A:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L080A140A
	bl func_080A0FE8
	bl func_080A0A94
	cmp r0, #0
	beq .L080A1476
	adds r0, r6, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r5, r0, #0
	adds r5, #0x14
	adds r0, r4, #0
	movs r1, #3
	bl __divsi3
	ldr r1, [r6, #0x34]
	cmp r1, #0
	bge .L080A1456
	adds r1, #0xf
.L080A1456:
	asrs r1, r1, #4
	subs r1, r0, r1
	lsls r1, r1, #4
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r5, #0
	movs r2, #7
	bl func_080AD51C
	movs r0, #0xc0
	movs r1, #1
	movs r2, #9
	adds r3, r6, #0
	bl ShowRIsInfo
.L080A1476:
	movs r0, #0x88
	movs r1, #9
	movs r2, #0xb
	adds r3, r6, #0
	bl func_080A1140
	ldr r0, .L080A14F4  @ func_080A1174
	adds r1, r6, #0
	bl StartParallelWorker
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #4
	str r0, [sp]
	adds r0, r6, #0
	movs r1, #0xd8
	movs r2, #0x2d
	bl func_08097748
	ldrh r4, [r6, #0x34]
	bl func_080A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl func_080976CC
	bl func_08097668
	ldr r1, [r6, #0x34]
	cmp r1, #0
	bge .L080A14C8
	adds r1, #0xf
.L080A14C8:
	asrs r4, r1, #4
	adds r5, r6, #0
	adds r5, #0x43
	b .L080A1502
	.align 2, 0
.L080A14D0: .4byte gDispIo
.L080A14D4: .4byte 0x0000FFD8
.L080A14D8: .4byte gUnknown_08A1DB80
.L080A14DC: .4byte gBuf
.L080A14E0: .4byte gBg1Tm+0x102
.L080A14E4: .4byte gUnknown_08A1A8E4
.L080A14E8: .4byte 0x06013800
.L080A14EC: .4byte gUnknown_08A1B174
.L080A14F0: .4byte gUnknown_02013498
.L080A14F4: .4byte func_080A1174
.L080A14F8:
	adds r0, r6, #0
	adds r1, r4, #0
	bl func_080A199C
	adds r4, #1
.L080A1502:
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge .L080A150A
	adds r0, #0xf
.L080A150A:
	asrs r0, r0, #4
	adds r0, #6
	cmp r4, r0
	blt .L080A14F8
	adds r0, r6, #0
	bl StartGreenText
	movs r0, #0
	strb r0, [r5]
	ldr r0, .L080A154C  @ 0x06014800
	movs r1, #0xa
	bl LoadHelpBoxGfx
	ldr r2, .L080A1550  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A154C: .4byte 0x06014800
.L080A1550: .4byte gDispIo

	THUMB_FUNC_END func_080A1270

	THUMB_FUNC_START func_080A1554
func_080A1554: @ 0x080A1554
	push {r4, lr}
	adds r4, r0, #0
	bl func_0808F270
	adds r0, r4, #0
	bl EndAllProcChildren
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl SetOnHBlankA
	bl func_080A1160
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A1554

	THUMB_FUNC_START func_080A157C
func_080A157C: @ 0x080A157C
	push {lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A157C

	THUMB_FUNC_START func_080A15B0
func_080A15B0: @ 0x080A15B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	bl func_080A0A94
	cmp r0, #0
	bne .L080A15C6
	b .L080A18D8
.L080A15C6:
	adds r0, r6, #0
	adds r0, #0x40
	movs r7, #0
	ldrsb r7, [r0, r7]
	mov r8, r0
	cmp r7, #0
	beq .L080A15D6
	b .L080A1864
.L080A15D6:
	ldr r0, [r6, #0x38]
	mov sl, r0
	ldr r4, .L080A1620  @ gKeySt
	ldr r2, [r4]
	ldrh r5, [r2, #6]
	adds r3, r6, #0
	adds r3, #0x41
	movs r0, #4
	strb r0, [r3]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A15FA
	ldrh r5, [r2, #4]
	movs r0, #8
	strb r0, [r3]
.L080A15FA:
	adds r0, r6, #0
	adds r0, #0x43
	movs r1, #0
	ldrsb r1, [r0, r1]
	mov r9, r0
	cmp r1, #0
	beq .L080A1624
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A16DC
	bl MoveableHelpBox_OnEnd
	mov r1, r9
	strb r7, [r1]
	b .L080A1900
	.align 2, 0
.L080A1620: .4byte gKeySt
.L080A1624:
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A1684
	ldr r7, [r6, #0x38]
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	mov r8, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge .L080A1654
	adds r0, #0xf
.L080A1654:
	asrs r4, r0, #4
	subs r4, r1, r4
	lsls r4, r4, #4
	adds r4, #0x24
	ldr r5, .L080A1680  @ gCharacterData
	adds r0, r7, #0
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #2]
	mov r0, r8
	adds r1, r4, #0
	bl ShowTextHelpBox
	movs r0, #1
	mov r1, r9
	strb r0, [r1]
	b .L080A1900
	.align 2, 0
.L080A1680: .4byte gCharacterData
.L080A1684:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A16B0
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, .L080A16AC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080A16A2
	b .L080A1900
.L080A16A2:
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L080A1900
	.align 2, 0
.L080A16AC: .4byte gPlaySt
.L080A16B0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A16DC
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, .L080A16D8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080A16CE
	b .L080A1900
.L080A16CE:
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080A1900
	.align 2, 0
.L080A16D8: .4byte gPlaySt
.L080A16DC:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq .L080A16F6
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #0
	beq .L080A16F6
	subs r0, r4, #1
	str r0, [r6, #0x38]
.L080A16F6:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq .L080A1722
	ldr r4, [r6, #0x38]
	adds r0, r4, #0
	movs r1, #3
	bl __modsi3
	cmp r0, #2
	beq .L080A1722
	adds r0, r4, #1
	str r0, [r6, #0x38]
	bl func_080A0A94
	ldr r1, [r6, #0x38]
	cmp r1, r0
	blt .L080A1722
	bl func_080A0A94
	subs r0, #1
	str r0, [r6, #0x38]
.L080A1722:
	movs r0, #0x40
	ands r0, r5
	cmp r0, #0
	beq .L080A1734
	ldr r0, [r6, #0x38]
	cmp r0, #2
	ble .L080A1734
	subs r0, #3
	str r0, [r6, #0x38]
.L080A1734:
	movs r0, #0x80
	ands r5, r0
	cmp r5, #0
	beq .L080A174E
	ldr r4, [r6, #0x38]
	adds r4, #3
	bl func_080A0A94
	cmp r4, r0
	bge .L080A174E
	ldr r0, [r6, #0x38]
	adds r0, #3
	str r0, [r6, #0x38]
.L080A174E:
	ldr r0, [r6, #0x38]
	cmp sl, r0
	bne .L080A1756
	b .L080A185A
.L080A1756:
	movs r1, #3
	bl __divsi3
	adds r1, r0, #0
	ldr r0, [r6, #0x34]
	cmp r0, #0
	bge .L080A1766
	adds r0, #0xf
.L080A1766:
	asrs r0, r0, #4
	subs r0, r1, r0
	lsls r4, r0, #4
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	ldr r0, .L080A17A4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A1784
	movs r0, #0x65
	bl m4aSongNumStart
.L080A1784:
	cmp r4, #0xf
	bgt .L080A17A8
	ldr r1, [r6, #0x34]
	cmp r1, #0
	beq .L080A17A8
	cmp r1, #0
	bge .L080A1794
	adds r1, #0xf
.L080A1794:
	asrs r1, r1, #4
	subs r1, #1
	adds r0, r6, #0
	bl func_080A199C
	movs r0, #0xff
	b .L080A17D4
	.align 2, 0
.L080A17A4: .4byte gPlaySt
.L080A17A8:
	cmp r4, #0x4f
	ble .L080A17EA
	bl func_080A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	subs r0, #5
	lsls r0, r0, #4
	ldr r1, [r6, #0x34]
	cmp r1, r0
	beq .L080A17EA
	cmp r1, #0
	bge .L080A17C8
	adds r1, #0xf
.L080A17C8:
	asrs r1, r1, #4
	adds r1, #6
	adds r0, r6, #0
	bl func_080A199C
	movs r0, #1
.L080A17D4:
	mov r1, r8
	strb r0, [r1]
	ldr r0, [r6, #0x38]
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	bl func_080AD4E4
	b .L080A1804
.L080A17EA:
	ldr r0, [r6, #0x38]
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	adds r1, r4, #0
	adds r1, #0x24
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #7
	bl func_080AD51C
.L080A1804:
	mov r1, r9
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq .L080A185A
	ldr r7, [r6, #0x38]
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #6
	adds r0, #0x14
	mov r9, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	ldr r4, [r6, #0x34]
	cmp r4, #0
	bge .L080A182E
	adds r4, #0xf
.L080A182E:
	asrs r4, r4, #4
	subs r4, r0, r4
	lsls r4, r4, #4
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	subs r0, #0x24
	subs r4, r4, r0
	ldr r5, .L080A18D0  @ gCharacterData
	adds r0, r7, #0
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #2]
	mov r0, r9
	adds r1, r4, #0
	bl ShowTextHelpBox
.L080A185A:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq .L080A1900
.L080A1864:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bge .L080A187A
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r1, [r0]
	ldr r0, [r6, #0x34]
	subs r0, r0, r1
	str r0, [r6, #0x34]
.L080A187A:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble .L080A188E
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r1, [r0]
	ldr r0, [r6, #0x34]
	adds r0, r0, r1
	str r0, [r6, #0x34]
.L080A188E:
	ldr r1, [r6, #0x34]
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne .L080A189C
	mov r0, r8
	strb r1, [r0]
.L080A189C:
	ldrh r4, [r6, #0x34]
	bl func_080A0A94
	subs r0, #1
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0xa
	adds r1, r4, #0
	movs r3, #6
	bl func_080976CC
	ldr r1, .L080A18D4  @ 0x0000FFD8
	ldr r2, [r6, #0x34]
	subs r2, #0x24
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	b .L080A1900
	.align 2, 0
.L080A18D0: .4byte gCharacterData
.L080A18D4: .4byte 0x0000FFD8
.L080A18D8:
	ldr r0, .L080A1910  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A1900
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, .L080A1914  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A1900
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A1900:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1910: .4byte gKeySt
.L080A1914: .4byte gPlaySt

	THUMB_FUNC_END func_080A15B0

	THUMB_FUNC_START func_080A1918
func_080A1918: @ 0x080A1918
	push {lr}
	adds r2, r0, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2, #0x38]
	bl func_080A2C08
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A1918

	THUMB_FUNC_START func_080A1930
func_080A1930: @ 0x080A1930
	push {lr}
	sub sp, #4
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080A1952
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0x43
	movs r2, #0xc0
	movs r3, #0x18
	bl func_080029E8
	b .L080A1964
.L080A1952:
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #0x34
	adds r1, r2, #0
	movs r3, #0x18
	bl func_080029E8
.L080A1964:
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A1930

	THUMB_FUNC_START func_080A196C
func_080A196C: @ 0x080A196C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A1980  @ gUnknown_08A1975C
	bl SpawnProcLocking
	adds r0, #0x42
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
.L080A1980: .4byte gUnknown_08A1975C

	THUMB_FUNC_END func_080A196C

	THUMB_FUNC_START func_080A1984
func_080A1984: @ 0x080A1984
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A1998  @ gUnknown_08A1975C
	bl SpawnProcLocking
	adds r0, #0x42
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
.L080A1998: .4byte gUnknown_08A1975C

	THUMB_FUNC_END func_080A1984

	THUMB_FUNC_START func_080A199C
func_080A199C: @ 0x080A199C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov sl, r1
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	mov r0, sl
	lsls r4, r0, #1
	add r4, sl
	adds r0, r4, #0
	movs r1, #0x15
	bl __modsi3
	lsls r0, r0, #3
	ldr r1, .L080A1A10  @ gUnknown_02013498
	adds r5, r0, r1
	movs r7, #0
	adds r6, r4, #0
.L080A19D0:
	adds r0, r5, #0
	bl ClearText
	bl func_080A0A94
	cmp r6, r0
	bge .L080A1A66
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	lsls r0, r0, #3
	mov r8, r0
	mov r1, sl
	lsls r4, r1, #1
	movs r0, #0x1f
	ands r4, r0
	ldr r0, [sp]
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r6, #0
	bl func_080A0F6C
	cmp r0, #1
	beq .L080A1A1E
	cmp r0, #1
	bgt .L080A1A14
	cmp r0, #0
	beq .L080A1A1A
	b .L080A1A28
	.align 2, 0
.L080A1A10: .4byte gUnknown_02013498
.L080A1A14:
	cmp r0, #2
	beq .L080A1A24
	b .L080A1A28
.L080A1A1A:
	movs r0, #1
	b .L080A1A26
.L080A1A1E:
	movs r1, #0
	mov r9, r1
	b .L080A1A28
.L080A1A24:
	movs r0, #4
.L080A1A26:
	mov r9, r0
.L080A1A28:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	mov r1, r9
	bl Text_SetColor
	adds r0, r6, #0
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, .L080A1A88  @ gCharacterData
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	lsls r1, r4, #5
	add r1, r8
	lsls r1, r1, #1
	ldr r0, .L080A1A8C  @ gBg2Tm
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
.L080A1A66:
	adds r5, #8
	adds r6, #1
	adds r7, #1
	cmp r7, #2
	ble .L080A19D0
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1A88: .4byte gCharacterData
.L080A1A8C: .4byte gBg2Tm

	THUMB_FUNC_END func_080A199C

	THUMB_FUNC_START func_080A1A90
func_080A1A90: @ 0x080A1A90
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A1AA8  @ gUnknown_08A1975C
	bl FindProc
	cmp r0, #0
	beq .L080A1AA0
	str r4, [r0, #0x3c]
.L080A1AA0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1AA8: .4byte gUnknown_08A1975C

	THUMB_FUNC_END func_080A1A90

	THUMB_FUNC_START func_080A1AAC
func_080A1AAC: @ 0x080A1AAC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	bl func_080A0B44
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r5, #0
	adds r1, r6, #0
	bl func_080A0B20
	adds r2, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	adds r1, r4, #0
	mov r3, r8
	bl func_08083790
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A1AAC

	THUMB_FUNC_START func_080A1AE4
func_080A1AE4: @ 0x080A1AE4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r0, #0
	ldr r1, .L080A1B58  @ gBg1Tm
	mov sl, r1
	ldr r6, .L080A1B5C  @ gBg2Tm
	mov r9, r6
	ldr r7, .L080A1B60  @ gUnknown_020136F4
	ldr r1, .L080A1B64  @ gBg0Tm
	mov r8, r1
	movs r6, #0x80
	lsls r6, r6, #4
	adds r6, r6, r7
	mov ip, r6
.L080A1B08:
	adds r1, r0, #1
	str r1, [sp]
	lsls r0, r0, #1
	ldr r6, .L080A1B68  @ gUnknown_020146F4
	adds r4, r0, r6
	adds r3, r0, r7
	adds r2, r0, #0
	movs r5, #0x13
.L080A1B18:
	mov r1, r8
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r3]
	mov r6, ip
	adds r1, r2, r6
	mov r6, sl
	adds r0, r2, r6
	ldrh r0, [r0]
	strh r0, [r1]
	mov r1, r9
	adds r0, r2, r1
	ldrh r0, [r0]
	strh r0, [r4]
	adds r4, #0x40
	adds r3, #0x40
	adds r2, #0x40
	subs r5, #1
	cmp r5, #0
	bge .L080A1B18
	ldr r0, [sp]
	cmp r0, #0x1d
	ble .L080A1B08
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1B58: .4byte gBg1Tm
.L080A1B5C: .4byte gBg2Tm
.L080A1B60: .4byte gUnknown_020136F4
.L080A1B64: .4byte gBg0Tm
.L080A1B68: .4byte gUnknown_020146F4

	THUMB_FUNC_END func_080A1AE4

	THUMB_FUNC_START func_080A1B6C
func_080A1B6C: @ 0x080A1B6C
	push {lr}
	ldr r2, .L080A1B84  @ gCharacterData
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r2, #0x2c
	adds r0, r0, r2
	ldr r0, [r0]
	cmp r0, #0
	beq .L080A1B88
	ldrb r0, [r0, #0x15]
	b .L080A1B8A
	.align 2, 0
.L080A1B84: .4byte gCharacterData
.L080A1B88:
	movs r0, #0
.L080A1B8A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A1B6C

	THUMB_FUNC_START func_080A1B90
func_080A1B90: @ 0x080A1B90
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, [r6, #0x30]
	adds r1, #0x80
	ldr r4, .L080A1C6C  @ 0x000001FF
	ands r1, r4
	ldr r3, .L080A1C70  @ gUnknown_08A1983C
	movs r0, #0x8f
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r2, #8
	bl PutSpriteExt
	ldr r1, [r6, #0x30]
	adds r1, #0x20
	ands r1, r4
	ldr r3, .L080A1C74  @ gUnknown_08A19850
	ldr r5, .L080A1C78  @ 0x0000E280
	str r5, [sp]
	movs r0, #4
	movs r2, #0x50
	bl PutSpriteExt
	ldr r1, [r6, #0x30]
	adds r1, #5
	ands r1, r4
	ldr r3, .L080A1C7C  @ gUnknown_08A19700
	ldr r0, .L080A1C80  @ 0x0000ABC0
	str r0, [sp]
	movs r0, #4
	movs r2, #0x67
	bl PutSpriteExt
	ldr r1, [r6, #0x30]
	adds r1, #0x14
	ands r1, r4
	ldr r3, .L080A1C84  @ gUnknown_08A1985E
	str r5, [sp]
	movs r0, #4
	movs r2, #0x6f
	bl PutSpriteExt
	ldr r1, [r6, #0x30]
	adds r1, #0xc
	ands r1, r4
	ldr r3, .L080A1C88  @ gUnknown_08A19872
	movs r0, #0xaf
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r2, #0x90
	bl PutSpriteExt
	ldr r0, [r6, #0x30]
	adds r7, r0, #0
	adds r7, #0x70
	ands r7, r4
	ldr r0, [r6, #0x34]
	adds r2, r0, #0
	adds r2, #0x16
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	bge .L080A1C60
	adds r5, r2, #0
.L080A1C1A:
	movs r3, #0xc0
	lsls r3, r3, #8
	adds r0, r6, #0
	adds r0, #0x3f
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080A1C2E
	movs r3, #0xd0
	lsls r3, r3, #8
.L080A1C2E:
	cmp r0, #2
	bne .L080A1C36
	movs r3, #0xf0
	lsls r3, r3, #8
.L080A1C36:
	movs r1, #0xc0
	lsls r1, r1, #4
	adds r0, r1, #0
	orrs r3, r0
	adds r0, r6, #0
	adds r0, #0x4d
	adds r0, r0, r4
	ldrb r0, [r0]
	str r0, [sp]
	movs r0, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl PutUnitSpriteForJid
	adds r5, #0x10
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080A1C1A
.L080A1C60:
	bl SyncUnitSpriteSheet
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1C6C: .4byte 0x000001FF
.L080A1C70: .4byte gUnknown_08A1983C
.L080A1C74: .4byte gUnknown_08A19850
.L080A1C78: .4byte 0x0000E280
.L080A1C7C: .4byte gUnknown_08A19700
.L080A1C80: .4byte 0x0000ABC0
.L080A1C84: .4byte gUnknown_08A1985E
.L080A1C88: .4byte gUnknown_08A19872

	THUMB_FUNC_END func_080A1B90

	THUMB_FUNC_START func_080A1C8C
func_080A1C8C: @ 0x080A1C8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	mov r9, r0
	mov sl, r1
	add r1, sp, #8
	ldr r0, .L080A1D20  @ gUnknown_08205C90
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, r9
	adds r0, #0x3f
	mov r1, sl
	adds r4, r0, r1
	ldrb r0, [r4]
	cmp r0, #0
	bne .L080A1D28
	movs r5, #0
	lsls r1, r1, #1
	mov r8, r1
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x10
	ldr r1, .L080A1D24  @ gBg2Tm
	lsls r0, r0, #1
	adds r4, r0, r1
.L080A1CC6:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble .L080A1CC6
	movs r5, #0
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x16
	ldr r1, .L080A1D24  @ gBg2Tm
	lsls r0, r0, #1
	adds r4, r0, r1
.L080A1CE8:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	adds r4, #2
	adds r5, #1
	cmp r5, #1
	ble .L080A1CE8
	movs r5, #0
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #5
	adds r0, #0x19
	ldr r1, .L080A1D24  @ gBg2Tm
	lsls r0, r0, #1
	adds r4, r0, r1
.L080A1D0A:
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	adds r4, #2
	adds r5, #1
	cmp r5, #2
	ble .L080A1D0A
	b .L080A1E68
	.align 2, 0
.L080A1D20: .4byte gUnknown_08205C90
.L080A1D24: .4byte gBg2Tm
.L080A1D28:
	movs r7, #0
	mov r2, r9
	ldr r0, [r2, #0x2c]
	bl func_080A0B44
	str r0, [sp, #0x14]
	mov r3, r9
	ldr r0, [r3, #0x2c]
	mov r1, sl
	bl func_080A0B20
	str r0, [sp, #0x18]
	ldrb r0, [r4]
	cmp r0, #2
	bne .L080A1D48
	movs r7, #1
.L080A1D48:
	mov r4, r9
	ldr r0, [r4, #0x2c]
	mov r1, sl
	bl func_080A0B20
	subs r0, #1
	movs r6, #0x34
	muls r0, r6, r0
	ldr r1, .L080A1DD8  @ gCharacterData
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetMsg
	mov r2, sl
	lsls r2, r2, #1
	mov r8, r2
	mov r4, r8
	adds r4, #3
	lsls r3, r4, #5
	str r3, [sp, #0x1c]
	lsls r4, r4, #6
	ldr r5, .L080A1DDC  @ gBg2Tm+0x20
	adds r1, r4, r5
	movs r2, #5
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r2, r7, #0
	movs r3, #0
	bl PutDrawText
	adds r5, #0xc
	adds r4, r4, r5
	mov r1, r9
	ldr r0, [r1, #0x2c]
	mov r1, sl
	bl func_080A0B20
	subs r0, #1
	muls r0, r6, r0
	ldr r2, .L080A1DD8  @ gCharacterData
	adds r0, r0, r2
	ldrb r1, [r0, #9]
	adds r1, #0x79
	movs r2, #0xe0
	lsls r2, r2, #8
	adds r0, r4, #0
	bl PutIcon
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	bl func_080A3468
	cmp r0, #2
	bne .L080A1E24
	movs r5, #0
	mov r0, r9
	adds r0, #0x46
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [sp, #0x1c]
	adds r0, #0x19
	add r4, sp, #8
	mov r9, r4
	lsls r4, r0, #1
.L080A1DCA:
	movs r7, #1
	ldrb r0, [r6]
	cmp r0, #2
	bne .L080A1DE0
	movs r7, #4
	b .L080A1DE8
	.align 2, 0
.L080A1DD8: .4byte gCharacterData
.L080A1DDC: .4byte gBg2Tm+0x20
.L080A1DE0:
	ldrb r0, [r6]
	cmp r0, r5
	ble .L080A1DE8
	movs r7, #0
.L080A1DE8:
	ldr r3, .L080A1E20  @ gBg2Tm
	adds r0, r4, r3
	mov r1, r9
	adds r1, #4
	mov r9, r1
	subs r1, #4
	ldm r1!, {r2}
	adds r1, r7, #0
	str r3, [sp, #0x20]
	bl PutSpecialChar
	adds r4, #2
	adds r5, #1
	ldr r3, [sp, #0x20]
	cmp r5, #1
	ble .L080A1DCA
	mov r0, r8
	adds r0, #3
	lsls r0, r0, #6
	adds r1, r3, #0
	adds r1, #0x36
	adds r0, r0, r1
	movs r1, #1
	movs r2, #0x14
	bl PutSpecialChar
	b .L080A1E68
	.align 2, 0
.L080A1E20: .4byte gBg2Tm
.L080A1E24:
	movs r5, #0
	mov r0, r9
	adds r0, #0x46
	mov r2, sl
	adds r6, r0, r2
	ldr r0, [sp, #0x1c]
	adds r0, #0x19
	add r3, sp, #8
	mov r8, r3
	lsls r4, r0, #1
.L080A1E38:
	movs r7, #1
	ldrb r0, [r6]
	cmp r0, #3
	bne .L080A1E44
	movs r7, #4
	b .L080A1E4C
.L080A1E44:
	ldrb r0, [r6]
	cmp r0, r5
	ble .L080A1E4C
	movs r7, #0
.L080A1E4C:
	ldr r0, .L080A1E78  @ gBg2Tm
	adds r0, r4, r0
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	ldm r1!, {r2}
	adds r1, r7, #0
	bl PutSpecialChar
	adds r4, #2
	adds r5, #1
	cmp r5, #2
	ble .L080A1E38
.L080A1E68:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1E78: .4byte gBg2Tm

	THUMB_FUNC_END func_080A1C8C

	THUMB_FUNC_START func_080A1E7C
func_080A1E7C: @ 0x080A1E7C
	push {r4, r5, r6, lr}
	sub sp, #0x20
	adds r5, r0, #0
	ldr r1, .L080A1F54  @ 0x06015000
	mov r0, sp
	movs r2, #0xe
	bl InitSpriteTextFont
	ldr r0, .L080A1F58  @ Pal_SystemText
	movs r1, #0xf0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	add r6, sp, #0x18
	adds r0, r6, #0
	bl InitSpriteText
	mov r0, sp
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r6, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	ldr r4, .L080A1F5C  @ gCharacterData
	ldr r0, [r5, #0x2c]
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x28
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r6, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	movs r4, #0
	adds r5, #0x3d
	ldrb r0, [r5]
	cmp r0, #0
	bne .L080A1EEC
	movs r4, #1
.L080A1EEC:
	ldr r0, .L080A1F60  @ 0x000005AB
	bl GetMsg
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x30
	adds r2, r4, #0
	bl Text_InsertDrawString
	movs r4, #0
	ldrb r0, [r5]
	cmp r0, #0
	bne .L080A1F08
	movs r4, #1
.L080A1F08:
	ldr r0, .L080A1F64  @ 0x000005AC
	bl GetMsg
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x60
	adds r2, r4, #0
	bl Text_InsertDrawString
	ldrb r0, [r5]
	bl func_080AEBEC
	adds r1, r0, #0
	lsls r1, r1, #3
	adds r1, #0x60
	adds r0, r6, #0
	bl Text_SetCursor
	ldrb r0, [r5]
	movs r1, #2
	cmp r0, #0
	bne .L080A1F36
	movs r1, #1
.L080A1F36:
	adds r0, r6, #0
	bl Text_SetColor
	ldrb r1, [r5]
	adds r0, r6, #0
	bl Text_DrawNumberOrBlank
	movs r0, #0
	bl SetTextFont
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A1F54: .4byte 0x06015000
.L080A1F58: .4byte Pal_SystemText
.L080A1F5C: .4byte gCharacterData
.L080A1F60: .4byte 0x000005AB
.L080A1F64: .4byte 0x000005AC

	THUMB_FUNC_END func_080A1E7C

	THUMB_FUNC_START func_080A1F68
func_080A1F68: @ 0x080A1F68
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080A1FF4
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	mov r8, r0
	ldrb r0, [r0]
	cmp r4, r0
	bge .L080A203E
	movs r1, #0x3f
	adds r1, r1, r6
	mov sl, r1
.L080A1F94:
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl func_080A0B20
	adds r7, r0, #0
	mov r2, sl
	adds r1, r2, r4
	movs r0, #0
	strb r0, [r1]
	movs r5, #1
	adds r4, #1
	mov r9, r4
	adds r4, r1, #0
.L080A1FAE:
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L080A1FE2
	ldr r0, [r1]
	cmp r0, #0
	beq .L080A1FE2
	ldrb r0, [r0, #4]
	cmp r0, r7
	bne .L080A1FE2
	ldr r1, [r1, #0xc]
	movs r0, #0x80
	lsls r0, r0, #9
	ands r0, r1
	cmp r0, #0
	bne .L080A1FE2
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq .L080A1FDE
	movs r0, #2
	b .L080A1FE0
.L080A1FDE:
	movs r0, #1
.L080A1FE0:
	strb r0, [r4]
.L080A1FE2:
	adds r5, #1
	cmp r5, #0x3f
	ble .L080A1FAE
	mov r4, r9
	mov r0, r8
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080A1F94
	b .L080A203E
.L080A1FF4:
	adds r1, r6, #0
	adds r1, #0x3b
	strb r0, [r1]
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x3c
	mov r8, r0
	ldrb r2, [r0]
	cmp r4, r2
	bge .L080A203E
	adds r7, r1, #0
.L080A200A:
	adds r0, r6, #0
	adds r0, #0x3f
	adds r5, r0, r4
	movs r0, #0
	strb r0, [r5]
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl func_080A0B04
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A2034
	movs r0, #1
	strb r0, [r5]
	ldr r0, [r6, #0x2c]
	adds r1, r4, #0
	bl func_080A0AD4
	ldrb r1, [r7]
	adds r1, r1, r0
	strb r1, [r7]
.L080A2034:
	adds r4, #1
	mov r0, r8
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080A200A
.L080A203E:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A1F68

	THUMB_FUNC_START func_080A204C
func_080A204C: @ 0x080A204C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	cmp r4, r1
	bge .L080A2074
	adds r7, r5, #0
	adds r7, #0x46
	adds r6, r0, #0
.L080A2060:
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl func_080A0AD4
	adds r1, r7, r4
	strb r0, [r1]
	adds r4, #1
	ldrb r0, [r6]
	cmp r4, r0
	blt .L080A2060
.L080A2074:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A204C

	THUMB_FUNC_START func_080A207C
func_080A207C: @ 0x080A207C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r0, #0x38
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0
	beq .L080A20A2
	ldr r0, [r4, #0x2c]
	bl func_080A0F30
	movs r1, #5
	subs r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x3d
	strb r1, [r0]
	b .L080A20EE
.L080A20A2:
	ldr r0, [r4, #0x2c]
	bl func_080A0B44
	mov r9, r0
	adds r1, r4, #0
	adds r1, #0x3d
	strb r5, [r1]
	movs r5, #0
	adds r0, r4, #0
	adds r0, #0x3c
	mov r8, r1
	adds r7, r0, #0
	ldrb r0, [r7]
	cmp r5, r0
	bge .L080A20E0
	mov r6, r8
.L080A20C2:
	ldr r0, [r4, #0x2c]
	adds r1, r5, #0
	bl func_080A0B20
	adds r1, r0, #0
	mov r0, r9
	bl func_080A3468
	ldrb r1, [r6]
	adds r1, r1, r0
	strb r1, [r6]
	adds r5, #1
	ldrb r2, [r7]
	cmp r5, r2
	blt .L080A20C2
.L080A20E0:
	ldr r0, [r4, #0x2c]
	bl func_080A0F30
	mov r2, r8
	ldrb r1, [r2]
	subs r1, r1, r0
	strb r1, [r2]
.L080A20EE:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A207C

	THUMB_FUNC_START func_080A20FC
func_080A20FC: @ 0x080A20FC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl ResetUnitSprites
	movs r4, #0
	b .L080A2124
.L080A2108:
	ldr r0, [r5, #0x2c]
	adds r1, r4, #0
	bl func_080A0AEC
	adds r1, r5, #0
	adds r1, #0x4d
	adds r1, r1, r4
	strb r0, [r1]
	ldrb r0, [r1]
	bl GetUnitSpriteByJid
	bl UseUnitSprite
	adds r4, #1
.L080A2124:
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080A2108
	bl ForceSyncUnitSpriteSheet
	movs r4, #0
	adds r0, r5, #0
	adds r0, #0x3c
	adds r6, r0, #0
	b .L080A2146
.L080A213C:
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_080A1C8C
	adds r4, #1
.L080A2146:
	ldrb r0, [r6]
	cmp r4, r0
	blt .L080A213C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A20FC

	THUMB_FUNC_START func_080A2154
func_080A2154: @ 0x080A2154
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
.L080A215C:
	cmp r5, #0
	blt .L080A21C8
	adds r0, r7, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bgt .L080A21C8
	adds r0, r7, #0
	adds r0, #0x3f
	adds r0, r0, r5
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A21C4
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl func_080A0AD4
	cmp r0, #0
	ble .L080A21C4
	adds r6, r7, #0
	adds r6, #0x39
	ldrb r0, [r6]
	movs r1, #0xe3
	ands r1, r0
	movs r2, #7
	adds r0, r5, #0
	ands r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	strb r1, [r6]
	movs r4, #3
	ands r4, r1
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl func_080A0AD4
	cmp r4, r0
	blt .L080A21C8
	ldr r0, [r7, #0x2c]
	adds r1, r5, #0
	bl func_080A0AD4
	ldrb r2, [r6]
	movs r1, #0xfc
	ands r1, r2
	subs r0, #1
	adds r1, r1, r0
	strb r1, [r6]
	b .L080A21C8
.L080A21C4:
	adds r5, r5, r4
	b .L080A215C
.L080A21C8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A2154

	THUMB_FUNC_START func_080A21D0
func_080A21D0: @ 0x080A21D0
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x30]
	str r0, [r4, #0x34]
	adds r2, r4, #0
	adds r2, #0x39
	ldrb r1, [r2]
	movs r0, #0xfc
	ands r0, r1
	movs r1, #0xe3
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl func_080A0B44
	bl func_080A1B6C
	adds r1, r4, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	bl func_080A1F68
	adds r0, r4, #0
	bl func_080A204C
	adds r0, r4, #0
	bl func_080A207C
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl func_080A2154
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A21D0

	THUMB_FUNC_START func_080A221C
func_080A221C: @ 0x080A221C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r3, .L080A2270  @ gPal+0x380
	adds r5, r3, #0
	adds r5, #0x20
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0xf8
	lsls r7, r7, #2
	movs r6, #0xf8
	lsls r6, r6, #7
	movs r4, #0xf
	movs r0, #0x1f
	mov ip, r0
.L080A223A:
	ldrh r2, [r3]
	mov r1, ip
	ands r1, r2
	lsrs r1, r1, #1
	mov r0, r8
	ands r1, r0
	adds r0, r7, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r7
	adds r1, r1, r0
	adds r0, r6, #0
	ands r0, r2
	lsrs r0, r0, #1
	ands r0, r6
	adds r1, r1, r0
	strh r1, [r5]
	adds r5, #2
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bge .L080A223A
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2270: .4byte gPal+0x380

	THUMB_FUNC_END func_080A221C

	THUMB_FUNC_START func_080A2274
func_080A2274: @ 0x080A2274
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, .L080A2418  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl SetupBackgrounds
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r3, #1
	orrs r0, r3
	strb r0, [r4, #0xc]
	ldrb r0, [r4, #0x10]
	movs r2, #3
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r0, r2
	strb r0, [r4, #0x18]
	bl ResetText
	bl InitIcons
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	bl ApplyUnitSpritePalettes
	bl func_080A221C
	movs r0, #0xd
	bl ApplyIconPalettes
	adds r0, r5, #0
	bl StartGreenText
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080A2340
	ldr r2, .L080A241C  @ gPlaySt
	adds r2, #0x40
	ldrb r1, [r2]
	movs r0, #0x61
	negs r0, r0
	ands r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	movs r0, #1
	bl func_080AD594
	adds r1, r5, #0
	adds r1, #0x3a
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A2340
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl func_080AD51C
.L080A2340:
	movs r0, #0
	movs r1, #4
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #4
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	bl RestartScreenMenuScrollingBg
	movs r0, #0x80
	lsls r0, r0, #7
	movs r1, #5
	bl func_08098C3C
	ldr r0, .L080A2420  @ gUnknown_08A1DC1C
	ldr r4, .L080A2424  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080A2428  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r4, .L080A242C  @ gCharacterData
	ldr r0, [r5, #0x2c]
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r4
	ldrh r2, [r0, #6]
	ldr r1, .L080A2430  @ gBg0Tm+0x44
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	bl PutFace80x72
	adds r0, r5, #0
	bl func_080A20FC
	adds r0, r5, #0
	bl func_080A1E7C
	ldr r0, .L080A2434  @ gUnknown_08A1DD0C
	ldr r1, .L080A2438  @ 0x06017800
	bl Decompress
	ldr r0, .L080A243C  @ gUnknown_08A1E0D8
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080A2440  @ gUnknown_08A1D79C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080A2444  @ func_080A1B90
	adds r1, r5, #0
	bl StartParallelWorker
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2418: .4byte gDispIo
.L080A241C: .4byte gPlaySt
.L080A2420: .4byte gUnknown_08A1DC1C
.L080A2424: .4byte gBuf
.L080A2428: .4byte gBg1Tm
.L080A242C: .4byte gCharacterData
.L080A2430: .4byte gBg0Tm+0x44
.L080A2434: .4byte gUnknown_08A1DD0C
.L080A2438: .4byte 0x06017800
.L080A243C: .4byte gUnknown_08A1E0D8
.L080A2440: .4byte gUnknown_08A1D79C
.L080A2444: .4byte func_080A1B90

	THUMB_FUNC_END func_080A2274

	THUMB_FUNC_START func_080A2448
func_080A2448: @ 0x080A2448
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, .L080A247C  @ gKeySt
	ldr r1, [r0]
	ldrh r3, [r1, #8]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L080A2484
	ldr r0, .L080A2480  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A2470
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A2470:
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b .L080A25EA
	.align 2, 0
.L080A247C: .4byte gKeySt
.L080A2480: .4byte gPlaySt
.L080A2484:
	ldrh r2, [r1, #6]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq .L080A249A
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	b .L080A25EA
.L080A249A:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080A24AE
	adds r0, r6, #0
	movs r1, #5
	bl Proc_Goto
	b .L080A25EA
.L080A24AE:
	adds r0, r6, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080A24BE
	b .L080A25EA
.L080A24BE:
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080A24CA
	b .L080A25D0
.L080A24CA:
	adds r1, r6, #0
	adds r1, #0x39
	ldrb r7, [r1]
	movs r0, #1
	ands r0, r3
	adds r5, r1, #0
	cmp r0, #0
	beq .L080A24FC
	ldr r0, .L080A24F8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A24EC
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A24EC:
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	b .L080A25EA
	.align 2, 0
.L080A24F8: .4byte gPlaySt
.L080A24FC:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq .L080A2516
	movs r1, #3
	ands r1, r7
	cmp r1, #0
	beq .L080A2516
	movs r0, #0xfc
	ands r0, r7
	adds r0, #0xff
	adds r0, r0, r1
	strb r0, [r5]
.L080A2516:
	ldr r0, .L080A25C8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080A2550
	ldrb r1, [r5]
	movs r0, #3
	mov r8, r0
	mov r4, r8
	ands r4, r1
	ldr r0, [r6, #0x2c]
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	bl func_080A0AD4
	subs r0, #1
	cmp r4, r0
	bge .L080A2550
	ldrb r0, [r5]
	movs r1, #0xfc
	ands r1, r0
	adds r1, #1
	mov r2, r8
	ands r2, r0
	adds r1, r1, r2
	strb r1, [r5]
.L080A2550:
	ldr r4, .L080A25C8  @ gKeySt
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080A2572
	ldrb r1, [r5]
	lsrs r1, r1, #2
	movs r0, #7
	ands r1, r0
	subs r1, #1
	movs r2, #1
	negs r2, r2
	adds r0, r6, #0
	bl func_080A2154
.L080A2572:
	ldr r0, [r4]
	ldrh r1, [r0, #6]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A2590
	ldrb r1, [r5]
	lsrs r1, r1, #2
	movs r0, #7
	ands r1, r0
	adds r1, #1
	adds r0, r6, #0
	movs r2, #1
	bl func_080A2154
.L080A2590:
	ldrb r1, [r5]
	cmp r7, r1
	beq .L080A25EA
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl func_080AD51C
	ldr r0, .L080A25CC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A25EA
	movs r0, #0x65
	bl m4aSongNumStart
	b .L080A25EA
	.align 2, 0
.L080A25C8: .4byte gKeySt
.L080A25CC: .4byte gPlaySt
.L080A25D0:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq .L080A25EA
	ldr r0, .L080A25F4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A25EA
	movs r0, #0x6c
	bl m4aSongNumStart
.L080A25EA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A25F4: .4byte gPlaySt

	THUMB_FUNC_END func_080A2448

	THUMB_FUNC_START func_080A25F8
func_080A25F8: @ 0x080A25F8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	ldr r3, .L080A26A4  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	bl InitFaces
	bl ResetText
	bl InitIcons
	bl LoadLegacyUiFrameGraphics
	bl LoadObjUiGfx
	ldr r0, [r5, #0x2c]
	bl func_080A0B44
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [r5, #0x2c]
	adds r5, #0x39
	ldrb r1, [r5]
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	bl func_080A0B20
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldrb r0, [r5]
	movs r2, #3
	ands r2, r0
	adds r2, #1
	adds r0, r4, #0
	bl StartSupportViewerTalk
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A26A4: .4byte gDispIo

	THUMB_FUNC_END func_080A25F8

	THUMB_FUNC_START func_080A26A8
func_080A26A8: @ 0x080A26A8
	push {r4, r5, lr}
	sub sp, #4
	adds r0, #0x3a
	movs r5, #0
	strb r5, [r0]
	bl HidePrepScreenHandCursor
	ldr r2, .L080A2728  @ gDispIo
	ldrb r1, [r2, #0xc]
	movs r3, #4
	negs r3, r3
	adds r0, r3, #0
	ands r0, r1
	movs r4, #1
	orrs r0, r4
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x10]
	ldrb r1, [r2, #0x14]
	adds r0, r3, #0
	ands r0, r1
	orrs r0, r4
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r3, r0
	strb r3, [r2, #0x18]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
	bl func_080A1AE4
	ldr r0, .L080A272C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A271E
	movs r0, #0xc8
	bl m4aSongNumStart
.L080A271E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2728: .4byte gDispIo
.L080A272C: .4byte gPlaySt

	THUMB_FUNC_END func_080A26A8

	THUMB_FUNC_START func_080A2730
func_080A2730: @ 0x080A2730
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	movs r4, #0
	ldr r0, .L080A27A0  @ gBg2Tm
	mov sl, r0
.L080A2744:
	ldr r2, [sp]
	adds r1, r4, r2
	cmp r1, #0x1d
	bhi .L080A27B4
	adds r3, r4, #1
	mov r9, r3
	ldr r2, .L080A27A4  @ gUnknown_020136F4
	lsls r1, r1, #1
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r2, r3
	adds r0, r0, r1
	mov ip, r0
	adds r7, r1, r2
	adds r6, r1, #0
	lsls r0, r4, #1
	ldr r4, .L080A27A8  @ gBg0Tm
	adds r5, r0, r4
	adds r3, r0, #0
	ldr r0, .L080A27AC  @ gBg1Tm
	mov r8, r0
	movs r4, #0x13
.L080A2770:
	ldrh r0, [r7]
	strh r0, [r5]
	mov r2, r8
	adds r1, r3, r2
	ldr r2, .L080A27B0  @ gUnknown_02013EF4
	adds r0, r6, r2
	ldrh r0, [r0]
	strh r0, [r1]
	mov r0, sl
	adds r1, r3, r0
	mov r2, ip
	ldrh r0, [r2]
	strh r0, [r1]
	movs r0, #0x40
	add ip, r0
	adds r7, #0x40
	adds r6, #0x40
	adds r5, #0x40
	adds r3, #0x40
	subs r4, #1
	cmp r4, #0
	bge .L080A2770
	b .L080A27DC
	.align 2, 0
.L080A27A0: .4byte gBg2Tm
.L080A27A4: .4byte gUnknown_020136F4
.L080A27A8: .4byte gBg0Tm
.L080A27AC: .4byte gBg1Tm
.L080A27B0: .4byte gUnknown_02013EF4
.L080A27B4:
	adds r1, r4, #1
	mov r9, r1
	movs r3, #0
	lsls r0, r4, #1
	mov r4, sl
	adds r2, r0, r4
	ldr r4, .L080A27F8  @ gBg1Tm
	adds r1, r0, r4
	ldr r4, .L080A27FC  @ gBg0Tm
	adds r0, r0, r4
	movs r4, #0x13
.L080A27CA:
	strh r3, [r0]
	strh r3, [r1]
	strh r3, [r2]
	adds r2, #0x40
	adds r1, #0x40
	adds r0, #0x40
	subs r4, #1
	cmp r4, #0
	bge .L080A27CA
.L080A27DC:
	mov r4, r9
	cmp r4, #0x1d
	ble .L080A2744
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A27F8: .4byte gBg1Tm
.L080A27FC: .4byte gBg0Tm

	THUMB_FUNC_END func_080A2730

	THUMB_FUNC_START func_080A2800
func_080A2800: @ 0x080A2800
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0x3a
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldrb r0, [r6]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	negs r0, r5
	lsls r0, r0, #3
	str r0, [r7, #0x30]
	adds r0, r5, #0
	bl func_080A2730
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r4
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	ldrb r0, [r6]
	cmp r0, #0xa
	bne .L080A2864
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, [r7, #0x2c]
	bl func_080A0AA0
	str r0, [r7, #0x2c]
.L080A2864:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A2800

	THUMB_FUNC_START func_080A286C
func_080A286C: @ 0x080A286C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r7, r8
	adds r7, #0x3a
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	adds r6, r0, #0
	movs r5, #8
	subs r6, r5, r6
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	subs r5, r5, r6
	lsls r5, r5, #3
	mov r0, r8
	str r5, [r0, #0x30]
	subs r6, #8
	adds r0, r6, #0
	bl func_080A2730
	movs r1, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r0, #1
	adds r2, r4, #0
	movs r3, #0
	bl SetBlendConfig
	ldrb r0, [r7]
	cmp r0, #0xa
	bne .L080A28D4
	mov r0, r8
	bl Proc_Break
.L080A28D4:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A286C

	THUMB_FUNC_START func_080A28E0
func_080A28E0: @ 0x080A28E0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0x3a
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	ldrb r0, [r6]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r5, #8
	subs r5, r5, r0
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	lsls r0, r5, #3
	str r0, [r7, #0x30]
	negs r5, r5
	adds r0, r5, #0
	bl func_080A2730
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r4
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	ldrb r0, [r6]
	cmp r0, #0xa
	bne .L080A2944
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, [r7, #0x2c]
	bl func_080A0AC0
	str r0, [r7, #0x2c]
.L080A2944:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A28E0

	THUMB_FUNC_START func_080A294C
func_080A294C: @ 0x080A294C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	mov r7, r8
	adds r7, #0x3a
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	movs r4, #0xa
	subs r4, r4, r0
	lsls r0, r4, #3
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	adds r5, r0, #0
	movs r6, #8
	subs r5, r6, r5
	lsls r0, r4, #4
	muls r0, r4, r0
	movs r1, #0x64
	bl __divsi3
	movs r4, #0x10
	subs r4, r4, r0
	adds r0, r5, #0
	subs r0, #8
	lsls r0, r0, #3
	mov r1, r8
	str r0, [r1, #0x30]
	subs r6, r6, r5
	adds r0, r6, #0
	bl func_080A2730
	movs r1, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r0, #1
	adds r2, r4, #0
	movs r3, #0
	bl SetBlendConfig
	ldrb r0, [r7]
	cmp r0, #0xa
	bne .L080A29B6
	mov r0, r8
	bl Proc_Break
.L080A29B6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A294C

	THUMB_FUNC_START func_080A29C0
func_080A29C0: @ 0x080A29C0
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	adds r4, r0, #0
	bl InitFaces
	bl ResetText
	bl InitIcons
	ldr r6, .L080A2A94  @ gBg0Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r0, .L080A2A98  @ gBg1Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r0, .L080A2A9C  @ gBg2Tm
	movs r1, #0
	bl TmFill
	adds r2, r4, #0
	adds r2, #0x39
	ldrb r1, [r2]
	movs r0, #0xfc
	ands r0, r1
	movs r1, #0
	mov r9, r1
	movs r1, #0xe3
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r4, #0x2c]
	bl func_080A0B44
	bl func_080A1B6C
	adds r1, r4, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	bl func_080A1F68
	adds r0, r4, #0
	bl func_080A204C
	adds r0, r4, #0
	bl func_080A207C
	adds r0, r4, #0
	movs r1, #0
	movs r2, #1
	bl func_080A2154
	ldr r0, .L080A2AA0  @ gUnknown_08A1DC1C
	ldr r5, .L080A2AA4  @ gBuf
	adds r1, r5, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #5
	mov r0, r8
	adds r1, r5, #0
	bl TmApplyTsa_thm
	ldr r5, .L080A2AA8  @ gCharacterData
	ldr r0, [r4, #0x2c]
	bl func_080A0B44
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r5
	ldrh r2, [r0, #6]
	adds r6, #0x44
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #2
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r6, #0
	bl PutFace80x72
	adds r0, r4, #0
	bl func_080A20FC
	adds r0, r4, #0
	bl func_080A1E7C
	bl func_080A1AE4
	adds r4, #0x3a
	mov r0, r9
	strb r0, [r4]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2A94: .4byte gBg0Tm
.L080A2A98: .4byte gBg1Tm
.L080A2A9C: .4byte gBg2Tm
.L080A2AA0: .4byte gUnknown_08A1DC1C
.L080A2AA4: .4byte gBuf
.L080A2AA8: .4byte gCharacterData

	THUMB_FUNC_END func_080A29C0

	THUMB_FUNC_START func_080A2AAC
func_080A2AAC: @ 0x080A2AAC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, .L080A2B58  @ gDispIo
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	movs r4, #1
	orrs r0, r4
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	movs r3, #3
	orrs r0, r3
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	orrs r1, r4
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r3
	strb r0, [r2, #0x18]
	movs r0, #1
	movs r1, #0
	movs r2, #0xc
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080A2B50
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A2B50
	adds r0, r5, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0xc4
	lsrs r1, r1, #2
	movs r2, #7
	ands r1, r2
	lsls r1, r1, #4
	adds r1, #0x18
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #1
	bl func_080AD51C
	adds r1, r5, #0
	adds r1, #0x3a
	movs r0, #0xff
	strb r0, [r1]
.L080A2B50:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2B58: .4byte gDispIo

	THUMB_FUNC_END func_080A2AAC

	THUMB_FUNC_START func_080A2B5C
func_080A2B5C: @ 0x080A2B5C
	push {r4, lr}
	adds r4, r0, #0
	bl EndAllProcChildren
	bl EndScreenMenuScrollingBg
	movs r0, #0
	bl EndFaceById
	ldr r0, [r4, #0x2c]
	bl func_080A1A90
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A2B5C

	THUMB_FUNC_START func_080A2B7C
func_080A2B7C: @ 0x080A2B7C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x39
	ldrb r3, [r1]
	lsrs r1, r3, #2
	movs r2, #7
	ands r1, r2
	movs r2, #3
	ands r2, r3
	adds r2, #1
	bl func_080A1AAC
	adds r4, #0x3e
	movs r3, #0
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A2BB8
	movs r1, #0x80
	lsls r1, r1, #1
	str r3, [sp]
	movs r0, #9
	movs r2, #0x80
	movs r3, #0x10
	bl func_080029E8
	b .L080A2BC8
.L080A2BB8:
	ldrb r0, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	adds r1, r2, #0
	movs r3, #0x10
	bl func_080029E8
.L080A2BC8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A2B7C

	THUMB_FUNC_START func_080A2BD0
func_080A2BD0: @ 0x080A2BD0
	push {lr}
	sub sp, #4
	adds r0, #0x3e
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080A2BEE
	movs r2, #0x80
	lsls r2, r2, #1
	str r0, [sp]
	movs r0, #9
	movs r1, #0x80
	movs r3, #0x10
	bl func_080029E8
	b .L080A2C00
.L080A2BEE:
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	str r0, [sp]
	movs r0, #9
	adds r1, r2, #0
	movs r3, #0x10
	bl func_080029E8
.L080A2C00:
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A2BD0

	THUMB_FUNC_START func_080A2C08
func_080A2C08: @ 0x080A2C08
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L080A2C28  @ gUnknown_08A19880
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r1, #0x38
	strb r4, [r1]
	str r5, [r0, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2C28: .4byte gUnknown_08A19880

	THUMB_FUNC_END func_080A2C08

	THUMB_FUNC_START func_080A2C2C
func_080A2C2C: @ 0x080A2C2C
	ldr r0, .L080A2C34  @ gBWLDataArray
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080A2C34: .4byte gBWLDataArray

	THUMB_FUNC_END func_080A2C2C

	THUMB_FUNC_START func_080A2C38
func_080A2C38: @ 0x080A2C38
	bx lr

	THUMB_FUNC_END func_080A2C38

	THUMB_FUNC_START SramInit
SramInit: @ 0x080A2C3C
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, .L080A2C94  @ 0x12345678
	str r0, [sp]
	ldr r0, .L080A2C98  @ 0x87654321
	str r0, [sp, #4]
	bl SetSramFastFunc
	ldr r2, .L080A2C9C  @ 0x04000200
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r5, .L080A2CA0  @ gUnknown_08A1FAF4
	ldr r1, [r5]
	ldr r4, .L080A2CA4  @ 0x000073A0
	adds r1, r1, r4
	mov r0, sp
	movs r2, #4
	bl WriteSramFast
	ldr r2, .L080A2CA8  @ ReadSramFast
	ldr r0, [r5]
	adds r0, r0, r4
	add r1, sp, #4
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	ldr r3, .L080A2CAC  @ gBoolSramWorking
	movs r2, #0
	ldr r1, [sp, #4]
	ldr r0, [sp]
	cmp r1, r0
	bne .L080A2C88
	movs r2, #1
.L080A2C88:
	strb r2, [r3]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2C94: .4byte 0x12345678
.L080A2C98: .4byte 0x87654321
.L080A2C9C: .4byte 0x04000200
.L080A2CA0: .4byte gUnknown_08A1FAF4
.L080A2CA4: .4byte 0x000073A0
.L080A2CA8: .4byte ReadSramFast
.L080A2CAC: .4byte gBoolSramWorking

	THUMB_FUNC_END SramInit

	THUMB_FUNC_START IsSramWorking
IsSramWorking: @ 0x080A2CB0
	ldr r0, .L080A2CBC  @ gBoolSramWorking
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
.L080A2CBC: .4byte gBoolSramWorking

	THUMB_FUNC_END IsSramWorking

	THUMB_FUNC_START func_080A2CC0
func_080A2CC0: @ 0x080A2CC0
	push {r4, r5, r6, lr}
	sub sp, #0x40
	movs r1, #1
	negs r1, r1
	add r0, sp, #0x3c
.L080A2CCA:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge .L080A2CCA
	movs r4, #0
	ldr r6, .L080A2CF4  @ gUnknown_08A1FAF4
	ldr r5, .L080A2CF8  @ 0x000001FF
.L080A2CD8:
	lsls r0, r4, #6
	ldr r1, [r6]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x40
	bl WriteAndVerifySramFast
	adds r4, #1
	cmp r4, r5
	ble .L080A2CD8
	add sp, #0x40
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2CF4: .4byte gUnknown_08A1FAF4
.L080A2CF8: .4byte 0x000001FF

	THUMB_FUNC_END func_080A2CC0

	THUMB_FUNC_START ComputeChecksum16
ComputeChecksum16: @ 0x080A2CFC
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	movs r4, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge .L080A2D1C
.L080A2D0E:
	ldrh r0, [r2]
	adds r3, r3, r0
	eors r4, r0
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne .L080A2D0E
.L080A2D1C:
	adds r0, r3, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END ComputeChecksum16

	THUMB_FUNC_START LoadGeneralGameMetadata
LoadGeneralGameMetadata: @ 0x080A2D28
	push {r4, r5, lr}
	sub sp, #0x64
	adds r5, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A2D9C
	cmp r5, #0
	bne .L080A2D3E
	mov r5, sp
.L080A2D3E:
	ldr r1, .L080A2D88  @ ReadSramFast
	ldr r0, .L080A2D8C  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0x64
	bl _call_via_r3
	ldr r1, .L080A2D90  @ gUnknown_08205C9C
	adds r0, r5, #0
	bl StringEquals
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A2D9C
	ldr r1, [r5, #8]
	ldr r0, .L080A2D94  @ 0x00040624
	cmp r1, r0
	bne .L080A2D9C
	ldrh r1, [r5, #0xc]
	ldr r0, .L080A2D98  @ 0x0000200A
	cmp r1, r0
	bne .L080A2D9C
	adds r4, r5, #0
	adds r4, #0x60
	adds r0, r5, #0
	movs r1, #0x50
	bl ComputeChecksum16
	ldrh r1, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne .L080A2D9C
	movs r0, #1
	b .L080A2D9E
	.align 2, 0
.L080A2D88: .4byte ReadSramFast
.L080A2D8C: .4byte gUnknown_08A1FAF4
.L080A2D90: .4byte gUnknown_08205C9C
.L080A2D94: .4byte 0x00040624
.L080A2D98: .4byte 0x0000200A
.L080A2D9C:
	movs r0, #0
.L080A2D9E:
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END LoadGeneralGameMetadata

	THUMB_FUNC_START SaveGeneralGameMetadata
SaveGeneralGameMetadata: @ 0x080A2DA8
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x50
	bl ComputeChecksum16
	adds r1, r4, #0
	adds r1, #0x60
	strh r0, [r1]
	ldr r0, .L080A2DCC  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	adds r0, r4, #0
	movs r2, #0x64
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2DCC: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_END SaveGeneralGameMetadata

	THUMB_FUNC_START SaveGeneralGameMetadataNoChecksum
SaveGeneralGameMetadataNoChecksum: @ 0x080A2DD0
	push {lr}
	ldr r1, .L080A2DE0  @ gUnknown_08A1FAF4
	ldr r1, [r1]
	movs r2, #0x64
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
.L080A2DE0: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_END SaveGeneralGameMetadataNoChecksum

	THUMB_FUNC_START InitSaveGeneralGameMetadata
InitSaveGeneralGameMetadata: @ 0x080A2DE4
	push {r4, r5, lr}
	sub sp, #0x64
	bl func_080A2CC0
	ldr r1, .L080A2E9C  @ gUnknown_08205C9C
	mov r0, sp
	bl StringCopy
	ldr r0, .L080A2EA0  @ 0x00040624
	str r0, [sp, #8]
	mov r1, sp
	movs r4, #0
	movs r5, #0
	ldr r0, .L080A2EA4  @ 0x0000200A
	strh r0, [r1, #0xc]
	mov r2, sp
	ldrb r1, [r2, #0xe]
	movs r3, #2
	negs r3, r3
	adds r0, r3, #0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #3
	negs r1, r1
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #5
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #9
	negs r1, r1
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #0x11
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #0xe]
	movs r1, #0x21
	negs r1, r1
	ands r1, r0
	strb r1, [r2, #0xe]
	movs r0, #0x41
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #0xe]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #0xe]
	ldrb r0, [r1, #0xf]
	ands r3, r0
	strb r3, [r1, #0xf]
	mov r0, sp
	strb r4, [r0, #0xf]
	strh r5, [r0, #0x10]
	strh r5, [r0, #0x12]
	adds r0, #0x63
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	add r3, sp, #0x20
	add r4, sp, #0x40
	add r1, sp, #0x14
	movs r2, #0
	subs r0, #0x43
.L080A2E66:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge .L080A2E66
	adds r1, r3, #0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1f
.L080A2E76:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge .L080A2E76
	adds r1, r4, #0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1f
.L080A2E86:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge .L080A2E86
	mov r0, sp
	bl SaveGeneralGameMetadata
	add sp, #0x64
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2E9C: .4byte gUnknown_08205C9C
.L080A2EA0: .4byte 0x00040624
.L080A2EA4: .4byte 0x0000200A

	THUMB_FUNC_END InitSaveGeneralGameMetadata

	THUMB_FUNC_START func_080A2EA8
func_080A2EA8: @ 0x080A2EA8
	push {r4, lr}
	sub sp, #4
	ldr r4, .L080A2ECC  @ gBuf
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r2, .L080A2ED0  @ 0x010000A2
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	adds r0, r4, #0
	bl SaveBonusContentData
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A2ECC: .4byte gBuf
.L080A2ED0: .4byte 0x010000A2

	THUMB_FUNC_END func_080A2EA8

	THUMB_FUNC_START GetSaveDataOffsetPointer
GetSaveDataOffsetPointer: @ 0x080A2ED4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, .L080A2EE4  @ gUnknown_08A1FAF4
	ldr r1, [r1]
	adds r1, r1, r0
	adds r0, r1, #0
	bx lr
	.align 2, 0
.L080A2EE4: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_END GetSaveDataOffsetPointer

	THUMB_FUNC_START func_080A2EE8
func_080A2EE8: @ 0x080A2EE8
	ldr r1, .L080A2EF4  @ gUnknown_08A1FAF4
	ldr r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bx lr
	.align 2, 0
.L080A2EF4: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_END func_080A2EE8

	THUMB_FUNC_START SaveMetadata_Load
SaveMetadata_Load: @ 0x080A2EF8
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne .L080A2F06
	mov r4, sp
.L080A2F06:
	ldr r2, .L080A2F34  @ ReadSramFast
	ldr r0, .L080A2F38  @ gUnknown_08A1FAF4
	lsls r1, r5, #4
	adds r1, #0x64
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0x10
	bl _call_via_r3
	ldrh r1, [r4, #4]
	ldr r0, .L080A2F3C  @ 0x0000200A
	cmp r1, r0
	bne .L080A2F88
	cmp r5, #6
	bhi .L080A2F88
	lsls r0, r5, #2
	ldr r1, .L080A2F40  @ .L080A2F44
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080A2F34: .4byte ReadSramFast
.L080A2F38: .4byte gUnknown_08A1FAF4
.L080A2F3C: .4byte 0x0000200A
.L080A2F40: .4byte .L080A2F44
.L080A2F44: @ jump table
	.4byte .L080A2F60 @ case 0
	.4byte .L080A2F60 @ case 1
	.4byte .L080A2F60 @ case 2
	.4byte .L080A2F60 @ case 3
	.4byte .L080A2F60 @ case 4
	.4byte .L080A2F68 @ case 5
	.4byte .L080A2F70 @ case 6
.L080A2F60:
	ldr r1, .L080A2F64  @ 0x00040624
	b .L080A2F72
	.align 2, 0
.L080A2F64: .4byte 0x00040624
.L080A2F68:
	ldr r1, .L080A2F6C  @ 0x00020112
	b .L080A2F72
	.align 2, 0
.L080A2F6C: .4byte 0x00020112
.L080A2F70:
	ldr r1, .L080A2F84  @ 0x00020223
.L080A2F72:
	ldr r0, [r4]
	cmp r0, r1
	bne .L080A2F88
	adds r0, r4, #0
	bl SaveMetadata_VerifyChecksum
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b .L080A2F8A
	.align 2, 0
.L080A2F84: .4byte 0x00020223
.L080A2F88:
	movs r0, #0
.L080A2F8A:
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END SaveMetadata_Load

	THUMB_FUNC_START SaveMetadata_Save
SaveMetadata_Save: @ 0x080A2F94
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	movs r7, #0
	movs r5, #0
	ldr r0, .L080A2FC4  @ 0x0000200A
	strh r0, [r4, #4]
	adds r0, r6, #0
	bl GetSaveTargetAddress
	strh r0, [r4, #8]
	cmp r6, #6
	bgt .L080A301A
	ldrb r0, [r4, #6]
	cmp r0, #2
	beq .L080A2FE8
	cmp r0, #2
	bgt .L080A2FC8
	cmp r0, #0
	beq .L080A2FD2
	cmp r0, #1
	beq .L080A2FDC
	b .L080A301A
	.align 2, 0
.L080A2FC4: .4byte 0x0000200A
.L080A2FC8:
	cmp r0, #3
	beq .L080A2FF4
	cmp r0, #0xff
	beq .L080A2FFC
	b .L080A301A
.L080A2FD2:
	ldr r0, .L080A2FD8  @ 0x00000DC8
	strh r0, [r4, #0xa]
	b .L080A3002
	.align 2, 0
.L080A2FD8: .4byte 0x00000DC8
.L080A2FDC:
	ldr r0, .L080A2FE4  @ 0x00001F78
	strh r0, [r4, #0xa]
	b .L080A3002
	.align 2, 0
.L080A2FE4: .4byte 0x00001F78
.L080A2FE8:
	ldr r0, .L080A2FF0  @ 0x00000874
	strh r0, [r4, #0xa]
	b .L080A3002
	.align 2, 0
.L080A2FF0: .4byte 0x00000874
.L080A2FF4:
	movs r0, #0xc0
	lsls r0, r0, #4
	strh r0, [r4, #0xa]
	b .L080A3002
.L080A2FFC:
	strh r5, [r4, #0xa]
	strh r5, [r4, #8]
	strh r5, [r4, #4]
.L080A3002:
	adds r0, r4, #0
	bl SaveMetadata_ComputeChecksum
	ldr r0, .L080A3020  @ gUnknown_08A1FAF4
	lsls r2, r6, #4
	adds r2, #0x64
	ldr r1, [r0]
	adds r1, r1, r2
	adds r0, r4, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
.L080A301A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3020: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_END SaveMetadata_Save

	THUMB_FUNC_START func_080A3024
func_080A3024: @ 0x080A3024
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	cmp r4, #6
	bgt .L080A3050
	add r0, sp, #0x10
	ldr r2, .L080A3058  @ 0x0000FFFF
	adds r1, r2, #0
	strh r1, [r0]
	ldr r2, .L080A305C  @ 0x01000008
	mov r1, sp
	bl CpuSet
	ldr r1, .L080A3060  @ gUnknown_08A1FAF4
	lsls r0, r4, #4
	adds r0, #0x64
	ldr r1, [r1]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x10
	bl WriteAndVerifySramFast
.L080A3050:
	add sp, #0x14
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3058: .4byte 0x0000FFFF
.L080A305C: .4byte 0x01000008
.L080A3060: .4byte gUnknown_08A1FAF4

	THUMB_FUNC_END func_080A3024

	THUMB_FUNC_START GetSaveTargetAddress
GetSaveTargetAddress: @ 0x080A3064
	push {lr}
	cmp r0, #6
	bhi .L080A310C
	lsls r0, r0, #2
	ldr r1, .L080A3074  @ .L080A3078
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080A3074: .4byte .L080A3078
.L080A3078: @ jump table
	.4byte .L080A3094 @ case 0
	.4byte .L080A30A8 @ case 1
	.4byte .L080A30BC @ case 2
	.4byte .L080A30D0 @ case 3
	.4byte .L080A30DC @ case 4
	.4byte .L080A30F0 @ case 5
	.4byte .L080A3104 @ case 6
.L080A3094:
	ldr r0, .L080A30A0  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, .L080A30A4  @ 0x00003FC4
	adds r0, r0, r1
	b .L080A310E
	.align 2, 0
.L080A30A0: .4byte gUnknown_08A1FAF4
.L080A30A4: .4byte 0x00003FC4
.L080A30A8:
	ldr r0, .L080A30B4  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, .L080A30B8  @ 0x00004D8C
	adds r0, r0, r1
	b .L080A310E
	.align 2, 0
.L080A30B4: .4byte gUnknown_08A1FAF4
.L080A30B8: .4byte 0x00004D8C
.L080A30BC:
	ldr r0, .L080A30C8  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, .L080A30CC  @ 0x00005B54
	adds r0, r0, r1
	b .L080A310E
	.align 2, 0
.L080A30C8: .4byte gUnknown_08A1FAF4
.L080A30CC: .4byte 0x00005B54
.L080A30D0:
	ldr r0, .L080A30D8  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	adds r0, #0xd4
	b .L080A310E
	.align 2, 0
.L080A30D8: .4byte gUnknown_08A1FAF4
.L080A30DC:
	ldr r0, .L080A30E8  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, .L080A30EC  @ 0x0000204C
	adds r0, r0, r1
	b .L080A310E
	.align 2, 0
.L080A30E8: .4byte gUnknown_08A1FAF4
.L080A30EC: .4byte 0x0000204C
.L080A30F0:
	ldr r0, .L080A30FC  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r1, .L080A3100  @ 0x0000691C
	adds r0, r0, r1
	b .L080A310E
	.align 2, 0
.L080A30FC: .4byte gUnknown_08A1FAF4
.L080A3100: .4byte 0x0000691C
.L080A3104:
	ldr r0, .L080A3108  @ 0x0E007400
	b .L080A310E
	.align 2, 0
.L080A3108: .4byte 0x0E007400
.L080A310C:
	movs r0, #0
.L080A310E:
	pop {r1}
	bx r1

	THUMB_FUNC_END GetSaveTargetAddress

	THUMB_FUNC_START GetSaveSourceAddress
GetSaveSourceAddress: @ 0x080A3114
	push {lr}
	sub sp, #0x10
	adds r1, r0, #0
	mov r0, sp
	bl SaveMetadata_Load
	mov r0, sp
	ldrh r0, [r0, #8]
	bl GetSaveDataOffsetPointer
	add sp, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_END GetSaveSourceAddress

	THUMB_FUNC_START SaveLocalEventIndexes
SaveLocalEventIndexes: @ 0x080A3130
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetTemporaryFlagData
	adds r5, r0, #0
	bl GetTemporaryFlagDataSize
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveLocalEventIndexes

	THUMB_FUNC_START SaveGlobalEventIndexes
SaveGlobalEventIndexes: @ 0x080A3150
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetPermanentFlagData
	adds r5, r0, #0
	bl GetPermanentFlagDataSize
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveGlobalEventIndexes

	THUMB_FUNC_START LoadLocalEventIds
LoadLocalEventIds: @ 0x080A3170
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, .L080A3194  @ ReadSramFast
	bl GetTemporaryFlagData
	adds r5, r0, #0
	bl GetTemporaryFlagDataSize
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3194: .4byte ReadSramFast

	THUMB_FUNC_END LoadLocalEventIds

	THUMB_FUNC_START LoadPermanentEids
LoadPermanentEids: @ 0x080A3198
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, .L080A31BC  @ ReadSramFast
	bl GetPermanentFlagData
	adds r5, r0, #0
	bl GetPermanentFlagDataSize
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A31BC: .4byte ReadSramFast

	THUMB_FUNC_END LoadPermanentEids

	THUMB_FUNC_START LoadPermanentEidsIn
LoadPermanentEidsIn: @ 0x080A31C0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r4, .L080A31E0  @ ReadSramFast
	bl GetPermanentFlagDataSize
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r5, #0
	adds r1, r6, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A31E0: .4byte ReadSramFast

	THUMB_FUNC_END LoadPermanentEidsIn

	THUMB_FUNC_START SaveConvoyItems
SaveConvoyItems: @ 0x080A31E4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xb0
	mov r8, r0
	bl GetConvoyItemArray
	adds r6, r0, #0
	add r5, sp, #0x64
	movs r0, #0
	mov ip, r0
	movs r7, #0
.L080A31FC:
	mov r0, sp
	adds r1, r0, r7
	ldrh r0, [r6]
	strb r0, [r1]
	ldrh r0, [r6]
	lsrs r4, r0, #8
	movs r0, #0x3f
	ands r4, r0
	movs r3, #7
	mov r0, ip
	ands r3, r0
	ldr r0, .L080A3264  @ gUnknown_08205CA4
	adds r0, r3, r0
	ldrb r2, [r5]
	ldrb r1, [r0]
	ands r1, r2
	adds r0, r4, #0
	lsls r0, r3
	orrs r1, r0
	strb r1, [r5]
	cmp r3, #1
	ble .L080A3242
	adds r5, #1
	cmp r3, #2
	ble .L080A3242
	ldr r0, .L080A3268  @ gUnknown_08205CAC
	adds r0, r3, r0
	ldrb r2, [r5]
	ldrb r1, [r0]
	ands r1, r2
	movs r0, #8
	subs r0, r0, r3
	asrs r4, r0
	orrs r1, r4
	strb r1, [r5]
.L080A3242:
	movs r0, #6
	add ip, r0
	adds r6, #2
	adds r7, #1
	cmp r7, #0x63
	ble .L080A31FC
	mov r0, sp
	mov r1, r8
	movs r2, #0xb0
	bl WriteAndVerifySramFast
	add sp, #0xb0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3264: .4byte gUnknown_08205CA4
.L080A3268: .4byte gUnknown_08205CAC

	THUMB_FUNC_END SaveConvoyItems

	THUMB_FUNC_START LoadConvoyItems
LoadConvoyItems: @ 0x080A326C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xb0
	ldr r1, .L080A32E0  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0xb0
	bl _call_via_r3
	bl GetConvoyItemArray
	adds r4, r0, #0
	add r5, sp, #0x64
	movs r7, #0
	movs r6, #0
.L080A3288:
	mov r1, sp
	adds r0, r1, r6
	ldrb r0, [r0]
	strh r0, [r4]
	movs r3, #7
	ands r3, r7
	ldrb r1, [r5]
	ldr r0, .L080A32E4  @ gUnknown_08205CA4
	adds r0, r3, r0
	ldrb r0, [r0]
	bics r1, r0
	asrs r1, r3
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	cmp r3, #1
	ble .L080A32C4
	adds r5, #1
	cmp r3, #2
	ble .L080A32C4
	ldrb r1, [r5]
	ldr r0, .L080A32E8  @ gUnknown_08205CAC
	adds r0, r3, r0
	ldrb r0, [r0]
	bics r1, r0
	movs r0, #8
	subs r0, r0, r3
	lsls r1, r0
	orrs r2, r1
	lsls r0, r2, #0x18
	lsrs r2, r0, #0x18
.L080A32C4:
	lsls r0, r2, #8
	ldrh r1, [r4]
	orrs r0, r1
	strh r0, [r4]
	adds r7, #6
	adds r4, #2
	adds r6, #1
	cmp r6, #0x63
	ble .L080A3288
	add sp, #0xb0
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A32E0: .4byte ReadSramFast
.L080A32E4: .4byte gUnknown_08205CA4
.L080A32E8: .4byte gUnknown_08205CAC

	THUMB_FUNC_END LoadConvoyItems

	THUMB_FUNC_START func_080A32EC
func_080A32EC: @ 0x080A32EC
	movs r0, #1
	bx lr

	THUMB_FUNC_END func_080A32EC

	THUMB_FUNC_START func_080A32F0
func_080A32F0: @ 0x080A32F0
	push {r4, lr}
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A3304
	movs r0, #0
	b .L080A3320
.L080A3300:
	movs r0, #1
	b .L080A3320
.L080A3304:
	movs r4, #0
.L080A3306:
	adds r0, r4, #0
	bl func_080A52DC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A3300
	adds r4, #1
	cmp r4, #2
	ble .L080A3306
	bl func_080A6A68
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
.L080A3320:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A32F0

	THUMB_FUNC_START func_080A3328
func_080A3328: @ 0x080A3328
	movs r0, #1
	bx lr

	THUMB_FUNC_END func_080A3328

	THUMB_FUNC_START func_080A332C
func_080A332C: @ 0x080A332C
	push {r4, lr}
	movs r0, #0
	bl GGM_IsAnyCharacterKnown
	adds r4, r0, #0
	bl func_080A3870
	ands r0, r4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A332C

	THUMB_FUNC_START func_080A3348
func_080A3348: @ 0x080A3348
	push {r4, lr}
	sub sp, #0x94
	movs r4, #0
	bl func_080A3870
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A335C
	movs r0, #0
	b .L080A33BC
.L080A335C:
	mov r0, sp
	bl VerifySavedRankingChecksum
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A33BA
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq .L080A3374
	movs r4, #1
.L080A3374:
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq .L080A3382
	movs r0, #2
	orrs r4, r0
.L080A3382:
	add r0, sp, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq .L080A3390
	movs r0, #4
	orrs r4, r0
.L080A3390:
	add r0, sp, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq .L080A339E
	movs r0, #8
	orrs r4, r0
.L080A339E:
	add r0, sp, #0x60
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq .L080A33AC
	movs r0, #0x10
	orrs r4, r0
.L080A33AC:
	add r0, sp, #0x78
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq .L080A33BA
	movs r0, #0x20
	orrs r4, r0
.L080A33BA:
	adds r0, r4, #0
.L080A33BC:
	add sp, #0x94
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3348

	THUMB_FUNC_START func_080A33C4
func_080A33C4: @ 0x080A33C4
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A33E2
	bl func_080A6C1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A33E2
	movs r0, #1
	b .L080A33E4
.L080A33E2:
	movs r0, #0
.L080A33E4:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A33C4

	THUMB_FUNC_START func_080A33EC
func_080A33EC: @ 0x080A33EC
	push {r4, lr}
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A33FE
	b .L080A3412
.L080A33FA:
	movs r0, #1
	b .L080A3414
.L080A33FE:
	movs r4, #0
.L080A3400:
	adds r0, r4, #0
	bl func_080A530C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A33FA
	adds r4, #1
	cmp r4, #2
	ble .L080A3400
.L080A3412:
	movs r0, #0
.L080A3414:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A33EC

	THUMB_FUNC_START func_080A341C
func_080A341C: @ 0x080A341C
	push {r4, lr}
	sub sp, #0x4c
	ldr r4, .L080A3458  @ gBuf
	adds r0, r4, #0
	bl LoadBonusContentData
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A345C
	movs r3, #0
	adds r1, r4, #0
	movs r2, #0xf
.L080A3434:
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080A3448
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne .L080A3442
	movs r3, #1
.L080A3442:
	cmp r0, #2
	bne .L080A3448
	movs r3, #1
.L080A3448:
	adds r1, #0x14
	subs r2, #1
	cmp r2, #0
	bge .L080A3434
	cmp r3, #0
	beq .L080A345C
	movs r0, #1
	b .L080A345E
	.align 2, 0
.L080A3458: .4byte gBuf
.L080A345C:
	movs r0, #0
.L080A345E:
	add sp, #0x4c
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A341C

	THUMB_FUNC_START func_080A3468
func_080A3468: @ 0x080A3468
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r7, .L080A3498  @ gUnknown_08A1FAF8
	ldr r0, [r7]
	cmp r0, #0
	beq .L080A34C4
	movs r6, #0
	adds r5, r7, #0
	adds r3, r7, #4
	adds r4, r7, #0
.L080A347C:
	ldr r0, [r4]
	cmp r0, r2
	bne .L080A3488
	ldr r0, [r3]
	cmp r0, r1
	bne .L080A3494
.L080A3488:
	ldr r0, [r4]
	cmp r0, r1
	bne .L080A349C
	ldr r0, [r3]
	cmp r0, r2
	beq .L080A34A2
.L080A3494:
	movs r0, #2
	b .L080A34C6
	.align 2, 0
.L080A3498: .4byte gUnknown_08A1FAF8
.L080A349C:
	ldr r0, [r3]
	cmp r0, r2
	bne .L080A34A8
.L080A34A2:
	ldr r0, [r4]
	cmp r0, r1
	bne .L080A3494
.L080A34A8:
	ldr r0, [r3]
	cmp r0, r1
	bne .L080A34B4
	ldr r0, [r5]
	cmp r0, r2
	bne .L080A3494
.L080A34B4:
	adds r6, #8
	adds r5, #8
	adds r3, #8
	adds r4, #8
	adds r0, r6, r7
	ldr r0, [r0]
	cmp r0, #0
	bne .L080A347C
.L080A34C4:
	movs r0, #3
.L080A34C6:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3468

	THUMB_FUNC_START func_080A34CC
func_080A34CC: @ 0x080A34CC
	push {r4, r5, r6, lr}
	movs r5, #0
	bl GetSupportTalkInfoList
	adds r4, r0, #0
	ldrh r0, [r4]
	ldr r1, .L080A34FC  @ 0x0000FFFF
	cmp r0, r1
	beq .L080A34F2
	adds r6, r1, #0
.L080A34E0:
	ldrh r0, [r4]
	ldrh r1, [r4, #2]
	bl func_080A3468
	adds r5, r5, r0
	adds r4, #0x10
	ldrh r0, [r4]
	cmp r0, r6
	bne .L080A34E0
.L080A34F2:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080A34FC: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080A34CC

	THUMB_FUNC_START func_080A3500
func_080A3500: @ 0x080A3500
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	adds r4, r0, #0
	movs r5, #0
	cmp r4, #0
	bne .L080A3514
	mov r4, sp
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080A3514:
	movs r0, #0
	adds r7, r4, #0
	adds r7, #0x20
	movs r6, #3
.L080A351C:
	movs r2, #0
	adds r4, r0, #1
	adds r0, r7, r0
	ldrb r3, [r0]
.L080A3524:
	lsls r1, r2, #1
	adds r0, r3, #0
	asrs r0, r1
	ands r0, r6
	adds r5, r5, r0
	adds r2, #1
	cmp r2, #3
	ble .L080A3524
	adds r0, r4, #0
	cmp r0, #0x1f
	ble .L080A351C
	adds r0, r5, #0
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3500

	THUMB_FUNC_START func_080A3544
func_080A3544: @ 0x080A3544
	push {r4, r5, lr}
	movs r0, #0
	bl func_080A3500
	adds r4, r0, #0
	bl func_080A34CC
	adds r5, r0, #0
	cmp r4, #0
	ble .L080A356A
	movs r0, #0x64
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	cmp r0, #0
	bne .L080A356A
	movs r4, #1
	b .L080A3576
.L080A356A:
	movs r0, #0x64
	muls r0, r4, r0
	adds r1, r5, #0
	bl __divsi3
	adds r4, r0, #0
.L080A3576:
	cmp r4, #0x64
	ble .L080A357C
	movs r4, #0x64
.L080A357C:
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3544

	THUMB_FUNC_START func_080A3584
func_080A3584: @ 0x080A3584
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x64
	mov r8, r0
	adds r7, r1, #0
	adds r5, r2, #0
	movs r6, #0
	bl GetSupportTalkInfoList
	adds r4, r0, #0
	cmp r5, #0
	bne .L080A35A6
	mov r5, sp
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080A35A6:
	adds r3, r5, #0
	adds r3, #0x20
	b .L080A35B0
.L080A35AC:
	adds r6, #1
	adds r4, #0x10
.L080A35B0:
	ldrh r1, [r4]
	ldr r0, .L080A35E8  @ 0x0000FFFF
	cmp r1, r0
	beq .L080A35CC
	cmp r1, r8
	bne .L080A35C2
	ldrh r0, [r4, #2]
	cmp r0, r7
	beq .L080A35CC
.L080A35C2:
	cmp r1, r7
	bne .L080A35AC
	ldrh r0, [r4, #2]
	cmp r0, r8
	bne .L080A35AC
.L080A35CC:
	asrs r0, r6, #2
	movs r2, #3
	ands r6, r2
	lsls r1, r6, #1
	adds r0, r3, r0
	ldrb r0, [r0]
	asrs r0, r1
	ands r0, r2
	add sp, #0x64
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080A35E8: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080A3584

	THUMB_FUNC_START func_080A35EC
func_080A35EC: @ 0x080A35EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x78
	str r0, [sp, #0x64]
	mov r8, r1
	str r2, [sp, #0x68]
	ldr r0, .L080A3630  @ gCharacterData
	mov sl, r0
	ldr r6, [sp, #0x64]
	subs r6, #1
	movs r0, #0x34
	adds r1, r6, #0
	muls r1, r0, r1
	mov r9, r1
	mov r0, sl
	adds r0, #0x2c
	adds r7, r1, r0
	ldr r0, [r7]
	cmp r0, #0
	bne .L080A3634
	movs r0, #0
	movs r3, #6
.L080A361E:
	mov r2, r8
	strb r0, [r2]
	movs r1, #1
	add r8, r1
	subs r3, #1
	cmp r3, #0
	bge .L080A361E
	b .L080A370A
	.align 2, 0
.L080A3630: .4byte gCharacterData
.L080A3634:
	movs r4, #0
	bl GetSupportTalkInfoList
	adds r5, r0, #0
	ldr r2, [sp, #0x68]
	cmp r2, #0
	bne .L080A364E
	mov r1, sp
	adds r0, r1, #0
	str r0, [sp, #0x68]
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080A364E:
	ldrh r0, [r5]
	ldr r1, .L080A36CC  @ 0x0000FFFF
	str r6, [sp, #0x74]
	cmp r0, r1
	beq .L080A36E8
	str r7, [sp, #0x70]
	mov r2, r9
	str r2, [sp, #0x6c]
.L080A365E:
	ldrh r0, [r5]
	ldr r1, [sp, #0x64]
	cmp r0, r1
	beq .L080A3678
	ldrh r0, [r5, #2]
	adds r2, r4, #1
	mov r9, r2
	movs r1, #0x10
	adds r1, r1, r5
	mov ip, r1
	ldr r2, [sp, #0x64]
	cmp r0, r2
	bne .L080A36DC
.L080A3678:
	asrs r1, r4, #2
	adds r0, r4, #0
	movs r2, #3
	ands r0, r2
	lsls r0, r0, #1
	mov sl, r0
	movs r3, #0
	ldr r2, [sp, #0x70]
	ldr r0, [r2]
	adds r4, #1
	mov r9, r4
	movs r2, #0x10
	adds r2, r2, r5
	mov ip, r2
	ldrb r0, [r0, #0x15]
	cmp r3, r0
	bge .L080A36DC
	ldr r0, .L080A36D0  @ gCharacterData+0x2C
	ldr r2, [sp, #0x6c]
	adds r6, r2, r0
	ldr r0, [sp, #0x68]
	adds r0, #0x20
	adds r7, r0, r1
.L080A36A6:
	ldr r4, [r6]
	adds r0, r4, r3
	ldrh r1, [r5]
	ldrb r2, [r0]
	cmp r1, r2
	beq .L080A36B8
	ldrh r0, [r5, #2]
	cmp r0, r2
	bne .L080A36D4
.L080A36B8:
	mov r0, r8
	adds r1, r0, r3
	ldrb r0, [r7]
	mov r2, sl
	asrs r0, r2
	movs r2, #3
	ands r0, r2
	strb r0, [r1]
	b .L080A36DC
	.align 2, 0
.L080A36CC: .4byte 0x0000FFFF
.L080A36D0: .4byte gCharacterData+0x2C
.L080A36D4:
	adds r3, #1
	ldrb r4, [r4, #0x15]
	cmp r3, r4
	blt .L080A36A6
.L080A36DC:
	mov r4, r9
	mov r5, ip
	ldrh r0, [r5]
	ldr r1, .L080A371C  @ 0x0000FFFF
	cmp r0, r1
	bne .L080A365E
.L080A36E8:
	movs r0, #0x34
	ldr r2, [sp, #0x74]
	muls r0, r2, r0
	ldr r1, .L080A3720  @ gCharacterData
	adds r1, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	ldrb r3, [r0, #0x15]
	cmp r3, #6
	bgt .L080A370A
	movs r1, #0
.L080A36FE:
	mov r2, r8
	adds r0, r2, r3
	strb r1, [r0]
	adds r3, #1
	cmp r3, #6
	ble .L080A36FE
.L080A370A:
	add sp, #0x78
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A371C: .4byte 0x0000FFFF
.L080A3720: .4byte gCharacterData

	THUMB_FUNC_END func_080A35EC

	THUMB_FUNC_START SGM_SetSupportLevelKnown
SGM_SetSupportLevelKnown: @ 0x080A3724
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	adds r7, r0, #0
	adds r5, r1, #0
	movs r6, #3
	ands r6, r2
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A379C
	movs r4, #0
	bl GetSupportTalkInfoList
	adds r2, r0, #0
	add r0, sp, #0x20
	mov ip, r0
	b .L080A374E
.L080A374A:
	adds r4, #1
	adds r2, #0x10
.L080A374E:
	ldrh r1, [r2]
	ldr r0, .L080A3798  @ 0x0000FFFF
	cmp r1, r0
	beq .L080A376A
	cmp r1, r7
	bne .L080A3760
	ldrh r0, [r2, #2]
	cmp r0, r5
	beq .L080A376A
.L080A3760:
	cmp r1, r5
	bne .L080A374A
	ldrh r0, [r2, #2]
	cmp r0, r7
	bne .L080A374A
.L080A376A:
	asrs r0, r4, #2
	movs r3, #3
	ands r4, r3
	lsls r1, r4, #1
	mov r2, ip
	adds r4, r2, r0
	ldrb r2, [r4]
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, r6
	bge .L080A379C
	adds r0, r3, #0
	lsls r0, r1
	bics r2, r0
	lsls r6, r1
	adds r0, r2, r6
	strb r0, [r4]
	mov r0, sp
	bl SaveGeneralGameMetadata
	movs r0, #1
	b .L080A379E
	.align 2, 0
.L080A3798: .4byte 0x0000FFFF
.L080A379C:
	movs r0, #0
.L080A379E:
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END SGM_SetSupportLevelKnown

	THUMB_FUNC_START SGM_SetCharacterKnown
SGM_SetCharacterKnown: @ 0x080A37A8
	push {r4, r5, lr}
	sub sp, #0x64
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r4, r0
	bgt .L080A37E8
	cmp r5, #0
	bne .L080A37C8
	mov r5, sp
	mov r0, sp
	bl LoadGeneralGameMetadata
	movs r3, #1
.L080A37C8:
	asrs r0, r4, #3
	adds r2, r5, #0
	adds r2, #0x40
	adds r2, r2, r0
	movs r1, #7
	ands r1, r4
	movs r0, #1
	lsls r0, r1
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	cmp r3, #0
	beq .L080A37E8
	adds r0, r5, #0
	bl SaveGeneralGameMetadata
.L080A37E8:
	add sp, #0x64
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END SGM_SetCharacterKnown

	THUMB_FUNC_START GGM_IsCharacterKnown
GGM_IsCharacterKnown: @ 0x080A37F0
	push {r4, r5, lr}
	sub sp, #0x64
	adds r5, r0, #0
	adds r4, r1, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r5, r0
	bgt .L080A3824
	cmp r4, #0
	bne .L080A380C
	mov r4, sp
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080A380C:
	asrs r1, r5, #3
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r5
	asrs r1, r0
	movs r0, #1
	ands r1, r0
	cmp r1, #0
	bne .L080A3828
.L080A3824:
	movs r0, #0
	b .L080A382A
.L080A3828:
	movs r0, #1
.L080A382A:
	add sp, #0x64
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END GGM_IsCharacterKnown

	THUMB_FUNC_START GGM_IsAnyCharacterKnown
GGM_IsAnyCharacterKnown: @ 0x080A3834
	push {r4, lr}
	sub sp, #0x64
	adds r4, r0, #0
	cmp r4, #0
	bne .L080A3846
	mov r4, sp
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080A3846:
	movs r1, #0
	adds r2, r4, #0
	adds r2, #0x40
.L080A384C:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A3858
	movs r0, #1
	b .L080A3860
.L080A3858:
	adds r1, #1
	cmp r1, #0x1f
	ble .L080A384C
	movs r0, #0
.L080A3860:
	add sp, #0x64
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GGM_IsAnyCharacterKnown

	THUMB_FUNC_START func_080A3868
func_080A3868: @ 0x080A3868
	bx lr

	THUMB_FUNC_END func_080A3868

	THUMB_FUNC_START __malloc_unlock_3
__malloc_unlock_3: @ 0x080A386C
	bx lr

	THUMB_FUNC_END __malloc_unlock_3

	THUMB_FUNC_START func_080A3870
func_080A3870: @ 0x080A3870
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3890
	mov r0, sp
	ldrb r1, [r0, #0xe]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A3890
	movs r0, #1
	b .L080A3892
.L080A3890:
	movs r0, #0
.L080A3892:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3870

	THUMB_FUNC_START VerifySavedRankingChecksum
VerifySavedRankingChecksum: @ 0x080A3898
	push {r4, r5, lr}
	adds r5, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A38EC
	cmp r5, #0
	bne .L080A38AC
	ldr r5, .L080A38DC  @ gBuf
.L080A38AC:
	ldr r1, .L080A38E0  @ ReadSramFast
	ldr r0, .L080A38E4  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, .L080A38E8  @ 0x00007190
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0x94
	bl _call_via_r3
	adds r4, r5, #0
	adds r4, #0x90
	adds r0, r5, #0
	movs r1, #0x90
	bl ComputeChecksum16
	ldrh r1, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne .L080A38EC
	movs r0, #1
	b .L080A38EE
	.align 2, 0
.L080A38DC: .4byte gBuf
.L080A38E0: .4byte ReadSramFast
.L080A38E4: .4byte gUnknown_08A1FAF4
.L080A38E8: .4byte 0x00007190
.L080A38EC:
	movs r0, #0
.L080A38EE:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END VerifySavedRankingChecksum

	THUMB_FUNC_START LoadBonusContentData
LoadBonusContentData: @ 0x080A38F4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3948
	cmp r5, #0
	bne .L080A3908
	ldr r5, .L080A3938  @ gBuf
.L080A3908:
	ldr r1, .L080A393C  @ ReadSramFast
	ldr r0, .L080A3940  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, .L080A3944  @ 0x0000725C
	adds r0, r0, r2
	movs r2, #0xa2
	lsls r2, r2, #1
	ldr r3, [r1]
	adds r1, r5, #0
	bl _call_via_r3
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r4, r5, r1
	adds r0, r5, #0
	bl ComputeChecksum16
	ldrh r1, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne .L080A3948
	movs r0, #1
	b .L080A394A
	.align 2, 0
.L080A3938: .4byte gBuf
.L080A393C: .4byte ReadSramFast
.L080A3940: .4byte gUnknown_08A1FAF4
.L080A3944: .4byte 0x0000725C
.L080A3948:
	movs r0, #0
.L080A394A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END LoadBonusContentData

	THUMB_FUNC_START SaveBonusContentData
SaveBonusContentData: @ 0x080A3950
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0xa0
	lsls r4, r4, #1
	adds r1, r4, #0
	bl ComputeChecksum16
	adds r4, r5, r4
	strh r0, [r4]
	ldr r0, .L080A397C  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, .L080A3980  @ 0x0000725C
	adds r1, r1, r0
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r5, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A397C: .4byte gUnknown_08A1FAF4
.L080A3980: .4byte 0x0000725C

	THUMB_FUNC_END SaveBonusContentData

	THUMB_FUNC_START SaveRankings
SaveRankings: @ 0x080A3984
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x90
	bl ComputeChecksum16
	adds r1, r4, #0
	adds r1, #0x90
	strh r0, [r1]
	ldr r0, .L080A39AC  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, .L080A39B0  @ 0x00007190
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x94
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A39AC: .4byte gUnknown_08A1FAF4
.L080A39B0: .4byte 0x00007190

	THUMB_FUNC_END SaveRankings

	THUMB_FUNC_START func_080A39B4
func_080A39B4: @ 0x080A39B4
	push {lr}
	sub sp, #0x98
	add r0, sp, #0x94
	movs r1, #0
	strh r1, [r0]
	ldr r2, .L080A39D4  @ 0x0100004A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl SaveRankings
	add sp, #0x98
	pop {r0}
	bx r0
	.align 2, 0
.L080A39D4: .4byte 0x0100004A

	THUMB_FUNC_END func_080A39B4

	THUMB_FUNC_START func_080A39D8
func_080A39D8: @ 0x080A39D8
	ldr r0, .L080A39E0  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	subs r0, #1
	bx lr
	.align 2, 0
.L080A39E0: .4byte gPlaySt

	THUMB_FUNC_END func_080A39D8

	THUMB_FUNC_START func_080A39E4
func_080A39E4: @ 0x080A39E4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x98
	adds r6, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	add r0, sp, #0x94
	movs r4, #0
	strh r4, [r0]
	ldr r2, .L080A3A1C  @ 0x0100000C
	adds r1, r6, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x96
	strh r4, [r0]
	ldr r2, .L080A3A20  @ 0x0100004A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl VerifySavedRankingChecksum
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A3A24
	movs r0, #0
	b .L080A3A40
	.align 2, 0
.L080A3A1C: .4byte 0x0100000C
.L080A3A20: .4byte 0x0100004A
.L080A3A24:
	lsls r0, r5, #1
	adds r0, r0, r5
	adds r0, r7, r0
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r1, r6, #0
	mov r3, sp
	adds r0, r3, r2
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	movs r0, #1
.L080A3A40:
	add sp, #0x98
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A39E4

	THUMB_FUNC_START func_080A3A48
func_080A3A48: @ 0x080A3A48
	push {r4, r5, r6, lr}
	sub sp, #0x94
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	mov r0, sp
	bl VerifySavedRankingChecksum
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3A7E
	lsls r1, r4, #1
	adds r1, r1, r4
	adds r1, r5, r1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	mov r2, sp
	adds r1, r2, r0
	adds r0, r6, #0
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, sp
	bl SaveRankings
.L080A3A7E:
	add sp, #0x94
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A3A48

	THUMB_FUNC_START func_080A3A88
func_080A3A88: @ 0x080A3A88
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldrb r2, [r5]
	lsls r0, r2, #0x1f
	cmp r0, #0
	beq .L080A3B36
	ldrb r0, [r4]
	lsls r0, r0, #0x1c
	lsrs r1, r0, #0x1d
	lsls r0, r2, #0x1c
	lsrs r0, r0, #0x1d
	cmp r1, r0
	bgt .L080A3B36
	cmp r1, r0
	bne .L080A3B40
	ldrb r0, [r4, #0x17]
	cmp r0, #0
	beq .L080A3AB4
	ldrb r1, [r5, #0x17]
	cmp r0, r1
	bne .L080A3B36
.L080A3AB4:
	ldrh r1, [r4, #2]
	lsls r1, r1, #0x11
	lsrs r1, r1, #0x18
	ldrh r0, [r5, #2]
	lsls r0, r0, #0x11
	lsrs r0, r0, #0x18
	cmp r1, r0
	bgt .L080A3B36
	ldrb r1, [r4, #7]
	lsrs r1, r1, #5
	ldr r0, [r4, #8]
	ldr r2, .L080A3B3C  @ 0x001FFFFF
	ands r0, r2
	lsls r3, r0, #3
	orrs r3, r1
	ldrb r1, [r5, #7]
	lsrs r1, r1, #5
	ldr r0, [r5, #8]
	ands r0, r2
	lsls r0, r0, #3
	orrs r0, r1
	cmp r3, r0
	bgt .L080A3B36
	cmp r3, r0
	bne .L080A3B40
	ldr r0, [r4, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	lsls r3, r0, #3
	subs r3, r3, r0
	lsls r3, r3, #5
	adds r3, r3, r0
	lsls r3, r3, #4
	ldrb r1, [r4, #6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r3, r3, r0
	ldrh r0, [r4, #6]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x1a
	adds r3, r3, r0
	ldr r0, [r5, #4]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x16
	lsls r2, r0, #3
	subs r2, r2, r0
	lsls r2, r2, #5
	adds r2, r2, r0
	lsls r2, r2, #4
	ldrb r1, [r5, #6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r2, r2, r0
	ldrh r0, [r5, #6]
	lsls r0, r0, #0x13
	lsrs r0, r0, #0x1a
	adds r2, r2, r0
	cmp r3, r2
	bge .L080A3B40
.L080A3B36:
	movs r0, #1
	b .L080A3B42
	.align 2, 0
.L080A3B3C: .4byte 0x001FFFFF
.L080A3B40:
	movs r0, #0
.L080A3B42:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3A88

	THUMB_FUNC_START func_080A3B48
func_080A3B48: @ 0x080A3B48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r0, #0
	mov r9, r0
	add r0, sp, #4
	movs r1, #0
	mov r8, r1
	mov r3, r9
	strh r3, [r0]
	ldr r2, .L080A3C54  @ 0x0100000C
	adds r1, r7, #0
	bl CpuSet
	ldrb r0, [r7]
	movs r6, #1
	orrs r0, r6
	strb r0, [r7]
	movs r0, #3
	ands r4, r0
	lsls r4, r4, #3
	ldrb r1, [r7, #2]
	movs r0, #0x19
	negs r0, r0
	ands r0, r1
	orrs r0, r4
	ands r5, r6
	lsls r5, r5, #5
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	orrs r0, r5
	strb r0, [r7, #2]
	bl GetTotalTeamGoldValue
	movs r2, #7
	ands r2, r0
	lsls r2, r2, #5
	ldrb r3, [r7, #7]
	movs r1, #0x1f
	ands r1, r3
	orrs r1, r2
	strb r1, [r7, #7]
	lsls r0, r0, #8
	lsrs r0, r0, #0xb
	ldr r1, [r7, #8]
	ldr r2, .L080A3C58  @ 0xFFE00000
	ands r1, r2
	orrs r1, r0
	str r1, [r7, #8]
	ldr r3, .L080A3C5C  @ gPlaySt
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r1, r1, #0x1f
	lsrs r1, r1, #0x1f
	ands r1, r6
	lsls r1, r1, #6
	ldrb r2, [r7, #2]
	movs r0, #0x41
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r7, #2]
	ldrh r1, [r3, #0x2c]
	lsls r1, r1, #0x13
	lsrs r1, r1, #0x17
	movs r0, #0xff
	ands r1, r0
	lsls r1, r1, #7
	ldrh r2, [r7, #2]
	ldr r0, .L080A3C60  @ 0xFFFF807F
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #2]
	bl GetGameTotalTime
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	mov r6, sp
	adds r6, #0xa
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl FormatTime
	ldrh r2, [r4]
	ldr r0, .L080A3C64  @ 0x000003FF
	ands r2, r0
	lsls r2, r2, #7
	ldr r0, [r7, #4]
	ldr r1, .L080A3C68  @ 0xFFFE007F
	ands r0, r1
	orrs r0, r2
	str r0, [r7, #4]
	ldrh r1, [r5]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	ldrb r2, [r7, #6]
	movs r0, #0x7f
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r7, #6]
	ldrh r1, [r6]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #7
	ldrh r2, [r7, #6]
	ldr r0, .L080A3C6C  @ 0xFFFFE07F
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #6]
	ldrb r1, [r7, #3]
	movs r0, #0x7f
	ands r0, r1
	strb r0, [r7, #3]
	ldrb r1, [r7, #4]
	movs r0, #0x80
	negs r0, r0
	ands r0, r1
	strb r0, [r7, #4]
	mov r0, r8
	strb r0, [r7, #0x17]
	movs r4, #1
	b .L080A3C78
	.align 2, 0
.L080A3C54: .4byte 0x0100000C
.L080A3C58: .4byte 0xFFE00000
.L080A3C5C: .4byte gPlaySt
.L080A3C60: .4byte 0xFFFF807F
.L080A3C64: .4byte 0x000003FF
.L080A3C68: .4byte 0xFFFE007F
.L080A3C6C: .4byte 0xFFFFE07F
.L080A3C70:
	ldrb r0, [r2, #4]
	strb r0, [r7, #0x17]
	b .L080A3CA0
.L080A3C76:
	adds r4, #1
.L080A3C78:
	cmp r4, #0x3f
	bgt .L080A3CA0
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq .L080A3C76
	ldr r2, [r0]
	cmp r2, #0
	beq .L080A3C76
	ldr r1, [r0, #0xc]
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r1
	cmp r0, #0
	beq .L080A3C76
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq .L080A3C70
.L080A3CA0:
	movs r5, #1
	movs r1, #0xc
	adds r1, r1, r7
	mov sl, r1
	movs r3, #0x7f
	mov r8, r3
	movs r6, #0x7f
.L080A3CAE:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq .L080A3D08
	ldr r2, [r4]
	cmp r2, #0
	beq .L080A3D08
	ldr r0, [r4, #0xc]
	ldr r1, .L080A3DCC  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L080A3D08
	ldrb r0, [r2, #4]
	bl BWL_GetFavoritismValue
	cmp r0, r9
	ble .L080A3D08
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	bl BWL_GetFavoritismValue
	mov r9, r0
	ldr r0, [r4]
	ldrb r2, [r0, #4]
	movs r1, #1
	ands r1, r2
	lsls r1, r1, #7
	ldrb r3, [r7, #3]
	adds r0, r6, #0
	ands r0, r3
	orrs r0, r1
	strb r0, [r7, #3]
	lsrs r2, r2, #1
	ands r2, r6
	mov r0, r8
	ands r2, r0
	ldrb r0, [r7, #4]
	movs r3, #0x80
	negs r3, r3
	adds r1, r3, #0
	ands r0, r1
	orrs r0, r2
	strb r0, [r7, #4]
.L080A3D08:
	adds r5, #1
	cmp r5, #0x3f
	ble .L080A3CAE
	bl func_080B5D74
	movs r5, #7
	ands r0, r5
	lsls r0, r0, #4
	ldrb r2, [r7]
	movs r1, #0x71
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r7]
	bl func_080B5FD0
	ands r0, r5
	lsls r0, r0, #2
	ldrb r2, [r7, #1]
	movs r1, #0x1d
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r7, #1]
	bl func_080B5E6C
	movs r1, #7
	ands r0, r1
	lsls r0, r0, #7
	ldrh r2, [r7]
	ldr r1, .L080A3DD0  @ 0xFFFFFC7F
	ands r1, r2
	orrs r1, r0
	strh r1, [r7]
	bl func_080B5EA4
	lsls r0, r0, #5
	ldrb r2, [r7, #1]
	movs r1, #0x1f
	ands r1, r2
	orrs r1, r0
	strb r1, [r7, #1]
	bl func_080B5F9C
	ands r0, r5
	ldrb r1, [r7, #2]
	movs r4, #8
	negs r4, r4
	ands r4, r1
	orrs r4, r0
	strb r4, [r7, #2]
	ldrb r0, [r7]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1d
	ldrh r1, [r7]
	lsls r1, r1, #0x16
	lsrs r1, r1, #0x1d
	ldrb r3, [r7, #1]
	lsls r2, r3, #0x1b
	lsrs r2, r2, #0x1d
	lsrs r3, r3, #5
	lsls r4, r4, #0x1d
	lsrs r4, r4, #0x1d
	str r4, [sp]
	bl GetOverallRank
	ands r0, r5
	lsls r0, r0, #1
	ldrb r2, [r7]
	movs r1, #0xf
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r7]
	bl GetWonChapterCount
	movs r1, #0x3f
	ands r0, r1
	lsls r0, r0, #5
	ldrh r2, [r7, #0xa]
	ldr r1, .L080A3DD4  @ 0xFFFFF81F
	ands r1, r2
	orrs r1, r0
	strh r1, [r7, #0xa]
	bl GetTacticianName
	adds r1, r0, #0
	mov r0, sl
	bl strcpy
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3DCC: .4byte 0x00010004
.L080A3DD0: .4byte 0xFFFFFC7F
.L080A3DD4: .4byte 0xFFFFF81F

	THUMB_FUNC_END func_080A3B48

	THUMB_FUNC_START SaveEndgameRankingsMaybe
SaveEndgameRankingsMaybe: @ 0x080A3DD8
	push {r4, r5, r6, lr}
	sub sp, #0x30
	bl func_080A39D8
	adds r6, r0, #0
	ldr r0, .L080A3E24  @ gPlaySt
	ldrb r0, [r0, #0x14]
	lsrs r4, r0, #6
	movs r0, #1
	ands r4, r0
	add r5, sp, #0x18
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl func_080A3B48
	mov r0, sp
	adds r1, r6, #0
	adds r2, r4, #0
	bl func_080A39E4
	mov r0, sp
	adds r1, r5, #0
	bl func_080A3A88
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3E1A
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl func_080A3A48
.L080A3E1A:
	add sp, #0x30
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3E24: .4byte gPlaySt

	THUMB_FUNC_END SaveEndgameRankingsMaybe

	THUMB_FUNC_START func_080A3E28
func_080A3E28: @ 0x080A3E28
	push {lr}
	sub sp, #0x28
	add r0, sp, #0x24
	movs r1, #0
	strh r1, [r0]
	ldr r2, .L080A3E48  @ 0x01000012
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl func_080A3EA4
	add sp, #0x28
	pop {r0}
	bx r0
	.align 2, 0
.L080A3E48: .4byte 0x01000012

	THUMB_FUNC_END func_080A3E28

	THUMB_FUNC_START func_080A3E4C
func_080A3E4C: @ 0x080A3E4C
	push {r4, lr}
	sub sp, #0x24
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3E98
	cmp r4, #0
	bne .L080A3E62
	mov r4, sp
.L080A3E62:
	ldr r1, .L080A3E8C  @ ReadSramFast
	ldr r0, .L080A3E90  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, .L080A3E94  @ 0x00007224
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x24
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x20
	bl ComputeChecksum16
	ldrh r1, [r4, #0x20]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne .L080A3E98
	movs r0, #1
	b .L080A3E9A
	.align 2, 0
.L080A3E8C: .4byte ReadSramFast
.L080A3E90: .4byte gUnknown_08A1FAF4
.L080A3E94: .4byte 0x00007224
.L080A3E98:
	movs r0, #0
.L080A3E9A:
	add sp, #0x24
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3E4C

	THUMB_FUNC_START func_080A3EA4
func_080A3EA4: @ 0x080A3EA4
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x20
	bl ComputeChecksum16
	strh r0, [r4, #0x20]
	ldr r0, .L080A3EC8  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, .L080A3ECC  @ 0x00007224
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A3EC8: .4byte gUnknown_08A1FAF4
.L080A3ECC: .4byte 0x00007224

	THUMB_FUNC_END func_080A3EA4

	THUMB_FUNC_START func_080A3ED0
func_080A3ED0: @ 0x080A3ED0
	push {r4, r5, lr}
	sub sp, #0x24
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne .L080A3EE4
	mov r4, sp
	mov r0, sp
	bl func_080A3E4C
.L080A3EE4:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x1f
	ands r1, r5
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne .L080A3EFE
	movs r0, #0
	b .L080A3F00
.L080A3EFE:
	movs r0, #1
.L080A3F00:
	add sp, #0x24
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3ED0

	THUMB_FUNC_START func_080A3F08
func_080A3F08: @ 0x080A3F08
	push {r4, r5, lr}
	sub sp, #0x24
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne .L080A3F22
	mov r4, sp
	mov r0, sp
	bl func_080A3E4C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3F7C
.L080A3F22:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r3, r4, r0
	movs r0, #0x1f
	ands r0, r5
	movs r2, #1
	lsls r2, r0
	ldr r1, [r3]
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne .L080A3F7C
	orrs r1, r2
	str r1, [r3]
	cmp r5, #0x43
	bne .L080A3F4C
	ldr r0, [r4]
	movs r1, #4
	orrs r0, r1
	str r0, [r4]
	b .L080A3F58
.L080A3F4C:
	cmp r5, #2
	bne .L080A3F58
	ldr r0, [r4, #8]
	movs r1, #8
	orrs r0, r1
	str r0, [r4, #8]
.L080A3F58:
	cmp r5, #0x54
	bne .L080A3F68
	ldr r0, [r4, #4]
	movs r1, #0x80
	lsls r1, r1, #9
	orrs r0, r1
	str r0, [r4, #4]
	b .L080A3F76
.L080A3F68:
	cmp r5, #0x30
	bne .L080A3F76
	ldr r0, [r4, #8]
	movs r1, #0x80
	lsls r1, r1, #0xd
	orrs r0, r1
	str r0, [r4, #8]
.L080A3F76:
	adds r0, r4, #0
	bl func_080A3EA4
.L080A3F7C:
	add sp, #0x24
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A3F08

	THUMB_FUNC_START func_080A3F84
func_080A3F84: @ 0x080A3F84
	push {lr}
	sub sp, #0x18
	add r0, sp, #0x14
	movs r1, #0
	strh r1, [r0]
	ldr r2, .L080A3FA4  @ 0x0100000A
	mov r1, sp
	bl CpuSet
	mov r0, sp
	bl func_080A4000
	add sp, #0x18
	pop {r0}
	bx r0
	.align 2, 0
.L080A3FA4: .4byte 0x0100000A

	THUMB_FUNC_END func_080A3F84

	THUMB_FUNC_START func_080A3FA8
func_080A3FA8: @ 0x080A3FA8
	push {r4, lr}
	sub sp, #0x14
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A3FF4
	cmp r4, #0
	bne .L080A3FBE
	mov r4, sp
.L080A3FBE:
	ldr r1, .L080A3FE8  @ ReadSramFast
	ldr r0, .L080A3FEC  @ gUnknown_08A1FAF4
	ldr r0, [r0]
	ldr r2, .L080A3FF0  @ 0x00007248
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x14
	bl _call_via_r3
	adds r0, r4, #0
	movs r1, #0x10
	bl ComputeChecksum16
	ldrh r1, [r4, #0x10]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne .L080A3FF4
	movs r0, #1
	b .L080A3FF6
	.align 2, 0
.L080A3FE8: .4byte ReadSramFast
.L080A3FEC: .4byte gUnknown_08A1FAF4
.L080A3FF0: .4byte 0x00007248
.L080A3FF4:
	movs r0, #0
.L080A3FF6:
	add sp, #0x14
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A3FA8

	THUMB_FUNC_START func_080A4000
func_080A4000: @ 0x080A4000
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x10
	bl ComputeChecksum16
	strh r0, [r4, #0x10]
	ldr r0, .L080A4024  @ gUnknown_08A1FAF4
	ldr r1, [r0]
	ldr r0, .L080A4028  @ 0x00007248
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4024: .4byte gUnknown_08A1FAF4
.L080A4028: .4byte 0x00007248

	THUMB_FUNC_END func_080A4000

	THUMB_FUNC_START func_080A402C
func_080A402C: @ 0x080A402C
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne .L080A4040
	mov r4, sp
	mov r0, sp
	bl func_080A3FA8
.L080A4040:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r0, r4, r0
	movs r1, #0x1f
	ands r1, r5
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne .L080A405A
	movs r0, #0
	b .L080A405C
.L080A405A:
	movs r0, #1
.L080A405C:
	add sp, #0x14
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A402C

	THUMB_FUNC_START func_080A4064
func_080A4064: @ 0x080A4064
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne .L080A407E
	mov r4, sp
	mov r0, sp
	bl func_080A3FA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A40A0
.L080A407E:
	asrs r0, r5, #5
	lsls r0, r0, #2
	adds r3, r4, r0
	movs r0, #0x1f
	ands r0, r5
	movs r2, #1
	lsls r2, r0
	ldr r1, [r3]
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne .L080A40A0
	orrs r1, r2
	str r1, [r3]
	adds r0, r4, #0
	bl func_080A4000
.L080A40A0:
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A4064

	THUMB_FUNC_START func_080A40A8
func_080A40A8: @ 0x080A40A8
	push {lr}
	movs r0, #0
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A40BA
	bl InitSaveGeneralGameMetadata
.L080A40BA:
	movs r0, #0
	bl LoadBonusContentData
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A40CA
	bl func_080A2EA8
.L080A40CA:
	movs r0, #0
	bl VerifySavedRankingChecksum
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A40DA
	bl func_080A39B4
.L080A40DA:
	movs r0, #0
	bl func_080A3E4C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A40EA
	bl func_080A3E28
.L080A40EA:
	movs r0, #0
	bl func_080A3FA8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A40FA
	bl func_080A3F84
.L080A40FA:
	bl func_080A6AA0
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A40A8

	THUMB_FUNC_START SaveClearedBWLAndChapterWinData
SaveClearedBWLAndChapterWinData: @ 0x080A4104
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	mov r0, sp
	movs r4, #0
	strh r4, [r0]
	ldr r5, .L080A4184  @ gBWLDataStorage
	ldr r2, .L080A4188  @ 0x01000230
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #2
	strh r4, [r0]
	ldr r1, .L080A418C  @ gChapterWinDataArray
	ldr r2, .L080A4190  @ 0x01000060
	bl CpuSet
	adds r7, r5, #0
	ldr r6, .L080A4194  @ 0x0000084C
	add r6, r8
	adds r4, r7, #0
	movs r5, #0x45
.L080A4136:
	ldr r0, [r4]
	ldr r1, .L080A4198  @ 0xFF0000FF
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #0xe
	orrs r0, r1
	str r0, [r4]
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
	adds r6, #0x10
	adds r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge .L080A4136
	ldr r4, .L080A419C  @ 0x00000CAC
	add r4, r8
	movs r5, #0x2f
.L080A415E:
	ldr r0, .L080A418C  @ gChapterWinDataArray
	adds r1, r4, #0
	movs r2, #4
	bl WriteAndVerifySramFast
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge .L080A415E
	ldr r1, .L080A41A0  @ gpBWLSaveTarget
	ldr r0, .L080A4194  @ 0x0000084C
	add r0, r8
	str r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4184: .4byte gBWLDataStorage
.L080A4188: .4byte 0x01000230
.L080A418C: .4byte gChapterWinDataArray
.L080A4190: .4byte 0x01000060
.L080A4194: .4byte 0x0000084C
.L080A4198: .4byte 0xFF0000FF
.L080A419C: .4byte 0x00000CAC
.L080A41A0: .4byte gpBWLSaveTarget

	THUMB_FUNC_END SaveClearedBWLAndChapterWinData

	THUMB_FUNC_START func_080A41A4
func_080A41A4: @ 0x080A41A4
	push {lr}
	ldr r2, .L080A41C0  @ gPlaySt
	ldrh r1, [r2, #0x2c]
	ldr r0, .L080A41C4  @ 0xFFFFE00F
	ands r0, r1
	strh r0, [r2, #0x2c]
	movs r0, #0
	bl SetGold
	bl func_080A41C8
	pop {r0}
	bx r0
	.align 2, 0
.L080A41C0: .4byte gPlaySt
.L080A41C4: .4byte 0xFFFFE00F

	THUMB_FUNC_END func_080A41A4

	THUMB_FUNC_START func_080A41C8
func_080A41C8: @ 0x080A41C8
	push {r4, r5, lr}
	sub sp, #4
	mov r0, sp
	movs r5, #0
	strh r5, [r0]
	ldr r1, .L080A4208  @ gBWLDataStorage
	ldr r2, .L080A420C  @ 0x01000230
	bl CpuSet
	ldr r4, .L080A4210  @ gPlaySt
	ldr r0, [r4, #0x38]
	ldr r1, .L080A4214  @ 0xF00000FF
	ands r0, r1
	str r0, [r4, #0x38]
	ldrh r1, [r4, #0x36]
	movs r0, #0xf
	ands r0, r1
	strh r0, [r4, #0x36]
	adds r0, r4, #0
	adds r0, #0x38
	strb r5, [r0]
	ldr r0, [r4, #0x34]
	ldr r1, .L080A4218  @ 0xFFF00000
	ands r0, r1
	str r0, [r4, #0x34]
	bl GetTotalTeamGoldValue
	str r0, [r4, #0x30]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4208: .4byte gBWLDataStorage
.L080A420C: .4byte 0x01000230
.L080A4210: .4byte gPlaySt
.L080A4214: .4byte 0xF00000FF
.L080A4218: .4byte 0xFFF00000

	THUMB_FUNC_END func_080A41C8

	THUMB_FUNC_START LoadBWLEntries
LoadBWLEntries: @ 0x080A421C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A423C  @ ReadSramFast
	ldr r1, .L080A4240  @ gBWLDataStorage
	movs r2, #0x8c
	lsls r2, r2, #3
	ldr r3, [r0]
	adds r0, r4, #0
	bl _call_via_r3
	ldr r0, .L080A4244  @ gpBWLSaveTarget
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A423C: .4byte ReadSramFast
.L080A4240: .4byte gBWLDataStorage
.L080A4244: .4byte gpBWLSaveTarget

	THUMB_FUNC_END LoadBWLEntries

	THUMB_FUNC_START LoadChapterDataWinArray
LoadChapterDataWinArray: @ 0x080A4248
	push {lr}
	ldr r2, .L080A425C  @ ReadSramFast
	ldr r1, .L080A4260  @ gChapterWinDataArray
	ldr r3, [r2]
	movs r2, #0xc0
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
.L080A425C: .4byte ReadSramFast
.L080A4260: .4byte gChapterWinDataArray

	THUMB_FUNC_END LoadChapterDataWinArray

	THUMB_FUNC_START SaveBWLEntries
SaveBWLEntries: @ 0x080A4264
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A4280  @ gBWLDataStorage
	movs r2, #0x8c
	lsls r2, r2, #3
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	ldr r0, .L080A4284  @ gpBWLSaveTarget
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4280: .4byte gBWLDataStorage
.L080A4284: .4byte gpBWLSaveTarget

	THUMB_FUNC_END SaveBWLEntries

	THUMB_FUNC_START SaveChapterWinData
SaveChapterWinData: @ 0x080A4288
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A4298  @ gChapterWinDataArray
	movs r2, #0xc0
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
.L080A4298: .4byte gChapterWinDataArray

	THUMB_FUNC_END SaveChapterWinData

	THUMB_FUNC_START GetChapterWinDataEntry
GetChapterWinDataEntry: @ 0x080A429C
	lsls r0, r0, #2
	ldr r1, .L080A42A4  @ gChapterWinDataArray
	adds r0, r0, r1
	bx lr
	.align 2, 0
.L080A42A4: .4byte gChapterWinDataArray

	THUMB_FUNC_END GetChapterWinDataEntry

	THUMB_FUNC_START func_080A42A8
func_080A42A8: @ 0x080A42A8
	ldrh r0, [r0]
	ldr r1, .L080A42B8  @ 0x0000FF80
	ands r1, r0
	negs r0, r1
	orrs r0, r1
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
.L080A42B8: .4byte 0x0000FF80

	THUMB_FUNC_END func_080A42A8

	THUMB_FUNC_START GetNextChapterWinDataEntryIndex
GetNextChapterWinDataEntryIndex: @ 0x080A42BC
	push {r4, lr}
	movs r0, #0
	bl GetChapterWinDataEntry
	adds r2, r0, #0
	movs r3, #0
	ldrh r1, [r2]
	ldr r4, .L080A42D0  @ 0x0000FF80
	b .L080A42DA
	.align 2, 0
.L080A42D0: .4byte 0x0000FF80
.L080A42D4:
	adds r3, #1
	adds r2, #4
	ldrh r1, [r2]
.L080A42DA:
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	bne .L080A42D4
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetNextChapterWinDataEntryIndex

	THUMB_FUNC_START GetWonChapterCount
GetWonChapterCount: @ 0x080A42EC
	push {r4, r5, r6, lr}
	movs r0, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	movs r5, #0
	ldrh r1, [r4]
	ldr r2, .L080A432C  @ 0x0000FF80
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A4322
	adds r6, r2, #0
.L080A4306:
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4318
	adds r5, #1
.L080A4318:
	adds r4, #4
	ldrh r0, [r4]
	ands r0, r6
	cmp r0, #0
	bne .L080A4306
.L080A4322:
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080A432C: .4byte 0x0000FF80

	THUMB_FUNC_END GetWonChapterCount

	THUMB_FUNC_START func_080A4330
func_080A4330: @ 0x080A4330
	push {lr}
	bl GetNextChapterWinDataEntryIndex
	cmp r0, #0
	beq .L080A4348
	subs r0, #1
	bl GetChapterWinDataEntry
	ldr r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	b .L080A434C
.L080A4348:
	movs r0, #1
	negs r0, r0
.L080A434C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A4330

	THUMB_FUNC_START RegisterChapterTimeAndTurnCount
RegisterChapterTimeAndTurnCount: @ 0x080A4350
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl GetNextChapterWinDataEntryIndex
	bl GetChapterWinDataEntry
	adds r5, r0, #0
	bl GetGameTime
	ldr r1, [r4, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r6, r0, #0
	ldr r0, .L080A43A8  @ 0x0000EA60
	cmp r6, r0
	ble .L080A4376
	adds r6, r0, #0
.L080A4376:
	ldrh r3, [r4, #0x10]
	movs r0, #0xfa
	lsls r0, r0, #1
	cmp r3, r0
	ble .L080A4382
	adds r3, r0, #0
.L080A4382:
	movs r0, #0x7f
	ldrb r1, [r4, #0xe]
	ands r1, r0
	ldrb r2, [r5]
	movs r0, #0x80
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r5]
	lsls r2, r3, #7
	ldrh r1, [r5]
	movs r0, #0x7f
	ands r0, r1
	orrs r0, r2
	strh r0, [r5]
	strh r6, [r5, #2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A43A8: .4byte 0x0000EA60

	THUMB_FUNC_END RegisterChapterTimeAndTurnCount

	THUMB_FUNC_START func_080A43AC
func_080A43AC: @ 0x080A43AC
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	bl GetNextChapterWinDataEntryIndex
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge .L080A43D0
	movs r7, #0xb4
.L080A43BE:
	adds r0, r4, #0
	bl GetChapterWinDataEntry
	ldrh r0, [r0, #2]
	muls r0, r7, r0
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt .L080A43BE
.L080A43D0:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A43AC

	THUMB_FUNC_START GetGameTotalTurnCount
GetGameTotalTurnCount: @ 0x080A43D8
	push {r4, r5, r6, lr}
	movs r6, #0
	bl GetNextChapterWinDataEntryIndex
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge .L080A43FC
.L080A43E8:
	adds r0, r4, #0
	bl GetChapterWinDataEntry
	ldr r0, [r0]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt .L080A43E8
.L080A43FC:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetGameTotalTurnCount

	THUMB_FUNC_START DoesThisChapterCount
DoesThisChapterCount: @ 0x080A4404
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A441C  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080A442E
	cmp r0, #2
	bgt .L080A4420
	cmp r0, #1
	beq .L080A4426
	b .L080A4440
	.align 2, 0
.L080A441C: .4byte gPlaySt
.L080A4420:
	cmp r0, #3
	beq .L080A4434
	b .L080A4440
.L080A4426:
	cmp r1, #9
	bhi .L080A4440
	movs r0, #1
	b .L080A4442
.L080A442E:
	adds r0, r1, #0
	subs r0, #0xa
	b .L080A4438
.L080A4434:
	adds r0, r1, #0
	subs r0, #0x17
.L080A4438:
	cmp r0, #0xb
	bhi .L080A4440
	movs r0, #1
	b .L080A4442
.L080A4440:
	movs r0, #0
.L080A4442:
	pop {r1}
	bx r1

	THUMB_FUNC_END DoesThisChapterCount

	THUMB_FUNC_START GetGameTotalTime
GetGameTotalTime: @ 0x080A4448
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl GetNextChapterWinDataEntryIndex
	adds r6, r0, #0
	movs r5, #0
	cmp r7, r6
	bge .L080A447E
.L080A4458:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4478
	ldrh r0, [r4, #2]
	movs r1, #0xb4
	muls r0, r1, r0
	adds r7, r7, r0
.L080A4478:
	adds r5, #1
	cmp r5, r6
	blt .L080A4458
.L080A447E:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetGameTotalTime

	THUMB_FUNC_START GetGameTotalTurnCount2
GetGameTotalTurnCount2: @ 0x080A4488
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	bl GetNextChapterWinDataEntryIndex
	adds r6, r0, #0
	movs r5, #0
	cmp r7, r6
	bge .L080A44BE
.L080A4498:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A44B8
	ldr r0, [r4]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r7, r7, r0
.L080A44B8:
	adds r5, #1
	cmp r5, r6
	blt .L080A4498
.L080A44BE:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetGameTotalTurnCount2

	THUMB_FUNC_START BWL_AddBattle
BWL_AddBattle: @ 0x080A44C8
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0xb
	ldrsb r0, [r4, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne .L080A451E
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	adds r5, r0, #0
	cmp r0, #0x45
	bhi .L080A451E
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A451E
	lsls r1, r5, #4
	ldr r0, .L080A4524  @ gBWLDataArray
	adds r2, r1, r0
	cmp r2, #0
	beq .L080A451E
	ldrh r3, [r2, #0xc]
	lsls r0, r3, #0x12
	lsrs r1, r0, #0x14
	ldr r0, .L080A4528  @ 0x00000F9F
	cmp r1, r0
	bgt .L080A4514
	adds r0, r1, #1
	ldr r5, .L080A452C  @ 0x00000FFF
	adds r1, r5, #0
	ands r0, r1
	lsls r0, r0, #2
	ldr r1, .L080A4530  @ 0xFFFFC003
	ands r1, r3
	orrs r1, r0
	strh r1, [r2, #0xc]
.L080A4514:
	ldr r0, [r4]
	ldrb r0, [r0, #4]
	movs r1, #4
	bl BWL_AddFavoritismValue
.L080A451E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4524: .4byte gBWLDataArray
.L080A4528: .4byte 0x00000F9F
.L080A452C: .4byte 0x00000FFF
.L080A4530: .4byte 0xFFFFC003

	THUMB_FUNC_END BWL_AddBattle

	THUMB_FUNC_START BWL_AddWin
BWL_AddWin: @ 0x080A4534
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi .L080A4584
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4584
	lsls r1, r4, #4
	ldr r0, .L080A458C  @ gBWLDataArray
	adds r3, r1, r0
	cmp r3, #0
	beq .L080A4584
	ldrb r0, [r3, #0xb]
	ldrb r1, [r3, #0xc]
	movs r2, #3
	ands r1, r2
	lsls r1, r1, #8
	orrs r1, r0
	ldr r0, .L080A4590  @ 0x000003E7
	cmp r1, r0
	bgt .L080A457C
	adds r0, r1, #1
	strb r0, [r3, #0xb]
	lsrs r0, r0, #8
	ands r0, r2
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r3, #0xc]
.L080A457C:
	adds r0, r5, #0
	movs r1, #0x10
	bl BWL_AddFavoritismValue
.L080A4584:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A458C: .4byte gBWLDataArray
.L080A4590: .4byte 0x000003E7

	THUMB_FUNC_END BWL_AddWin

	THUMB_FUNC_START BWL_AddLoss
BWL_AddLoss: @ 0x080A4594
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	mov r8, r4
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4662
	cmp r4, #0x45
	bhi .L080A4662
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4662
	mov r0, r8
	lsls r6, r0, #4
	ldr r0, .L080A4670  @ gBWLDataArray
	adds r5, r6, r0
	cmp r5, #0
	beq .L080A4662
	ldr r1, .L080A4674  @ gBmSt
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080A4662
	ldr r7, .L080A4678  @ gPlaySt
	ldrb r2, [r7, #0x14]
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	bne .L080A4662
	ldrb r1, [r1, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne .L080A4662
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne .L080A4662
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	bne .L080A4662
	ldrb r0, [r5]
	cmp r0, #0xc7
	bhi .L080A4662
	adds r0, #1
	strb r0, [r5]
	movs r1, #0x80
	negs r1, r1
	mov r0, r8
	bl BWL_AddFavoritismValue
	bl GetLastSuspendSaveId
	adds r4, r0, #0
	adds r4, #3
	adds r0, r4, #0
	bl GetSaveTargetAddress
	adds r1, r0, #0
	ldr r2, .L080A467C  @ 0x000019E4
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #1
	bl WriteAndVerifySramFast
	mov r0, sp
	adds r1, r4, #0
	bl SaveMetadata_Load
	mov r0, sp
	adds r1, r4, #0
	bl SaveMetadata_Save
	ldrb r0, [r7, #0xc]
	bl GetSaveTargetAddress
	adds r1, r0, #0
	ldr r2, .L080A4680  @ 0x0000083C
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #3
	bl WriteAndVerifySramFast
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl SaveMetadata_Load
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl SaveMetadata_Save
.L080A4662:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4670: .4byte gBWLDataArray
.L080A4674: .4byte gBmSt
.L080A4678: .4byte gPlaySt
.L080A467C: .4byte 0x000019E4
.L080A4680: .4byte 0x0000083C

	THUMB_FUNC_END BWL_AddLoss

	THUMB_FUNC_START BWL_SetDeathStats
BWL_SetDeathStats: @ 0x080A4684
	push {r4, r5, r6, lr}
	adds r5, r2, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	cmp r0, #0x45
	bhi .L080A4734
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4734
	lsls r1, r4, #4
	ldr r0, .L080A46DC  @ gBWLDataArray
	adds r4, r1, r0
	cmp r4, #0
	beq .L080A4734
	bl GetBattleMapKind
	cmp r0, #0
	blt .L080A46E8
	cmp r0, #1
	ble .L080A46E8
	cmp r0, #2
	bne .L080A46E8
	ldrb r0, [r4, #0xe]
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r4, #0xe]
	ldr r0, .L080A46E0  @ gGmData
	ldrb r1, [r0, #0x11]
	movs r0, #0x3f
	ands r1, r0
	ldrb r2, [r4, #5]
	movs r0, #0x40
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #5]
	ldr r3, .L080A46E4  @ gPlaySt
	b .L080A4706
	.align 2, 0
.L080A46DC: .4byte gBWLDataArray
.L080A46E0: .4byte gGmData
.L080A46E4: .4byte gPlaySt
.L080A46E8:
	ldrb r1, [r4, #0xe]
	movs r0, #0x7f
	ands r0, r1
	strb r0, [r4, #0xe]
	ldr r3, .L080A473C  @ gPlaySt
	movs r1, #0xe
	ldrsb r1, [r3, r1]
	movs r0, #0x3f
	ands r1, r0
	ldrb r2, [r4, #5]
	movs r0, #0x40
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #5]
.L080A4706:
	ldrh r2, [r3, #0x10]
	ldr r0, .L080A4740  @ 0x000003FF
	ands r2, r0
	lsls r2, r2, #0xe
	ldr r0, [r4, #4]
	ldr r1, .L080A4744  @ 0xFF003FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r4, #4]
	lsls r2, r6, #0xe
	ldr r0, [r4, #0xc]
	ldr r1, .L080A4748  @ 0xFF803FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r4, #0xc]
	movs r0, #0xf
	ands r5, r0
	ldrb r1, [r4, #9]
	movs r0, #0x10
	negs r0, r0
	ands r0, r1
	orrs r0, r5
	strb r0, [r4, #9]
.L080A4734:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A473C: .4byte gPlaySt
.L080A4740: .4byte 0x000003FF
.L080A4744: .4byte 0xFF003FFF
.L080A4748: .4byte 0xFF803FFF

	THUMB_FUNC_END BWL_SetDeathStats

	THUMB_FUNC_START BWL_IncrementMoveValue
BWL_IncrementMoveValue: @ 0x080A474C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi .L080A4780
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4780
	lsls r1, r4, #4
	ldr r0, .L080A4788  @ gBWLDataArray
	adds r1, r1, r0
	cmp r1, #0
	beq .L080A4780
	ldrb r0, [r1, #3]
	cmp r0, #0xc7
	bhi .L080A4778
	adds r0, #1
	strb r0, [r1, #3]
.L080A4778:
	adds r0, r5, #0
	movs r1, #2
	bl BWL_AddFavoritismValue
.L080A4780:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4788: .4byte gBWLDataArray

	THUMB_FUNC_END BWL_IncrementMoveValue

	THUMB_FUNC_START BWL_IncrementStatScreenViews
BWL_IncrementStatScreenViews: @ 0x080A478C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi .L080A47C0
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A47C0
	lsls r1, r4, #4
	ldr r0, .L080A47C8  @ gBWLDataArray
	adds r1, r1, r0
	cmp r1, #0
	beq .L080A47C0
	ldrb r0, [r1, #4]
	cmp r0, #0xc7
	bhi .L080A47B8
	adds r0, #1
	strb r0, [r1, #4]
.L080A47B8:
	adds r0, r5, #0
	movs r1, #2
	bl BWL_AddFavoritismValue
.L080A47C0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A47C8: .4byte gBWLDataArray

	THUMB_FUNC_END BWL_IncrementStatScreenViews

	THUMB_FUNC_START BWL_IncrementDeployCount
BWL_IncrementDeployCount: @ 0x080A47CC
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	cmp r4, #0x45
	bhi .L080A4810
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4810
	lsls r1, r4, #4
	ldr r0, .L080A4818  @ gBWLDataArray
	adds r2, r1, r0
	cmp r2, #0
	beq .L080A4810
	ldrb r3, [r2, #7]
	lsls r0, r3, #0x1a
	lsrs r0, r0, #0x1a
	cmp r0, #0x3b
	bgt .L080A4808
	adds r1, r0, #1
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #7]
.L080A4808:
	adds r0, r5, #0
	movs r1, #0x40
	bl BWL_AddFavoritismValue
.L080A4810:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4818: .4byte gBWLDataArray

	THUMB_FUNC_END BWL_IncrementDeployCount

	THUMB_FUNC_START BWL_AddTilesMoved
BWL_AddTilesMoved: @ 0x080A481C
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #0x45
	bhi .L080A4870
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4870
	lsls r1, r4, #4
	ldr r0, .L080A4878  @ gBWLDataArray
	adds r3, r1, r0
	cmp r3, #0
	beq .L080A4870
	ldrb r4, [r3, #7]
	lsrs r1, r4, #6
	ldrb r0, [r3, #8]
	lsls r0, r0, #2
	orrs r0, r1
	adds r2, r0, r5
	movs r0, #0xfa
	lsls r0, r0, #2
	cmp r2, r0
	ble .L080A4856
	adds r2, r0, #0
.L080A4856:
	movs r0, #3
	ands r0, r2
	lsls r0, r0, #6
	movs r1, #0x3f
	ands r1, r4
	orrs r1, r0
	strb r1, [r3, #7]
	lsrs r0, r2, #2
	strb r0, [r3, #8]
	adds r0, r6, #0
	movs r1, #2
	bl BWL_AddFavoritismValue
.L080A4870:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4878: .4byte gBWLDataArray

	THUMB_FUNC_END BWL_AddTilesMoved

	THUMB_FUNC_START BWL_AddExpGained
BWL_AddExpGained: @ 0x080A487C
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #0x45
	bhi .L080A48C8
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A48C8
	lsls r1, r4, #4
	ldr r0, .L080A48D0  @ gBWLDataArray
	adds r2, r1, r0
	cmp r2, #0
	beq .L080A48C8
	ldr r3, [r2, #8]
	lsls r0, r3, #8
	lsrs r0, r0, #0x14
	adds r0, r0, r5
	movs r1, #0xfa
	lsls r1, r1, #4
	cmp r0, r1
	ble .L080A48B2
	adds r0, r1, #0
.L080A48B2:
	ldr r1, .L080A48D4  @ 0x00000FFF
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r0, .L080A48D8  @ 0xFF000FFF
	ands r0, r3
	orrs r0, r1
	str r0, [r2, #8]
	adds r0, r6, #0
	adds r1, r5, #0
	bl BWL_AddFavoritismValue
.L080A48C8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A48D0: .4byte gBWLDataArray
.L080A48D4: .4byte 0x00000FFF
.L080A48D8: .4byte 0xFF000FFF

	THUMB_FUNC_END BWL_AddExpGained

	THUMB_FUNC_START StoreSomeUnitSetFlags
StoreSomeUnitSetFlags: @ 0x080A48DC
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #8
	negs r1, r1
	bl BWL_AddFavoritismValue
	pop {r0}
	bx r0

	THUMB_FUNC_END StoreSomeUnitSetFlags

	THUMB_FUNC_START func_080A48F0
func_080A48F0: @ 0x080A48F0
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, .L080A4900  @ 0xFFFFFF00
	bl BWL_AddFavoritismValue
	pop {r0}
	bx r0
	.align 2, 0
.L080A4900: .4byte 0xFFFFFF00

	THUMB_FUNC_END func_080A48F0

	THUMB_FUNC_START BWL_GetTotalBattles
BWL_GetTotalBattles: @ 0x080A4904
	push {lr}
	movs r3, #0
	ldr r2, .L080A4924  @ gBWLDataStorage
	movs r1, #0x45
.L080A490C:
	ldrh r0, [r2, #0xc]
	lsls r0, r0, #0x12
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge .L080A490C
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
.L080A4924: .4byte gBWLDataStorage

	THUMB_FUNC_END BWL_GetTotalBattles

	THUMB_FUNC_START BWL_GetTotalWins
BWL_GetTotalWins: @ 0x080A4928
	push {r4, r5, lr}
	movs r4, #0
	ldr r0, .L080A4954  @ gBWLDataStorage
	movs r5, #3
	adds r2, r0, #0
	adds r2, #0xb
	movs r3, #0x45
.L080A4936:
	ldrb r1, [r2]
	ldrb r0, [r2, #1]
	ands r0, r5
	lsls r0, r0, #8
	orrs r0, r1
	adds r4, r4, r0
	adds r2, #0x10
	subs r3, #1
	cmp r3, #0
	bge .L080A4936
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A4954: .4byte gBWLDataStorage

	THUMB_FUNC_END BWL_GetTotalWins

	THUMB_FUNC_START BWL_GetTotalLosses
BWL_GetTotalLosses: @ 0x080A4958
	push {lr}
	movs r3, #0
	ldr r2, .L080A4974  @ gBWLDataStorage
	movs r1, #0x45
.L080A4960:
	ldrb r0, [r2]
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge .L080A4960
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
.L080A4974: .4byte gBWLDataStorage

	THUMB_FUNC_END BWL_GetTotalLosses

	THUMB_FUNC_START BWL_GetTotalLevelsGained
BWL_GetTotalLevelsGained: @ 0x080A4978
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r5, .L080A49A0  @ gBWLDataStorage
	movs r4, #0x45
.L080A4980:
	ldr r0, [r5, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
	movs r1, #0x64
	bl __divsi3
	adds r6, r6, r0
	adds r5, #0x10
	subs r4, #1
	cmp r4, #0
	bge .L080A4980
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080A49A0: .4byte gBWLDataStorage

	THUMB_FUNC_END BWL_GetTotalLevelsGained

	THUMB_FUNC_START BWL_GetTotalExpGained
BWL_GetTotalExpGained: @ 0x080A49A4
	push {lr}
	movs r3, #0
	ldr r2, .L080A49C4  @ gBWLDataStorage
	movs r1, #0x45
.L080A49AC:
	ldr r0, [r2, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge .L080A49AC
	adds r0, r3, #0
	pop {r1}
	bx r1
	.align 2, 0
.L080A49C4: .4byte gBWLDataStorage

	THUMB_FUNC_END BWL_GetTotalExpGained

	THUMB_FUNC_START BWL_GetExpGained
BWL_GetExpGained: @ 0x080A49C8
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi .L080A49E8
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A49E8
	lsls r1, r4, #4
	ldr r0, .L080A49EC  @ gBWLDataArray
	adds r1, r1, r0
	cmp r1, #0
	bne .L080A49F0
.L080A49E8:
	movs r0, #0
	b .L080A49F6
	.align 2, 0
.L080A49EC: .4byte gBWLDataArray
.L080A49F0:
	ldr r0, [r1, #8]
	lsls r0, r0, #8
	lsrs r0, r0, #0x14
.L080A49F6:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END BWL_GetExpGained

	THUMB_FUNC_START BWL_GetFavoritismValue
BWL_GetFavoritismValue: @ 0x080A49FC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi .L080A4A1C
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4A1C
	lsls r1, r4, #4
	ldr r0, .L080A4A24  @ gBWLDataArray
	adds r0, r1, r0
	cmp r0, #0
	bne .L080A4A28
.L080A4A1C:
	movs r0, #0x80
	lsls r0, r0, #6
	b .L080A4A2E
	.align 2, 0
.L080A4A24: .4byte gBWLDataArray
.L080A4A28:
	ldr r0, [r0]
	lsls r0, r0, #8
	lsrs r0, r0, #0x16
.L080A4A2E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END BWL_GetFavoritismValue

	THUMB_FUNC_START BWL_AddFavoritismValue
BWL_AddFavoritismValue: @ 0x080A4A34
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi .L080A4A96
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4A96
	lsls r1, r4, #4
	ldr r0, .L080A4A70  @ gBWLDataArray
	adds r3, r1, r0
	cmp r3, #0
	beq .L080A4A96
	ldr r2, [r3]
	lsls r0, r2, #8
	lsrs r0, r0, #0x10
	adds r1, r0, r5
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r1, r0
	ble .L080A4A78
	ldr r0, .L080A4A74  @ 0xFF0000FF
	ands r0, r2
	movs r1, #0x80
	lsls r1, r1, #0xf
	b .L080A4A92
	.align 2, 0
.L080A4A70: .4byte gBWLDataArray
.L080A4A74: .4byte 0xFF0000FF
.L080A4A78:
	cmp r1, #0
	bge .L080A4A88
	ldr r0, .L080A4A84  @ 0xFF0000FF
	ands r2, r0
	str r2, [r3]
	b .L080A4A96
	.align 2, 0
.L080A4A84: .4byte 0xFF0000FF
.L080A4A88:
	ldr r0, .L080A4A9C  @ 0x0000FFFF
	ands r1, r0
	lsls r1, r1, #8
	ldr r0, .L080A4AA0  @ 0xFF0000FF
	ands r0, r2
.L080A4A92:
	orrs r0, r1
	str r0, [r3]
.L080A4A96:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4A9C: .4byte 0x0000FFFF
.L080A4AA0: .4byte 0xFF0000FF

	THUMB_FUNC_END BWL_AddFavoritismValue

	THUMB_FUNC_START func_080A4AA4
func_080A4AA4: @ 0x080A4AA4
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	movs r5, #0
	ldr r4, .L080A4B10  @ gBattleUnitA
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne .L080A4ABA
	adds r7, r4, #0
	ldr r5, .L080A4B14  @ gBattleUnitB
.L080A4ABA:
	ldr r6, .L080A4B14  @ gBattleUnitB
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne .L080A4ACA
	adds r7, r6, #0
	adds r5, r4, #0
.L080A4ACA:
	cmp r7, #0
	beq .L080A4B08
	cmp r5, #0
	beq .L080A4AF0
	movs r0, #0xb
	ldrsb r0, [r5, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne .L080A4AF0
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl BWL_AddWin
	ldr r1, .L080A4B18  @ gPlaySt
	adds r1, #0x48
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
.L080A4AF0:
	cmp r7, #0
	beq .L080A4B08
	movs r0, #0xb
	ldrsb r0, [r7, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne .L080A4B08
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	bl BWL_AddLoss
.L080A4B08:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4B10: .4byte gBattleUnitA
.L080A4B14: .4byte gBattleUnitB
.L080A4B18: .4byte gPlaySt

	THUMB_FUNC_END func_080A4AA4

	THUMB_FUNC_START IsPlaythroughIdUnique
IsPlaythroughIdUnique: @ 0x080A4B1C
	push {r4, r5, r6, lr}
	sub sp, #0xb0
	adds r6, r0, #0
	mov r0, sp
	bl LoadGeneralGameMetadata
	movs r4, #0
	add r1, sp, #0x14
.L080A4B2C:
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, r6
	beq .L080A4B58
	adds r4, #1
	cmp r4, #0xb
	ble .L080A4B2C
	movs r4, #0
	add r5, sp, #0x64
.L080A4B3E:
	adds r0, r4, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4B5C
	adds r0, r4, #0
	adds r1, r5, #0
	bl LoadSavedChapterState
	ldrb r0, [r5, #0x18]
	cmp r0, r6
	bne .L080A4B5C
.L080A4B58:
	movs r0, #0
	b .L080A4B64
.L080A4B5C:
	adds r4, #1
	cmp r4, #2
	ble .L080A4B3E
	movs r0, #1
.L080A4B64:
	add sp, #0xb0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END IsPlaythroughIdUnique

	THUMB_FUNC_START GetNewPlaythroughId
GetNewPlaythroughId: @ 0x080A4B6C
	push {r4, lr}
	movs r4, #1
.L080A4B70:
	adds r0, r4, #0
	bl IsPlaythroughIdUnique
	adds r1, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	beq .L080A4B82
	adds r0, r4, #0
	b .L080A4B88
.L080A4B82:
	adds r4, #1
	cmp r4, #0xff
	ble .L080A4B70
.L080A4B88:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetNewPlaythroughId

	THUMB_FUNC_START GGM_GetCompletionCount
GGM_GetCompletionCount: @ 0x080A4B90
	push {lr}
	movs r2, #0
	movs r1, #0
	adds r3, r0, #0
	adds r3, #0x14
.L080A4B9A:
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A4BA4
	adds r2, #1
.L080A4BA4:
	adds r1, #1
	cmp r1, #0xb
	ble .L080A4B9A
	adds r0, r2, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END GGM_GetCompletionCount

	THUMB_FUNC_START GetGlobalCompletionCount
GetGlobalCompletionCount: @ 0x080A4BB0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4BC8
	mov r0, sp
	bl GGM_GetCompletionCount
	b .L080A4BCA
.L080A4BC8:
	movs r0, #0
.L080A4BCA:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END GetGlobalCompletionCount

	THUMB_FUNC_START GGM_RegisterCompletedPlaythrough
GGM_RegisterCompletedPlaythrough: @ 0x080A4BD0
	push {r4, lr}
	movs r3, #0
	adds r4, r0, #0
	adds r4, #0x14
	adds r2, r4, #0
.L080A4BDA:
	adds r0, r2, r3
	ldrb r0, [r0]
	cmp r0, r1
	beq .L080A4BFE
	adds r3, #1
	cmp r3, #0xb
	ble .L080A4BDA
	movs r3, #0
.L080A4BEA:
	adds r2, r4, r3
	ldrb r0, [r2]
	cmp r0, #0
	bne .L080A4BF8
	strb r1, [r2]
	movs r0, #1
	b .L080A4C00
.L080A4BF8:
	adds r3, #1
	cmp r3, #0xb
	ble .L080A4BEA
.L080A4BFE:
	movs r0, #0
.L080A4C00:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GGM_RegisterCompletedPlaythrough

	THUMB_FUNC_START GetCurerentGameMode
GetCurerentGameMode: @ 0x080A4C08
	ldr r0, .L080A4C10  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	bx lr
	.align 2, 0
.L080A4C10: .4byte gPlaySt

	THUMB_FUNC_END GetCurerentGameMode

	THUMB_FUNC_START RegisterCompletedPlaythrough
RegisterCompletedPlaythrough: @ 0x080A4C14
	push {r4, r5, r6, r7, lr}
	sub sp, #0x64
	bl GetCurerentGameMode
	adds r5, r0, #0
	ldr r6, .L080A4C6C  @ gPlaySt
	ldrb r0, [r6, #0x14]
	lsrs r4, r0, #6
	movs r0, #1
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r7, r0, #0x1f
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A4C48
	bl InitSaveGeneralGameMetadata
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080A4C48:
	ldrb r1, [r6, #0x18]
	mov r0, sp
	bl GGM_RegisterCompletedPlaythrough
	mov r2, sp
	ldrb r1, [r2, #0xe]
	movs r0, #1
	adds r3, r1, #0
	orrs r3, r0
	strb r3, [r2, #0xe]
	cmp r5, #2
	beq .L080A4C70
	cmp r5, #2
	ble .L080A4CA6
	cmp r5, #3
	beq .L080A4C8A
	b .L080A4CA6
	.align 2, 0
.L080A4C6C: .4byte gPlaySt
.L080A4C70:
	cmp r7, #0
	bne .L080A4C7A
	mov r1, sp
	movs r0, #4
	b .L080A4CA2
.L080A4C7A:
	cmp r4, #0
	beq .L080A4C84
	mov r1, sp
	movs r0, #0x10
	b .L080A4CA2
.L080A4C84:
	mov r1, sp
	movs r0, #8
	b .L080A4CA2
.L080A4C8A:
	cmp r7, #0
	bne .L080A4C94
	mov r1, sp
	movs r0, #0x20
	b .L080A4CA2
.L080A4C94:
	cmp r4, #0
	beq .L080A4C9E
	mov r1, sp
	movs r0, #0x80
	b .L080A4CA2
.L080A4C9E:
	mov r1, sp
	movs r0, #0x40
.L080A4CA2:
	orrs r3, r0
	strb r3, [r1, #0xe]
.L080A4CA6:
	mov r0, sp
	bl SaveGeneralGameMetadata
	add sp, #0x64
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END RegisterCompletedPlaythrough

	THUMB_FUNC_START func_080A4CB4
func_080A4CB4: @ 0x080A4CB4
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A4CC8
	movs r0, #0
	b .L080A4CD0
.L080A4CC8:
	mov r0, sp
	ldrb r0, [r0, #0xf]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
.L080A4CD0:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A4CB4

	THUMB_FUNC_START func_080A4CD8
func_080A4CD8: @ 0x080A4CD8
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4CF6
	mov r0, sp
	ldrb r1, [r0, #0xf]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0, #0xf]
	bl SaveGeneralGameMetadata
.L080A4CF6:
	add sp, #0x64
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A4CD8

	THUMB_FUNC_START BWL_GetEntry
BWL_GetEntry: @ 0x080A4CFC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r4, #0x45
	bhi .L080A4D20
	adds r0, r4, #0
	bl GetPInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq .L080A4D20
	lsls r0, r4, #4
	ldr r1, .L080A4D1C  @ gBWLDataArray
	adds r0, r0, r1
	b .L080A4D22
	.align 2, 0
.L080A4D1C: .4byte gBWLDataArray
.L080A4D20:
	movs r0, #0
.L080A4D22:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END BWL_GetEntry

	THUMB_FUNC_START GetBonusContentClaimFlags
GetBonusContentClaimFlags: @ 0x080A4D28
	ldr r0, .L080A4D30  @ gBonusContentFlags
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L080A4D30: .4byte gBonusContentFlags

	THUMB_FUNC_END GetBonusContentClaimFlags

	THUMB_FUNC_START SetBonusContentClaimFlags
SetBonusContentClaimFlags: @ 0x080A4D34
	ldr r1, .L080A4D3C  @ gBonusContentFlags
	str r0, [r1]
	bx lr
	.align 2, 0
.L080A4D3C: .4byte gBonusContentFlags

	THUMB_FUNC_END SetBonusContentClaimFlags

	THUMB_FUNC_START SaveBonusContentClaimFlags
SaveBonusContentClaimFlags: @ 0x080A4D40
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A4D54  @ gBonusContentFlags
	ldr r2, .L080A4D58  @ 0x00000D88
	adds r1, r1, r2
	movs r2, #4
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
.L080A4D54: .4byte gBonusContentFlags
.L080A4D58: .4byte 0x00000D88

	THUMB_FUNC_END SaveBonusContentClaimFlags

	THUMB_FUNC_START LoadBonusContentClaimFlags
LoadBonusContentClaimFlags: @ 0x080A4D5C
	push {lr}
	ldr r2, .L080A4D74  @ ReadSramFast
	ldr r1, .L080A4D78  @ 0x00000D88
	adds r0, r0, r1
	ldr r1, .L080A4D7C  @ gBonusContentFlags
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
.L080A4D74: .4byte ReadSramFast
.L080A4D78: .4byte 0x00000D88
.L080A4D7C: .4byte gBonusContentFlags

	THUMB_FUNC_END LoadBonusContentClaimFlags

	THUMB_FUNC_START UpdateLastUsedGameSaveSlot
UpdateLastUsedGameSaveSlot: @ 0x080A4D80
	push {r4, lr}
	sub sp, #0x64
	adds r4, r0, #0
	mov r0, sp
	bl LoadGeneralGameMetadata
	mov r0, sp
	adds r0, #0x62
	strb r4, [r0]
	mov r0, sp
	bl SaveGeneralGameMetadataNoChecksum
	add sp, #0x64
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END UpdateLastUsedGameSaveSlot

	THUMB_FUNC_START GetLastUsedGameSaveSlot
GetLastUsedGameSaveSlot: @ 0x080A4DA0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4DBE
	mov r0, sp
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #2
	bgt .L080A4DBE
	cmp r0, #0
	bge .L080A4DC0
.L080A4DBE:
	movs r0, #0
.L080A4DC0:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END GetLastUsedGameSaveSlot

	THUMB_FUNC_START func_080A4DC8
func_080A4DC8: @ 0x080A4DC8
	push {r4, r5, lr}
	sub sp, #0x5c
	adds r5, r0, #0
	movs r0, #3
	bl func_080A5DA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A4DF0
	add r4, sp, #0x10
	movs r0, #3
	adds r1, r4, #0
	bl LoadSuspendedChapterState
	ldrb r0, [r4, #0xc]
	cmp r0, r5
	bne .L080A4DF0
	movs r0, #3
	bl ClearSaveBlock
.L080A4DF0:
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r5, #0
	bl SaveMetadata_Save
	add sp, #0x5c
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A4DC8

	THUMB_FUNC_START CopyGameSave
CopyGameSave: @ 0x080A4E08
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	mov r9, r1
	bl GetSaveSourceAddress
	adds r6, r0, #0
	mov r0, r9
	bl GetSaveTargetAddress
	mov r8, r0
	ldr r0, .L080A4E60  @ ReadSramFast
	ldr r4, .L080A4E64  @ gBuf
	ldr r5, .L080A4E68  @ 0x00000DC8
	ldr r3, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	bl WriteAndVerifySramFast
	ldr r0, .L080A4E6C  @ 0x00040624
	str r0, [sp]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, r9
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4E60: .4byte ReadSramFast
.L080A4E64: .4byte gBuf
.L080A4E68: .4byte 0x00000DC8
.L080A4E6C: .4byte 0x00040624

	THUMB_FUNC_END CopyGameSave

	THUMB_FUNC_START SaveNewGame
SaveNewGame: @ 0x080A4E70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x54
	mov sl, r0
	adds r5, r1, #0
	mov r8, r2
	adds r4, r3, #0
	bl GetSaveTargetAddress
	adds r7, r0, #0
	mov r0, r8
	cmp r0, #0
	bne .L080A4E96
	ldr r0, .L080A4FE4  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	mov r8, r0
.L080A4E96:
	cmp r4, #0
	bge .L080A4EA4
	ldr r0, .L080A4FE4  @ gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r4, r0, #0x1f
.L080A4EA4:
	movs r0, #0
	bl SetGameTime
	lsls r1, r4, #0x18
	asrs r1, r1, #0x18
	adds r0, r5, #0
	bl InitPlayConfig
	bl InitUnits
	bl ClearConvoyItems
	bl ClearGlobalTriggerState
	movs r0, #3
	bl ClearSaveBlock
	ldr r6, .L080A4FE4  @ gPlaySt
	adds r2, r6, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldrh r1, [r6, #0x2c]
	ldr r0, .L080A4FE8  @ 0xFFFFE00F
	ands r0, r1
	strh r0, [r6, #0x2c]
	add r0, sp, #0x34
	movs r4, #0
	strh r4, [r0]
	adds r1, r6, #0
	adds r1, #0x30
	ldr r2, .L080A4FEC  @ 0x01000008
	bl CpuSet
	ldr r0, [r6, #0x2c]
	ldr r1, .L080A4FF0  @ 0xFF801FFF
	ands r0, r1
	str r0, [r6, #0x2c]
	movs r5, #0
	mov r1, r8
	strb r1, [r6, #0x1b]
	adds r2, r6, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x20
	strb r4, [r0]
	strb r4, [r6, #0xe]
	bl GetNewPlaythroughId
	strb r0, [r6, #0x18]
	mov r0, sl
	strb r0, [r6, #0xc]
	bl GetGlobalCompletionCount
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #7
	ldrh r2, [r6, #0x2e]
	ldr r1, .L080A4FF4  @ 0xFFFFF07F
	ands r1, r2
	orrs r1, r0
	strh r1, [r6, #0x2e]
	adds r0, r6, #0
	adds r1, r7, #0
	movs r2, #0x4c
	bl WriteAndVerifySramFast
	movs r0, #0
	bl SetBonusContentClaimFlags
	adds r0, r7, #0
	bl SaveBonusContentClaimFlags
	mov r0, sp
	adds r0, #0x36
	strh r5, [r0]
	add r4, sp, #0x10
	ldr r2, .L080A4FF8  @ 0x01000012
	adds r1, r4, #0
	bl CpuSet
	add r1, sp, #0x50
	mov r8, r1
	add r0, sp, #0x38
	mov r9, r0
	adds r5, r7, #0
	adds r5, #0x4c
	movs r6, #0x32
.L080A4F62:
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	adds r5, #0x24
	subs r6, #1
	cmp r6, #0
	bge .L080A4F62
	movs r5, #0
	movs r0, #0xef
	lsls r0, r0, #3
	adds r1, r7, r0
	adds r0, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	ldr r1, .L080A4FFC  @ 0x0000079C
	adds r0, r7, r1
	bl SaveConvoyItems
	adds r0, r7, #0
	bl SaveClearedBWLAndChapterWinData
	ldr r1, .L080A5000  @ 0x00000D6C
	adds r0, r7, r1
	bl SaveGlobalEventIndexes
	ldr r1, .L080A5004  @ 0x00000D8C
	adds r0, r7, r1
	bl func_080A7074
	movs r4, #0
	mov r0, r8
	strh r5, [r0]
	ldr r2, .L080A5008  @ 0x0100000C
	mov r1, r9
	bl CpuSet
	movs r0, #0xdb
	lsls r0, r0, #4
	adds r1, r7, r0
	mov r0, r9
	movs r2, #0x18
	bl WriteAndVerifySramFast
	ldr r0, .L080A500C  @ 0x00040624
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, sl
	bl SaveMetadata_Save
	mov r0, sl
	bl UpdateLastUsedGameSaveSlot
	add sp, #0x54
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A4FE4: .4byte gPlaySt
.L080A4FE8: .4byte 0xFFFFE00F
.L080A4FEC: .4byte 0x01000008
.L080A4FF0: .4byte 0xFF801FFF
.L080A4FF4: .4byte 0xFFFFF07F
.L080A4FF8: .4byte 0x01000012
.L080A4FFC: .4byte 0x0000079C
.L080A5000: .4byte 0x00000D6C
.L080A5004: .4byte 0x00000D8C
.L080A5008: .4byte 0x0100000C
.L080A500C: .4byte 0x00040624

	THUMB_FUNC_END SaveNewGame

	THUMB_FUNC_START SaveGame
SaveGame: @ 0x080A5010
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x90
	mov sl, r0
	bl GetSaveTargetAddress
	adds r7, r0, #0
	movs r0, #3
	bl ClearSaveBlock
	ldr r4, .L080A5104  @ gPlaySt
	mov r0, sl
	strb r0, [r4, #0xc]
	bl GetGameTime
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x4c
	bl WriteAndVerifySramFast
	add r1, sp, #0x10
	mov r8, r1
	mov r0, sp
	adds r0, #0x74
	str r0, [sp, #0x8c]
	adds r4, r7, #0
	adds r4, #0x4c
	movs r6, #0
	ldr r1, .L080A5108  @ gUnitArrayBlue
	mov r9, r1
	movs r5, #0x32
.L080A5056:
	mov r1, r9
	adds r0, r6, r1
	adds r1, r4, #0
	bl SaveUnit
	adds r4, #0x24
	adds r6, #0x48
	subs r5, #1
	cmp r5, #0
	bge .L080A5056
	mov r0, r8
	bl LoadGeneralGameMetadata
	movs r4, #0
	ldr r6, .L080A5108  @ gUnitArrayBlue
	movs r5, #0x32
.L080A5076:
	adds r0, r4, r6
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	mov r1, r8
	bl SGM_SetCharacterKnown
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge .L080A5076
	movs r4, #0
	mov r0, r8
	bl SaveGeneralGameMetadata
	movs r1, #0xef
	lsls r1, r1, #3
	adds r0, r7, r1
	bl SaveGMMonsterRnState
	ldr r1, .L080A510C  @ 0x0000079C
	adds r0, r7, r1
	bl SaveConvoyItems
	ldr r1, .L080A5110  @ 0x0000084C
	adds r0, r7, r1
	bl SaveBWLEntries
	ldr r1, .L080A5114  @ 0x00000CAC
	adds r0, r7, r1
	bl SaveChapterWinData
	adds r0, r7, #0
	bl SaveBonusContentClaimFlags
	ldr r1, .L080A5118  @ 0x00000D6C
	adds r0, r7, r1
	bl SaveGlobalEventIndexes
	ldr r1, .L080A511C  @ 0x00000D8C
	adds r0, r7, r1
	ldr r1, .L080A5120  @ gGmData
	bl SaveWMStuff
	ldr r0, [sp, #0x8c]
	bl func_08037E4C
	movs r0, #0xdb
	lsls r0, r0, #4
	adds r1, r7, r0
	ldr r0, [sp, #0x8c]
	movs r2, #0x18
	bl WriteAndVerifySramFast
	ldr r0, .L080A5124  @ 0x00040624
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, sl
	bl SaveMetadata_Save
	mov r0, sl
	bl UpdateLastUsedGameSaveSlot
	add sp, #0x90
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A5104: .4byte gPlaySt
.L080A5108: .4byte gUnitArrayBlue
.L080A510C: .4byte 0x0000079C
.L080A5110: .4byte 0x0000084C
.L080A5114: .4byte 0x00000CAC
.L080A5118: .4byte 0x00000D6C
.L080A511C: .4byte 0x00000D8C
.L080A5120: .4byte gGmData
.L080A5124: .4byte 0x00040624

	THUMB_FUNC_END SaveGame

	THUMB_FUNC_START LoadGame
LoadGame: @ 0x080A5128
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	mov r9, r0
	bl GetSaveSourceAddress
	adds r7, r0, #0
	ldr r0, .L080A51F0  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne .L080A514C
	movs r0, #3
	bl ClearSaveBlock
.L080A514C:
	ldr r0, .L080A51F4  @ ReadSramFast
	ldr r4, .L080A51F8  @ gPlaySt
	ldr r3, [r0]
	adds r0, r7, #0
	adds r1, r4, #0
	movs r2, #0x4c
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameTime
	mov r0, r9
	strb r0, [r4, #0xc]
	bl InitUnits
	movs r6, #0
	adds r4, r7, #0
	adds r4, #0x4c
	ldr r1, .L080A51FC  @ gUnitArrayBlue
	mov r8, r1
	movs r5, #0x32
.L080A5176:
	mov r2, r8
	adds r1, r6, r2
	adds r0, r4, #0
	bl LoadSavedUnit
	adds r6, #0x48
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge .L080A5176
	movs r1, #0xef
	lsls r1, r1, #3
	adds r0, r7, r1
	bl LoadGMMonsterRnState
	ldr r2, .L080A5200  @ 0x0000079C
	adds r0, r7, r2
	bl LoadConvoyItems
	ldr r1, .L080A5204  @ 0x00000D6C
	adds r0, r7, r1
	bl LoadPermanentEids
	ldr r2, .L080A5208  @ 0x0000084C
	adds r0, r7, r2
	bl LoadBWLEntries
	ldr r1, .L080A520C  @ 0x00000CAC
	adds r0, r7, r1
	bl LoadChapterDataWinArray
	adds r0, r7, #0
	bl LoadBonusContentClaimFlags
	ldr r2, .L080A5210  @ 0x00000D8C
	adds r0, r7, r2
	ldr r1, .L080A5214  @ gGmData
	bl LoadWMStuff
	ldr r1, .L080A51F4  @ ReadSramFast
	movs r2, #0xdb
	lsls r2, r2, #4
	adds r0, r7, r2
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x18
	bl _call_via_r3
	mov r0, sp
	bl func_08037E64
	mov r0, r9
	bl UpdateLastUsedGameSaveSlot
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A51F0: .4byte gBmSt
.L080A51F4: .4byte ReadSramFast
.L080A51F8: .4byte gPlaySt
.L080A51FC: .4byte gUnitArrayBlue
.L080A5200: .4byte 0x0000079C
.L080A5204: .4byte 0x00000D6C
.L080A5208: .4byte 0x0000084C
.L080A520C: .4byte 0x00000CAC
.L080A5210: .4byte 0x00000D8C
.L080A5214: .4byte gGmData

	THUMB_FUNC_END LoadGame

	THUMB_FUNC_START IsSaveBlockValid
IsSaveBlockValid: @ 0x080A5218
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl SaveMetadata_Load
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_END IsSaveBlockValid

	THUMB_FUNC_START LoadSavedChapterState
LoadSavedChapterState: @ 0x080A522C
	push {r4, lr}
	adds r4, r1, #0
	bl GetSaveSourceAddress
	ldr r1, .L080A5248  @ ReadSramFast
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x4c
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A5248: .4byte ReadSramFast

	THUMB_FUNC_END LoadSavedChapterState

	THUMB_FUNC_START LoadSavedBonusClaimFlags
LoadSavedBonusClaimFlags: @ 0x080A524C
	push {lr}
	sub sp, #4
	bl GetSaveSourceAddress
	ldr r1, .L080A526C  @ ReadSramFast
	ldr r2, .L080A5270  @ 0x00000D88
	adds r0, r0, r2
	ldr r3, [r1]
	mov r1, sp
	movs r2, #4
	bl _call_via_r3
	ldr r0, [sp]
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
.L080A526C: .4byte ReadSramFast
.L080A5270: .4byte 0x00000D88

	THUMB_FUNC_END LoadSavedBonusClaimFlags

	THUMB_FUNC_START LoadSavedWMStuff
LoadSavedWMStuff: @ 0x080A5274
	push {r4, lr}
	adds r4, r1, #0
	bl GetSaveSourceAddress
	ldr r1, .L080A528C  @ 0x00000D8C
	adds r0, r0, r1
	adds r1, r4, #0
	bl LoadWMStuff
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A528C: .4byte 0x00000D8C

	THUMB_FUNC_END LoadSavedWMStuff

	THUMB_FUNC_START LoadSavedEid8A
LoadSavedEid8A: @ 0x080A5290
	push {r4, lr}
	bl GetSaveSourceAddress
	ldr r1, .L080A52B4  @ 0x00000D6C
	adds r0, r0, r1
	ldr r4, .L080A52B8  @ gBuf
	adds r1, r4, #0
	bl LoadPermanentEidsIn
	movs r0, #0x8a
	adds r1, r4, #0
	bl CheckGlobalEventIdFrom
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080A52B4: .4byte 0x00000D6C
.L080A52B8: .4byte gBuf

	THUMB_FUNC_END LoadSavedEid8A

	THUMB_FUNC_START func_080A52BC
func_080A52BC: @ 0x080A52BC
	push {lr}
	adds r2, r0, #0
	ldrb r1, [r2, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne .L080A52D6
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bne .L080A52D6
	movs r0, #0
	b .L080A52D8
.L080A52D6:
	movs r0, #1
.L080A52D8:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A52BC

	THUMB_FUNC_START func_080A52DC
func_080A52DC: @ 0x080A52DC
	push {r4, lr}
	sub sp, #0x4c
	adds r4, r0, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A5300
	adds r0, r4, #0
	mov r1, sp
	bl LoadSavedChapterState
	mov r0, sp
	bl func_080A52BC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b .L080A5302
.L080A5300:
	movs r0, #0
.L080A5302:
	add sp, #0x4c
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A52DC

	THUMB_FUNC_START func_080A530C
func_080A530C: @ 0x080A530C
	push {r4, lr}
	sub sp, #0x4c
	adds r4, r0, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A5332
	adds r0, r4, #0
	mov r1, sp
	bl LoadSavedChapterState
	mov r0, sp
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b .L080A5334
.L080A5332:
	movs r0, #0
.L080A5334:
	add sp, #0x4c
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A530C

	THUMB_FUNC_START SaveUnit
SaveUnit: @ 0x080A533C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x70
	adds r7, r0, #0
	str r1, [sp, #0x6c]
	mov r1, sp
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	strb r0, [r1, #0x14]
	mov r3, sp
	ldr r0, [r7, #4]
	ldrb r1, [r0, #4]
	movs r0, #0x7f
	ands r1, r0
	ldrb r2, [r3]
	movs r5, #0x80
	negs r5, r5
	adds r0, r5, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	ldr r4, [r7]
	cmp r4, #0
	bne .L080A5388
	add r7, sp, #0x24
	adds r0, r7, #0
	bl ClearUnit
	mov r0, sp
	strb r4, [r0, #0x14]
	mov r2, sp
	ldrb r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	strb r0, [r2]
.L080A5388:
	mov r4, sp
	movs r1, #8
	ldrsb r1, [r7, r1]
	movs r0, #0x1f
	mov r9, r0
	mov r0, r9
	ands r1, r0
	lsls r1, r1, #7
	ldrh r2, [r4]
	ldr r3, .L080A5748  @ 0xFFFFF07F
	adds r0, r3, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r4]
	ldrb r2, [r7, #9]
	movs r1, #0x7f
	mov sl, r1
	ands r2, r1
	lsls r2, r2, #0xc
	ldr r0, [sp]
	ldr r1, .L080A574C  @ 0xFFF80FFF
	ands r0, r1
	orrs r0, r2
	str r0, [sp]
	movs r1, #0x10
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #3
	ldrh r2, [r4, #2]
	ldr r0, .L080A5750  @ 0xFFFFFE07
	ands r0, r2
	orrs r0, r1
	strh r0, [r4, #2]
	movs r1, #0x11
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	ldrb r2, [r4, #3]
	movs r0, #0x7f
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #3]
	movs r2, #0x12
	ldrsb r2, [r7, r2]
	movs r6, #0x3f
	ands r2, r6
	lsls r2, r2, #0xc
	ldr r0, [sp, #4]
	ldr r1, .L080A5754  @ 0xFFFC0FFF
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #4]
	movs r1, #0x14
	ldrsb r1, [r7, r1]
	movs r5, #0x1f
	ands r1, r5
	lsls r1, r1, #2
	ldrb r2, [r4, #6]
	movs r0, #0x7d
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #6]
	mov r2, sp
	movs r0, #0x15
	ldrsb r0, [r7, r0]
	mov r4, r9
	ands r0, r4
	lsls r0, r0, #7
	ldrh r1, [r2, #6]
	ands r3, r1
	orrs r3, r0
	strh r3, [r2, #6]
	mov r4, sp
	movs r3, #0x16
	ldrsb r3, [r7, r3]
	movs r0, #0xf
	mov r8, r0
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldrb r2, [r4, #7]
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #7]
	lsrs r3, r3, #4
	movs r1, #1
	mov ip, r1
	ands r3, r1
	ldrb r1, [r4, #8]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r3
	strb r0, [r4, #8]
	mov r3, sp
	movs r1, #0x17
	ldrsb r1, [r7, r1]
	ands r1, r5
	lsls r1, r1, #1
	movs r2, #0x3f
	negs r2, r2
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #8]
	movs r1, #0x18
	ldrsb r1, [r7, r1]
	mov r4, r9
	ands r1, r4
	lsls r1, r1, #6
	ldrh r2, [r3, #8]
	ldr r0, .L080A5758  @ 0xFFFFF83F
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #8]
	movs r1, #0x19
	ldrsb r1, [r7, r1]
	lsls r1, r1, #3
	ldrb r2, [r3, #9]
	movs r0, #7
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #9]
	movs r1, #0x1a
	ldrsb r1, [r7, r1]
	ands r1, r5
	ldrb r2, [r3, #0xa]
	movs r0, #0x20
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #0xa]
	movs r1, #0x1d
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #5
	ldrh r2, [r3, #0xa]
	ldr r0, .L080A575C  @ 0xFFFFFC1F
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #0xa]
	ldrh r2, [r7, #0x1e]
	adds r1, r2, #0
	ands r1, r6
	lsls r1, r1, #2
	ldrb r4, [r3, #0xb]
	movs r5, #3
	adds r0, r5, #0
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #0xb]
	lsrs r2, r2, #6
	strb r2, [r3, #0xc]
	ldrh r2, [r7, #0x20]
	ldr r4, .L080A5760  @ 0x00003FFF
	ands r2, r4
	lsls r2, r2, #8
	ldr r0, [sp, #0xc]
	ldr r1, .L080A5764  @ 0xFFC000FF
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #0xc]
	ldrh r1, [r7, #0x22]
	ldr r0, .L080A5768  @ 0x000003FF
	ands r0, r1
	lsls r0, r0, #6
	ldrh r2, [r3, #0xe]
	ands r6, r2
	orrs r6, r0
	strh r6, [r3, #0xe]
	lsrs r1, r1, #0xa
	mov r0, r8
	ands r1, r0
	ldrb r2, [r3, #0x10]
	movs r0, #0x10
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrh r1, [r7, #0x24]
	ands r1, r4
	lsls r1, r1, #4
	ldr r0, [sp, #0x10]
	ldr r2, .L080A576C  @ 0xFFFC000F
	ands r0, r2
	orrs r0, r1
	str r0, [sp, #0x10]
	mov r2, sp
	ldrh r0, [r7, #0x26]
	lsls r0, r0, #2
	ldrh r1, [r2, #0x12]
	ands r5, r1
	orrs r5, r0
	strh r5, [r2, #0x12]
	mov r1, sp
	ldrb r0, [r1, #3]
	mov r5, sl
	ands r5, r0
	strb r5, [r1, #3]
	ldrh r2, [r1, #4]
	ldr r6, .L080A5770  @ 0xFFFFF000
	adds r0, r6, #0
	ands r0, r2
	strh r0, [r1, #4]
	ldr r0, [r7, #0xc]
	movs r1, #4
	mov r8, r1
	ands r0, r1
	cmp r0, #0
	beq .L080A5552
	mov r0, sp
	ldrh r2, [r0, #4]
	ldr r4, .L080A5774  @ 0x00000FFF
	ands r2, r4
	mov r0, ip
	lsrs r1, r0, #1
	lsls r0, r0, #7
	orrs r0, r5
	strb r0, [r3, #3]
	orrs r1, r2
	ands r1, r4
	ldrh r2, [r3, #4]
	adds r0, r6, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
.L080A5552:
	ldr r0, [r7, #0xc]
	movs r1, #8
	mov r9, r1
	ands r0, r1
	cmp r0, #0
	beq .L080A5592
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #2
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
.L080A5592:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #7
	ands r0, r1
	cmp r0, #0
	beq .L080A55D2
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldrh r1, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r1, r5
	lsls r1, r1, #1
	orrs r1, r2
	mov r0, r8
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	ldrh r2, [r3, #4]
	adds r0, r6, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
.L080A55D2:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	beq .L080A5612
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r2, r4, #7
	ldrh r1, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r1, r5
	lsls r1, r1, #1
	orrs r1, r2
	mov r0, r9
	orrs r1, r0
	adds r2, r1, #0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r2
	strb r0, [r3, #3]
	lsrs r1, r1, #1
	ands r1, r5
	ldrh r2, [r3, #4]
	adds r0, r6, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #4]
.L080A5612:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #6
	ands r0, r1
	cmp r0, #0
	beq .L080A5652
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x10
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
.L080A5652:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	beq .L080A5692
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x20
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
.L080A5692:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x12
	ands r0, r1
	cmp r0, #0
	beq .L080A56D2
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x40
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
.L080A56D2:
	ldr r0, [r7, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0xe
	ands r0, r1
	cmp r0, #0
	beq .L080A5712
	mov r3, sp
	mov r0, sp
	ldrb r4, [r0, #3]
	lsrs r1, r4, #7
	ldrh r2, [r0, #4]
	ldr r5, .L080A5774  @ 0x00000FFF
	ands r2, r5
	lsls r2, r2, #1
	orrs r2, r1
	movs r0, #0x80
	orrs r2, r0
	adds r1, r2, #0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #7
	mov r0, sl
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #3]
	lsrs r2, r2, #1
	ands r2, r5
	ldrh r1, [r3, #4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r2
	strh r0, [r3, #4]
.L080A5712:
	movs r2, #0
	mov r5, sp
	adds r5, #0x1d
	adds r6, r7, #0
	adds r6, #0x32
	mov r4, sp
	adds r4, #0x15
	adds r3, r7, #0
	adds r3, #0x28
.L080A5724:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble .L080A5724
	movs r2, #0
	adds r4, r5, #0
	adds r3, r6, #0
.L080A5738:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	b .L080A5778
	.align 2, 0
.L080A5748: .4byte 0xFFFFF07F
.L080A574C: .4byte 0xFFF80FFF
.L080A5750: .4byte 0xFFFFFE07
.L080A5754: .4byte 0xFFFC0FFF
.L080A5758: .4byte 0xFFFFF83F
.L080A575C: .4byte 0xFFFFFC1F
.L080A5760: .4byte 0x00003FFF
.L080A5764: .4byte 0xFFC000FF
.L080A5768: .4byte 0x000003FF
.L080A576C: .4byte 0xFFFC000F
.L080A5770: .4byte 0xFFFFF000
.L080A5774: .4byte 0x00000FFF
.L080A5778:
	ble .L080A5738
	mov r0, sp
	ldr r1, [sp, #0x6c]
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x70
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveUnit

	THUMB_FUNC_START LoadSavedUnit
LoadSavedUnit: @ 0x080A5794
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x24
	adds r4, r1, #0
	ldr r1, .L080A59D8  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x24
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0, #0x14]
	bl GetPInfo
	str r0, [r4]
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl GetJInfo
	str r0, [r4, #4]
	mov r0, sp
	ldrh r0, [r0]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #8]
	ldr r0, [sp]
	lsls r0, r0, #0xd
	lsrs r3, r0, #0x19
	strb r3, [r4, #9]
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x10]
	mov r0, sp
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x11]
	ldr r0, [sp, #4]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x12]
	mov r0, sp
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x14]
	mov r0, sp
	ldrh r0, [r0, #6]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x15]
	mov r0, sp
	ldrb r1, [r0, #7]
	lsrs r1, r1, #4
	ldrb r0, [r0, #8]
	movs r5, #1
	ands r0, r5
	lsls r0, r0, #4
	orrs r0, r1
	strb r0, [r4, #0x16]
	mov r0, sp
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x17]
	mov r0, sp
	ldrh r0, [r0, #8]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x18]
	mov r0, sp
	ldrb r0, [r0, #9]
	lsrs r0, r0, #3
	strb r0, [r4, #0x19]
	mov r0, sp
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1a]
	mov r0, sp
	ldrh r0, [r0, #0xa]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1d]
	mov r0, sp
	ldrb r1, [r0, #0xb]
	lsrs r1, r1, #2
	ldrb r0, [r0, #0xc]
	lsls r0, r0, #6
	orrs r0, r1
	strh r0, [r4, #0x1e]
	ldr r0, [sp, #0xc]
	lsls r0, r0, #0xa
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x20]
	mov r0, sp
	ldrh r2, [r0, #0xe]
	lsrs r2, r2, #6
	ldrb r0, [r0, #0x10]
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #0xa
	orrs r0, r2
	strh r0, [r4, #0x22]
	ldr r0, [sp, #0x10]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x24]
	mov r0, sp
	ldrh r0, [r0, #0x12]
	lsrs r0, r0, #2
	strh r0, [r4, #0x26]
	cmp r3, #0x63
	bls .L080A5886
	movs r0, #0xff
	strb r0, [r4, #9]
.L080A5886:
	movs r0, #0
	str r0, [r4, #0xc]
	mov r0, sp
	ldrb r1, [r0, #3]
	lsrs r1, r1, #7
	ldrh r0, [r0, #4]
	ldr r2, .L080A59DC  @ 0x00000FFF
	ands r0, r2
	lsls r0, r0, #1
	orrs r0, r1
	ands r0, r5
	cmp r0, #0
	beq .L080A58A4
	movs r0, #5
	str r0, [r4, #0xc]
.L080A58A4:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A58BC
	ldr r0, [r4, #0xc]
	movs r1, #9
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A58BC:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq .L080A58D6
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A58D6:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq .L080A58F0
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A58F0:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080A590A
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #6
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A590A:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080A5924
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A5924:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080A593E
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x12
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A593E:
	mov r0, sp
	ldrh r0, [r0, #4]
	ands r0, r2
	lsls r0, r0, #1
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A5958
	ldr r0, [r4, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0xe
	orrs r0, r1
	str r0, [r4, #0xc]
.L080A5958:
	movs r2, #0
	adds r7, r4, #0
	adds r7, #0x32
	mov r6, sp
	adds r6, #0x1d
	movs r0, #0x39
	adds r0, r0, r4
	mov r8, r0
	adds r5, r4, #0
	adds r5, #0x28
	mov r3, sp
	adds r3, #0x15
.L080A5970:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble .L080A5970
	movs r2, #0
	adds r5, r7, #0
	adds r3, r6, #0
.L080A5984:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble .L080A5984
	adds r0, r4, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl SetUnitHp
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	ldrb r0, [r4, #9]
	cmp r0, #0x7f
	bne .L080A59B0
	movs r0, #0xff
	strb r0, [r4, #9]
.L080A59B0:
	ldrb r1, [r4, #0x10]
	movs r0, #0x10
	ldrsb r0, [r4, r0]
	cmp r0, #0x3f
	bne .L080A59BE
	movs r0, #0xff
	strb r0, [r4, #0x10]
.L080A59BE:
	ldrb r1, [r4, #0x11]
	movs r0, #0x11
	ldrsb r0, [r4, r0]
	cmp r0, #0x3f
	bne .L080A59CC
	movs r0, #0xff
	strb r0, [r4, #0x11]
.L080A59CC:
	add sp, #0x24
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A59D8: .4byte ReadSramFast
.L080A59DC: .4byte 0x00000FFF

	THUMB_FUNC_END LoadSavedUnit

	THUMB_FUNC_START SaveGMMonsterRnState
SaveGMMonsterRnState: @ 0x080A59E0
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	mov r0, sp
	bl func_080A71E4
	mov r0, sp
	adds r1, r4, #0
	movs r2, #8
	bl WriteAndVerifySramFast
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveGMMonsterRnState

	THUMB_FUNC_START LoadGMMonsterRnState
LoadGMMonsterRnState: @ 0x080A5A00
	push {lr}
	sub sp, #8
	ldr r1, .L080A5A1C  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #8
	bl _call_via_r3
	mov r0, sp
	bl func_080A71F8
	add sp, #8
	pop {r0}
	bx r0
	.align 2, 0
.L080A5A1C: .4byte ReadSramFast

	THUMB_FUNC_END LoadGMMonsterRnState

	THUMB_FUNC_START ClearSaveBlock
ClearSaveBlock: @ 0x080A5A20
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r4, #0
	bl SaveMetadata_Save
	cmp r4, #3
	bne .L080A5A40
	mov r0, sp
	movs r1, #4
	bl SaveMetadata_Save
.L080A5A40:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END ClearSaveBlock

	THUMB_FUNC_START SaveSuspendedGame
SaveSuspendedGame: @ 0x080A5A48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x40
	mov r9, r0
	ldr r4, .L080A5BC0  @ gPlaySt
	ldrb r1, [r4, #0x14]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080A5A64
	b .L080A5BB0
.L080A5A64:
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A5A70
	b .L080A5BB0
.L080A5A70:
	bl GetNextSuspendSaveId
	add r9, r0
	mov r0, r9
	bl GetSaveTargetAddress
	adds r7, r0, #0
	bl GetGameTime
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x4c
	bl WriteAndVerifySramFast
	bl StoreRNStateToActionStruct
	ldr r0, .L080A5BC4  @ gAction
	adds r1, r7, #0
	adds r1, #0x4c
	movs r2, #0x38
	bl WriteAndVerifySramFast
	ldr r5, .L080A5BC8  @ gBuf
	add r0, sp, #0x10
	mov sl, r0
	add r1, sp, #0x20
	mov r8, r1
	mov r2, sp
	adds r2, #0x38
	str r2, [sp, #0x3c]
	ldr r6, .L080A5BCC  @ gUnitArrayBlue
	movs r4, #0x32
.L080A5AB2:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl PackUnitStructForSuspend
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge .L080A5AB2
	ldr r4, .L080A5BC8  @ gBuf
	ldr r2, .L080A5BD0  @ 0x00000A5C
	adds r1, r7, #0
	adds r1, #0x84
	adds r0, r4, #0
	bl WriteSramFast
	adds r5, r4, #0
	ldr r6, .L080A5BD4  @ gUnitArrayRed
	movs r4, #0x31
.L080A5AD8:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl PackUnitStructForSuspend
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge .L080A5AD8
	ldr r6, .L080A5BD8  @ gUnitArrayGreen
	movs r4, #9
.L080A5AEE:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl PackUnitStructForSuspend
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge .L080A5AEE
	movs r4, #0
	ldr r0, .L080A5BC8  @ gBuf
	ldr r2, .L080A5BDC  @ 0x00000B14
	adds r1, r7, r2
	movs r2, #0xc3
	lsls r2, r2, #4
	bl WriteSramFast
	ldr r1, .L080A5BE0  @ 0x00001F24
	adds r0, r7, r1
	bl SaveGlobalEventIndexes
	ldr r2, .L080A5BE4  @ 0x00001F3D
	adds r0, r7, r2
	bl SaveLocalEventIndexes
	ldr r1, .L080A5BE8  @ 0x00001944
	adds r0, r7, r1
	bl SaveConvoyItems
	ldr r2, .L080A5BEC  @ 0x000019F4
	adds r0, r7, r2
	bl SaveBWLEntries
	ldr r1, .L080A5BF0  @ 0x00001E54
	adds r0, r7, r1
	bl SaveChapterWinData
	ldr r2, .L080A5BF4  @ 0x00001744
	adds r0, r7, r2
	bl SaveTrapStructs
	mov r0, sl
	bl GetOverriddenUnusableMenuCommands
	ldr r0, .L080A5BF8  @ 0x00001F14
	adds r1, r7, r0
	mov r0, sl
	movs r2, #0x10
	bl WriteAndVerifySramFast
	ldr r1, .L080A5BFC  @ 0x00001F44
	adds r0, r7, r1
	ldr r1, .L080A5C00  @ gGmData
	bl SaveWMStuff
	mov r0, r8
	bl func_08037E4C
	movs r2, #0xae
	lsls r2, r2, #4
	adds r1, r7, r2
	mov r0, r8
	movs r2, #0x18
	bl WriteAndVerifySramFast
	mov r0, r8
	bl func_08037E08
	ldr r0, .L080A5C04  @ 0x00001F68
	adds r1, r7, r0
	mov r0, r8
	movs r2, #0xc
	bl WriteAndVerifySramFast
	bl GetEventCounter
	str r0, [sp, #0x38]
	ldr r2, .L080A5C08  @ 0x00001F74
	adds r1, r7, r2
	ldr r0, [sp, #0x3c]
	movs r2, #4
	bl WriteAndVerifySramFast
	ldr r0, .L080A5C0C  @ 0x00040624
	str r0, [sp]
	mov r1, sp
	movs r0, #1
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, r9
	bl SaveMetadata_Save
	ldr r0, .L080A5C10  @ gBmSt
	adds r0, #0x3c
	strb r4, [r0]
	bl UpdateNextSuspendSaveId
.L080A5BB0:
	add sp, #0x40
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A5BC0: .4byte gPlaySt
.L080A5BC4: .4byte gAction
.L080A5BC8: .4byte gBuf
.L080A5BCC: .4byte gUnitArrayBlue
.L080A5BD0: .4byte 0x00000A5C
.L080A5BD4: .4byte gUnitArrayRed
.L080A5BD8: .4byte gUnitArrayGreen
.L080A5BDC: .4byte 0x00000B14
.L080A5BE0: .4byte 0x00001F24
.L080A5BE4: .4byte 0x00001F3D
.L080A5BE8: .4byte 0x00001944
.L080A5BEC: .4byte 0x000019F4
.L080A5BF0: .4byte 0x00001E54
.L080A5BF4: .4byte 0x00001744
.L080A5BF8: .4byte 0x00001F14
.L080A5BFC: .4byte 0x00001F44
.L080A5C00: .4byte gGmData
.L080A5C04: .4byte 0x00001F68
.L080A5C08: .4byte 0x00001F74
.L080A5C0C: .4byte 0x00040624
.L080A5C10: .4byte gBmSt

	THUMB_FUNC_END SaveSuspendedGame

	THUMB_FUNC_START LoadSuspendedGame
LoadSuspendedGame: @ 0x080A5C14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x2c
	ldr r1, .L080A5D58  @ gUnknown_0203EDB8
	ldrb r1, [r1]
	adds r0, r0, r1
	bl GetSaveSourceAddress
	adds r6, r0, #0
	ldr r5, .L080A5D5C  @ ReadSramFast
	ldr r4, .L080A5D60  @ gPlaySt
	ldr r3, [r5]
	adds r1, r4, #0
	movs r2, #0x4c
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameTime
	adds r0, r6, #0
	adds r0, #0x4c
	ldr r1, .L080A5D64  @ gAction
	ldr r3, [r5]
	movs r2, #0x38
	bl _call_via_r3
	bl LoadRNStateFromActionStruct
	bl InitUnits
	movs r4, #0
	add r7, sp, #0x10
	add r0, sp, #0x28
	mov r8, r0
	movs r5, #0
.L080A5C5C:
	movs r0, #0x34
	muls r0, r4, r0
	adds r0, #0x84
	adds r0, r6, r0
	ldr r1, .L080A5D68  @ gUnitArrayBlue
	adds r1, r5, r1
	bl UnpackUnitStructFromSuspend
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x32
	ble .L080A5C5C
	movs r4, #0
	movs r5, #0
.L080A5C78:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, .L080A5D6C  @ 0x00000B14
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, .L080A5D70  @ gUnitArrayRed
	adds r1, r5, r1
	bl UnpackUnitStructFromSuspend
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x31
	ble .L080A5C78
	movs r4, #0
	movs r5, #0
.L080A5C96:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, .L080A5D74  @ 0x0000153C
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, .L080A5D78  @ gUnitArrayGreen
	adds r1, r5, r1
	bl UnpackUnitStructFromSuspend
	adds r5, #0x48
	adds r4, #1
	cmp r4, #9
	ble .L080A5C96
	ldr r1, .L080A5D7C  @ 0x000019F4
	adds r0, r6, r1
	bl LoadBWLEntries
	ldr r1, .L080A5D80  @ 0x00001E54
	adds r0, r6, r1
	bl LoadChapterDataWinArray
	ldr r1, .L080A5D84  @ 0x00001944
	adds r0, r6, r1
	bl LoadConvoyItems
	ldr r1, .L080A5D88  @ 0x00001F24
	adds r0, r6, r1
	bl LoadPermanentEids
	ldr r1, .L080A5D8C  @ 0x00001F3D
	adds r0, r6, r1
	bl LoadLocalEventIds
	ldr r1, .L080A5D90  @ 0x00001744
	adds r0, r6, r1
	bl func_080A638C
	ldr r4, .L080A5D5C  @ ReadSramFast
	ldr r1, .L080A5D94  @ 0x00001F14
	adds r0, r6, r1
	ldr r3, [r4]
	mov r1, sp
	movs r2, #0x10
	bl _call_via_r3
	mov r0, sp
	bl SetOverriddenUnusableMenuCommands
	ldr r1, .L080A5D98  @ 0x00001F44
	adds r0, r6, r1
	ldr r1, .L080A5D9C  @ gGmData
	bl LoadWMStuff
	movs r1, #0xae
	lsls r1, r1, #4
	adds r0, r6, r1
	ldr r3, [r4]
	adds r1, r7, #0
	movs r2, #0x18
	bl _call_via_r3
	adds r0, r7, #0
	bl func_08037E64
	ldr r1, .L080A5DA0  @ 0x00001F68
	adds r0, r6, r1
	ldr r3, [r4]
	adds r1, r7, #0
	movs r2, #0xc
	bl _call_via_r3
	adds r0, r7, #0
	bl func_08037E30
	ldr r1, .L080A5DA4  @ 0x00001F74
	adds r0, r6, r1
	ldr r3, [r4]
	mov r1, r8
	movs r2, #4
	bl _call_via_r3
	ldr r0, [sp, #0x28]
	bl SetEventCounter
	ldr r0, .L080A5D60  @ gPlaySt
	ldrb r0, [r0, #0xc]
	bl LoadSavedBonusClaimFlags
	bl SetBonusContentClaimFlags
	add sp, #0x2c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A5D58: .4byte gUnknown_0203EDB8
.L080A5D5C: .4byte ReadSramFast
.L080A5D60: .4byte gPlaySt
.L080A5D64: .4byte gAction
.L080A5D68: .4byte gUnitArrayBlue
.L080A5D6C: .4byte 0x00000B14
.L080A5D70: .4byte gUnitArrayRed
.L080A5D74: .4byte 0x0000153C
.L080A5D78: .4byte gUnitArrayGreen
.L080A5D7C: .4byte 0x000019F4
.L080A5D80: .4byte 0x00001E54
.L080A5D84: .4byte 0x00001944
.L080A5D88: .4byte 0x00001F24
.L080A5D8C: .4byte 0x00001F3D
.L080A5D90: .4byte 0x00001744
.L080A5D94: .4byte 0x00001F14
.L080A5D98: .4byte 0x00001F44
.L080A5D9C: .4byte gGmData
.L080A5DA0: .4byte 0x00001F68
.L080A5DA4: .4byte 0x00001F74

	THUMB_FUNC_END LoadSuspendedGame

	THUMB_FUNC_START func_080A5DA8
func_080A5DA8: @ 0x080A5DA8
	push {r4, lr}
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A5DEC
	cmp r4, #3
	bne .L080A5DEC
	ldr r4, .L080A5DF0  @ gUnknown_0203EDB8
	bl GetLastSuspendSaveId
	strb r0, [r4]
	ldrb r1, [r4]
	adds r1, #3
	movs r0, #0
	bl SaveMetadata_Load
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A5DF4
	bl GetNextSuspendSaveId
	strb r0, [r4]
	ldrb r1, [r4]
	adds r1, #3
	movs r0, #0
	bl SaveMetadata_Load
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A5DF4
	movs r0, #0x7f
	strb r0, [r4]
.L080A5DEC:
	movs r0, #0
	b .L080A5DF6
	.align 2, 0
.L080A5DF0: .4byte gUnknown_0203EDB8
.L080A5DF4:
	movs r0, #1
.L080A5DF6:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A5DA8

	THUMB_FUNC_START LoadSuspendedChapterState
LoadSuspendedChapterState: @ 0x080A5DFC
	push {lr}
	ldr r2, .L080A5E0C  @ gUnknown_0203EDB8
	ldrb r2, [r2]
	adds r0, r0, r2
	bl LoadSavedChapterState
	pop {r0}
	bx r0
	.align 2, 0
.L080A5E0C: .4byte gUnknown_0203EDB8

	THUMB_FUNC_END LoadSuspendedChapterState

	THUMB_FUNC_START PackUnitStructForSuspend
PackUnitStructForSuspend: @ 0x080A5E10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	adds r7, r0, #0
	mov ip, r1
	ldr r0, [r7]
	cmp r0, #0
	bne .L080A5E2A
	strb r0, [r1]
	b .L080A60E6
.L080A5E2A:
	ldrb r0, [r0, #4]
	mov r1, ip
	strb r0, [r1]
	ldr r0, [r7, #4]
	ldrb r0, [r0, #4]
	strb r0, [r1, #1]
	movs r1, #8
	ldrsb r1, [r7, r1]
	mov r4, ip
	adds r4, #0x24
	movs r5, #0x1f
	ands r1, r5
	ldrb r2, [r4]
	movs r3, #0x20
	negs r3, r3
	adds r0, r3, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	ldrb r0, [r7, #9]
	mov r2, ip
	strb r0, [r2, #0x10]
	ldr r0, [r7, #0xc]
	str r0, [r2, #4]
	movs r1, #0x10
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #5
	ldrh r2, [r2, #0x24]
	ldr r0, .L080A60F8  @ 0xFFFFF81F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x24]
	movs r2, #0x11
	ldrsb r2, [r7, r2]
	movs r0, #0x3f
	ands r2, r0
	lsls r2, r2, #0xb
	ldr r0, [r1, #0x24]
	ldr r1, .L080A60FC  @ 0xFFFE07FF
	ands r0, r1
	orrs r0, r2
	mov r2, ip
	str r0, [r2, #0x24]
	ldrb r0, [r7, #0x12]
	strb r0, [r2, #0xe]
	ldrb r0, [r7, #0x13]
	strb r0, [r2, #0xf]
	movs r1, #0x14
	ldrsb r1, [r7, r1]
	adds r4, #2
	ands r1, r5
	lsls r1, r1, #1
	ldrb r2, [r4]
	movs r0, #0x3f
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	movs r1, #0x15
	ldrsb r1, [r7, r1]
	movs r4, #0x1f
	ands r1, r4
	lsls r1, r1, #6
	mov r0, ip
	ldrh r2, [r0, #0x26]
	ldr r0, .L080A6100  @ 0xFFFFF83F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x26]
	movs r1, #0x16
	ldrsb r1, [r7, r1]
	movs r2, #0x27
	add r2, ip
	mov r8, r2
	lsls r1, r1, #3
	ldrb r2, [r2]
	movs r6, #7
	movs r0, #7
	ands r0, r2
	orrs r0, r1
	mov r1, r8
	strb r0, [r1]
	movs r0, #0x17
	ldrsb r0, [r7, r0]
	mov r2, ip
	adds r2, #0x28
	ands r0, r5
	ldrb r1, [r2]
	ands r3, r1
	orrs r3, r0
	strb r3, [r2]
	movs r1, #0x18
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #5
	mov r0, ip
	ldrh r2, [r0, #0x28]
	ldr r0, .L080A6104  @ 0xFFFFFC1F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x28]
	movs r1, #0x19
	ldrsb r1, [r7, r1]
	mov r3, ip
	adds r3, #0x29
	ands r1, r5
	lsls r1, r1, #2
	ldrb r2, [r3]
	movs r0, #0x7d
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	movs r2, #0x1a
	ldrsb r2, [r7, r2]
	movs r4, #0x1f
	ands r2, r4
	lsls r2, r2, #0xf
	mov r1, ip
	ldr r0, [r1, #0x28]
	ldr r1, .L080A6108  @ 0xFFF07FFF
	ands r0, r1
	orrs r0, r2
	mov r2, ip
	str r0, [r2, #0x28]
	adds r5, r7, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	movs r0, #0x2a
	add r0, ip
	mov r8, r0
	ands r1, r6
	lsls r1, r1, #4
	ldrb r3, [r0]
	movs r0, #0x71
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	mov r1, r8
	strb r0, [r1]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x1c
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #7
	mov r0, ip
	ldrh r1, [r0, #0x2a]
	ldr r0, .L080A610C  @ 0xFFFFFC7F
	ands r0, r1
	orrs r0, r2
	mov r1, ip
	strh r0, [r1, #0x2a]
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r2, [r0]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	movs r0, #0x2b
	add r0, ip
	mov r8, r0
	ands r1, r6
	lsls r1, r1, #2
	ldrb r3, [r0]
	movs r0, #0x1d
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	lsrs r2, r2, #4
	lsls r2, r2, #5
	ands r0, r4
	orrs r0, r2
	mov r1, r8
	strb r0, [r1]
	ldrb r0, [r7, #0x1b]
	mov r2, ip
	strb r0, [r2, #3]
	movs r1, #0x1d
	ldrsb r1, [r7, r1]
	mov r3, ip
	adds r3, #0x2c
	movs r0, #0xf
	ands r1, r0
	ldrb r2, [r3]
	movs r0, #0x10
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3]
	ldrb r0, [r7, #0x1c]
	movs r1, #0x7f
	ands r1, r0
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r3, [r0]
	movs r0, #1
	ands r0, r3
	lsls r0, r0, #7
	orrs r1, r0
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	ldrh r0, [r7, #0x1e]
	ldr r2, .L080A6110  @ 0x00003FFF
	adds r1, r2, #0
	ands r1, r0
	movs r0, #6
	ands r0, r3
	lsls r0, r0, #0xd
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #8]
	ldrh r0, [r7, #0x20]
	adds r1, r2, #0
	ands r1, r0
	movs r0, #0x18
	ands r0, r3
	lsls r0, r0, #0xb
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #0xa]
	ldrh r0, [r7, #0x22]
	adds r1, r2, #0
	ands r1, r0
	movs r0, #0x60
	ands r0, r3
	lsls r0, r0, #9
	orrs r1, r0
	mov r0, ip
	strh r1, [r0, #0xc]
	ldrh r1, [r7, #0x24]
	ands r1, r2
	lsls r1, r1, #4
	ldr r0, [r0, #0x2c]
	ldr r2, .L080A6114  @ 0xFFFC000F
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	str r0, [r1, #0x2c]
	ldrh r1, [r7, #0x26]
	lsls r1, r1, #2
	mov r0, ip
	ldrh r2, [r0, #0x2e]
	movs r0, #3
	ands r0, r2
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x2e]
	movs r2, #0
	mov r9, r5
	mov r4, ip
	adds r4, #0x1a
	adds r6, r7, #0
	adds r6, #0x32
	movs r0, #0x42
	adds r0, r0, r7
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x43
	str r1, [sp, #0x10]
	movs r0, #0x21
	add r0, ip
	mov sl, r0
	adds r1, #1
	str r1, [sp, #0x14]
	mov r0, ip
	adds r0, #0x22
	str r0, [sp]
	adds r1, #1
	str r1, [sp, #0x18]
	adds r0, #1
	str r0, [sp, #4]
	subs r1, #5
	str r1, [sp, #0xc]
	adds r0, r7, #0
	adds r0, #0x46
	str r0, [sp, #0x1c]
	mov r1, ip
	adds r1, #0x31
	str r1, [sp, #8]
	ldrb r0, [r7, #0xa]
	add r1, sp, #0x20
	strb r0, [r1]
	mov r3, ip
	adds r3, #0x12
	subs r5, #8
.L080A6072:
	adds r0, r3, r2
	adds r1, r5, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble .L080A6072
	movs r2, #0
	adds r3, r6, #0
.L080A6084:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble .L080A6084
	mov r2, r8
	ldrb r0, [r2]
	mov r1, ip
	strb r0, [r1, #2]
	movs r2, #0x7f
	ands r2, r0
	mov r0, r9
	ldrb r1, [r0]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1c
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080A60B2
	movs r0, #0x80
	orrs r2, r0
.L080A60B2:
	mov r1, ip
	strb r2, [r1, #2]
	ldr r2, [sp, #0x10]
	ldrb r0, [r2]
	mov r1, sl
	strb r0, [r1]
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldr r1, [sp]
	strb r0, [r1]
	ldr r2, [sp, #0x18]
	ldrb r0, [r2]
	ldr r1, [sp, #4]
	strb r0, [r1]
	ldr r2, [sp, #0xc]
	ldrh r0, [r2]
	mov r1, ip
	strh r0, [r1, #0x32]
	ldr r2, [sp, #0x1c]
	ldrb r0, [r2]
	ldr r1, [sp, #8]
	strb r0, [r1]
	add r2, sp, #0x20
	ldrb r0, [r2]
	mov r2, ip
	strb r0, [r2, #0x11]
.L080A60E6:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A60F8: .4byte 0xFFFFF81F
.L080A60FC: .4byte 0xFFFE07FF
.L080A6100: .4byte 0xFFFFF83F
.L080A6104: .4byte 0xFFFFFC1F
.L080A6108: .4byte 0xFFF07FFF
.L080A610C: .4byte 0xFFFFFC7F
.L080A6110: .4byte 0x00003FFF
.L080A6114: .4byte 0xFFFC000F

	THUMB_FUNC_END PackUnitStructForSuspend

	THUMB_FUNC_START UnpackUnitStructFromSuspend
UnpackUnitStructFromSuspend: @ 0x080A6118
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x4c
	adds r6, r1, #0
	ldr r1, .L080A6368  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x34
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0]
	bl GetPInfo
	str r0, [r6]
	mov r0, sp
	ldrb r0, [r0, #1]
	bl GetJInfo
	str r0, [r6, #4]
	add r0, sp, #0x24
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r6, #8]
	mov r0, sp
	ldrb r0, [r0, #0x10]
	strb r0, [r6, #9]
	ldr r0, [sp, #4]
	str r0, [r6, #0xc]
	mov r0, sp
	ldrh r0, [r0, #0x24]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1a
	strb r0, [r6, #0x10]
	ldr r0, [sp, #0x24]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x1a
	strb r0, [r6, #0x11]
	mov r0, sp
	ldrb r0, [r0, #0xe]
	strb r0, [r6, #0x12]
	mov r0, sp
	ldrb r0, [r0, #0xf]
	strb r0, [r6, #0x13]
	mov r0, sp
	adds r0, #0x26
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x14]
	mov r0, sp
	ldrh r0, [r0, #0x26]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x15]
	mov r0, sp
	adds r0, #0x27
	ldrb r0, [r0]
	lsrs r0, r0, #3
	strb r0, [r6, #0x16]
	add r0, sp, #0x28
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x17]
	mov r0, sp
	ldrh r0, [r0, #0x28]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x18]
	mov r0, sp
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x19]
	ldr r0, [sp, #0x28]
	lsls r0, r0, #0xc
	lsrs r0, r0, #0x1b
	strb r0, [r6, #0x1a]
	mov r0, sp
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	adds r4, r6, #0
	adds r4, #0x30
	movs r5, #0xf
	lsrs r0, r0, #0x1d
	ldrb r1, [r4]
	movs r7, #0x10
	negs r7, r7
	adds r3, r7, #0
	ands r3, r1
	orrs r3, r0
	strb r3, [r4]
	lsls r0, r3, #0x1c
	lsrs r2, r0, #0x1c
	mov r0, sp
	ldrb r1, [r0, #2]
	movs r0, #0x80
	mov r8, r0
	ands r0, r1
	cmp r0, #0
	beq .L080A61F4
	movs r0, #8
	orrs r2, r0
.L080A61F4:
	mov r0, sp
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1d
	lsls r0, r0, #4
	ands r2, r5
	orrs r2, r0
	strb r2, [r4]
	mov r0, sp
	adds r0, #0x2b
	ldrb r1, [r0]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	adds r2, r6, #0
	adds r2, #0x31
	lsrs r1, r1, #5
	lsls r1, r1, #4
	ands r0, r5
	orrs r0, r1
	strb r0, [r2]
	mov r0, sp
	ldrb r0, [r0, #3]
	strb r0, [r6, #0x1b]
	add r0, sp, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	strb r0, [r6, #0x1d]
	add r0, sp, #0x30
	ldrb r2, [r0]
	movs r0, #0x7f
	ands r0, r2
	strb r0, [r6, #0x1c]
	mov r0, sp
	ldrh r5, [r0, #8]
	ldr r1, .L080A636C  @ 0x00003FFF
	adds r0, r1, #0
	ands r0, r5
	strh r0, [r6, #0x1e]
	mov r0, sp
	ldrh r4, [r0, #0xa]
	adds r0, r1, #0
	ands r0, r4
	strh r0, [r6, #0x20]
	mov r0, sp
	ldrh r3, [r0, #0xc]
	ands r1, r3
	strh r1, [r6, #0x22]
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r6, #0x24]
	mov r0, sp
	ldrh r0, [r0, #0x2e]
	lsrs r0, r0, #2
	strh r0, [r6, #0x26]
	mov r1, r8
	ands r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x1f
	movs r2, #0xc0
	lsls r2, r2, #8
	adds r0, r2, #0
	ands r0, r5
	lsrs r0, r0, #0xd
	orrs r0, r1
	adds r1, r2, #0
	ands r1, r4
	lsrs r1, r1, #0xb
	orrs r1, r0
	ands r2, r3
	lsrs r2, r2, #9
	orrs r2, r1
	adds r0, r6, #0
	adds r0, #0x39
	strb r2, [r0]
	movs r2, #0
	adds r7, r6, #0
	adds r7, #0x32
	mov r5, sp
	adds r5, #0x1a
	movs r1, #0x42
	adds r1, r1, r6
	mov sl, r1
	movs r0, #0x21
	add r0, sp
	mov ip, r0
	adds r1, r6, #0
	adds r1, #0x43
	str r1, [sp, #0x3c]
	movs r0, #0x22
	add r0, sp
	mov r8, r0
	adds r1, #1
	str r1, [sp, #0x40]
	movs r0, #0x23
	add r0, sp
	mov r9, r0
	adds r1, #1
	str r1, [sp, #0x44]
	adds r0, r6, #0
	adds r0, #0x40
	str r0, [sp, #0x38]
	mov r1, sp
	adds r1, #0x31
	str r1, [sp, #0x34]
	adds r0, #6
	str r0, [sp, #0x48]
	adds r4, r6, #0
	adds r4, #0x28
	mov r3, sp
	adds r3, #0x12
.L080A62D4:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble .L080A62D4
	movs r2, #0
	adds r4, r7, #0
	adds r3, r5, #0
.L080A62E8:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #6
	ble .L080A62E8
	mov r0, sp
	ldrb r1, [r0, #2]
	movs r0, #0x7f
	ands r0, r1
	mov r1, sl
	strb r0, [r1]
	mov r1, ip
	ldrb r0, [r1]
	ldr r1, [sp, #0x3c]
	strb r0, [r1]
	mov r1, r8
	ldrb r0, [r1]
	ldr r1, [sp, #0x40]
	strb r0, [r1]
	mov r1, r9
	ldrb r0, [r1]
	ldr r1, [sp, #0x44]
	strb r0, [r1]
	mov r0, sp
	ldrh r0, [r0, #0x32]
	ldr r1, [sp, #0x38]
	strh r0, [r1]
	ldr r1, [sp, #0x34]
	ldrb r0, [r1]
	ldr r1, [sp, #0x48]
	strb r0, [r1]
	mov r0, sp
	ldrb r0, [r0, #0x11]
	strb r0, [r6, #0xa]
	ldrb r0, [r6, #9]
	cmp r0, #0x7f
	bne .L080A633A
	movs r0, #0xff
	strb r0, [r6, #9]
.L080A633A:
	ldrb r1, [r6, #0x10]
	movs r0, #0x10
	ldrsb r0, [r6, r0]
	cmp r0, #0x3f
	bne .L080A6348
	movs r0, #0xff
	strb r0, [r6, #0x10]
.L080A6348:
	ldrb r1, [r6, #0x11]
	movs r0, #0x11
	ldrsb r0, [r6, r0]
	cmp r0, #0x3f
	bne .L080A6356
	movs r0, #0xff
	strb r0, [r6, #0x11]
.L080A6356:
	add sp, #0x4c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6368: .4byte ReadSramFast
.L080A636C: .4byte 0x00003FFF

	THUMB_FUNC_END UnpackUnitStructFromSuspend

	THUMB_FUNC_START SaveTrapStructs
SaveTrapStructs: @ 0x080A6370
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl GetTrap
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveTrapStructs

	THUMB_FUNC_START func_080A638C
func_080A638C: @ 0x080A638C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L080A63AC  @ ReadSramFast
	movs r0, #0
	bl GetTrap
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #2
	ldr r3, [r4]
	adds r0, r5, #0
	bl _call_via_r3
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A63AC: .4byte ReadSramFast

	THUMB_FUNC_END func_080A638C

	THUMB_FUNC_START GetLastSuspendSaveId
GetLastSuspendSaveId: @ 0x080A63B0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	mov r0, sp
	adds r0, #0x63
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080A63C8
	movs r0, #0
	b .L080A63CA
.L080A63C8:
	movs r0, #1
.L080A63CA:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END GetLastSuspendSaveId

	THUMB_FUNC_START GetNextSuspendSaveId
GetNextSuspendSaveId: @ 0x080A63D0
	push {lr}
	bl GetLastSuspendSaveId
	adds r1, r0, #0
	movs r0, #1
	subs r0, r0, r1
	pop {r1}
	bx r1

	THUMB_FUNC_END GetNextSuspendSaveId

	THUMB_FUNC_START UpdateNextSuspendSaveId
UpdateNextSuspendSaveId: @ 0x080A63E0
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	movs r2, #0
	mov r1, sp
	adds r1, #0x63
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080A63F8
	movs r2, #1
.L080A63F8:
	strb r2, [r1]
	mov r0, sp
	bl SaveGeneralGameMetadataNoChecksum
	add sp, #0x64
	pop {r0}
	bx r0

	THUMB_FUNC_END UpdateNextSuspendSaveId

	THUMB_FUNC_START ComputeSaveChecksum
ComputeSaveChecksum: @ 0x080A6408
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r1, .L080A6428  @ ReadSramFast
	ldr r4, .L080A642C  @ gBuf
	ldr r3, [r1]
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	adds r1, r5, #0
	bl GetChecksum32_thm
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A6428: .4byte ReadSramFast
.L080A642C: .4byte gBuf

	THUMB_FUNC_END ComputeSaveChecksum

	THUMB_FUNC_START SaveMetadata_VerifyChecksum
SaveMetadata_VerifyChecksum: @ 0x080A6430
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl GetSaveDataOffsetPointer
	adds r1, r5, #0
	bl ComputeSaveChecksum
	ldr r1, [r4, #0xc]
	cmp r1, r0
	bne .L080A644C
	movs r0, #1
	b .L080A644E
.L080A644C:
	movs r0, #0
.L080A644E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END SaveMetadata_VerifyChecksum

	THUMB_FUNC_START SaveMetadata_ComputeChecksum
SaveMetadata_ComputeChecksum: @ 0x080A6454
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl GetSaveDataOffsetPointer
	adds r1, r5, #0
	bl ComputeSaveChecksum
	str r0, [r4, #0xc]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveMetadata_ComputeChecksum

	THUMB_FUNC_START func_080A6470
func_080A6470: @ 0x080A6470
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, .L080A6538  @ gUnitArrayBlue
	movs r5, #0x32
.L080A6478:
	ldr r0, [r4]
	cmp r0, #0
	beq .L080A6490
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl ComputeSaveChecksum
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
.L080A6490:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge .L080A6478
	ldr r4, .L080A653C  @ gUnitArrayRed
	movs r5, #0x31
.L080A649C:
	ldr r0, [r4]
	cmp r0, #0
	beq .L080A64B4
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl ComputeSaveChecksum
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
.L080A64B4:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge .L080A649C
	ldr r4, .L080A6540  @ gUnitArrayGreen
	movs r5, #9
.L080A64C0:
	ldr r0, [r4]
	cmp r0, #0
	beq .L080A64D8
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl ComputeSaveChecksum
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
.L080A64D8:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge .L080A64C0
	bl GetPermanentFlagData
	adds r4, r0, #0
	bl GetPermanentFlagDataSize
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl ComputeSaveChecksum
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	bl GetTemporaryFlagData
	adds r4, r0, #0
	bl GetTemporaryFlagDataSize
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl ComputeSaveChecksum
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	bl GetTrap
	movs r1, #0x80
	lsls r1, r1, #1
	bl ComputeSaveChecksum
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080A6538: .4byte gUnitArrayBlue
.L080A653C: .4byte gUnitArrayRed
.L080A6540: .4byte gUnitArrayGreen

	THUMB_FUNC_END func_080A6470

	THUMB_FUNC_START func_080A6544
func_080A6544: @ 0x080A6544
	sub sp, #8
	add sp, #8
	bx lr

	THUMB_FUNC_END func_080A6544

	THUMB_FUNC_START func_080A654C
func_080A654C: @ 0x080A654C
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl SaveMetadata_Load
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A654C

	THUMB_FUNC_START func_080A6560
func_080A6560: @ 0x080A6560
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x80
	movs r0, #5
	bl GetSaveTargetAddress
	mov r9, r0
	add r0, sp, #0x6c
	movs r4, #0
	strh r4, [r0]
	add r5, sp, #0x24
	ldr r2, .L080A66A8  @ 0x01000012
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x6e
	strh r4, [r0]
	add r4, sp, #0x48
	ldr r2, .L080A66AC  @ 0x01000007
	adds r1, r4, #0
	bl CpuSet
	movs r7, #0
	mov r8, r5
	add r0, sp, #0x70
	mov sl, r0
	mov r1, sp
	adds r1, #0x58
	str r1, [sp, #0x78]
	mov r3, sp
	adds r3, #0x5c
	str r3, [sp, #0x7c]
	mov r5, sp
	adds r5, #0x14
	str r5, [sp, #0x74]
	mov r6, r9
.L080A65B0:
	movs r0, #0xc4
	muls r0, r7, r0
	adds r0, #0x10
	mov r1, r9
	adds r4, r1, r0
	movs r5, #4
.L080A65BC:
	mov r0, r8
	adds r1, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge .L080A65BC
	add r0, sp, #0x48
	adds r1, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r6, #0xc4
	adds r7, #1
	cmp r7, #9
	ble .L080A65B0
	movs r0, #7
	mov r3, sl
	strh r0, [r3]
	movs r1, #0xf5
	lsls r1, r1, #3
	add r1, r9
	mov r0, sl
	movs r2, #2
	bl WriteAndVerifySramFast
	movs r7, #0
	ldr r5, [sp, #0x78]
	mov r8, r5
	movs r0, #3
	mov sl, r0
	ldr r6, .L080A66B0  @ 0x000007AC
	add r6, r9
	movs r1, #0
	mov r9, r1
.L080A6606:
	ldr r4, .L080A66B4  @ gUnknown_08205CB4
	lsls r3, r7, #2
	mov ip, r3
	add r4, r9
	ldrb r3, [r4]
	lsls r1, r3, #0x1e
	lsrs r1, r1, #0x1e
	mov r5, sl
	ands r1, r5
	mov r0, r8
	ldrb r2, [r0]
	movs r5, #4
	negs r5, r5
	adds r0, r5, #0
	ands r2, r0
	orrs r2, r1
	lsls r0, r3, #0x1c
	lsrs r0, r0, #0x1e
	mov r1, sl
	ands r0, r1
	lsls r0, r0, #2
	subs r5, #9
	adds r1, r5, #0
	ands r2, r1
	orrs r2, r0
	movs r1, #0x10
	ands r1, r3
	movs r3, #0x11
	negs r3, r3
	adds r0, r3, #0
	ands r2, r0
	orrs r2, r1
	mov r5, r8
	strb r2, [r5]
	ldr r2, [r4]
	lsrs r2, r2, #5
	lsls r2, r2, #5
	ldr r0, [sp, #0x58]
	movs r1, #0x1f
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #0x58]
	ldr r0, .L080A66B8  @ gUnknown_08A1FB08
	mov r1, ip
	adds r5, r1, r0
	ldr r0, [r5]
	mov r1, sp
	bl GetMsgTo
	mov r0, sp
	ldr r1, [sp, #0x7c]
	bl func_08042DC8
	mov r0, r8
	adds r1, r6, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	adds r6, #0x14
	movs r3, #0x14
	add r9, r3
	adds r7, #1
	cmp r7, #9
	ble .L080A6606
	ldr r0, .L080A66BC  @ 0x00020112
	str r0, [sp, #0x14]
	movs r0, #2
	ldr r5, [sp, #0x74]
	strb r0, [r5, #6]
	ldr r0, [sp, #0x74]
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x80
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A66A8: .4byte 0x01000012
.L080A66AC: .4byte 0x01000007
.L080A66B0: .4byte 0x000007AC
.L080A66B4: .4byte gUnknown_08205CB4
.L080A66B8: .4byte gUnknown_08A1FB08
.L080A66BC: .4byte 0x00020112

	THUMB_FUNC_END func_080A6560

	THUMB_FUNC_START func_080A66C0
func_080A66C0: @ 0x080A66C0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveSourceAddress
	ldr r2, .L080A66E8  @ ReadSramFast
	movs r1, #0xc4
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r5, #0
	movs r2, #0xc4
	bl _call_via_r3
	ldrb r0, [r5]
	cmp r0, #0
	beq .L080A66EC
	movs r0, #1
	b .L080A66EE
	.align 2, 0
.L080A66E8: .4byte ReadSramFast
.L080A66EC:
	movs r0, #0
.L080A66EE:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A66C0

	THUMB_FUNC_START func_080A66F4
func_080A66F4: @ 0x080A66F4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveSourceAddress
	ldr r2, .L080A6728  @ ReadSramFast
	movs r1, #0xc4
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r4, .L080A672C  @ gUnknown_0203EDBC
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0xc4
	bl _call_via_r3
	ldrb r0, [r4]
	cmp r0, #0
	beq .L080A6730
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_08042DC8
	movs r0, #1
	b .L080A6732
	.align 2, 0
.L080A6728: .4byte ReadSramFast
.L080A672C: .4byte gUnknown_0203EDBC
.L080A6730:
	movs r0, #0
.L080A6732:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A66F4

	THUMB_FUNC_START func_080A6738
func_080A6738: @ 0x080A6738
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r1, r0, #0
	movs r0, #0xc4
	muls r0, r4, r0
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	ldr r0, .L080A6770  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6770: .4byte 0x00020112

	THUMB_FUNC_END func_080A6738

	THUMB_FUNC_START func_080A6774
func_080A6774: @ 0x080A6774
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r4, r0, #0
	add r0, sp, #0x10
	movs r1, #0
	strh r1, [r0]
	ldr r5, .L080A67BC  @ gUnknown_0203EDBC
	ldr r2, .L080A67C0  @ 0x01000062
	adds r1, r5, #0
	bl CpuSet
	movs r0, #0xc4
	muls r0, r6, r0
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, .L080A67C4  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A67BC: .4byte gUnknown_0203EDBC
.L080A67C0: .4byte 0x01000062
.L080A67C4: .4byte 0x00020112

	THUMB_FUNC_END func_080A6774

	THUMB_FUNC_START func_080A67C8
func_080A67C8: @ 0x080A67C8
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov r9, r1
	movs r0, #5
	bl GetSaveSourceAddress
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r5, r0, #0
	ldr r1, .L080A6834  @ ReadSramFast
	movs r0, #0xc4
	mov r8, r0
	mov r0, r8
	muls r0, r6, r0
	adds r4, r4, r0
	ldr r6, .L080A6838  @ gUnknown_0203EDBC
	ldr r3, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0xc4
	bl _call_via_r3
	mov r1, r8
	mov r0, r9
	muls r0, r1, r0
	adds r5, r5, r0
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, .L080A683C  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6834: .4byte ReadSramFast
.L080A6838: .4byte gUnknown_0203EDBC
.L080A683C: .4byte 0x00020112

	THUMB_FUNC_END func_080A67C8

	THUMB_FUNC_START func_080A6840
func_080A6840: @ 0x080A6840
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov sl, r1
	movs r0, #5
	bl GetSaveSourceAddress
	adds r5, r0, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r6, r0, #0
	ldr r0, .L080A68CC  @ ReadSramFast
	mov r9, r0
	movs r4, #0xc4
	mov r7, r8
	muls r7, r4, r7
	adds r0, r5, r7
	mov r1, r9
	ldr r3, [r1]
	ldr r1, .L080A68D0  @ gUnknown_0203EDBC
	movs r2, #0xc4
	bl _call_via_r3
	mov r0, sl
	muls r0, r4, r0
	adds r4, r0, #0
	adds r5, r5, r4
	ldr r1, .L080A68D4  @ gUnknown_0203EE80
	mov r8, r1
	mov r0, r9
	ldr r3, [r0]
	adds r0, r5, #0
	movs r2, #0xc4
	bl _call_via_r3
	adds r4, r6, r4
	ldr r0, .L080A68D0  @ gUnknown_0203EDBC
	adds r1, r4, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	adds r6, r6, r7
	mov r0, r8
	adds r1, r6, #0
	movs r2, #0xc4
	bl WriteAndVerifySramFast
	ldr r0, .L080A68D8  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A68CC: .4byte ReadSramFast
.L080A68D0: .4byte gUnknown_0203EDBC
.L080A68D4: .4byte gUnknown_0203EE80
.L080A68D8: .4byte 0x00020112

	THUMB_FUNC_END func_080A6840

	THUMB_FUNC_START func_080A68DC
func_080A68DC: @ 0x080A68DC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0x10
	adds r4, r0, #0
	mov r8, r1
	adds r6, r2, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r5, r0, #0
	movs r0, #0xc4
	muls r4, r0, r4
	adds r1, r5, r4
	adds r0, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r4, #0x10
	adds r5, r5, r4
	mov r4, r8
	movs r6, #4
.L080A6908:
	adds r0, r4, #0
	adds r1, r5, #0
	bl SaveUnit
	adds r5, #0x24
	adds r4, #0x48
	subs r6, #1
	cmp r6, #0
	bge .L080A6908
	ldr r0, .L080A6938  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6938: .4byte 0x00020112

	THUMB_FUNC_END func_080A68DC

	THUMB_FUNC_START func_080A693C
func_080A693C: @ 0x080A693C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r6, r1, #0
	adds r5, r2, #0
	movs r0, #5
	bl GetSaveSourceAddress
	adds r7, r0, #0
	ldr r1, .L080A6990  @ ReadSramFast
	movs r0, #0xc4
	mov r4, r8
	muls r4, r0, r4
	adds r0, r7, r4
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0xf
	bl _call_via_r3
	adds r4, #0x10
	adds r4, r7, r4
	movs r5, #4
.L080A696A:
	adds r0, r4, #0
	adds r1, r6, #0
	bl LoadSavedUnit
	adds r6, #0x48
	adds r4, #0x24
	subs r5, #1
	cmp r5, #0
	bge .L080A696A
	movs r0, #0xc4
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	adds r0, r7, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A6994
	movs r0, #1
	b .L080A6996
	.align 2, 0
.L080A6990: .4byte ReadSramFast
.L080A6994:
	movs r0, #0
.L080A6996:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A693C

	THUMB_FUNC_START func_080A69A0
func_080A69A0: @ 0x080A69A0
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r1, r0, #0
	ldr r0, .L080A69D4  @ 0x000007AC
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0xc8
	bl WriteAndVerifySramFast
	ldr r0, .L080A69D8  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A69D4: .4byte 0x000007AC
.L080A69D8: .4byte 0x00020112

	THUMB_FUNC_END func_080A69A0

	THUMB_FUNC_START func_080A69DC
func_080A69DC: @ 0x080A69DC
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveSourceAddress
	ldr r1, .L080A69FC  @ ReadSramFast
	ldr r2, .L080A6A00  @ 0x000007AC
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0xc8
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A69FC: .4byte ReadSramFast
.L080A6A00: .4byte 0x000007AC

	THUMB_FUNC_END func_080A69DC

	THUMB_FUNC_START func_080A6A04
func_080A6A04: @ 0x080A6A04
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveTargetAddress
	adds r1, r0, #0
	movs r0, #0xf5
	lsls r0, r0, #3
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #2
	bl WriteAndVerifySramFast
	ldr r0, .L080A6A3C  @ 0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl SaveMetadata_Save
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6A3C: .4byte 0x00020112

	THUMB_FUNC_END func_080A6A04

	THUMB_FUNC_START func_080A6A40
func_080A6A40: @ 0x080A6A40
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl GetSaveSourceAddress
	ldr r1, .L080A6A64  @ ReadSramFast
	movs r2, #0xf5
	lsls r2, r2, #3
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #2
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6A64: .4byte ReadSramFast

	THUMB_FUNC_END func_080A6A40

	THUMB_FUNC_START func_080A6A68
func_080A6A68: @ 0x080A6A68
	push {r4, lr}
	sub sp, #0x10
	movs r0, #5
	bl func_080A654C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A6A7E
	b .L080A6A96
.L080A6A7A:
	movs r0, #1
	b .L080A6A98
.L080A6A7E:
	movs r4, #0
.L080A6A80:
	adds r0, r4, #0
	mov r1, sp
	bl func_080A66F4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq .L080A6A7A
	adds r4, #1
	cmp r4, #9
	ble .L080A6A80
.L080A6A96:
	movs r0, #0
.L080A6A98:
	add sp, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A6A68

	THUMB_FUNC_START func_080A6AA0
func_080A6AA0: @ 0x080A6AA0
	push {r4, lr}
	sub sp, #0x4c
	movs r0, #3
	bl func_080A5DA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A6AE8
	movs r0, #3
	mov r1, sp
	bl LoadSuspendedChapterState
	mov r0, sp
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x7f
	bne .L080A6AE8
	ldr r1, .L080A6AF0  @ ReadSramFast
	ldr r0, .L080A6AF4  @ gUnknown_08A1FB30
	ldr r0, [r0]
	ldr r4, .L080A6AF8  @ gTrialMapData
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #9
	lsrs r0, r0, #0x16
	ldrb r4, [r4, #0xf]
	cmp r0, r4
	beq .L080A6AE8
	movs r0, #3
	bl ClearSaveBlock
.L080A6AE8:
	add sp, #0x4c
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6AF0: .4byte ReadSramFast
.L080A6AF4: .4byte gUnknown_08A1FB30
.L080A6AF8: .4byte gTrialMapData

	THUMB_FUNC_END func_080A6AA0

	THUMB_FUNC_START func_080A6AFC
func_080A6AFC: @ 0x080A6AFC
	push {r4, r5, lr}
	ldr r1, .L080A6B4C  @ ReadSramFast
	ldr r5, .L080A6B50  @ gUnknown_08A1FB30
	ldr r0, [r5]
	ldr r4, .L080A6B54  @ gTrialMapData
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, .L080A6B58  @ 0x50414D58
	cmp r1, r0
	bne .L080A6B68
	bl GetLang
	lsls r0, r0, #0x18
	ldr r1, .L080A6B5C  @ 0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne .L080A6B68
	ldr r0, [r4, #0x10]
	ldr r1, [r5]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #0x18]
	adds r0, r0, r1
	str r0, [r4, #0x18]
	ldr r3, .L080A6B60  @ gPlaySt
	ldrb r2, [r4, #0xf]
	lsls r2, r2, #0xd
	ldr r0, [r3, #0x2c]
	ldr r1, .L080A6B64  @ 0xFF801FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r3, #0x2c]
	movs r0, #1
	b .L080A6B6A
	.align 2, 0
.L080A6B4C: .4byte ReadSramFast
.L080A6B50: .4byte gUnknown_08A1FB30
.L080A6B54: .4byte gTrialMapData
.L080A6B58: .4byte 0x50414D58
.L080A6B5C: .4byte 0x00020223
.L080A6B60: .4byte gPlaySt
.L080A6B64: .4byte 0xFF801FFF
.L080A6B68:
	movs r0, #0
.L080A6B6A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A6AFC

	THUMB_FUNC_START GetTrialMapSavedMapAddress
GetTrialMapSavedMapAddress: @ 0x080A6B70
	push {lr}
	ldr r2, .L080A6B80  @ gTrialMapData
	ldr r1, [r2]
	ldr r0, .L080A6B84  @ 0x50414D58
	cmp r1, r0
	bne .L080A6B88
	ldr r0, [r2, #0x10]
	b .L080A6B8A
	.align 2, 0
.L080A6B80: .4byte gTrialMapData
.L080A6B84: .4byte 0x50414D58
.L080A6B88:
	movs r0, #0
.L080A6B8A:
	pop {r1}
	bx r1

	THUMB_FUNC_END GetTrialMapSavedMapAddress

	THUMB_FUNC_START GetTrialMapSavedMapSize
GetTrialMapSavedMapSize: @ 0x080A6B90
	push {lr}
	ldr r2, .L080A6BA4  @ gTrialMapData
	ldr r1, [r2]
	ldr r0, .L080A6BA8  @ 0x50414D58
	cmp r1, r0
	bne .L080A6BAC
	movs r1, #0x14
	ldrsh r0, [r2, r1]
	b .L080A6BAE
	.align 2, 0
.L080A6BA4: .4byte gTrialMapData
.L080A6BA8: .4byte 0x50414D58
.L080A6BAC:
	movs r0, #0
.L080A6BAE:
	pop {r1}
	bx r1

	THUMB_FUNC_END GetTrialMapSavedMapSize

	THUMB_FUNC_START GetTrialMapSavedChapterAddress
GetTrialMapSavedChapterAddress: @ 0x080A6BB4
	push {lr}
	ldr r2, .L080A6BC4  @ gTrialMapData
	ldr r1, [r2]
	ldr r0, .L080A6BC8  @ 0x50414D58
	cmp r1, r0
	bne .L080A6BCC
	ldr r0, [r2, #0x18]
	b .L080A6BCE
	.align 2, 0
.L080A6BC4: .4byte gTrialMapData
.L080A6BC8: .4byte 0x50414D58
.L080A6BCC:
	movs r0, #0
.L080A6BCE:
	pop {r1}
	bx r1

	THUMB_FUNC_END GetTrialMapSavedChapterAddress

	THUMB_FUNC_START GetTrialMapSavedChapterSize
GetTrialMapSavedChapterSize: @ 0x080A6BD4
	push {lr}
	ldr r2, .L080A6BE8  @ gTrialMapData
	ldr r1, [r2]
	ldr r0, .L080A6BEC  @ 0x50414D58
	cmp r1, r0
	bne .L080A6BF0
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	b .L080A6BF2
	.align 2, 0
.L080A6BE8: .4byte gTrialMapData
.L080A6BEC: .4byte 0x50414D58
.L080A6BF0:
	movs r0, #0
.L080A6BF2:
	pop {r1}
	bx r1

	THUMB_FUNC_END GetTrialMapSavedChapterSize

	THUMB_FUNC_START func_080A6BF8
func_080A6BF8: @ 0x080A6BF8
	push {lr}
	adds r2, r0, #0
	movs r3, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge .L080A6C14
.L080A6C08:
	ldrh r0, [r2]
	adds r3, r3, r0
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne .L080A6C08
.L080A6C14:
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A6BF8

	THUMB_FUNC_START func_080A6C1C
func_080A6C1C: @ 0x080A6C1C
	push {r4, lr}
	ldr r4, .L080A6C70  @ gBuf
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A6C84
	ldr r1, .L080A6C74  @ ReadSramFast
	ldr r0, .L080A6C78  @ 0x0E007400
	movs r2, #0xc0
	lsls r2, r2, #4
	ldr r3, [r1]
	adds r1, r4, #0
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, .L080A6C7C  @ 0x50414D58
	cmp r1, r0
	bne .L080A6C84
	bl GetLang
	lsls r0, r0, #0x18
	ldr r1, .L080A6C80  @ 0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne .L080A6C84
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq .L080A6C84
	adds r0, r4, #0
	adds r0, #8
	ldrh r1, [r4, #4]
	bl func_080A6BF8
	ldrh r1, [r4, #6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r1, r0
	bne .L080A6C84
	movs r0, #1
	b .L080A6C86
	.align 2, 0
.L080A6C70: .4byte gBuf
.L080A6C74: .4byte ReadSramFast
.L080A6C78: .4byte 0x0E007400
.L080A6C7C: .4byte 0x50414D58
.L080A6C80: .4byte 0x00020223
.L080A6C84:
	movs r0, #0
.L080A6C86:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A6C1C

	THUMB_FUNC_START func_080A6C8C
func_080A6C8C: @ 0x080A6C8C
	push {r4, r5, r6, lr}
	bl func_080A6AFC
	ldr r5, .L080A6CF4  @ ReadSramFast
	bl GetTrialMapSavedChapterAddress
	adds r4, r0, #0
	ldr r6, .L080A6CF8  @ gBuf
	bl GetTrialMapSavedChapterSize
	adds r2, r0, #0
	ldr r3, [r5]
	adds r0, r4, #0
	adds r1, r6, #0
	bl _call_via_r3
	ldr r4, .L080A6CFC  @ gUnknown_08A1FB34
	ldr r1, [r4]
	adds r0, r6, #0
	bl Decompress
	ldr r1, [r4]
	ldr r0, .L080A6D00  @ gPlaySt
	str r0, [r1, #0x18]
	ldr r0, .L080A6D04  @ gBmSt
	str r0, [r1, #0x1c]
	ldr r0, .L080A6D08  @ gActiveUnit
	str r0, [r1, #0x20]
	ldr r0, .L080A6D0C  @ gUnitLookup
	str r0, [r1, #0x24]
	ldr r0, .L080A6D10  @ gBattleUnitA
	str r0, [r1, #0x28]
	ldr r0, .L080A6D14  @ gBattleUnitB
	str r0, [r1, #0x2c]
	ldr r0, .L080A6D18  @ gBattleHitArray
	str r0, [r1, #0x30]
	movs r0, #0
	bl GetTrap
	ldr r1, [r4]
	str r0, [r1, #0x34]
	bl GetPermanentFlagData
	ldr r1, [r4]
	str r0, [r1, #0x38]
	bl GetTemporaryFlagData
	ldr r1, [r4]
	str r0, [r1, #0x3c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6CF4: .4byte ReadSramFast
.L080A6CF8: .4byte gBuf
.L080A6CFC: .4byte gUnknown_08A1FB34
.L080A6D00: .4byte gPlaySt
.L080A6D04: .4byte gBmSt
.L080A6D08: .4byte gActiveUnit
.L080A6D0C: .4byte gUnitLookup
.L080A6D10: .4byte gBattleUnitA
.L080A6D14: .4byte gBattleUnitB
.L080A6D18: .4byte gBattleHitArray

	THUMB_FUNC_END func_080A6C8C

	THUMB_FUNC_START func_080A6D1C
func_080A6D1C: @ 0x080A6D1C
	movs r1, #0
	strb r1, [r0]
	movs r0, #1
	bx lr

	THUMB_FUNC_END func_080A6D1C

	THUMB_FUNC_START func_080A6D24
func_080A6D24: @ 0x080A6D24
	push {lr}
	bl func_080346E0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A6D24

	THUMB_FUNC_START func_080A6D30
func_080A6D30: @ 0x080A6D30
	movs r0, #0
	bx lr

	THUMB_FUNC_END func_080A6D30

	THUMB_FUNC_START func_080A6D34
func_080A6D34: @ 0x080A6D34
	movs r0, #0
	bx lr

	THUMB_FUNC_END func_080A6D34

	THUMB_FUNC_START func_080A6D38
func_080A6D38: @ 0x080A6D38
	push {lr}
	bl GetGlobalCompletionCount
	ldr r1, .L080A6D48  @ gMapHidden
	movs r0, #0
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
.L080A6D48: .4byte gMapHidden

	THUMB_FUNC_END func_080A6D38

	THUMB_FUNC_START func_080A6D4C
func_080A6D4C: @ 0x080A6D4C
	push {r4, r5, lr}
	bl GetGameTime
	ldr r5, .L080A6D94  @ gPlaySt
	ldr r1, [r5, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r4, r0, #0
	ldr r0, .L080A6D98  @ 0x0000EA60
	cmp r4, r0
	ble .L080A6D68
	adds r4, r0, #0
.L080A6D68:
	ldr r0, .L080A6D9C  @ gUnknown_0203EF60
	movs r1, #0x7f
	ldrb r2, [r5, #0xe]
	ands r2, r1
	ldrb r3, [r0]
	movs r1, #0x80
	negs r1, r1
	ands r1, r3
	orrs r1, r2
	strb r1, [r0]
	ldrh r2, [r5, #0x10]
	lsls r2, r2, #7
	ldrh r3, [r0]
	movs r1, #0x7f
	ands r1, r3
	orrs r1, r2
	strh r1, [r0]
	strh r4, [r0, #2]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A6D94: .4byte gPlaySt
.L080A6D98: .4byte 0x0000EA60
.L080A6D9C: .4byte gUnknown_0203EF60

	THUMB_FUNC_END func_080A6D4C

	THUMB_FUNC_START func_080A6DA0
func_080A6DA0: @ 0x080A6DA0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r9, r0
	adds r7, r1, #0
	movs r1, #0
	adds r0, r7, #7
.L080A6DB0:
	strb r1, [r0]
	subs r0, #1
	cmp r0, r7
	bge .L080A6DB0
	movs r5, #0
	movs r0, #0
	movs r1, #1
	mov r8, r1
.L080A6DC0:
	movs r4, #0
	adds r1, r0, #1
	mov ip, r1
	lsls r0, r0, #2
	add r0, r9
	adds r6, r0, #0
	adds r6, #0x30
.L080A6DCE:
	cmp r4, #0
	beq .L080A6DD8
	cmp r4, #1
	beq .L080A6DE0
	b .L080A6DEA
.L080A6DD8:
	ldrb r0, [r6]
	mov r3, r8
	ands r3, r0
	b .L080A6DEA
.L080A6DE0:
	ldrb r1, [r6]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
.L080A6DEA:
	lsls r0, r3, #0x18
	cmp r0, #0
	beq .L080A6E0A
	adds r2, r5, #0
	cmp r5, #0
	bge .L080A6DF8
	adds r2, r5, #7
.L080A6DF8:
	asrs r2, r2, #3
	movs r1, #7
	ands r1, r5
	adds r2, r7, r2
	mov r0, r8
	lsls r0, r1
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
.L080A6E0A:
	adds r5, #1
	adds r4, #1
	cmp r4, #1
	ble .L080A6DCE
	mov r0, ip
	cmp r0, #0x1c
	ble .L080A6DC0
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A6DA0

	THUMB_FUNC_START func_080A6E24
func_080A6E24: @ 0x080A6E24
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r6, r1, #0
	movs r4, #0
	movs r0, #0
	movs r1, #1
	mov ip, r1
.L080A6E38:
	movs r5, #0
	adds r7, r0, #1
	lsls r0, r0, #2
	add r0, r8
	adds r3, r0, #0
	adds r3, #0x30
.L080A6E44:
	adds r0, r4, #0
	cmp r4, #0
	bge .L080A6E4C
	adds r0, r4, #7
.L080A6E4C:
	asrs r2, r0, #3
	movs r1, #7
	ands r1, r4
	mov r0, ip
	lsls r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r5, #0
	beq .L080A6E64
	cmp r5, #1
	beq .L080A6E7C
	b .L080A6E96
.L080A6E64:
	adds r0, r6, r2
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	beq .L080A6E76
	ldrb r1, [r3]
	mov r0, ip
	orrs r0, r1
	b .L080A6E94
.L080A6E76:
	ldrb r1, [r3]
	movs r0, #0xfe
	b .L080A6E92
.L080A6E7C:
	adds r0, r6, r2
	ldrb r0, [r0]
	ands r0, r1
	cmp r0, #0
	beq .L080A6E8E
	ldrb r0, [r3]
	movs r1, #2
	orrs r0, r1
	b .L080A6E94
.L080A6E8E:
	ldrb r1, [r3]
	movs r0, #0xfd
.L080A6E92:
	ands r0, r1
.L080A6E94:
	strb r0, [r3]
.L080A6E96:
	adds r4, #1
	adds r5, #1
	cmp r5, #1
	ble .L080A6E44
	adds r0, r7, #0
	cmp r0, #0x1c
	ble .L080A6E38
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A6E24

	THUMB_FUNC_START func_080A6EB0
func_080A6EB0: @ 0x080A6EB0
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	movs r1, #0
	adds r0, r4, #3
.L080A6EBA:
	strb r1, [r0]
	subs r0, #1
	cmp r0, r4
	bge .L080A6EBA
	movs r3, #0
	adds r0, r2, #0
	adds r0, #0xc4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r3, r0
	bge .L080A6F04
	adds r6, r2, #0
	adds r6, #0xa4
	movs r1, #7
	mov ip, r1
	adds r5, r0, #0
	movs r7, #1
.L080A6EDE:
	adds r0, r6, r3
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, r2, #0
	cmp r2, #0
	bge .L080A6EEC
	adds r0, r2, #7
.L080A6EEC:
	asrs r0, r0, #3
	adds r0, r4, r0
	mov r1, ip
	ands r2, r1
	adds r1, r7, #0
	lsls r1, r2
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
	adds r3, #1
	cmp r3, r5
	blt .L080A6EDE
.L080A6F04:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A6EB0

	THUMB_FUNC_START func_080A6F0C
func_080A6F0C: @ 0x080A6F0C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r1, r5, #0
	adds r1, #0xc4
	movs r0, #0
	strb r0, [r1]
	movs r4, #0
.L080A6F1C:
	adds r0, r4, #0
	cmp r4, #0
	bge .L080A6F24
	adds r0, r4, #7
.L080A6F24:
	asrs r0, r0, #3
	adds r0, r6, r0
	ldrb r1, [r0]
	movs r0, #7
	ands r0, r4
	asrs r1, r0
	movs r0, #1
	ands r1, r0
	cmp r1, #0
	beq .L080A6F44
	adds r0, r5, #0
	adds r1, r5, #0
	adds r1, #0xa4
	adds r2, r4, #0
	bl AddGmPath
.L080A6F44:
	adds r4, #1
	cmp r4, #0x1f
	ble .L080A6F1C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A6F0C

	THUMB_FUNC_START func_080A6F50
func_080A6F50: @ 0x080A6F50
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r2, #1
	mov r8, r2
	movs r2, #1
	mov ip, r2
	adds r6, r1, #0
	adds r4, r0, #0
	adds r4, #0x10
	movs r7, #6
.L080A6F66:
	ldrb r2, [r4]
	mov r3, ip
	ands r3, r2
	movs r0, #2
	negs r0, r0
	ands r0, r5
	orrs r3, r0
	ldrb r1, [r4, #1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #1
	subs r0, #0xbe
	ands r0, r3
	orrs r1, r0
	lsrs r2, r2, #1
	mov r0, r8
	ands r2, r0
	mov r0, ip
	ands r2, r0
	lsls r2, r2, #7
	movs r0, #0x81
	negs r0, r0
	ands r0, r1
	orrs r2, r0
	ldrb r1, [r4, #2]
	lsls r1, r1, #8
	ldr r0, .L080A6FB8  @ 0xFFFF00FF
	ands r0, r2
	orrs r1, r0
	adds r5, r1, #0
	strh r5, [r6]
	adds r6, #2
	adds r4, #4
	subs r7, #1
	cmp r7, #0
	bge .L080A6F66
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A6FB8: .4byte 0xFFFF00FF

	THUMB_FUNC_END func_080A6F50

	THUMB_FUNC_START func_080A6FBC
func_080A6FBC: @ 0x080A6FBC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	mov r4, sp
	movs r7, #1
	adds r3, r0, #0
	adds r5, r1, #0
	movs r6, #6
.L080A6FCA:
	ldrh r2, [r5]
	ldr r1, .L080A6FE8  @ 0xFFFF0000
	ldr r0, [sp]
	ands r0, r1
	orrs r0, r2
	str r0, [sp]
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A6FEC
	ldrb r0, [r3, #0x10]
	orrs r0, r7
	b .L080A6FF2
	.align 2, 0
.L080A6FE8: .4byte 0xFFFF0000
.L080A6FEC:
	ldrb r1, [r3, #0x10]
	movs r0, #0xfe
	ands r0, r1
.L080A6FF2:
	strb r0, [r3, #0x10]
	ldr r0, [sp]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1a
	movs r2, #0
	strb r0, [r3, #0x11]
	ldrb r1, [r4]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A7014
	ldrb r0, [r4, #1]
	strh r0, [r3, #0x12]
	ldrb r0, [r3, #0x10]
	movs r1, #2
	orrs r0, r1
	b .L080A701E
.L080A7014:
	ldrb r0, [r4, #1]
	strh r0, [r3, #0x12]
	ldrb r1, [r3, #0x10]
	movs r0, #0xfd
	ands r0, r1
.L080A701E:
	strb r0, [r3, #0x10]
	adds r3, #4
	adds r5, #2
	subs r6, #1
	cmp r6, #0
	bge .L080A6FCA
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A6FBC

	THUMB_FUNC_START func_080A7034
func_080A7034: @ 0x080A7034
	push {r4, lr}
	adds r4, r1, #0
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0xc9
.L080A703E:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #2
	ble .L080A703E
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A7034

	THUMB_FUNC_START func_080A7054
func_080A7054: @ 0x080A7054
	push {r4, lr}
	adds r4, r1, #0
	movs r2, #0
	adds r3, r0, #0
	adds r3, #0xc9
.L080A705E:
	adds r0, r3, r2
	adds r1, r4, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #2
	ble .L080A705E
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A7054

	THUMB_FUNC_START func_080A7074
func_080A7074: @ 0x080A7074
	push {r4, lr}
	sub sp, #0x28
	adds r4, r0, #0
	add r0, sp, #0x24
	movs r1, #0
	strh r1, [r0]
	ldr r2, .L080A70AC  @ 0x01000012
	mov r1, sp
	bl CpuSet
	mov r2, sp
	ldrb r0, [r2, #0x1c]
	movs r1, #2
	orrs r0, r1
	strb r0, [r2, #0x1c]
	movs r1, #0xc
	orrs r0, r1
	strb r0, [r2, #0x1c]
	mov r0, sp
	adds r1, r4, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x28
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A70AC: .4byte 0x01000012

	THUMB_FUNC_END func_080A7074

	THUMB_FUNC_START SaveWMStuff
SaveWMStuff: @ 0x080A70B0
	push {r4, r5, r6, lr}
	sub sp, #0x24
	adds r6, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	mov r1, sp
	bl func_080A6DA0
	add r1, sp, #8
	adds r0, r4, #0
	bl func_080A6EB0
	add r1, sp, #0xc
	adds r0, r4, #0
	bl func_080A6F50
	mov r1, sp
	adds r1, #0x1d
	adds r0, r4, #0
	bl func_080A7034
	adds r0, r4, #0
	adds r0, #0xcc
	ldrb r1, [r0]
	add r0, sp, #0x20
	strb r1, [r0]
	mov r1, sp
	ldrh r0, [r4, #2]
	strb r0, [r1, #0x1a]
	ldrh r0, [r4, #4]
	strb r0, [r1, #0x1b]
	mov r5, sp
	ldrb r3, [r4]
	lsls r0, r3, #0x1e
	lsrs r0, r0, #0x1f
	ldrb r1, [r5, #0x1c]
	movs r2, #2
	negs r2, r2
	ands r2, r1
	orrs r2, r0
	strb r2, [r5, #0x1c]
	mov r4, sp
	lsls r1, r3, #0x1d
	lsrs r1, r1, #0x1f
	lsls r1, r1, #1
	movs r0, #3
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #0x1c]
	mov r2, sp
	lsls r3, r3, #0x1a
	lsrs r3, r3, #0x1e
	lsls r3, r3, #2
	movs r1, #0xd
	negs r1, r1
	ands r0, r1
	orrs r0, r3
	strb r0, [r2, #0x1c]
	mov r0, sp
	adds r1, r6, #0
	movs r2, #0x24
	bl WriteAndVerifySramFast
	add sp, #0x24
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END SaveWMStuff

	THUMB_FUNC_START LoadWMStuff
LoadWMStuff: @ 0x080A7138
	push {r4, lr}
	sub sp, #0x24
	adds r4, r1, #0
	ldr r1, .L080A718C  @ ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x24
	bl _call_via_r3
	adds r0, r4, #0
	mov r1, sp
	bl func_080A6E24
	add r1, sp, #8
	adds r0, r4, #0
	bl func_080A6F0C
	add r1, sp, #0xc
	adds r0, r4, #0
	bl func_080A6FBC
	mov r1, sp
	adds r1, #0x1d
	adds r0, r4, #0
	bl func_080A7054
	add r0, sp, #0x20
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0xcc
	strb r1, [r0]
	mov r0, sp
	ldrb r1, [r0, #0x1c]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A7190
	ldrb r0, [r4]
	movs r1, #2
	orrs r0, r1
	b .L080A7198
	.align 2, 0
.L080A718C: .4byte ReadSramFast
.L080A7190:
	ldrb r1, [r4]
	movs r0, #3
	negs r0, r0
	ands r0, r1
.L080A7198:
	strb r0, [r4]
	mov r0, sp
	ldrb r1, [r0, #0x1c]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A71AE
	ldrb r0, [r4]
	movs r1, #4
	orrs r0, r1
	b .L080A71B6
.L080A71AE:
	ldrb r1, [r4]
	movs r0, #5
	negs r0, r0
	ands r0, r1
.L080A71B6:
	strb r0, [r4]
	mov r0, sp
	ldrb r1, [r0, #0x1c]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1e
	lsls r1, r1, #4
	ldrb r2, [r4]
	movs r0, #0x31
	negs r0, r0
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	mov r0, sp
	ldrb r0, [r0, #0x1a]
	strh r0, [r4, #2]
	mov r0, sp
	ldrb r0, [r0, #0x1b]
	strh r0, [r4, #4]
	add sp, #0x24
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END LoadWMStuff

	THUMB_FUNC_START func_080A71E4
func_080A71E4: @ 0x080A71E4
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A71F4  @ gGmData
	bl func_080BD260
	pop {r0}
	bx r0
	.align 2, 0
.L080A71F4: .4byte gGmData

	THUMB_FUNC_END func_080A71E4

	THUMB_FUNC_START func_080A71F8
func_080A71F8: @ 0x080A71F8
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A7208  @ gGmData
	bl func_080BD270
	pop {r0}
	bx r0
	.align 2, 0
.L080A7208: .4byte gGmData

	THUMB_FUNC_END func_080A71F8

	THUMB_FUNC_START func_080A720C
func_080A720C: @ 0x080A720C
	push {r4, lr}
	adds r4, r1, #0
	ldr r2, .L080A722C  @ 0x04000019
	bl CpuSet
	ldr r1, .L080A7230  @ gUnknown_08205D7C
	adds r0, r4, #0
	bl StringCopy
	ldr r0, .L080A7234  @ 0x00040624
	str r0, [r4, #8]
	ldr r0, .L080A7238  @ 0x0000200A
	strh r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A722C: .4byte 0x04000019
.L080A7230: .4byte gUnknown_08205D7C
.L080A7234: .4byte 0x00040624
.L080A7238: .4byte 0x0000200A

	THUMB_FUNC_END func_080A720C

	THUMB_FUNC_START func_080A723C
func_080A723C: @ 0x080A723C
	push {r4, r5, lr}
	adds r2, r1, #0
	ldm r0!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldr r0, [r0]
	str r0, [r2]
	ldr r0, .L080A7254  @ 0x00040624
	str r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A7254: .4byte 0x00040624

	THUMB_FUNC_END func_080A723C

	THUMB_FUNC_START func_080A7258
func_080A7258: @ 0x080A7258
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x4c
	bl memcpy
	ldrb r1, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #4
	ble .L080A7276
	adds r0, r1, #1
	strb r0, [r4, #0xe]
.L080A7276:
	ldrb r1, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0x15
	ble .L080A7284
	adds r0, r1, #1
	strb r0, [r4, #0xe]
.L080A7284:
	ldrb r1, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0x22
	ble .L080A7292
	adds r0, r1, #1
	strb r0, [r4, #0xe]
.L080A7292:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A7258

	THUMB_FUNC_START func_080A7298
func_080A7298: @ 0x080A7298
	push {r4, lr}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r2, [r0]
	str r2, [r1]
	ldrb r0, [r0, #4]
	strb r0, [r1, #4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A7298

	THUMB_FUNC_START func_080A72B0
func_080A72B0: @ 0x080A72B0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x4c
	adds r1, r4, #0
	adds r1, #0x58
	ldr r2, .L080A72E4  @ 0x00001EC4
	bl memcpy
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080A7258
	ldr r0, .L080A72E8  @ 0x00001F1C
	adds r4, r4, r0
	adds r0, #0x28
	adds r5, r5, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080A7298
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A72E4: .4byte 0x00001EC4
.L080A72E8: .4byte 0x00001F1C

	THUMB_FUNC_END func_080A72B0

	THUMB_FUNC_START func_080A72EC
func_080A72EC: @ 0x080A72EC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	adds r0, #0x4c
	adds r1, r4, #0
	adds r1, #0x58
	ldr r2, .L080A7320  @ 0x00000D1C
	bl memcpy
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080A7258
	ldr r0, .L080A7324  @ 0x00000D74
	adds r4, r4, r0
	adds r0, #0x18
	adds r5, r5, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080A7298
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A7320: .4byte 0x00000D1C
.L080A7324: .4byte 0x00000D74

	THUMB_FUNC_END func_080A72EC

	THUMB_FUNC_START func_080A7328
func_080A7328: @ 0x080A7328
	push {lr}
	adds r3, r0, #0
	adds r0, r1, #0
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r1, r3, #0
	bl memcpy
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A7328

	THUMB_FUNC_START func_080A733C
func_080A733C: @ 0x080A733C
	push {r4, lr}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A733C

	THUMB_FUNC_START func_080A734C
func_080A734C: @ 0x080A734C
	push {r4, lr}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A734C

	THUMB_FUNC_START func_080A7360
func_080A7360: @ 0x080A7360
	push {lr}
	adds r2, r0, #0
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x94
	bl memcpy
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A7360

	THUMB_FUNC_START func_080A7374
func_080A7374: @ 0x080A7374
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	ldr r4, .L080A751C  @ gUnknown_02000000
	movs r0, #0xe0
	lsls r0, r0, #0x14
	mov r9, r0
	ldr r5, .L080A7520  @ ReadSramFast
	ldr r3, [r5]
	adds r1, r4, #0
	movs r2, #0x64
	bl _call_via_r3
	ldr r1, [r4, #8]
	ldr r0, .L080A7524  @ 0x00040624
	cmp r1, r0
	bne .L080A739E
	b .L080A750C
.L080A739E:
	mov r8, r4
	movs r2, #0x80
	lsls r2, r2, #8
	ldr r3, [r5]
	mov r0, r9
	mov r1, r8
	bl _call_via_r3
	mov r0, r8
	ldr r1, [r0, #8]
	ldr r0, .L080A7528  @ 0x00040603
	cmp r1, r0
	beq .L080A73BA
	b .L080A750C
.L080A73BA:
	movs r0, #0
	str r0, [sp]
	movs r4, #0x80
	lsls r4, r4, #8
	add r4, r8
	ldr r2, .L080A752C  @ 0x01000019
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	mov r0, r8
	adds r1, r4, #0
	bl func_080A720C
	adds r0, r4, #0
	bl SaveGeneralGameMetadata
	movs r5, #0
	add r7, sp, #4
	add r1, sp, #8
	mov sl, r1
	mov r0, sp
	adds r0, #0xc
	str r0, [sp, #0x20]
	mov r1, sp
	adds r1, #0x10
	str r1, [sp, #0x24]
	adds r0, #8
	str r0, [sp, #0x28]
	adds r1, #8
	str r1, [sp, #0x2c]
	adds r0, #8
	str r0, [sp, #0x30]
	mov r6, r9
	adds r6, #0xd4
.L080A7400:
	movs r0, #0
	str r0, [sp, #4]
	adds r0, r7, #0
	adds r1, r4, #0
	ldr r2, .L080A7530  @ 0x010007DE
	bl CpuFastSet
	ldr r0, .L080A7534  @ 0x00001F58
	muls r0, r5, r0
	adds r0, #0xd4
	add r0, r8
	adds r1, r4, #0
	bl func_080A72B0
	adds r0, r4, #0
	adds r1, r6, #0
	ldr r2, .L080A7538  @ 0x00001F78
	bl WriteAndVerifySramFast
	ldr r1, .L080A7538  @ 0x00001F78
	adds r6, r6, r1
	adds r5, #1
	cmp r5, #1
	ble .L080A7400
	movs r5, #0
	ldr r6, .L080A753C  @ gUnknown_02008000
	ldr r0, .L080A7540  @ 0x00003FC4
	mov r1, r9
	adds r4, r1, r0
.L080A743A:
	movs r7, #0
	str r7, [sp, #8]
	mov r0, sl
	adds r1, r6, #0
	ldr r2, .L080A7544  @ 0x01000372
	bl CpuFastSet
	ldr r0, .L080A7548  @ 0x00000DA4
	muls r0, r5, r0
	ldr r1, .L080A754C  @ 0x00003F84
	adds r0, r0, r1
	add r0, r8
	adds r1, r6, #0
	bl func_080A72EC
	adds r0, r6, #0
	adds r1, r4, #0
	ldr r2, .L080A7550  @ 0x00000DC8
	bl WriteAndVerifySramFast
	ldr r0, .L080A7550  @ 0x00000DC8
	adds r4, r4, r0
	adds r5, #1
	cmp r5, #2
	ble .L080A743A
	str r7, [sp, #0xc]
	ldr r4, .L080A753C  @ gUnknown_02008000
	ldr r2, .L080A7554  @ 0x01000025
	ldr r0, [sp, #0x20]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, .L080A7558  @ 0x000070E4
	add r0, r8
	adds r1, r4, #0
	bl func_080A7360
	adds r0, r4, #0
	bl SaveRankings
	str r7, [sp, #0x10]
	ldr r2, .L080A755C  @ 0x01000009
	ldr r0, [sp, #0x24]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, .L080A7560  @ 0x00007178
	add r0, r8
	adds r1, r4, #0
	bl func_080A734C
	adds r0, r4, #0
	bl func_080A3EA4
	str r7, [sp, #0x14]
	ldr r2, .L080A7564  @ 0x01000005
	ldr r0, [sp, #0x28]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, .L080A7568  @ 0x0000719C
	add r0, r8
	adds r1, r4, #0
	bl func_080A733C
	adds r0, r4, #0
	bl func_080A4000
	str r7, [sp, #0x18]
	ldr r2, .L080A756C  @ 0x01000051
	ldr r0, [sp, #0x2c]
	adds r1, r4, #0
	bl CpuFastSet
	ldr r0, .L080A7570  @ 0x000071B0
	add r0, r8
	adds r1, r4, #0
	bl func_080A7328
	adds r0, r4, #0
	bl SaveBonusContentData
	movs r5, #0
	adds r6, r4, #0
	mov r4, r8
	adds r4, #0x64
.L080A74E6:
	movs r0, #0
	str r0, [sp, #0x1c]
	ldr r0, [sp, #0x30]
	adds r1, r6, #0
	ldr r2, .L080A7574  @ 0x01000004
	bl CpuFastSet
	adds r0, r4, #0
	adds r1, r6, #0
	bl func_080A723C
	adds r0, r6, #0
	adds r1, r5, #0
	bl SaveMetadata_Save
	adds r4, #0x10
	adds r5, #1
	cmp r5, #6
	ble .L080A74E6
.L080A750C:
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A751C: .4byte gUnknown_02000000
.L080A7520: .4byte ReadSramFast
.L080A7524: .4byte 0x00040624
.L080A7528: .4byte 0x00040603
.L080A752C: .4byte 0x01000019
.L080A7530: .4byte 0x010007DE
.L080A7534: .4byte 0x00001F58
.L080A7538: .4byte 0x00001F78
.L080A753C: .4byte gUnknown_02008000
.L080A7540: .4byte 0x00003FC4
.L080A7544: .4byte 0x01000372
.L080A7548: .4byte 0x00000DA4
.L080A754C: .4byte 0x00003F84
.L080A7550: .4byte 0x00000DC8
.L080A7554: .4byte 0x01000025
.L080A7558: .4byte 0x000070E4
.L080A755C: .4byte 0x01000009
.L080A7560: .4byte 0x00007178
.L080A7564: .4byte 0x01000005
.L080A7568: .4byte 0x0000719C
.L080A756C: .4byte 0x01000051
.L080A7570: .4byte 0x000071B0
.L080A7574: .4byte 0x01000004

	THUMB_FUNC_END func_080A7374

	THUMB_FUNC_START func_080A7578
func_080A7578: @ 0x080A7578
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, .L080A75C8  @ gMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r5, r0, r4
	ldrb r3, [r5]
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne .L080A7598
	movs r2, #1
.L080A7598:
	lsls r2, r2, #1
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne .L080A75A8
	adds r2, #1
.L080A75A8:
	lsls r2, r2, #1
	ldrb r0, [r5, #1]
	cmp r0, r3
	bne .L080A75B2
	adds r2, #1
.L080A75B2:
	lsls r2, r2, #1
	subs r0, r5, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne .L080A75BE
	adds r2, #1
.L080A75BE:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A75C8: .4byte gMapTerrain

	THUMB_FUNC_END func_080A7578

	THUMB_FUNC_START func_080A75CC
func_080A75CC: @ 0x080A75CC
	push {lr}
	cmp r0, #0x36
	beq .L080A75E0
	cmp r0, #0x36
	bgt .L080A75DC
	cmp r0, #0
	beq .L080A75E0
	b .L080A75E2
.L080A75DC:
	cmp r0, #0x3d
	bne .L080A75E2
.L080A75E0:
	movs r0, #0x15
.L080A75E2:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A75CC

	THUMB_FUNC_START func_080A75E8
func_080A75E8: @ 0x080A75E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, .L080A7678  @ gMapTerrain
	mov r8, r0
	ldr r0, [r0]
	lsls r5, r1, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl func_080A75CC
	adds r7, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0, #4]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl func_080A75CC
	cmp r0, r7
	bne .L080A761E
	movs r4, #1
.L080A761E:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl func_080A75CC
	cmp r0, r7
	bne .L080A7638
	adds r4, #1
.L080A7638:
	lsls r4, r4, #1
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	ldrb r0, [r0, #1]
	bl func_080A75CC
	cmp r0, r7
	bne .L080A7650
	adds r4, #1
.L080A7650:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	subs r0, #1
	ldrb r0, [r0]
	bl func_080A75CC
	cmp r0, r7
	bne .L080A766A
	adds r4, #1
.L080A766A:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080A7678: .4byte gMapTerrain

	THUMB_FUNC_END func_080A75E8

	THUMB_FUNC_START func_080A767C
func_080A767C: @ 0x080A767C
	push {lr}
	cmp r0, #0x17
	beq .L080A7694
	cmp r0, #0x17
	bgt .L080A768C
	cmp r0, #0
	beq .L080A7694
	b .L080A7696
.L080A768C:
	cmp r0, #0x1a
	beq .L080A7694
	cmp r0, #0x3f
	bne .L080A7696
.L080A7694:
	movs r0, #0x3c
.L080A7696:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A767C

	THUMB_FUNC_START func_080A769C
func_080A769C: @ 0x080A769C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, .L080A772C  @ gMapTerrain
	mov r8, r0
	ldr r0, [r0]
	lsls r5, r1, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl func_080A767C
	adds r7, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0, #4]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl func_080A767C
	cmp r0, r7
	bne .L080A76D2
	movs r4, #1
.L080A76D2:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	bl func_080A767C
	cmp r0, r7
	bne .L080A76EC
	adds r4, #1
.L080A76EC:
	lsls r4, r4, #1
	mov r1, r8
	ldr r0, [r1]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	ldrb r0, [r0, #1]
	bl func_080A767C
	cmp r0, r7
	bne .L080A7704
	adds r4, #1
.L080A7704:
	lsls r4, r4, #1
	mov r2, r8
	ldr r0, [r2]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r6, r0
	subs r0, #1
	ldrb r0, [r0]
	bl func_080A767C
	cmp r0, r7
	bne .L080A771E
	adds r4, #1
.L080A771E:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080A772C: .4byte gMapTerrain

	THUMB_FUNC_END func_080A769C

	THUMB_FUNC_START func_080A7730
func_080A7730: @ 0x080A7730
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	ldr r2, .L080A77D0  @ gMapTerrain
	ldr r1, [r2]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq .L080A775A
	cmp r0, #0x15
	beq .L080A775A
	cmp r0, #0x36
	beq .L080A775A
	cmp r0, #0x16
	beq .L080A775A
	cmp r0, #0x13
	bne .L080A775C
.L080A775A:
	adds r3, #1
.L080A775C:
	lsls r3, r3, #1
	ldr r0, [r2]
	lsls r1, r5, #2
	adds r0, r1, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq .L080A7780
	cmp r0, #0x15
	beq .L080A7780
	cmp r0, #0x36
	beq .L080A7780
	cmp r0, #0x16
	beq .L080A7780
	cmp r0, #0x13
	bne .L080A7782
.L080A7780:
	adds r3, #1
.L080A7782:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	ldrb r0, [r0, #1]
	cmp r0, #0x10
	beq .L080A77A2
	cmp r0, #0x15
	beq .L080A77A2
	cmp r0, #0x36
	beq .L080A77A2
	cmp r0, #0x16
	beq .L080A77A2
	cmp r0, #0x13
	bne .L080A77A4
.L080A77A2:
	adds r3, #1
.L080A77A4:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	subs r0, #1
	ldrb r0, [r0]
	cmp r0, #0x10
	beq .L080A77C6
	cmp r0, #0x15
	beq .L080A77C6
	cmp r0, #0x36
	beq .L080A77C6
	cmp r0, #0x16
	beq .L080A77C6
	cmp r0, #0x13
	bne .L080A77C8
.L080A77C6:
	adds r3, #1
.L080A77C8:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A77D0: .4byte gMapTerrain

	THUMB_FUNC_END func_080A7730

	THUMB_FUNC_START func_080A77D4
func_080A77D4: @ 0x080A77D4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, .L080A780C  @ gMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r2, r0, r4
	ldrb r3, [r2]
	subs r0, r2, #1
	ldrb r6, [r0]
	cmp r6, r3
	beq .L080A77F4
	ldrb r5, [r2, #1]
	cmp r5, r3
	bne .L080A782E
.L080A77F4:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r2, [r0]
	cmp r2, #0x15
	beq .L080A7808
	cmp r2, #0x36
	beq .L080A7808
	cmp r2, #0x16
	bne .L080A7810
.L080A7808:
	movs r0, #4
	b .L080A78F4
	.align 2, 0
.L080A780C: .4byte gMapTerrain
.L080A7810:
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x15
	beq .L080A7822
	cmp r0, #0x36
	beq .L080A7822
	cmp r0, #0x16
	bne .L080A7826
.L080A7822:
	movs r0, #0
	b .L080A78F4
.L080A7826:
	cmp r2, #0xf
	bne .L080A78F2
	movs r0, #0xc
	b .L080A78F4
.L080A782E:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r2, r0, r4
	ldrb r0, [r2]
	cmp r0, r3
	beq .L080A7844
	ldr r0, [r1, #4]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, r3
	bne .L080A7874
.L080A7844:
	adds r0, r5, #0
	cmp r0, #0x15
	beq .L080A7852
	cmp r0, #0x36
	beq .L080A7852
	cmp r0, #0x16
	bne .L080A7856
.L080A7852:
	movs r0, #2
	b .L080A78F4
.L080A7856:
	adds r1, r6, #0
	cmp r1, #0x15
	beq .L080A7864
	cmp r1, #0x36
	beq .L080A7864
	cmp r1, #0x16
	bne .L080A7868
.L080A7864:
	movs r0, #6
	b .L080A78F4
.L080A7868:
	cmp r0, #0xf
	bne .L080A7870
	movs r0, #0xd
	b .L080A78F4
.L080A7870:
	movs r0, #9
	b .L080A78F4
.L080A7874:
	subs r0, r1, #1
	ldrb r5, [r0]
	cmp r5, r3
	beq .L080A7882
	ldrb r4, [r2, #1]
	cmp r4, r3
	bne .L080A78B4
.L080A7882:
	subs r0, r2, #1
	ldrb r2, [r0]
	cmp r2, #0x15
	beq .L080A7892
	cmp r2, #0x36
	beq .L080A7892
	cmp r2, #0x16
	bne .L080A7896
.L080A7892:
	movs r0, #5
	b .L080A78F4
.L080A7896:
	ldrb r0, [r1, #1]
	cmp r0, #0x15
	beq .L080A78A4
	cmp r0, #0x36
	beq .L080A78A4
	cmp r0, #0x16
	bne .L080A78A8
.L080A78A4:
	movs r0, #1
	b .L080A78F4
.L080A78A8:
	cmp r2, #0xf
	bne .L080A78B0
	movs r0, #0xe
	b .L080A78F4
.L080A78B0:
	movs r0, #0xa
	b .L080A78F4
.L080A78B4:
	ldrb r0, [r1, #1]
	cmp r0, r3
	beq .L080A78C2
	subs r0, r2, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne .L080A78F2
.L080A78C2:
	adds r1, r4, #0
	cmp r1, #0x15
	beq .L080A78D0
	cmp r1, #0x36
	beq .L080A78D0
	cmp r1, #0x16
	bne .L080A78D4
.L080A78D0:
	movs r0, #3
	b .L080A78F4
.L080A78D4:
	adds r0, r5, #0
	cmp r0, #0x15
	beq .L080A78E2
	cmp r0, #0x36
	beq .L080A78E2
	cmp r0, #0x16
	bne .L080A78E6
.L080A78E2:
	movs r0, #7
	b .L080A78F4
.L080A78E6:
	cmp r1, #0xf
	bne .L080A78EE
	movs r0, #0xf
	b .L080A78F4
.L080A78EE:
	movs r0, #0xb
	b .L080A78F4
.L080A78F2:
	movs r0, #8
.L080A78F4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A77D4

	THUMB_FUNC_START func_080A78FC
func_080A78FC: @ 0x080A78FC
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080A7934  @ gMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq .L080A7930
	ldr r0, [r1, #4]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq .L080A7930
	ldr r0, [r1]
	adds r1, r2, r0
	subs r0, r1, #1
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq .L080A7930
	ldrb r0, [r1, #1]
	cmp r0, #0x2d
	bne .L080A7938
.L080A7930:
	movs r0, #0x12
	b .L080A793A
	.align 2, 0
.L080A7934: .4byte gMapTerrain
.L080A7938:
	movs r0, #0x11
.L080A793A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A78FC

	THUMB_FUNC_START func_080A7940
func_080A7940: @ 0x080A7940
	push {lr}
	ldr r2, .L080A7958  @ gMapTerrain
	ldr r2, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r0, r1
	ldrb r0, [r1, #1]
	cmp r0, #0x1e
	bne .L080A795C
	movs r0, #0x16
	b .L080A796A
	.align 2, 0
.L080A7958: .4byte gMapTerrain
.L080A795C:
	subs r0, r1, #1
	ldrb r0, [r0]
	cmp r0, #0x1e
	beq .L080A7968
	movs r0, #7
	b .L080A796A
.L080A7968:
	movs r0, #0x17
.L080A796A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A7940

	THUMB_FUNC_START func_080A7970
func_080A7970: @ 0x080A7970
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r2, .L080A79E0  @ gMapTerrain
	mov ip, r2
	ldr r2, [r2]
	lsls r7, r1, #2
	adds r2, r7, r2
	ldr r1, [r2]
	adds r1, r5, r1
	ldrb r4, [r1, #1]
	cmp r4, #0x13
	beq .L080A79DA
	subs r1, #1
	ldrb r3, [r1]
	cmp r3, #0x13
	beq .L080A79DA
	ldr r1, [r2, #4]
	adds r1, r1, r5
	ldrb r6, [r1]
	cmp r6, #0x13
	beq .L080A79F6
	subs r1, r2, #4
	ldr r1, [r1]
	adds r1, r1, r5
	ldrb r1, [r1]
	cmp r1, #0x13
	beq .L080A79F6
	cmp r4, #0x10
	beq .L080A79F6
	cmp r3, #0x10
	beq .L080A79F6
	cmp r6, #0x10
	beq .L080A79DA
	cmp r1, #0x10
	beq .L080A79DA
	cmp r4, #0x16
	beq .L080A79F6
	cmp r3, #0x16
	beq .L080A79F6
	mov r3, ip
	ldr r1, [r3]
	adds r2, r7, r1
	ldr r1, [r2, #4]
	adds r1, r1, r5
	ldrb r4, [r1]
	cmp r4, #0x16
	beq .L080A79DA
	subs r1, r2, #4
	ldr r1, [r1]
	adds r1, r1, r5
	ldrb r3, [r1]
	cmp r3, #0x16
	bne .L080A79E4
.L080A79DA:
	movs r0, #0x10
	b .L080A7A04
	.align 2, 0
.L080A79E0: .4byte gMapTerrain
.L080A79E4:
	ldr r1, [r2]
	adds r2, r5, r1
	ldrb r1, [r2, #1]
	cmp r1, #0x3c
	beq .L080A79F6
	subs r1, r2, #1
	ldrb r1, [r1]
	cmp r1, #0x3c
	bne .L080A79FA
.L080A79F6:
	movs r0, #0x18
	b .L080A7A04
.L080A79FA:
	cmp r4, #0x3c
	beq .L080A7A02
	cmp r3, #0x3c
	bne .L080A7A04
.L080A7A02:
	movs r0, #0x10
.L080A7A04:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A7970

	THUMB_FUNC_START func_080A7A0C
func_080A7A0C: @ 0x080A7A0C
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	ldr r0, .L080A7A30  @ gMapTerrain
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x40
	bls .L080A7A26
	b .L080A7BF2
.L080A7A26:
	lsls r0, r0, #2
	ldr r1, .L080A7A34  @ .L080A7A38
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080A7A30: .4byte gMapTerrain
.L080A7A34: .4byte .L080A7A38
.L080A7A38: @ jump table
	.4byte .L080A7BF2 @ case 0
	.4byte .L080A7B3C @ case 1
	.4byte .L080A7B40 @ case 2
	.4byte .L080A7B4C @ case 3
	.4byte .L080A7B4C @ case 4
	.4byte .L080A7B4C @ case 5
	.4byte .L080A7B50 @ case 6
	.4byte .L080A7B50 @ case 7
	.4byte .L080A7B54 @ case 8
	.4byte .L080A7BF2 @ case 9
	.4byte .L080A7B58 @ case 10
	.4byte .L080A7B5C @ case 11
	.4byte .L080A7B60 @ case 12
	.4byte .L080A7B64 @ case 13
	.4byte .L080A7B68 @ case 14
	.4byte .L080A7B68 @ case 15
	.4byte .L080A7B6C @ case 16
	.4byte .L080A7B78 @ case 17
	.4byte .L080A7B7C @ case 18
	.4byte .L080A7B80 @ case 19
	.4byte .L080A7BF2 @ case 20
	.4byte .L080A7B96 @ case 21
	.4byte .L080A7B96 @ case 22
	.4byte .L080A7BA2 @ case 23
	.4byte .L080A7BA2 @ case 24
	.4byte .L080A7BE2 @ case 25
	.4byte .L080A7BE2 @ case 26
	.4byte .L080A7BE2 @ case 27
	.4byte .L080A7BE2 @ case 28
	.4byte .L080A7BA6 @ case 29
	.4byte .L080A7BAA @ case 30
	.4byte .L080A7BB4 @ case 31
	.4byte .L080A7BB8 @ case 32
	.4byte .L080A7BB8 @ case 33
	.4byte .L080A7BE2 @ case 34
	.4byte .L080A7B4C @ case 35
	.4byte .L080A7BF2 @ case 36
	.4byte .L080A7BBC @ case 37
	.4byte .L080A7BC4 @ case 38
	.4byte .L080A7BD0 @ case 39
	.4byte .L080A7BD0 @ case 40
	.4byte .L080A7BD0 @ case 41
	.4byte .L080A7BD4 @ case 42
	.4byte .L080A7BE2 @ case 43
	.4byte .L080A7BE2 @ case 44
	.4byte .L080A7BD8 @ case 45
	.4byte .L080A7BE2 @ case 46
	.4byte .L080A7B96 @ case 47
	.4byte .L080A7BF2 @ case 48
	.4byte .L080A7BEE @ case 49
	.4byte .L080A7BF2 @ case 50
	.4byte .L080A7B60 @ case 51
	.4byte .L080A7B80 @ case 52
	.4byte .L080A7B96 @ case 53
	.4byte .L080A7B96 @ case 54
	.4byte .L080A7B5C @ case 55
	.4byte .L080A7B4C @ case 56
	.4byte .L080A7BE2 @ case 57
	.4byte .L080A7BC4 @ case 58
	.4byte .L080A7BC0 @ case 59
	.4byte .L080A7B8A @ case 60
	.4byte .L080A7BE2 @ case 61
	.4byte .L080A7BA2 @ case 62
	.4byte .L080A7BE2 @ case 63
	.4byte .L080A7BE2 @ case 64
.L080A7B3C:
	movs r0, #1
	b .L080A7BF4
.L080A7B40:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A7578
	adds r0, #0x40
	b .L080A7BF4
.L080A7B4C:
	movs r0, #2
	b .L080A7BF4
.L080A7B50:
	movs r0, #3
	b .L080A7BF4
.L080A7B54:
	movs r0, #4
	b .L080A7BF4
.L080A7B58:
	movs r0, #5
	b .L080A7BF4
.L080A7B5C:
	movs r0, #6
	b .L080A7BF4
.L080A7B60:
	movs r0, #8
	b .L080A7BF4
.L080A7B64:
	movs r0, #9
	b .L080A7BF4
.L080A7B68:
	movs r0, #0xa
	b .L080A7BF4
.L080A7B6C:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A7730
	adds r0, #0x60
	b .L080A7BF4
.L080A7B78:
	movs r0, #0xb
	b .L080A7BF4
.L080A7B7C:
	movs r0, #0x14
	b .L080A7BF4
.L080A7B80:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A7970
	b .L080A7BF4
.L080A7B8A:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A769C
	adds r0, #0x30
	b .L080A7BF4
.L080A7B96:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A75E8
	adds r0, #0x30
	b .L080A7BF4
.L080A7BA2:
	movs r0, #0xc
	b .L080A7BF4
.L080A7BA6:
	movs r0, #0xd
	b .L080A7BF4
.L080A7BAA:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A7940
	b .L080A7BF4
.L080A7BB4:
	movs r0, #0xe
	b .L080A7BF4
.L080A7BB8:
	movs r0, #0xf
	b .L080A7BF4
.L080A7BBC:
	movs r0, #0x1a
	b .L080A7BF4
.L080A7BC0:
	movs r0, #0x1b
	b .L080A7BF4
.L080A7BC4:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A77D4
	adds r0, #0x50
	b .L080A7BF4
.L080A7BD0:
	movs r0, #0x13
	b .L080A7BF4
.L080A7BD4:
	movs r0, #0x3a
	b .L080A7BF4
.L080A7BD8:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A78FC
	b .L080A7BF4
.L080A7BE2:
	adds r0, r2, #0
	adds r1, r3, #0
	bl func_080A7578
	adds r0, #0x20
	b .L080A7BF4
.L080A7BEE:
	movs r0, #0x19
	b .L080A7BF4
.L080A7BF2:
	movs r0, #0
.L080A7BF4:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A7A0C

	THUMB_FUNC_START func_080A7BF8
func_080A7BF8: @ 0x080A7BF8
	push {lr}
	bl func_080A7A0C
	lsls r0, r0, #5
	ldr r1, .L080A7C08  @ gBuf
	adds r0, r0, r1
	pop {r1}
	bx r1
	.align 2, 0
.L080A7C08: .4byte gBuf

	THUMB_FUNC_END func_080A7BF8

	THUMB_FUNC_START func_080A7C0C
func_080A7C0C: @ 0x080A7C0C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, .L080A7C40  @ gUnknown_08205D84
	mov r0, sp
	movs r2, #3
	bl memcpy
	ldr r0, .L080A7C44  @ gMapUnit
	ldr r0, [r0]
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A7C4C
	asrs r0, r0, #6
	add r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, .L080A7C48  @ gBuf
	adds r0, r0, r1
	b .L080A7C4E
	.align 2, 0
.L080A7C40: .4byte gUnknown_08205D84
.L080A7C44: .4byte gMapUnit
.L080A7C48: .4byte gBuf
.L080A7C4C:
	ldr r0, .L080A7C58  @ gBuf
.L080A7C4E:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080A7C58: .4byte gBuf

	THUMB_FUNC_END func_080A7C0C

	THUMB_FUNC_START func_080A7C5C
func_080A7C5C: @ 0x080A7C5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	str r1, [sp]
	cmp r4, #0
	bne .L080A7C72
	ldr r4, .L080A7C84  @ 0x06000020
.L080A7C72:
	lsls r0, r4, #0xf
	lsrs r7, r0, #0x14
	ldr r0, [sp]
	cmp r0, #0
	bge .L080A7C80
	movs r1, #3
	str r1, [sp]
.L080A7C80:
	movs r2, #0
	b .L080A7E56
	.align 2, 0
.L080A7C84: .4byte 0x06000020
.L080A7C88:
	movs r6, #0
	movs r2, #0
	ldrsh r0, [r1, r2]
	mov r3, r8
	adds r3, #2
	str r3, [sp, #0xc]
	cmp r6, r0
	blt .L080A7C9A
	b .L080A7E54
.L080A7C9A:
	movs r0, #1
	add r0, r8
	mov r9, r0
	mov r1, r8
	lsrs r0, r1, #0x1f
	add r0, r8
	asrs r0, r0, #1
	lsls r0, r0, #5
	str r0, [sp, #4]
	movs r2, #1
	mov sl, r2
.L080A7CB0:
	adds r0, r6, #0
	mov r1, r8
	bl func_080A7BF8
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl func_080A7BF8
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, r9
	bl func_080A7BF8
	adds r5, r0, #0
	mov r0, sl
	mov r1, r9
	bl func_080A7BF8
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, .L080A7E74  @ gBg1Tm
	asrs r2, r6, #0x1f
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r3, [sp]
	lsls r0, r3, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
	ldr r0, .L080A7E78  @ gMapUnit
	ldr r1, [r0]
	mov r3, r8
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r0, [r3]
	adds r1, r0, r6
	ldrb r0, [r1]
	str r2, [sp, #8]
	cmp r0, #0
	bne .L080A7D8E
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne .L080A7D8E
	ldr r0, [r3, #4]
	adds r1, r0, r6
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080A7D8E
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq .L080A7E42
.L080A7D8E:
	adds r0, r6, #0
	mov r1, r8
	bl func_080A7C0C
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl func_080A7C0C
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, r9
	bl func_080A7C0C
	adds r5, r0, #0
	mov r0, sl
	mov r1, r9
	bl func_080A7C0C
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, .L080A7E7C  @ gBg0Tm
	ldr r2, [sp, #8]
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r0, [sp]
	adds r0, #1
	lsls r0, r0, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
.L080A7E42:
	movs r0, #2
	add sl, r0
	adds r6, #2
	ldr r0, .L080A7E80  @ gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r6, r0
	bge .L080A7E54
	b .L080A7CB0
.L080A7E54:
	ldr r2, [sp, #0xc]
.L080A7E56:
	mov r8, r2
	ldr r1, .L080A7E80  @ gMapSize
	movs r3, #2
	ldrsh r0, [r1, r3]
	cmp r8, r0
	bge .L080A7E64
	b .L080A7C88
.L080A7E64:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A7E74: .4byte gBg1Tm
.L080A7E78: .4byte gMapUnit
.L080A7E7C: .4byte gBg0Tm
.L080A7E80: .4byte gMapSize

	THUMB_FUNC_END func_080A7C5C

	THUMB_FUNC_START func_080A7E84
func_080A7E84: @ 0x080A7E84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A7EC0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A7E9A
	movs r0, #0x78
	bl m4aSongNumStart
.L080A7E9A:
	adds r0, r4, #0
	bl func_080A86AC
	movs r4, #1
	negs r4, r4
	adds r0, r4, #0
	bl func_080A83D0
	movs r0, #0
	adds r1, r4, #0
	bl func_080A7C5C
	movs r0, #3
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A7EC0: .4byte gPlaySt

	THUMB_FUNC_END func_080A7E84

	THUMB_FUNC_START func_080A7EC4
func_080A7EC4: @ 0x080A7EC4
	push {lr}
	ldr r0, .L080A7EF4  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r3, .L080A7EF8  @ gUnknown_02000508
	cmp r1, #0xa0
	bls .L080A7EDE
	ldr r0, .L080A7EFC  @ gUnknown_02000500
	ldr r0, [r0]
	str r0, [r3]
	movs r1, #0
.L080A7EDE:
	ldr r2, .L080A7F00  @ 0x04000040
	ldr r0, [r3]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r0, [r1]
	lsls r0, r0, #8
	ldrh r1, [r1, #2]
	adds r0, r0, r1
	strh r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
.L080A7EF4: .4byte 0x04000006
.L080A7EF8: .4byte gUnknown_02000508
.L080A7EFC: .4byte gUnknown_02000500
.L080A7F00: .4byte 0x04000040

	THUMB_FUNC_END func_080A7EC4

	THUMB_FUNC_START func_080A7F04
func_080A7F04: @ 0x080A7F04
	ldr r2, .L080A7F14  @ gUnknown_02000500
	ldr r3, [r2]
	ldr r1, .L080A7F18  @ gUnknown_02000504
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	bx lr
	.align 2, 0
.L080A7F14: .4byte gUnknown_02000500
.L080A7F18: .4byte gUnknown_02000504

	THUMB_FUNC_END func_080A7F04

	THUMB_FUNC_START func_080A7F1C
func_080A7F1C: @ 0x080A7F1C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r0, .L080A8004  @ gUnknown_02000500
	ldr r1, .L080A8008  @ gUnknown_02000280
	str r1, [r0]
	ldr r2, .L080A800C  @ gUnknown_02000504
	ldr r3, .L080A8010  @ 0xFFFFFD80
	adds r0, r1, r3
	str r0, [r2]
	ldr r0, .L080A8014  @ gUnknown_02000508
	str r1, [r0]
	ldr r7, .L080A8018  @ gDispIo
	ldrb r0, [r7, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r5, r7, #0
	adds r5, #0x34
	ldrb r0, [r5]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r5]
	movs r0, #0x36
	adds r0, r0, r7
	mov r9, r0
	ldrb r1, [r0]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	mov r1, r9
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r4, #0
	movs r0, #0xf0
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x31
	strb r4, [r0]
	subs r0, #5
	strb r4, [r0]
	adds r1, #3
	movs r0, #0xa0
	strb r0, [r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	bl SetBlendBackdropB
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	ldrb r0, [r5]
	orrs r0, r6
	strb r0, [r5]
	adds r1, r7, #0
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	mov r3, r9
	ldrb r0, [r3]
	orrs r0, r6
	strb r0, [r3]
	movs r0, #0x4c
	add r8, r0
	mov r1, r8
	strh r4, [r1]
	ldr r0, .L080A801C  @ func_080A7EC4
	bl SetOnHBlankA
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8004: .4byte gUnknown_02000500
.L080A8008: .4byte gUnknown_02000280
.L080A800C: .4byte gUnknown_02000504
.L080A8010: .4byte 0xFFFFFD80
.L080A8014: .4byte gUnknown_02000508
.L080A8018: .4byte gDispIo
.L080A801C: .4byte func_080A7EC4

	THUMB_FUNC_END func_080A7F1C

	THUMB_FUNC_START func_080A8020
func_080A8020: @ 0x080A8020
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	adds r6, r0, #0
	adds r6, #0x4c
	movs r0, #0
	ldrsh r3, [r6, r0]
	cmp r3, #0
	bge .L080A803C
	adds r3, #3
.L080A803C:
	asrs r3, r3, #2
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	bl SetBlendConfig
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	ldrsh r3, [r6, r1]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #5
	movs r1, #0
	bl Interpolate
	adds r7, r0, #0
	adds r1, r7, #0
	cmp r7, #0
	bge .L080A806A
	adds r1, r7, #3
.L080A806A:
	asrs r1, r1, #2
	subs r1, #0x40
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	negs r5, r2
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	negs r3, r4
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, .L080A81B0  @ gUnknown_02000504
	mov sl, r4
	ldr r2, .L080A81B4  @ gSinLut
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov r9, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
.L080A80AC:
	mov r0, r9
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	negs r1, r1
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge .L080A80AC
	mov r3, sl
	ldr r0, [r3]
	bl func_080131D0
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	bl func_080A7F04
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble .L080A819E
	ldr r0, [sp, #0x14]
	bl Proc_Break
.L080A819E:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A81B0: .4byte gUnknown_02000504
.L080A81B4: .4byte gSinLut

	THUMB_FUNC_END func_080A8020

	THUMB_FUNC_START func_080A81B8
func_080A81B8: @ 0x080A81B8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, .L080A821C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A81D0
	movs r0, #0x79
	bl m4aSongNumStart
.L080A81D0:
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	movs r3, #4
	bl SetBlendConfig
	ldr r0, .L080A8220  @ gUnknown_02000500
	ldr r1, .L080A8224  @ gUnknown_02000280
	str r1, [r0]
	ldr r2, .L080A8228  @ gUnknown_02000504
	ldr r3, .L080A822C  @ 0xFFFFFD80
	adds r0, r1, r3
	str r0, [r2]
	ldr r0, .L080A8230  @ gUnknown_02000508
	str r1, [r0]
	adds r0, r5, #0
	adds r0, #0x4c
	strh r4, [r0]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A821C: .4byte gPlaySt
.L080A8220: .4byte gUnknown_02000500
.L080A8224: .4byte gUnknown_02000280
.L080A8228: .4byte gUnknown_02000504
.L080A822C: .4byte 0xFFFFFD80
.L080A8230: .4byte gUnknown_02000508

	THUMB_FUNC_END func_080A81B8

	THUMB_FUNC_START func_080A8234
func_080A8234: @ 0x080A8234
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	adds r6, r0, #0
	adds r6, #0x4c
	movs r1, #0
	ldrsh r0, [r6, r1]
	cmp r0, #0
	bge .L080A8250
	adds r0, #3
.L080A8250:
	asrs r0, r0, #2
	movs r3, #4
	subs r3, r3, r0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	bl SetBlendConfig
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0
	ldrsh r3, [r6, r2]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #2
	movs r2, #0
	bl Interpolate
	adds r7, r0, #0
	cmp r7, #0
	bge .L080A8280
	adds r0, r7, #3
.L080A8280:
	asrs r0, r0, #2
	movs r1, #0x40
	subs r1, r1, r0
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	negs r5, r2
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	negs r3, r4
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, .L080A83C8  @ gUnknown_02000504
	mov sl, r4
	ldr r2, .L080A83CC  @ gSinLut
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov r9, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
.L080A82C4:
	mov r0, r9
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	negs r1, r1
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge .L080A82C4
	mov r3, sl
	ldr r0, [r3]
	bl func_080131D0
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl func_080131F0
	bl func_080A7F04
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble .L080A83B6
	ldr r0, [sp, #0x14]
	bl Proc_Break
.L080A83B6:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A83C8: .4byte gUnknown_02000504
.L080A83CC: .4byte gSinLut

	THUMB_FUNC_END func_080A8234

	THUMB_FUNC_START func_080A83D0
func_080A83D0: @ 0x080A83D0
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	bge .L080A83DA
	movs r4, #3
.L080A83DA:
	ldr r0, .L080A8400  @ gUnknown_08A1FBD8
	ldr r1, .L080A8404  @ gBuf
	bl Decompress
	ldr r0, .L080A8408  @ gUnknown_08A1FFB0
	lsls r1, r4, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080A840C  @ gUnknown_08A1FFD0
	adds r1, r4, #1
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8400: .4byte gUnknown_08A1FBD8
.L080A8404: .4byte gBuf
.L080A8408: .4byte gUnknown_08A1FFB0
.L080A840C: .4byte gUnknown_08A1FFD0

	THUMB_FUNC_END func_080A83D0

	THUMB_FUNC_START func_080A8410
func_080A8410: @ 0x080A8410
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, .L080A8490  @ gUnknown_0200050C
	ldr r0, .L080A8494  @ gBuf
	str r0, [r1]
	movs r2, #1
	ldr r0, .L080A8498  @ gPal
	mov sl, r0
	movs r0, #0x1f
	mov r8, r0
	mov r9, r1
.L080A842C:
	adds r0, r2, #0
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r5, r0, #0
	mov r1, r8
	ands r5, r1
	asrs r4, r0, #5
	ands r4, r1
	asrs r3, r0, #0xa
	ands r3, r1
	adds r0, r2, #1
	mov ip, r0
	lsls r6, r2, #1
	movs r7, #7
.L080A844C:
	mov r1, r9
	ldr r0, [r1]
	adds r0, r6, r0
	lsls r1, r3, #0xa
	lsls r2, r4, #5
	adds r1, r1, r2
	adds r1, r1, r5
	strh r1, [r0]
	adds r5, #3
	cmp r5, #0x1f
	ble .L080A8464
	movs r5, #0x1f
.L080A8464:
	adds r4, #3
	cmp r4, #0x1f
	ble .L080A846C
	movs r4, #0x1f
.L080A846C:
	adds r3, #3
	cmp r3, #0x1f
	ble .L080A8474
	movs r3, #0x1f
.L080A8474:
	adds r6, #0x20
	subs r7, #1
	cmp r7, #0
	bge .L080A844C
	mov r2, ip
	cmp r2, #0xf
	ble .L080A842C
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8490: .4byte gUnknown_0200050C
.L080A8494: .4byte gBuf
.L080A8498: .4byte gPal

	THUMB_FUNC_END func_080A8410

	THUMB_FUNC_START func_080A849C
func_080A849C: @ 0x080A849C
	push {lr}
	sub sp, #0x10
	ldr r1, .L080A84D0  @ gUnknown_08205D87
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	bl GetGameTime
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	add r0, sp
	ldrb r1, [r0]
	ldr r0, .L080A84D4  @ gUnknown_0200050C
	lsls r1, r1, #5
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
.L080A84D0: .4byte gUnknown_08205D87
.L080A84D4: .4byte gUnknown_0200050C

	THUMB_FUNC_END func_080A849C

	THUMB_FUNC_START func_080A84D8
func_080A84D8: @ 0x080A84D8
	push {lr}
	sub sp, #0x20
	ldr r1, .L080A8514  @ gUnknown_08205D97
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	bl GetGameTime
	movs r1, #0x1f
	ands r1, r0
	mov r2, sp
	adds r0, r2, r1
	ldrb r0, [r0]
	adds r3, r0, #0
	adds r3, #0x10
	ldr r2, .L080A8518  @ gPal
	lsls r0, r3, #0xa
	lsls r1, r3, #5
	adds r0, r0, r1
	adds r0, r0, r3
	movs r1, #0x87
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0
.L080A8514: .4byte gUnknown_08205D97
.L080A8518: .4byte gPal

	THUMB_FUNC_END func_080A84D8

	THUMB_FUNC_START func_080A851C
func_080A851C: @ 0x080A851C
	push {r4, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	ldr r1, .L080A8560  @ gUnknown_08205DB8
	mov r0, sp
	movs r2, #0x1a
	bl memcpy
	ldr r3, .L080A8564  @ gBmSt
	movs r0, #0xc
	ldrsh r1, [r3, r0]
	cmp r1, #0
	bge .L080A8538
	adds r1, #3
.L080A8538:
	asrs r1, r1, #2
	ldr r0, [r4, #0x3c]
	adds r2, r0, r1
	movs r1, #0xe
	ldrsh r0, [r3, r1]
	cmp r0, #0
	bge .L080A8548
	adds r0, #3
.L080A8548:
	asrs r0, r0, #2
	ldr r1, [r4, #0x40]
	adds r1, r1, r0
	adds r0, r2, #0
	mov r2, sp
	movs r3, #0
	bl PutOamHiRam
	add sp, #0x1c
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8560: .4byte gUnknown_08205DB8
.L080A8564: .4byte gBmSt

	THUMB_FUNC_END func_080A851C

	THUMB_FUNC_START func_080A8568
func_080A8568: @ 0x080A8568
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, .L080A85D8  @ gMapSize
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r5, r0, #1
	movs r1, #2
	ldrsh r0, [r2, r1]
	lsls r1, r0, #2
	movs r0, #0xa0
	subs r0, r0, r1
	asrs r4, r0, #1
	cmp r1, #0x90
	ble .L080A85AE
	adds r4, r1, #0
	subs r4, #0x90
	ldr r1, .L080A85DC  @ gBmSt
	movs r2, #0xe
	ldrsh r0, [r1, r2]
	lsls r0, r0, #0x10
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	bl __divsi3
	muls r0, r4, r0
	cmp r0, #0
	bge .L080A85A8
	ldr r1, .L080A85E0  @ 0x0000FFFF
	adds r0, r0, r1
.L080A85A8:
	asrs r4, r0, #0x10
	movs r0, #8
	subs r4, r0, r4
.L080A85AE:
	str r5, [r6, #0x3c]
	str r4, [r6, #0x40]
	negs r5, r5
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	negs r4, r4
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A85D8: .4byte gMapSize
.L080A85DC: .4byte gBmSt
.L080A85E0: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080A8568

	THUMB_FUNC_START func_080A85E4
func_080A85E4: @ 0x080A85E4
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r1, .L080A86A4  @ gBmSt
	movs r0, #0xc
	ldrsh r3, [r1, r0]
	movs r0, #0xe
	ldrsh r4, [r1, r0]
	movs r5, #0xf
	adds r0, r3, #0
	ands r0, r5
	adds r7, r1, #0
	cmp r0, #0
	bne .L080A866E
	adds r0, r4, #0
	ands r0, r5
	cmp r0, #0
	bne .L080A866E
	str r0, [r2, #0x2c]
	str r0, [r2, #0x30]
	ldr r5, .L080A86A8  @ gKeySt
	ldr r0, [r5]
	ldrh r1, [r0, #4]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080A8626
	movs r0, #8
	negs r0, r0
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
.L080A8626:
	ldr r5, [r5]
	ldrh r1, [r5, #4]
	movs r0, #0x10
	ands r0, r1
	adds r6, r5, #0
	cmp r0, #0
	beq .L080A8640
	movs r0, #8
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
.L080A8640:
	ldrh r1, [r6, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080A8658
	movs r0, #8
	negs r0, r0
	str r0, [r2, #0x30]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
.L080A8658:
	ldrh r1, [r5, #4]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A866E
	movs r0, #8
	str r0, [r2, #0x30]
	adds r1, r2, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
.L080A866E:
	ldr r0, [r2, #0x2c]
	adds r3, r3, r0
	ldr r0, [r2, #0x30]
	adds r4, r4, r0
	cmp r3, #0
	bge .L080A867C
	movs r3, #0
.L080A867C:
	adds r1, r7, #0
	movs r2, #0x28
	ldrsh r0, [r1, r2]
	cmp r3, r0
	ble .L080A8688
	adds r3, r0, #0
.L080A8688:
	cmp r4, #0
	bge .L080A868E
	movs r4, #0
.L080A868E:
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	cmp r4, r0
	ble .L080A8698
	adds r4, r0, #0
.L080A8698:
	strh r3, [r7, #0xc]
	strh r4, [r7, #0xe]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A86A4: .4byte gBmSt
.L080A86A8: .4byte gKeySt

	THUMB_FUNC_END func_080A85E4

	THUMB_FUNC_START func_080A86AC
func_080A86AC: @ 0x080A86AC
	adds r2, r0, #0
	adds r2, #0x4a
	movs r1, #0
	strh r1, [r2]
	ldr r2, .L080A86C8  @ gMapSize
	movs r3, #0
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x34]
	movs r3, #2
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x38]
	bx lr
	.align 2, 0
.L080A86C8: .4byte gMapSize

	THUMB_FUNC_END func_080A86AC

	THUMB_FUNC_START func_080A86CC
func_080A86CC: @ 0x080A86CC
	push {lr}
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq .L080A86FA
	ldr r1, .L080A8704  @ gBmSt
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bge .L080A86E4
	adds r0, #0xf
.L080A86E4:
	asrs r0, r0, #4
	adds r0, #7
	movs r2, #0xe
	ldrsh r1, [r1, r2]
	cmp r1, #0
	bge .L080A86F2
	adds r1, #0xf
.L080A86F2:
	asrs r1, r1, #4
	adds r1, #5
	bl SetCursorMapPosition
.L080A86FA:
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
.L080A8704: .4byte gBmSt

	THUMB_FUNC_END func_080A86CC

	THUMB_FUNC_START func_080A8708
func_080A8708: @ 0x080A8708
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl func_080A849C
	adds r0, r4, #0
	bl func_080A84D8
	adds r0, r4, #0
	bl func_080A8568
	adds r0, r4, #0
	bl func_080A851C
	adds r0, r4, #0
	bl func_080A85E4
	ldr r0, .L080A8768  @ gKeySt
	ldr r0, [r0]
	ldrh r0, [r0, #4]
	movs r1, #0xc0
	lsls r1, r1, #2
	ands r1, r0
	cmp r1, #0
	beq .L080A876C
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	b .L080A8794
	.align 2, 0
.L080A8768: .4byte gKeySt
.L080A876C:
	str r1, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #3
	movs r1, #0x10
	movs r2, #0
	movs r3, #4
	bl SetBlendConfig
.L080A8794:
	ldr r0, .L080A87BC  @ gBmSt
	ldr r0, [r0, #0xc]
	ldr r1, .L080A87C0  @ 0x000F000F
	ands r0, r1
	cmp r0, #0
	bne .L080A87B4
	ldr r0, .L080A87C4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq .L080A87B4
	adds r0, r4, #0
	bl Proc_Break
.L080A87B4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A87BC: .4byte gBmSt
.L080A87C0: .4byte 0x000F000F
.L080A87C4: .4byte gKeySt

	THUMB_FUNC_END func_080A8708

	THUMB_FUNC_START func_080A87C8
func_080A87C8: @ 0x080A87C8
	push {lr}
	ldr r0, .L080A87D8  @ gUnknown_08A1FB38
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080A87D8: .4byte gUnknown_08A1FB38

	THUMB_FUNC_END func_080A87C8

	THUMB_FUNC_START func_080A87DC
func_080A87DC: @ 0x080A87DC
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080A87EC  @ gUnknown_08A1FB38
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080A87EC: .4byte gUnknown_08A1FB38

	THUMB_FUNC_END func_080A87DC

	THUMB_FUNC_START func_080A87F0
func_080A87F0: @ 0x080A87F0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	ldr r0, .L080A8824  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080A8828  @ gBg1Tm
	movs r1, #0
	bl TmFill
	adds r0, r5, #0
	bl InitChapterPreviewMap
	adds r0, r4, #0
	bl func_080A83D0
	adds r0, r6, #0
	adds r1, r4, #0
	bl func_080A7C5C
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8824: .4byte gBg0Tm
.L080A8828: .4byte gBg1Tm

	THUMB_FUNC_END func_080A87F0

	THUMB_FUNC_START func_080A882C
func_080A882C: @ 0x080A882C
	push {lr}
	movs r1, #0x12
	bl Proc_Goto
	movs r0, #0xc0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A882C

	THUMB_FUNC_START func_080A8844
func_080A8844: @ 0x080A8844
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	movs r2, #0
	movs r1, #1
.L080A8852:
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq .L080A886C
	cmp r5, r3
	bne .L080A886A
	adds r0, r1, #0
	lsls r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b .L080A8874
.L080A886A:
	adds r3, #1
.L080A886C:
	adds r2, #1
	cmp r2, #7
	ble .L080A8852
	movs r0, #0xff
.L080A8874:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A8844

	THUMB_FUNC_START func_080A887C
func_080A887C: @ 0x080A887C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r3, #0
	movs r2, #0
	movs r1, #1
.L080A888C:
	adds r0, r5, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq .L080A88A8
	adds r0, r4, #0
	asrs r0, r2
	ands r0, r1
	cmp r0, #0
	beq .L080A88A6
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	b .L080A88B0
.L080A88A6:
	adds r3, #1
.L080A88A8:
	adds r2, #1
	cmp r2, #7
	ble .L080A888C
	movs r0, #0xff
.L080A88B0:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A887C

	THUMB_FUNC_START func_080A88B8
func_080A88B8: @ 0x080A88B8
	push {lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	movs r3, #1
.L080A88C2:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq .L080A88D2
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	b .L080A88DA
.L080A88D2:
	adds r1, #1
	cmp r1, #7
	ble .L080A88C2
	movs r0, #0xff
.L080A88DA:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A88B8

	THUMB_FUNC_START func_080A88E0
func_080A88E0: @ 0x080A88E0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq .L080A88F6
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r1, [r0]
	cmp r1, #0
	bne .L080A8904
.L080A88F6:
	bl MoveableHelpBox_OnEnd
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #0
	strb r0, [r1]
	b .L080A8940
.L080A8904:
	adds r1, r4, #0
	adds r1, #0x42
	ldrh r1, [r1]
	cmp r1, #0x10
	beq .L080A891C
	cmp r1, #0x10
	bgt .L080A8918
	cmp r1, #2
	beq .L080A891C
	b .L080A8940
.L080A8918:
	cmp r1, #0x20
	bne .L080A8940
.L080A891C:
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080A8940
	adds r4, #0x3e
	ldrb r0, [r4]
	cmp r0, #0
	bne .L080A8940
	ldr r0, .L080A8948  @ 0x06014000
	movs r1, #9
	bl LoadHelpBoxGfx
	ldr r2, .L080A894C  @ 0x00000882
	movs r0, #0x30
	movs r1, #0x30
	bl StartHelpBox
	movs r0, #1
	strb r0, [r4]
.L080A8940:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8948: .4byte 0x06014000
.L080A894C: .4byte 0x00000882

	THUMB_FUNC_END func_080A88E0

	THUMB_FUNC_START func_080A8950
func_080A8950: @ 0x080A8950
	push {r4, r5, r6, r7, lr}
	sub sp, #0x168
	adds r4, r0, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080A8964
	movs r0, #0
	b .L080A89DA
.L080A8964:
	adds r0, r4, #0
	mov r1, sp
	bl LoadSavedChapterState
	mov r0, sp
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	blt .L080A897C
	cmp r0, #2
	ble .L080A897C
	cmp r0, #3
	beq .L080A8980
.L080A897C:
	movs r6, #1
	b .L080A8982
.L080A8980:
	movs r6, #0xf
.L080A8982:
	adds r0, r4, #0
	bl GetSaveSourceAddress
	adds r7, r0, #0
	movs r5, #0
	adds r4, r7, #0
	adds r4, #0x4c
	b .L080A8996
.L080A8992:
	adds r4, #0x24
	adds r5, #1
.L080A8996:
	cmp r5, #0x32
	bgt .L080A89D4
	adds r0, r4, #0
	add r1, sp, #0x4c
	bl LoadSavedUnit
	ldr r0, [sp, #0x4c]
	add r1, sp, #0x4c
	cmp r0, #0
	beq .L080A8992
	ldrb r0, [r0, #4]
	cmp r0, r6
	bne .L080A8992
	ldr r4, .L080A89CC  @ gSaveMenuRTextData
	strb r6, [r4]
	ldrb r0, [r1, #8]
	strb r0, [r4, #1]
	ldr r1, .L080A89D0  @ 0x00000D8C
	adds r0, r7, r1
	add r5, sp, #0x94
	adds r1, r5, #0
	bl LoadWMStuff
	ldrb r0, [r5, #0x11]
	strb r0, [r4, #2]
	b .L080A89D8
	.align 2, 0
.L080A89CC: .4byte gSaveMenuRTextData
.L080A89D0: .4byte 0x00000D8C
.L080A89D4:
	bl func_080AA700
.L080A89D8:
	movs r0, #2
.L080A89DA:
	add sp, #0x168
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A8950

	THUMB_FUNC_START func_080A89E4
func_080A89E4: @ 0x080A89E4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r7, #8
	adds r5, r6, #0
	adds r5, #0x40
	ldrb r0, [r5]
	cmp r0, #8
	bne .L080A8A14
	ldr r0, .L080A8A10  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xf9
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A8A70
	bl MoveableHelpBox_OnEnd
	movs r0, #7
	strb r0, [r5]
	b .L080A8A70
	.align 2, 0
.L080A8A10: .4byte gKeySt
.L080A8A14:
	ldr r0, .L080A8A48  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080A8A70
	adds r4, r6, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	bl func_080A8950
	cmp r0, #0
	bne .L080A8A50
	ldr r0, .L080A8A4C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A8A70
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L080A8A70
	.align 2, 0
.L080A8A48: .4byte gKeySt
.L080A8A4C: .4byte gPlaySt
.L080A8A50:
	cmp r0, #0
	blt .L080A8A70
	cmp r0, #2
	bgt .L080A8A70
	ldr r0, .L080A8A8C  @ 0x06014000
	movs r1, #9
	bl LoadHelpBoxGfx
	ldrb r1, [r4]
	lsls r1, r1, #5
	adds r1, #0x2c
	ldr r2, .L080A8A90  @ 0x0000FFFE
	movs r0, #0x50
	bl ShowItemHelpBox
	strb r7, [r5]
.L080A8A70:
	adds r1, r6, #0
	adds r1, #0x40
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080A8A88
	cmp r0, r7
	bge .L080A8A82
	subs r0, #1
	strb r0, [r1]
.L080A8A82:
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080A8A94
.L080A8A88:
	movs r0, #0
	b .L080A8A96
	.align 2, 0
.L080A8A8C: .4byte 0x06014000
.L080A8A90: .4byte 0x0000FFFE
.L080A8A94:
	movs r0, #1
.L080A8A96:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A89E4

	THUMB_FUNC_START func_080A8A9C
func_080A8A9C: @ 0x080A8A9C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r0, #0xac
	lsls r0, r0, #4
	bl func_08089678
	movs r4, #0
	ldr r6, .L080A8ACC  @ 0x0001FFFF
	movs r5, #0xb4
	lsls r5, r5, #9
.L080A8AB0:
	adds r0, r7, #0
	adds r0, #0x37
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L080A8AD0
	adds r0, r5, #0
	ands r0, r6
	lsrs r0, r0, #5
	ldrb r1, [r1]
	bl LoadChapterTitleGfx
	b .L080A8ADE
	.align 2, 0
.L080A8ACC: .4byte 0x0001FFFF
.L080A8AD0:
	adds r0, r5, #0
	ands r0, r6
	lsrs r0, r0, #5
	movs r1, #1
	negs r1, r1
	bl LoadChapterTitleGfx
.L080A8ADE:
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	adds r4, #1
	cmp r4, #2
	ble .L080A8AB0
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A8A9C

	THUMB_FUNC_START func_080A8AF0
func_080A8AF0: @ 0x080A8AF0
	push {r4, r5, lr}
	sub sp, #4
	ldr r5, .L080A8B2C  @ gPlaySt
	ldrb r1, [r5, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne .L080A8B7E
	movs r4, #0xe
	ldrsb r4, [r5, r4]
	ldr r2, .L080A8B30  @ gGmData
	ldrb r1, [r2]
	movs r0, #3
	ands r0, r1
	cmp r0, #3
	bne .L080A8B34
	cmp r4, #1
	bls .L080A8B7E
	cmp r4, #0x38
	beq .L080A8B7E
	adds r0, r2, #0
	bl func_080BD014
	cmp r0, #0
	bge .L080A8B24
	movs r0, #0
.L080A8B24:
	bl WMLocation_GetChapterId
	strb r0, [r5, #0xe]
	b .L080A8B7E
	.align 2, 0
.L080A8B2C: .4byte gPlaySt
.L080A8B30: .4byte gGmData
.L080A8B34:
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	cmp r0, #6
	bne .L080A8B4E
	movs r0, #0x88
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A8B4E
	movs r0, #0x38
	strb r0, [r5, #0xe]
	b .L080A8B7E
.L080A8B4E:
	cmp r4, #1
	beq .L080A8B7E
	cmp r4, #0xa
	beq .L080A8B7E
	cmp r4, #0x17
	beq .L080A8B7E
	ldr r4, .L080A8C18  @ gPlaySt
	adds r0, r4, #0
	adds r0, #0x4a
	ldrb r1, [r0]
	movs r0, #0xe
	ands r0, r1
	cmp r0, #4
	beq .L080A8B7E
	ldr r0, .L080A8C1C  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne .L080A8B7E
	ldr r0, .L080A8C20  @ gGmData
	bl func_080BD224
	strb r0, [r4, #0xe]
.L080A8B7E:
	bl func_080AA700
	ldr r0, .L080A8C24  @ gUnknown_08A20050
	bl SetupBackgrounds
	ldr r3, .L080A8C28  @ gDispIo
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #1
	movs r1, #6
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8C18: .4byte gPlaySt
.L080A8C1C: .4byte gBmSt
.L080A8C20: .4byte gGmData
.L080A8C24: .4byte gUnknown_08A20050
.L080A8C28: .4byte gDispIo

	THUMB_FUNC_END func_080A8AF0

	THUMB_FUNC_START func_080A8C2C
func_080A8C2C: @ 0x080A8C2C
	push {r4, lr}
	sub sp, #4
	bl func_080AA700
	ldr r0, .L080A8CCC  @ gUnknown_08A20050
	bl SetupBackgrounds
	ldr r3, .L080A8CD0  @ gDispIo
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #1
	movs r1, #6
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8CCC: .4byte gUnknown_08A20050
.L080A8CD0: .4byte gDispIo

	THUMB_FUNC_END func_080A8C2C

	THUMB_FUNC_START func_080A8CD4
func_080A8CD4: @ 0x080A8CD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	bl ResetTextFont
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	ldr r0, .L080A8EB0  @ gUnknown_08A25DCC
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	adds r2, r6, #0
	bl ApplyPaletteExt
	ldr r4, .L080A8EB4  @ gUnknown_08A21658
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080A8EB8  @ gBg3Tm
	ldr r1, .L080A8EBC  @ gUnknown_08A25ECC
	movs r2, #0x80
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, .L080A8EC0  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080A8EC4  @ gUnknown_08A26380
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r2, .L080A8EC8  @ 0x06004C00
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080A8ECC  @ gUnknown_08A268F8
	ldr r4, .L080A8ED0  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080A8ED4  @ gBg2Tm
	ldr r2, .L080A8ED8  @ 0x00007260
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080A8EDC  @ gUnknown_08A26A74
	ldr r1, .L080A8EE0  @ 0x06010800
	bl Decompress
	ldr r0, .L080A8EE4  @ gUnknown_08A27F68
	movs r1, #0x90
	lsls r1, r1, #2
	adds r2, r6, #0
	bl ApplyPaletteExt
	ldr r0, .L080A8EE8  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080A8EEC  @ gPal+0x240
	adds r1, r0, #0
	subs r1, #0x20
	movs r2, #1
	bl func_080AA790
	ldr r0, .L080A8EF0  @ gUnknown_08A2C23C
	ldr r1, .L080A8EF4  @ gUnknown_020007A0
	movs r2, #2
	bl func_080AA790
	movs r0, #0xf
	bl EnableBgSync
	mov r0, r8
	adds r0, #0x29
	movs r4, #0
	strb r4, [r0]
	ldr r1, .L080A8EF8  @ gDispIo
	adds r2, r1, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r3, #0x20
	orrs r0, r3
	strb r0, [r2]
	adds r1, #0x35
	ldrb r0, [r1]
	orrs r0, r3
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x36
	strb r4, [r0]
	mov r1, r8
	adds r1, #0x2d
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x3d
	strb r4, [r0]
	movs r7, #0
	ldr r0, .L080A8EFC  @ gSinLut
	mov r9, r0
	movs r1, #0x80
	add r1, r9
	mov sl, r1
	adds r5, r6, #0
.L080A8DCA:
	mov r2, sl
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	lsls r2, r0, #0x10
	asrs r0, r2, #0x10
	str r0, [sp, #8]
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r5, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	ldr r2, [sp, #8]
	adds r3, r4, #0
	bl SetObjAffine
	adds r7, #1
	cmp r7, #3
	ble .L080A8DCA
	mov r1, r8
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
	subs r1, #5
	movs r0, #0xff
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x3e
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	movs r7, #0
	mov r4, r8
	adds r4, #0x2c
.L080A8E50:
	lsls r0, r7, #0x18
	lsrs r0, r0, #0x18
	mov r1, r8
	bl func_080ABC14
	adds r7, #1
	cmp r7, #3
	ble .L080A8E50
	ldrb r0, [r4]
	bl func_080ABD88
	bl func_080AB794
	movs r0, #2
	bl EnableBgSync
	ldr r2, .L080A8EF8  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r1, .L080A8F00  @ gPal
	movs r0, #0
	strh r0, [r1]
	bl EnablePalSync
	mov r0, r8
	bl func_080A8A9C
	mov r0, r8
	bl StartSaveDraw
	mov r1, r8
	str r0, [r1, #0x58]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A8EB0: .4byte gUnknown_08A25DCC
.L080A8EB4: .4byte gUnknown_08A21658
.L080A8EB8: .4byte gBg3Tm
.L080A8EBC: .4byte gUnknown_08A25ECC
.L080A8EC0: .4byte gUnknown_08A268D8
.L080A8EC4: .4byte gUnknown_08A26380
.L080A8EC8: .4byte 0x06004C00
.L080A8ECC: .4byte gUnknown_08A268F8
.L080A8ED0: .4byte gBuf
.L080A8ED4: .4byte gBg2Tm
.L080A8ED8: .4byte 0x00007260
.L080A8EDC: .4byte gUnknown_08A26A74
.L080A8EE0: .4byte 0x06010800
.L080A8EE4: .4byte gUnknown_08A27F68
.L080A8EE8: .4byte gUnknown_08A295B4
.L080A8EEC: .4byte gPal+0x240
.L080A8EF0: .4byte gUnknown_08A2C23C
.L080A8EF4: .4byte gUnknown_020007A0
.L080A8EF8: .4byte gDispIo
.L080A8EFC: .4byte gSinLut
.L080A8F00: .4byte gPal

	THUMB_FUNC_END func_080A8CD4

	THUMB_FUNC_START func_080A8F04
func_080A8F04: @ 0x080A8F04
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, .L080A8F34  @ gUnknown_08A2812C
	ldr r1, .L080A8F38  @ 0x06014000
	bl Decompress
	adds r0, r5, #0
	bl func_080AB89C
	adds r6, r5, #0
	adds r6, #0x42
	ldrh r0, [r6]
	cmp r0, #0x20
	bne .L080A8F3C
	movs r0, #0x20
	adds r1, r5, #0
	bl func_080ABF44
	adds r1, r5, #0
	adds r1, #0x2b
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x2e
	b .L080A8F6A
	.align 2, 0
.L080A8F34: .4byte gUnknown_08A2812C
.L080A8F38: .4byte 0x06014000
.L080A8F3C:
	adds r4, r5, #0
	adds r4, #0x2e
	movs r1, #0
	movs r0, #2
	strb r0, [r4]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r2, r5, #0
	adds r2, #0x2b
	strb r1, [r2]
	adds r0, #8
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x16
	ldrb r0, [r0]
	ldrb r1, [r2]
	bl func_080A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r6]
.L080A8F6A:
	ldrb r0, [r4]
	cmp r0, #2
	bne .L080A8F78
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
.L080A8F78:
	ldrb r0, [r4]
	cmp r0, #5
	bne .L080A8F86
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
.L080A8F86:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A8F04

	THUMB_FUNC_START func_080A8F8C
func_080A8F8C: @ 0x080A8F8C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	bl GetLastUsedGameSaveSlot
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #9
	strb r4, [r0]
	adds r0, #0x12
	movs r2, #0
	strh r4, [r0]
	subs r0, #0x16
	movs r1, #0x40
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x11
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A8F8C

	THUMB_FUNC_START func_080A8FD0
func_080A8FD0: @ 0x080A8FD0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	bl GetLastUsedGameSaveSlot
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	adds r0, #9
	strb r4, [r0]
	adds r0, #0x12
	movs r2, #0
	strh r4, [r0]
	subs r0, #0x16
	movs r1, #0x80
	strb r1, [r0]
	adds r0, #0x12
	strh r1, [r0]
	subs r0, #0x11
	strb r2, [r0]
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A8FD0

	THUMB_FUNC_START func_080A9014
func_080A9014: @ 0x080A9014
	push {lr}
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	bl Proc_Goto
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9014

	THUMB_FUNC_START Loop6C_savemenu
Loop6C_savemenu: @ 0x080A9024
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #2
	strb r0, [r1]
	ldr r0, .L080A9054  @ gKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq .L080A906C
	adds r2, r5, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	cmp r0, #0
	beq .L080A9058
	subs r0, #1
	b .L080A908A
	.align 2, 0
.L080A9054: .4byte gKeySt
.L080A9058:
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A90C2
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	b .L080A908A
.L080A906C:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A90C2
	adds r2, r5, #0
	adds r2, #0x2b
	ldrb r1, [r2]
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L080A90A4
	adds r0, r1, #1
.L080A908A:
	strb r0, [r2]
	ldr r0, .L080A90A0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A90C2
	movs r0, #0x66
	bl m4aSongNumStart
	b .L080A90C2
	.align 2, 0
.L080A90A0: .4byte gPlaySt
.L080A90A4:
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A90C2
	strb r4, [r2]
	ldr r0, .L080A911C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A90C2
	movs r0, #0x66
	bl m4aSongNumStart
.L080A90C2:
	ldr r0, .L080A9120  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080A90D2
	b .L080A921A
.L080A90D2:
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	bl func_080A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x42
	strh r0, [r4]
	ldr r0, .L080A911C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A90FE
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A90FE:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldrh r0, [r4]
	subs r0, #1
	cmp r0, #0x1f
	bls .L080A9110
	b .L080A9246
.L080A9110:
	lsls r0, r0, #2
	ldr r1, .L080A9124  @ .L080A9128
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080A911C: .4byte gPlaySt
.L080A9120: .4byte gKeySt
.L080A9124: .4byte .L080A9128
.L080A9128: @ jump table
	.4byte .L080A91A8 @ case 0
	.4byte .L080A91B4 @ case 1
	.4byte .L080A9246 @ case 2
	.4byte .L080A91B4 @ case 3
	.4byte .L080A9246 @ case 4
	.4byte .L080A9246 @ case 5
	.4byte .L080A9246 @ case 6
	.4byte .L080A91B4 @ case 7
	.4byte .L080A9246 @ case 8
	.4byte .L080A9246 @ case 9
	.4byte .L080A9246 @ case 10
	.4byte .L080A9246 @ case 11
	.4byte .L080A9246 @ case 12
	.4byte .L080A9246 @ case 13
	.4byte .L080A9246 @ case 14
	.4byte .L080A91D4 @ case 15
	.4byte .L080A9246 @ case 16
	.4byte .L080A9246 @ case 17
	.4byte .L080A9246 @ case 18
	.4byte .L080A9246 @ case 19
	.4byte .L080A9246 @ case 20
	.4byte .L080A9246 @ case 21
	.4byte .L080A9246 @ case 22
	.4byte .L080A9246 @ case 23
	.4byte .L080A9246 @ case 24
	.4byte .L080A9246 @ case 25
	.4byte .L080A9246 @ case 26
	.4byte .L080A9246 @ case 27
	.4byte .L080A9246 @ case 28
	.4byte .L080A9246 @ case 29
	.4byte .L080A9246 @ case 30
	.4byte .L080A91FC @ case 31
.L080A91A8:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r1, [r0]
	subs r0, #0x13
	strb r1, [r0]
	b .L080A91CA
.L080A91B4:
	bl GetLastUsedGameSaveSlot
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl func_080AB98C
	adds r1, r5, #0
	adds r1, #0x2c
	strb r0, [r1]
.L080A91CA:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b .L080A9246
.L080A91D4:
	adds r4, r5, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	movs r1, #0
	movs r2, #1
	bl func_080AB98C
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	b .L080A9246
.L080A91FC:
	adds r2, r5, #0
	adds r2, #0x34
	adds r1, r5, #0
	adds r1, #0x33
	ldrb r0, [r2]
	ldrb r1, [r1]
	cmp r0, r1
	bcc .L080A9210
	movs r0, #0
	strb r0, [r2]
.L080A9210:
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
	b .L080A9246
.L080A921A:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A9246
	ldr r0, .L080A924C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9234
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A9234:
	adds r0, r5, #0
	movs r1, #0x12
	bl Proc_Goto
	adds r1, r5, #0
	adds r1, #0x42
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1]
.L080A9246:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A924C: .4byte gPlaySt

	THUMB_FUNC_END Loop6C_savemenu

	THUMB_FUNC_START func_080A9250
func_080A9250: @ 0x080A9250
	push {lr}
	adds r2, r0, #0
	adds r2, #0x2a
	ldrb r2, [r2]
	cmp r2, #1
	beq .L080A9272
	cmp r2, #1
	bgt .L080A9266
	cmp r2, #0
	beq .L080A926C
	b .L080A927C
.L080A9266:
	cmp r2, #2
	beq .L080A9278
	b .L080A927C
.L080A926C:
	movs r3, #0
	movs r1, #0
	b .L080A927C
.L080A9272:
	movs r3, #1
	movs r1, #0
	b .L080A927C
.L080A9278:
	movs r3, #1
	movs r1, #1
.L080A927C:
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	movs r2, #1
	bl SaveNewGame
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9250

	THUMB_FUNC_START func_080A9290
func_080A9290: @ 0x080A9290
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r1, [r5]
	cmp r1, #0
	bne .L080A933C
	ldr r0, .L080A92C8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A92B0
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A92B0:
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #8
	beq .L080A9312
	cmp r0, #8
	bgt .L080A92CC
	cmp r0, #2
	beq .L080A9324
	cmp r0, #4
	beq .L080A92E0
	b .L080A9334
	.align 2, 0
.L080A92C8: .4byte gPlaySt
.L080A92CC:
	cmp r0, #0x20
	beq .L080A9324
	cmp r0, #0x20
	bgt .L080A92DA
	cmp r0, #0x10
	beq .L080A9324
	b .L080A9334
.L080A92DA:
	cmp r0, #0x40
	beq .L080A9316
	b .L080A9334
.L080A92E0:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0xff
	bne .L080A92FC
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl func_080AB9FC
	b .L080A9488
.L080A92FC:
	ldrb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	bl CopyGameSave
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	b .L080A9488
.L080A9312:
	movs r0, #2
	b .L080A9318
.L080A9316:
	movs r0, #1
.L080A9318:
	strb r0, [r5]
	adds r0, r4, #0
	movs r1, #1
	bl func_080AB83C
	b .L080A9334
.L080A9324:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl func_080AB83C
.L080A9334:
	adds r0, r4, #0
	bl func_080A88E0
	b .L080A9488
.L080A933C:
	adds r5, r4, #0
	adds r5, #0x42
	ldrh r0, [r5]
	cmp r0, #0x10
	beq .L080A93D0
	cmp r0, #0x10
	bgt .L080A9354
	cmp r0, #2
	beq .L080A93A4
	cmp r0, #8
	beq .L080A93DC
	b .L080A947A
.L080A9354:
	cmp r0, #0x20
	beq .L080A935E
	cmp r0, #0x40
	beq .L080A9424
	b .L080A947A
.L080A935E:
	cmp r1, #1
	bne .L080A940C
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl LoadGame
	ldr r0, .L080A93A0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9386
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A9386:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x10
	beq .L080A93C2
	cmp r0, #0x20
	bne .L080A947A
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_Goto
	b .L080A947A
	.align 2, 0
.L080A93A0: .4byte gPlaySt
.L080A93A4:
	cmp r1, #1
	bne .L080A940C
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
	ldr r0, .L080A93CC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A93C2
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A93C2:
	adds r0, r4, #0
	bl func_080A882C
	b .L080A947A
	.align 2, 0
.L080A93CC: .4byte gPlaySt
.L080A93D0:
	cmp r1, #1
	bne .L080A940C
	adds r0, r4, #0
	bl func_080A9250
	b .L080A9432
.L080A93DC:
	cmp r1, #1
	bne .L080A940C
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl func_080A4DC8
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, .L080A9408  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A947A
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L080A947A
	.align 2, 0
.L080A9408: .4byte gPlaySt
.L080A940C:
	ldr r0, .L080A9420  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A947A
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080A947A
	.align 2, 0
.L080A9420: .4byte gPlaySt
.L080A9424:
	cmp r1, #1
	bne .L080A9454
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl SaveGame
.L080A9432:
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, .L080A9450  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A947A
	movs r0, #0x60
	bl m4aSongNumStart
	b .L080A947A
	.align 2, 0
.L080A9450: .4byte gPlaySt
.L080A9454:
	adds r0, r4, #0
	movs r1, #0x11
	bl Proc_Goto
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r5]
	ldr r0, .L080A9490  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A947A
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A947A:
	adds r0, r4, #0
	movs r1, #0
	bl func_080AB83C
	adds r0, r4, #0
	bl func_080A88E0
.L080A9488:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A9490: .4byte gPlaySt

	THUMB_FUNC_END func_080A9290

	THUMB_FUNC_START func_080A9494
func_080A9494: @ 0x080A9494
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r0, r5, #0
	bl func_080A89E4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A94AE
	b .L080A96C8
.L080A94AE:
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	bne .L080A9504
	ldr r0, .L080A94D0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080A94D4
	movs r1, #1
	negs r1, r1
	adds r0, r5, #0
	b .L080A94E0
	.align 2, 0
.L080A94D0: .4byte gKeySt
.L080A94D4:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A9564
	adds r0, r5, #0
	movs r1, #1
.L080A94E0:
	bl func_080AB9FC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A9564
	ldr r0, .L080A9500  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9564
	movs r0, #0x66
	bl m4aSongNumStart
	b .L080A9564
	.align 2, 0
.L080A9500: .4byte gPlaySt
.L080A9504:
	ldr r0, .L080A9534  @ gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq .L080A953C
	cmp r1, #1
	beq .L080A9564
	movs r0, #1
	strb r0, [r4]
	ldr r0, .L080A9538  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A952C
	movs r0, #0x67
	bl m4aSongNumStart
.L080A952C:
	adds r0, r5, #0
	bl func_080A88E0
	b .L080A9564
	.align 2, 0
.L080A9534: .4byte gKeySt
.L080A9538: .4byte gPlaySt
.L080A953C:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq .L080A9564
	cmp r1, #2
	beq .L080A9564
	movs r0, #2
	strb r0, [r4]
	ldr r0, .L080A9598  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A955E
	movs r0, #0x67
	bl m4aSongNumStart
.L080A955E:
	adds r0, r5, #0
	bl func_080A88E0
.L080A9564:
	ldr r0, .L080A959C  @ gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq .L080A9648
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #8
	beq .L080A9614
	cmp r0, #8
	bgt .L080A95A6
	cmp r0, #2
	beq .L080A95BA
	cmp r0, #2
	bgt .L080A95A0
	cmp r0, #1
	beq .L080A95D8
	b .L080A96C8
	.align 2, 0
.L080A9598: .4byte gPlaySt
.L080A959C: .4byte gKeySt
.L080A95A0:
	cmp r0, #4
	beq .L080A9614
	b .L080A96C8
.L080A95A6:
	cmp r0, #0x40
	beq .L080A9614
	cmp r0, #0x40
	bgt .L080A95B4
	cmp r0, #0x10
	beq .L080A95F8
	b .L080A96C8
.L080A95B4:
	cmp r0, #0x80
	beq .L080A95C6
	b .L080A96C8
.L080A95BA:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne .L080A9614
	b .L080A95D8
.L080A95C6:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq .L080A95D8
	adds r1, r5, #0
	adds r1, #0x44
	movs r0, #0xf0
	strh r0, [r1]
.L080A95D8:
	ldr r0, .L080A95F4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A95EA
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A95EA:
	adds r0, r5, #0
	bl func_080A882C
	b .L080A96C8
	.align 2, 0
.L080A95F4: .4byte gPlaySt
.L080A95F8:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq .L080A9620
	ldr r0, .L080A961C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9614
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A9614:
	adds r0, r5, #0
	bl func_080A9290
	b .L080A96C8
	.align 2, 0
.L080A961C: .4byte gPlaySt
.L080A9620:
	adds r0, r5, #0
	bl func_080A9250
	adds r0, r5, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, .L080A9644  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A96C8
	movs r0, #0x60
	bl m4aSongNumStart
	b .L080A96C8
	.align 2, 0
.L080A9644: .4byte gPlaySt
.L080A9648:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080A96C8
	adds r0, r5, #0
	adds r0, #0x29
	strb r1, [r0]
	ldr r0, .L080A9680  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9668
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A9668:
	ldrb r0, [r4]
	cmp r0, #0
	beq .L080A9684
	adds r0, r5, #0
	movs r1, #0
	bl func_080AB83C
	adds r0, r5, #0
	bl func_080A88E0
	b .L080A96C8
	.align 2, 0
.L080A9680: .4byte gPlaySt
.L080A9684:
	adds r2, r5, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq .L080A969C
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b .L080A96C8
.L080A969C:
	adds r4, r5, #0
	adds r4, #0x42
	ldrh r1, [r4]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq .L080A96C0
	adds r0, r5, #0
	movs r1, #0x11
	bl Proc_Goto
	ldrh r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r4]
	b .L080A96C8
.L080A96C0:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
.L080A96C8:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9494

	THUMB_FUNC_START func_080A96D0
func_080A96D0: @ 0x080A96D0
	push {lr}
	bl func_080A9290
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A96D0

	THUMB_FUNC_START func_080A96DC
func_080A96DC: @ 0x080A96DC
	adds r3, r0, #0
	adds r3, #0x2e
	movs r2, #0
	movs r1, #6
	strb r1, [r3]
	adds r0, #0x29
	strb r2, [r0]
	bx lr

	THUMB_FUNC_END func_080A96DC

	THUMB_FUNC_START func_080A96EC
func_080A96EC: @ 0x080A96EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r3, r7, #0
	adds r3, #0x29
	ldrb r0, [r3]
	cmp r0, #8
	bne .L080A9764
	adds r4, r7, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	adds r1, r7, #0
	bl func_080ABC14
	movs r0, #4
	adds r1, r7, #0
	bl func_080ABC14
	ldrb r1, [r4]
	adds r0, r7, #0
	adds r0, #0x37
	adds r2, r0, r1
	ldrb r0, [r2]
	cmp r0, #0xff
	beq .L080A9740
	lsls r0, r1, #0xb
	movs r1, #0xb4
	lsls r1, r1, #9
	adds r0, r0, r1
	ldr r1, .L080A973C  @ 0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	ldrb r1, [r2]
	bl LoadChapterTitleGfx
	b .L080A9756
	.align 2, 0
.L080A973C: .4byte 0x0001FFFF
.L080A9740:
	lsls r0, r1, #0xb
	movs r2, #0xb4
	lsls r2, r2, #9
	adds r0, r0, r2
	ldr r1, .L080A9760  @ 0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	movs r1, #1
	negs r1, r1
	bl LoadChapterTitleGfx
.L080A9756:
	ldrb r0, [r4]
	bl func_080ABD88
	b .L080A9828
	.align 2, 0
.L080A9760: .4byte 0x0001FFFF
.L080A9764:
	cmp r0, #0x20
	bne .L080A97DA
	adds r0, r7, #0
	bl func_080AB89C
	adds r0, r7, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0x10
	bne .L080A978E
	adds r0, r7, #0
	movs r1, #0x12
	bl Proc_Goto
	movs r0, #0xc0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	b .L080A9828
.L080A978E:
	cmp r0, #0x40
	bne .L080A979C
	adds r0, r7, #0
	movs r1, #0x11
	bl Proc_Goto
	b .L080A9828
.L080A979C:
	adds r0, r7, #0
	bl func_080ABA98
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080A9828
	adds r2, r7, #0
	adds r2, #0x2d
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq .L080A97C0
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b .L080A97D0
.L080A97C0:
	adds r4, r7, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	movs r1, #1
	movs r2, #1
	bl func_080AB98C
	strb r0, [r4]
.L080A97D0:
	adds r0, r7, #0
	movs r1, #5
	bl Proc_Goto
	b .L080A9828
.L080A97DA:
	cmp r0, #0x30
	bne .L080A9828
	adds r0, r7, #0
	adds r0, #0x2c
	movs r1, #0
	strb r1, [r0]
	adds r2, r7, #0
	adds r2, #0x2d
	movs r0, #0xff
	strb r0, [r2]
	strb r1, [r3]
	adds r0, r7, #0
	adds r0, #0x2b
	strb r1, [r0]
	adds r0, #5
	ldrb r0, [r0]
	bl func_080A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	adds r1, #0x42
	strh r0, [r1]
	ldr r0, .L080A9824  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A981A
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A981A:
	adds r0, r7, #0
	movs r1, #4
	bl Proc_Goto
	b .L080A99AC
	.align 2, 0
.L080A9824: .4byte gPlaySt
.L080A9828:
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r1, [r0]
	mov sl, r0
	cmp r1, #0x10
	bne .L080A98A0
	ldr r4, .L080A989C  @ gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	b .L080A9918
	.align 2, 0
.L080A989C: .4byte gSinLut
.L080A98A0:
	cmp r1, #7
	bhi .L080A9928
	ldr r4, .L080A9924  @ gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r1, r6, r1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	adds r1, r6, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r6, r6, r1
	adds r1, r6, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	mov r1, r8
.L080A9918:
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	b .L080A99A4
	.align 2, 0
.L080A9924: .4byte gSinLut
.L080A9928:
	cmp r1, #0xf
	bhi .L080A99A4
	ldr r4, .L080A99BC  @ gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r1, #0xe0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrb r1, [r2]
	lsls r1, r1, #5
	subs r1, #0xe0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
.L080A99A4:
	mov r1, sl
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L080A99AC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A99BC: .4byte gSinLut

	THUMB_FUNC_END func_080A96EC

	THUMB_FUNC_START func_080A99C0
func_080A99C0: @ 0x080A99C0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #3
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r2, #0x24
	negs r2, r2
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne .L080A9A02
	adds r0, r5, #0
	bl Proc_Break
.L080A9A02:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A99C0

	THUMB_FUNC_START func_080A9A08
func_080A9A08: @ 0x080A9A08
	push {lr}
	adds r0, #0x35
	ldrb r0, [r0]
	bl func_080ABF74
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9A08

	THUMB_FUNC_START func_080A9A18
func_080A9A18: @ 0x080A9A18
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #4
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r1, r5, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne .L080A9A5A
	ldr r0, .L080A9A60  @ gUnknown_08A2812C
	ldr r1, .L080A9A64  @ 0x06014000
	bl Decompress
	adds r0, r5, #0
	bl Proc_Break
.L080A9A5A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080A9A60: .4byte gUnknown_08A2812C
.L080A9A64: .4byte 0x06014000

	THUMB_FUNC_END func_080A9A18

	THUMB_FUNC_START func_080A9A68
func_080A9A68: @ 0x080A9A68
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r1, #0xdc
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne .L080A9AA8
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
.L080A9AA8:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9A68

	THUMB_FUNC_START func_080A9AB0
func_080A9AB0: @ 0x080A9AB0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #8
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r1, r5, #0
	adds r1, #0x46
	strh r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne .L080A9AEC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
.L080A9AEC:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9AB0

	THUMB_FUNC_START func_080A9AF4
func_080A9AF4: @ 0x080A9AF4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xc
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	movs r2, #0xdc
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	adds r1, #0x24
	subs r0, #0x17
	strb r1, [r0]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne .L080A9B3E
	adds r0, r5, #0
	movs r1, #0xb
	bl Proc_Goto
.L080A9B3E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9AF4

	THUMB_FUNC_START func_080A9B44
func_080A9B44: @ 0x080A9B44
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xd
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0xe
	subs r0, r0, r1
	movs r1, #0xdc
	muls r1, r0, r1
	muls r0, r1, r0
	movs r1, #0xc4
	bl __divsi3
	adds r0, #0xdc
	adds r1, r5, #0
	adds r1, #0x46
	strh r0, [r1]
	adds r0, #0x24
	subs r1, #0x17
	strb r0, [r1]
	ldrb r0, [r4]
	cmp r0, #0xe
	bne .L080A9B88
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
.L080A9B88:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080A9B44

	THUMB_FUNC_START func_080A9B90
func_080A9B90: @ 0x080A9B90
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r7, [r2]
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0xa
	strb r0, [r1]
	ldr r0, .L080A9BD4  @ gKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq .L080A9BD8
	ldrb r0, [r2]
	cmp r0, #0
	bne .L080A9BCE
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A9C02
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
.L080A9BCE:
	subs r0, #1
	strb r0, [r2]
	b .L080A9C02
	.align 2, 0
.L080A9BD4: .4byte gKeySt
.L080A9BD8:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A9C02
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L080A9BF6
	adds r0, r1, #1
	strb r0, [r2]
	b .L080A9C02
.L080A9BF6:
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A9C02
	strb r5, [r2]
.L080A9C02:
	adds r0, r4, #0
	adds r0, #0x34
	adds r5, r0, #0
	ldrb r0, [r5]
	cmp r7, r0
	beq .L080A9C20
	ldr r0, .L080A9C70  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9C20
	movs r0, #0x66
	bl m4aSongNumStart
.L080A9C20:
	ldr r0, .L080A9C74  @ gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq .L080A9CEC
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	ldrb r1, [r5]
	bl func_080A8844
	adds r5, r4, #0
	adds r5, #0x35
	movs r6, #0
	strb r0, [r5]
	ldr r0, .L080A9C70  @ gPlaySt
	adds r7, r0, #0
	adds r7, #0x41
	ldrb r0, [r7]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9C56
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A9C56:
	adds r0, r4, #0
	adds r0, #0x29
	strb r6, [r0]
	ldrb r0, [r5]
	cmp r0, #0x10
	beq .L080A9CA6
	cmp r0, #0x10
	bgt .L080A9C78
	cmp r0, #2
	beq .L080A9C82
	cmp r0, #4
	beq .L080A9C8C
	b .L080A9CDC
	.align 2, 0
.L080A9C70: .4byte gPlaySt
.L080A9C74: .4byte gKeySt
.L080A9C78:
	cmp r0, #0x20
	beq .L080A9CA6
	cmp r0, #0x40
	bne .L080A9CDC
	b .L080A9CA6
.L080A9C82:
	str r6, [sp]
	movs r0, #0
	movs r1, #0xc0
	movs r2, #0
	b .L080A9C96
.L080A9C8C:
	movs r2, #0x80
	lsls r2, r2, #1
	str r6, [sp]
	movs r0, #9
	movs r1, #0xc0
.L080A9C96:
	movs r3, #0x18
	bl func_080029E8
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_Goto
	b .L080A9D14
.L080A9CA6:
	bl GetLastUsedGameSaveSlot
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl func_080AB98C
	adds r1, r4, #0
	adds r1, #0x2c
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0
	bl func_080A9D20
	ldrb r0, [r7]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9CD2
	movs r0, #0x6a
	bl m4aSongNumStart
.L080A9CD2:
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_Goto
	b .L080A9D14
.L080A9CDC:
	adds r0, r4, #0
	bl func_080A882C
	adds r0, r4, #0
	movs r1, #0x12
	bl Proc_Goto
	b .L080A9D14
.L080A9CEC:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080A9D14
	adds r0, r4, #0
	adds r0, #0x29
	strb r1, [r0]
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	ldr r0, .L080A9D1C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9D14
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A9D14:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080A9D1C: .4byte gPlaySt

	THUMB_FUNC_END func_080A9B90

	THUMB_FUNC_START func_080A9D20
func_080A9D20: @ 0x080A9D20
	push {r4, lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x2c
	ldrb r4, [r2]
	cmp r4, #2
	bls .L080A9D32
	movs r0, #0
	strb r0, [r2]
.L080A9D32:
	cmp r1, #0
	bne .L080A9D3A
.L080A9D36:
	movs r0, #1
	b .L080A9D7E
.L080A9D3A:
	cmp r1, #0
	ble .L080A9D4C
	ldrb r0, [r2]
	cmp r0, #1
	bhi .L080A9D48
	adds r0, #1
	b .L080A9D58
.L080A9D48:
	movs r0, #0
	b .L080A9D58
.L080A9D4C:
	ldrb r0, [r2]
	cmp r0, #0
	bne .L080A9D56
	movs r0, #2
	b .L080A9D58
.L080A9D56:
	subs r0, #1
.L080A9D58:
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r4, r0
	beq .L080A9D7C
	ldr r0, .L080A9D78  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9D36
	movs r0, #0x66
	bl m4aSongNumStart
	b .L080A9D36
	.align 2, 0
.L080A9D78: .4byte gPlaySt
.L080A9D7C:
	movs r0, #0
.L080A9D7E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080A9D20

	THUMB_FUNC_START func_080A9D84
func_080A9D84: @ 0x080A9D84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A9DB4  @ 0x06014000
	movs r1, #9
	bl LoadHelpBoxGfx
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl StartHelpBox
	ldr r0, .L080A9DB8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9DAC
	movs r0, #0x70
	bl m4aSongNumStart
.L080A9DAC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A9DB4: .4byte 0x06014000
.L080A9DB8: .4byte gPlaySt

	THUMB_FUNC_END func_080A9D84

	THUMB_FUNC_START func_080A9DBC
func_080A9DBC: @ 0x080A9DBC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080A9DF0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	ldr r0, .L080A9DF4  @ 0x00000103
	ands r0, r1
	cmp r0, #0
	beq .L080A9DEA
	ldr r0, .L080A9DF8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9DE0
	movs r0, #0x71
	bl m4aSongNumStart
.L080A9DE0:
	bl MoveableHelpBox_OnEnd
	adds r0, r4, #0
	bl Proc_Break
.L080A9DEA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080A9DF0: .4byte gKeySt
.L080A9DF4: .4byte 0x00000103
.L080A9DF8: .4byte gPlaySt

	THUMB_FUNC_END func_080A9DBC

	THUMB_FUNC_START func_080A9DFC
func_080A9DFC: @ 0x080A9DFC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, .L080A9E18  @ gUnknown_08A20068
	bl SpawnProcLocking
	str r4, [r0, #0x58]
	str r5, [r0, #0x2c]
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080A9E18: .4byte gUnknown_08A20068

	THUMB_FUNC_END func_080A9DFC

	THUMB_FUNC_START func_080A9E1C
func_080A9E1C: @ 0x080A9E1C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r3, r4, #0
	adds r3, #0x36
	ldrb r1, [r3]
	cmp r1, #0
	bne .L080A9E62
	ldr r0, .L080A9E4C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080A9E50
	movs r1, #1
	negs r1, r1
	adds r0, r4, #0
	bl func_080A9D20
	b .L080A9EB6
	.align 2, 0
.L080A9E4C: .4byte gKeySt
.L080A9E50:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080A9EB6
	adds r0, r4, #0
	movs r1, #1
	bl func_080A9D20
	b .L080A9EB6
.L080A9E62:
	ldr r0, .L080A9E8C  @ gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq .L080A9E94
	cmp r1, #1
	beq .L080A9EB6
	movs r0, #1
	strb r0, [r3]
	ldr r0, .L080A9E90  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9EB6
	movs r0, #0x67
	bl m4aSongNumStart
	b .L080A9EB6
	.align 2, 0
.L080A9E8C: .4byte gKeySt
.L080A9E90: .4byte gPlaySt
.L080A9E94:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq .L080A9EB6
	cmp r1, #2
	beq .L080A9EB6
	movs r0, #2
	strb r0, [r3]
	ldr r0, .L080A9EDC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9EB6
	movs r0, #0x67
	bl m4aSongNumStart
.L080A9EB6:
	ldr r0, .L080A9EE0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne .L080A9EC8
	b .L080A9FBC
.L080A9EC8:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x20
	beq .L080A9F24
	cmp r0, #0x20
	bgt .L080A9EE4
	cmp r0, #0x10
	beq .L080A9F5C
	b .L080AA00A
	.align 2, 0
.L080A9EDC: .4byte gPlaySt
.L080A9EE0: .4byte gKeySt
.L080A9EE4:
	cmp r0, #0x40
	beq .L080A9EEA
	b .L080AA00A
.L080A9EEA:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r0]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080A9F18
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne .L080A9FA0
	adds r0, r2, #0
	bl LoadGame
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_Goto
	b .L080A9F86
.L080A9F18:
	ldr r2, .L080A9F20  @ 0x00000892
	movs r0, #0x40
	movs r1, #0x30
	b .L080A9FAE
	.align 2, 0
.L080A9F20: .4byte 0x00000892
.L080A9F24:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080A9F52
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne .L080A9FA0
	adds r0, r2, #0
	bl LoadGame
	adds r0, r4, #0
	movs r1, #0xe
	bl Proc_Goto
	b .L080A9F86
.L080A9F52:
	ldr r2, .L080A9F58  @ 0x00000891
	b .L080A9FAA
	.align 2, 0
.L080A9F58: .4byte 0x00000891
.L080A9F5C:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, #0xe
	adds r0, r0, r2
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080A9FA8
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne .L080A9FA0
	adds r0, r2, #0
	bl LoadGame
	adds r0, r4, #0
	bl func_080A882C
.L080A9F86:
	ldr r0, .L080A9F9C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AA00A
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L080AA00A
	.align 2, 0
.L080A9F9C: .4byte gPlaySt
.L080A9FA0:
	adds r0, r4, #0
	bl func_080A9290
	b .L080AA00A
.L080A9FA8:
	ldr r2, .L080A9FB8  @ 0x00000895
.L080A9FAA:
	movs r0, #0x2e
	movs r1, #0x38
.L080A9FAE:
	adds r3, r4, #0
	bl func_080A9DFC
	b .L080AA00A
	.align 2, 0
.L080A9FB8: .4byte 0x00000895
.L080A9FBC:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AA00A
	ldr r0, .L080A9FF0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080A9FD6
	movs r0, #0x6b
	bl m4aSongNumStart
.L080A9FD6:
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r5, [r0]
	cmp r5, #0
	beq .L080A9FF4
	adds r0, r4, #0
	movs r1, #0
	bl func_080AB83C
	adds r0, r4, #0
	bl func_080A88E0
	b .L080AA00A
	.align 2, 0
.L080A9FF0: .4byte gPlaySt
.L080A9FF4:
	ldr r0, .L080AA010  @ gUnknown_08A2812C
	ldr r1, .L080AA014  @ 0x06014000
	bl Decompress
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
.L080AA00A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA010: .4byte gUnknown_08A2812C
.L080AA014: .4byte 0x06014000

	THUMB_FUNC_END func_080A9E1C

	THUMB_FUNC_START func_080AA018
func_080AA018: @ 0x080AA018
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	movs r2, #2
	bl func_080ABBB0
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA018

	THUMB_FUNC_START func_080AA030
func_080AA030: @ 0x080AA030
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	cmp r0, #0
	beq .L080AA03E
	bl EndSpriteAnimProc
.L080AA03E:
	ldr r0, [r4, #0x58]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	adds r5, r4, #0
	adds r5, #0x42
	ldrh r2, [r5]
	cmp r2, #0x20
	bne .L080AA084
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080AA064
	cmp r0, #0x10
	beq .L080AA06C
	b .L080AA0FA
.L080AA064:
	movs r0, #6
	bl SetNextGameActionId
	b .L080AA0FA
.L080AA06C:
	movs r0, #0xc
	bl SetNextGameActionId
	ldr r2, .L080AA080  @ gPlaySt
	ldrb r1, [r2, #0x14]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2, #0x14]
	b .L080AA0FA
	.align 2, 0
.L080AA080: .4byte gPlaySt
.L080AA084:
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	bne .L080AA0FA
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq .L080AA0BC
	movs r0, #0xc0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	ldrh r1, [r5]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080AA0B4
	movs r0, #0xa
	bl SetNextGameActionId
	b .L080AA0FA
.L080AA0B4:
	movs r0, #5
	bl SetNextGameActionId
	b .L080AA0FA
.L080AA0BC:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq .L080AA0D2
	movs r0, #3
	bl LoadSuspendedGame
	movs r0, #4
	bl SetNextGameActionId
	b .L080AA0FA
.L080AA0D2:
	movs r0, #0x82
	ands r0, r2
	cmp r0, #0
	beq .L080AA0EC
	adds r4, #0x2c
	ldrb r0, [r4]
	bl LoadGame
	ldrb r0, [r4]
	adds r0, #1
	bl SetNextGameActionId
	b .L080AA0FA
.L080AA0EC:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq .L080AA0FA
	movs r0, #0
	bl SetNextGameActionId
.L080AA0FA:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA030

	THUMB_FUNC_START func_080AA100
func_080AA100: @ 0x080AA100
	push {lr}
	sub sp, #4
	str r0, [sp]
	movs r0, #0
	movs r1, #0xc0
	movs r2, #0
	movs r3, #0x18
	bl func_080029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA100

	THUMB_FUNC_START func_080AA118
func_080AA118: @ 0x080AA118
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #7
	bl SetNextGameActionId
	ldr r4, .L080AA140  @ gPlaySt
	ldrb r1, [r4, #0x14]
	movs r0, #0x80
	orrs r0, r1
	strb r0, [r4, #0x14]
	bl func_080A6C8C
	movs r0, #0x7f
	strb r0, [r4, #0xe]
	ldr r0, [r5, #0x14]
	bl Proc_End
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA140: .4byte gPlaySt

	THUMB_FUNC_END func_080AA118

	THUMB_FUNC_START StartTrialMap_Maybe
StartTrialMap_Maybe: @ 0x080AA144
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AA154  @ gUnknown_08A20098
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080AA154: .4byte gUnknown_08A20098

	THUMB_FUNC_END StartTrialMap_Maybe

	THUMB_FUNC_START func_080AA158
func_080AA158: @ 0x080AA158
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x42
	movs r0, #0x20
	strh r0, [r1]
	ldr r0, [r4, #0x58]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, [r4, #0x60]
	cmp r0, #0
	beq .L080AA17A
	bl EndSpriteAnimProc
.L080AA17A:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #4
	beq .L080AA1AE
	cmp r0, #4
	bgt .L080AA18E
	cmp r0, #2
	beq .L080AA1A6
	b .L080AA1B4
.L080AA18E:
	cmp r0, #0x20
	beq .L080AA19E
	cmp r0, #0x40
	bne .L080AA1B4
	adds r0, r4, #0
	bl StartTrialMap_Maybe
	b .L080AA1B4
.L080AA19E:
	adds r0, r4, #0
	bl StartClaimBonusItemMenu
	b .L080AA1B4
.L080AA1A6:
	adds r0, r4, #0
	bl func_080AFF1C
	b .L080AA1B4
.L080AA1AE:
	adds r0, r4, #0
	bl func_080A1984
.L080AA1B4:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA158

	THUMB_FUNC_START func_080AA1BC
func_080AA1BC: @ 0x080AA1BC
	push {lr}
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	cmp r1, #4
	beq .L080AA1E2
	cmp r1, #4
	bgt .L080AA1D2
	cmp r1, #2
	beq .L080AA1E2
	b .L080AA1E8
.L080AA1D2:
	cmp r1, #0x10
	beq .L080AA1DA
	cmp r1, #0x20
	bne .L080AA1E8
.L080AA1DA:
	movs r1, #0xb
	bl Proc_Goto
	b .L080AA1E8
.L080AA1E2:
	movs r1, #0xa
	bl Proc_Goto
.L080AA1E8:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA1BC

	THUMB_FUNC_START func_080AA1EC
func_080AA1EC: @ 0x080AA1EC
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	ldr r2, .L080AA244  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r3, r2, #0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x36
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
.L080AA244: .4byte gDispIo

	THUMB_FUNC_END func_080AA1EC

	THUMB_FUNC_START func_080AA248
func_080AA248: @ 0x080AA248
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r4, r0, #1
	strb r4, [r1]
	ldrb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge .L080AA26A
	adds r0, #0xff
.L080AA26A:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, .L080AA2A4  @ gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	movs r0, #0x50
	subs r0, r0, r2
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r2, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r2, [r0]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne .L080AA29E
	adds r0, r5, #0
	bl Proc_Break
.L080AA29E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA2A4: .4byte gDispIo

	THUMB_FUNC_END func_080AA248

	THUMB_FUNC_START func_080AA2A8
func_080AA2A8: @ 0x080AA2A8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r4, r0, #1
	strb r4, [r1]
	ldrb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge .L080AA2CA
	adds r0, #0xff
.L080AA2CA:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, .L080AA308  @ gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x60
	negs r1, r1
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bne .L080AA302
	adds r0, r5, #0
	bl Proc_Break
.L080AA302:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA308: .4byte gDispIo

	THUMB_FUNC_END func_080AA2A8

	THUMB_FUNC_START func_080AA30C
func_080AA30C: @ 0x080AA30C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, .L080AA408  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080AA40C  @ gBg1Tm
	movs r1, #0
	bl TmFill
	bl ResetTextFont
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	ldr r0, .L080AA410  @ gUnknown_08A25DCC
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r5, #0
	adds r2, r5, #0
	bl ApplyPaletteExt
	ldr r4, .L080AA414  @ gUnknown_08A21658
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080AA418  @ gBg3Tm
	ldr r1, .L080AA41C  @ gUnknown_08A25ECC
	movs r2, #0x80
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, .L080AA420  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080AA424  @ gUnknown_08A26380
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080AA428  @ 0x06004C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080AA42C  @ gUnknown_08A268F8
	ldr r4, .L080AA430  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080AA434  @ gBg2Tm
	ldr r2, .L080AA438  @ 0x00007260
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080AA43C  @ gUnknown_08A26A74
	ldr r1, .L080AA440  @ 0x06010800
	bl Decompress
	ldr r0, .L080AA444  @ gUnknown_08A27F68
	movs r1, #0x90
	lsls r1, r1, #2
	adds r2, r5, #0
	bl ApplyPaletteExt
	ldr r0, .L080AA448  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080AA44C  @ gPal+0x240
	adds r1, r0, #0
	subs r1, #0x20
	movs r2, #1
	bl func_080AA790
	ldr r0, .L080AA450  @ gUnknown_08A2812C
	ldr r1, .L080AA454  @ 0x06014000
	bl Decompress
	bl func_080AB794
	adds r0, r6, #0
	bl func_080A8A9C
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	bl func_080ABD88
	movs r0, #0xc
	bl ReleaseEachMarkedProc
	movs r0, #0xd
	bl ReleaseEachMarkedProc
	movs r0, #3
	bl EnableBgSync
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #3
	beq .L080AA3FE
	adds r1, r6, #0
	adds r1, #0x2e
	movs r0, #5
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xdc
	strb r0, [r1]
.L080AA3FE:
	bl EnablePalSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA408: .4byte gBg0Tm
.L080AA40C: .4byte gBg1Tm
.L080AA410: .4byte gUnknown_08A25DCC
.L080AA414: .4byte gUnknown_08A21658
.L080AA418: .4byte gBg3Tm
.L080AA41C: .4byte gUnknown_08A25ECC
.L080AA420: .4byte gUnknown_08A268D8
.L080AA424: .4byte gUnknown_08A26380
.L080AA428: .4byte 0x06004C00
.L080AA42C: .4byte gUnknown_08A268F8
.L080AA430: .4byte gBuf
.L080AA434: .4byte gBg2Tm
.L080AA438: .4byte 0x00007260
.L080AA43C: .4byte gUnknown_08A26A74
.L080AA440: .4byte 0x06010800
.L080AA444: .4byte gUnknown_08A27F68
.L080AA448: .4byte gUnknown_08A295B4
.L080AA44C: .4byte gPal+0x240
.L080AA450: .4byte gUnknown_08A2812C
.L080AA454: .4byte 0x06014000

	THUMB_FUNC_END func_080AA30C

	THUMB_FUNC_START func_080AA458
func_080AA458: @ 0x080AA458
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #3
	bne .L080AA46E
	adds r0, r1, #0
	movs r1, #2
	bl Proc_Goto
	b .L080AA476
.L080AA46E:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_Goto
.L080AA476:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA458

	THUMB_FUNC_START func_080AA47C
func_080AA47C: @ 0x080AA47C
	push {lr}
	adds r3, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne .L080AA496
	movs r0, #0xc0
	movs r1, #8
	movs r2, #8
	bl ShowRIsInfo
.L080AA496:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA47C

	THUMB_FUNC_START func_080AA49C
func_080AA49C: @ 0x080AA49C
	push {lr}
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x20
	bne .L080AA4AE
	adds r0, r1, #0
	bl func_080AA6EC
.L080AA4AE:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA49C

	THUMB_FUNC_START func_080AA4B4
func_080AA4B4: @ 0x080AA4B4
	push {lr}
	bl HideRIsInfo
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA4B4

	THUMB_FUNC_START Make6C_savemenu
Make6C_savemenu: @ 0x080AA4C0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AA4F0  @ gUnknown_08A200B8
	bl SpawnProcLocking
	adds r3, r0, #0
	adds r3, #0x42
	movs r2, #0
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r3]
	adds r0, #0x35
	strb r2, [r0]
	ldr r2, .L080AA4F4  @ gPlaySt
	adds r2, #0x40
	ldrb r1, [r2]
	movs r0, #0x61
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
.L080AA4F0: .4byte gUnknown_08A200B8
.L080AA4F4: .4byte gPlaySt

	THUMB_FUNC_END Make6C_savemenu

	THUMB_FUNC_START func_080AA4F8
func_080AA4F8: @ 0x080AA4F8
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080AA514  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne .L080AA510
	adds r0, r2, #0
	movs r1, #0x14
	bl Proc_Goto
.L080AA510:
	pop {r0}
	bx r0
	.align 2, 0
.L080AA514: .4byte gBmSt

	THUMB_FUNC_END func_080AA4F8

	THUMB_FUNC_START Start_savemenu2
Start_savemenu2: @ 0x080AA518
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AA528  @ gUnknown_08A203A8
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080AA528: .4byte gUnknown_08A203A8

	THUMB_FUNC_END Start_savemenu2

	THUMB_FUNC_START savemenu_SetDifficultyChoice
savemenu_SetDifficultyChoice: @ 0x080AA52C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080AA54C  @ gUnknown_08A200B8
	bl FindProc
	cmp r0, #0
	beq .L080AA546
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	adds r0, #0x3d
	strb r5, [r0]
.L080AA546:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA54C: .4byte gUnknown_08A200B8

	THUMB_FUNC_END savemenu_SetDifficultyChoice

	THUMB_FUNC_START func_080AA550
func_080AA550: @ 0x080AA550
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r4, .L080AA5F0  @ gUnknown_08A204B8
	ldr r1, [r4]
	ldr r2, .L080AA5F4  @ 0x010000A2
	mov r0, sp
	bl CpuSet
	ldr r0, [r4]
	bl LoadBonusContentData
	cmp r0, #0
	beq .L080AA5E6
	movs r0, #0
	str r0, [r5, #0x5c]
	str r0, [r5, #0x58]
	mov r8, r4
	movs r6, #0
	movs r0, #0xfc
	mov r9, r0
	movs r7, #0xf
.L080AA588:
	mov r1, r8
	ldr r0, [r1]
	adds r2, r0, r6
	ldrb r0, [r2]
	movs r4, #3
	ands r4, r0
	cmp r4, #1
	bne .L080AA5D2
	ldrb r0, [r2, #1]
	cmp r0, #3
	bne .L080AA5B2
	str r4, [r5, #0x58]
	ldrb r1, [r2]
	mov r0, r9
	ands r0, r1
	adds r0, #2
	strb r0, [r2]
	movs r0, #0
	movs r1, #0x75
	bl func_080A3F08
.L080AA5B2:
	mov r1, r8
	ldr r0, [r1]
	adds r2, r0, r6
	ldrb r0, [r2, #1]
	cmp r0, #4
	bne .L080AA5D2
	str r4, [r5, #0x5c]
	ldrb r1, [r2]
	mov r0, r9
	ands r0, r1
	adds r0, #2
	strb r0, [r2]
	movs r0, #0
	movs r1, #0x76
	bl func_080A3F08
.L080AA5D2:
	adds r6, #0x14
	subs r7, #1
	cmp r7, #0
	bge .L080AA588
	ldr r0, [r5, #0x58]
	cmp r0, #0
	bne .L080AA5F8
	ldr r0, [r5, #0x5c]
	cmp r0, #0
	bne .L080AA5F8
.L080AA5E6:
	adds r0, r5, #0
	movs r1, #0xa
	bl Proc_Goto
	b .L080AA600
	.align 2, 0
.L080AA5F0: .4byte gUnknown_08A204B8
.L080AA5F4: .4byte 0x010000A2
.L080AA5F8:
	ldr r0, .L080AA610  @ 0x06014000
	movs r1, #9
	bl LoadHelpBoxGfx
.L080AA600:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA610: .4byte 0x06014000

	THUMB_FUNC_END func_080AA550

	THUMB_FUNC_START func_080AA614
func_080AA614: @ 0x080AA614
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x58]
	cmp r0, #0
	beq .L080AA64C
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r2, .L080AA644  @ 0x00000893
	movs r0, #0x40
	movs r1, #0x30
	bl StartHelpBox
	ldr r0, .L080AA648  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AA654
	movs r0, #0x5b
	bl m4aSongNumStart
	b .L080AA654
	.align 2, 0
.L080AA644: .4byte 0x00000893
.L080AA648: .4byte gPlaySt
.L080AA64C:
	adds r0, r1, #0
	movs r1, #0
	bl Proc_Goto
.L080AA654:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA614

	THUMB_FUNC_START func_080AA658
func_080AA658: @ 0x080AA658
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x5c]
	cmp r0, #0
	beq .L080AA690
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r2, .L080AA688  @ 0x00000894
	movs r0, #0x40
	movs r1, #0x30
	bl StartHelpBox
	ldr r0, .L080AA68C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AA698
	movs r0, #0x5b
	bl m4aSongNumStart
	b .L080AA698
	.align 2, 0
.L080AA688: .4byte 0x00000894
.L080AA68C: .4byte gPlaySt
.L080AA690:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
.L080AA698:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA658

	THUMB_FUNC_START func_080AA69C
func_080AA69C: @ 0x080AA69C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0x1e
	ble .L080AA6CC
	ldr r0, .L080AA6C8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq .L080AA6D0
	bl MoveableHelpBox_OnEnd
	adds r0, r4, #0
	bl Proc_Break
	b .L080AA6D0
	.align 2, 0
.L080AA6C8: .4byte gKeySt
.L080AA6CC:
	adds r0, r2, #1
	strh r0, [r1]
.L080AA6D0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA69C

	THUMB_FUNC_START func_080AA6D8
func_080AA6D8: @ 0x080AA6D8
	push {lr}
	ldr r0, .L080AA6E8  @ gUnknown_08A204B8
	ldr r0, [r0]
	bl SaveBonusContentData
	pop {r0}
	bx r0
	.align 2, 0
.L080AA6E8: .4byte gUnknown_08A204B8

	THUMB_FUNC_END func_080AA6D8

	THUMB_FUNC_START func_080AA6EC
func_080AA6EC: @ 0x080AA6EC
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AA6FC  @ gUnknown_08A204BC
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080AA6FC: .4byte gUnknown_08A204BC

	THUMB_FUNC_END func_080AA6EC

	THUMB_FUNC_START func_080AA700
func_080AA700: @ 0x080AA700
	ldr r1, .L080AA714  @ gSaveMenuRTextData
	movs r0, #0
	strb r0, [r1]
	movs r0, #0xff
	strb r0, [r1, #1]
	movs r0, #1
	negs r0, r0
	strb r0, [r1, #2]
	bx lr
	.align 2, 0
.L080AA714: .4byte gSaveMenuRTextData

	THUMB_FUNC_END func_080AA700

	THUMB_FUNC_START func_080AA718
func_080AA718: @ 0x080AA718
	push {lr}
	ldr r1, .L080AA734  @ gSaveMenuRTextData
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080AA73C
	ldr r2, .L080AA738  @ gCharacterData
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r0, [r0]
	bl GetMsg
	b .L080AA73E
	.align 2, 0
.L080AA734: .4byte gSaveMenuRTextData
.L080AA738: .4byte gCharacterData
.L080AA73C:
	movs r0, #0
.L080AA73E:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AA718

	THUMB_FUNC_START func_080AA744
func_080AA744: @ 0x080AA744
	push {lr}
	ldr r1, .L080AA75C  @ gSaveMenuRTextData
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080AA756
	movs r0, #1
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L080AA760
.L080AA756:
	movs r0, #1
	negs r0, r0
	b .L080AA764
	.align 2, 0
.L080AA75C: .4byte gSaveMenuRTextData
.L080AA760:
	movs r0, #1
	ldrsb r0, [r1, r0]
.L080AA764:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AA744

	THUMB_FUNC_START func_080AA768
func_080AA768: @ 0x080AA768
	push {lr}
	ldr r1, .L080AA780  @ gSaveMenuRTextData
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080AA77A
	movs r0, #2
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L080AA784
.L080AA77A:
	movs r0, #0
	b .L080AA78C
	.align 2, 0
.L080AA780: .4byte gSaveMenuRTextData
.L080AA784:
	movs r0, #2
	ldrsb r0, [r1, r0]
	bl func_080BBA28
.L080AA78C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AA768

	THUMB_FUNC_START func_080AA790
func_080AA790: @ 0x080AA790
	push {lr}
	lsls r2, r2, #4
	cmp r2, #0
	ble .L080AA7A8
	adds r3, r0, #0
.L080AA79A:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bne .L080AA79A
.L080AA7A8:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AA790

	THUMB_FUNC_START func_080AA7AC
func_080AA7AC: @ 0x080AA7AC
	push {r4, r5, lr}
	movs r2, #0x3f
	ands r2, r0
	asrs r2, r2, #2
	ldr r4, .L080AA7DC  @ gPal
	lsls r2, r2, #1
	ldr r0, .L080AA7E0  @ gUnknown_08A28088
	adds r2, r2, r0
	ldrh r3, [r2]
	ldr r5, .L080AA7E4  @ 0x00000222
	adds r0, r4, r5
	strh r3, [r0]
	lsls r1, r1, #6
	ldr r0, .L080AA7E8  @ 0x00000342
	adds r1, r1, r0
	adds r1, r1, r4
	ldrh r0, [r2]
	strh r0, [r1]
	bl EnablePalSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA7DC: .4byte gPal
.L080AA7E0: .4byte gUnknown_08A28088
.L080AA7E4: .4byte 0x00000222
.L080AA7E8: .4byte 0x00000342

	THUMB_FUNC_END func_080AA7AC

	THUMB_FUNC_START func_080AA7EC
func_080AA7EC: @ 0x080AA7EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #5
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0x20
	subs r1, r1, r0
	lsls r1, r1, #0x18
	movs r0, #0x92
	lsls r0, r0, #0x18
	adds r1, r1, r0
	lsrs r1, r1, #0x18
	mov r9, r1
	movs r1, #0x8f
	mov r8, r1
	adds r0, r4, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #1
	bne .L080AA83A
	ldr r0, [r4, #0x54]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl FormatTime
	b .L080AA858
.L080AA83A:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	lsls r1, r1, #2
	adds r0, #0x1c
	adds r0, r0, r1
	ldr r0, [r0]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl FormatTime
.L080AA858:
	mov sl, r4
	mov r1, r8
	adds r1, #6
	mov r2, r9
	subs r2, #0xe
	ldr r3, .L080AA9CC  @ gUnknown_08A20590
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
	add r0, sp, #4
	ldrh r0, [r0]
	mov r7, r9
	subs r7, #8
	cmp r0, #0x63
	bls .L080AA8BE
	mov r5, r8
	adds r5, #0xa
	ldr r4, .L080AA9D0  @ gUnknown_08A2067C
	add r0, sp, #4
	ldrh r0, [r0]
	movs r6, #0x64
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0xe0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
	add r5, sp, #4
	adds r0, r5, #0
	ldrh r4, [r0]
	adds r0, r4, #0
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	muls r0, r6, r0
	subs r4, r4, r0
	strh r4, [r5]
.L080AA8BE:
	add r0, sp, #4
	ldrh r0, [r0]
	cmp r0, #9
	bls .L080AA8EE
	mov r5, r8
	adds r5, #0x12
	ldr r4, .L080AA9D0  @ gUnknown_08A2067C
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0xe0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
.L080AA8EE:
	mov r6, r8
	adds r6, #0x1a
	ldr r5, .L080AA9D0  @ gUnknown_08A2067C
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	movs r4, #0xe0
	lsls r4, r4, #7
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutSpriteExt
	mov r1, r8
	adds r1, #0x22
	mov r2, r9
	subs r2, #7
	ldr r3, [r5, #0x28]
	str r4, [sp]
	movs r0, #0xd
	bl PutSpriteExt
	adds r6, #0x10
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutSpriteExt
	adds r6, #8
	mov r1, sl
	ldrh r0, [r1]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutSpriteExt
	mov r1, r8
	adds r1, #0x3a
	mov r2, r9
	adds r2, #1
	ldr r5, .L080AA9D4  @ gUnknown_08A20650
	ldr r3, [r5, #0x28]
	str r4, [sp]
	movs r0, #0xd
	bl PutSpriteExt
	adds r6, #0x10
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	mov r2, r9
	bl PutSpriteExt
	adds r6, #8
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r5
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #0xd
	adds r1, r6, #0
	mov r2, r9
	bl PutSpriteExt
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AA9CC: .4byte gUnknown_08A20590
.L080AA9D0: .4byte gUnknown_08A2067C
.L080AA9D4: .4byte gUnknown_08A20650

	THUMB_FUNC_END func_080AA7EC

	THUMB_FUNC_START func_080AA9D8
func_080AA9D8: @ 0x080AA9D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	ldrh r1, [r0, #0x3e]
	adds r1, #1
	strh r1, [r0, #0x3e]
	adds r2, r0, #0
	adds r2, #0x40
	ldrh r1, [r2]
	adds r1, #2
	strh r1, [r2]
	ldrh r4, [r0, #0x3e]
	lsls r4, r4, #0x14
	lsrs r4, r4, #0x17
	ldrh r0, [r2]
	lsrs r7, r0, #3
	movs r0, #0xff
	ands r7, r0
	movs r0, #0
	movs r1, #1
	bl func_08014E74
	adds r6, r7, #0
	ldr r1, .L080AAA64  @ gSinLut
	mov sl, r1
	lsls r4, r4, #0x10
	asrs r2, r4, #0x10
	mov r8, r2
	adds r5, r0, #0
	mov r9, r4
	movs r4, #0x9f
.L080AAA1A:
	movs r0, #0xff
	ands r0, r6
	lsls r0, r0, #1
	add r0, sl
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r1, #0xc0
	lsls r1, r1, #2
	bl __divsi3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	add r0, r8
	ldr r2, .L080AAA68  @ 0x000001FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r5]
	adds r6, #0xc
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge .L080AAA1A
	mov r0, r9
	lsrs r1, r0, #0x10
	adds r2, r7, #0
	movs r0, #2
	bl SetBgOffset
	bl func_08014EA8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AAA64: .4byte gSinLut
.L080AAA68: .4byte 0x000001FF

	THUMB_FUNC_END func_080AA9D8

	THUMB_FUNC_START func_080AAA6C
func_080AAA6C: @ 0x080AAA6C
	push {lr}
	bl func_08014E3C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AAA6C

	THUMB_FUNC_START func_080AAA78
func_080AAA78: @ 0x080AAA78
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x29
	movs r7, #0
	movs r0, #1
	strb r0, [r1]
	movs r5, #0
	strh r7, [r6, #0x2c]
	movs r4, #0x80
	lsls r4, r4, #1
	strh r4, [r6, #0x2e]
	adds r0, r6, #0
	adds r0, #0x3a
	strb r5, [r0]
	adds r1, #0x12
	movs r0, #0x28
	strb r0, [r1]
	strh r7, [r6, #0x30]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	str r4, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #2
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #3
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	strh r7, [r6, #0x2a]
	adds r0, r6, #0
	bl func_080AB534
	str r0, [r6, #0x34]
	adds r0, r6, #0
	adds r0, #0x39
	strb r5, [r0]
	ldr r1, [r6, #0x14]
	adds r2, r1, #0
	adds r2, #0x3f
	ldrb r0, [r2]
	cmp r0, #0xff
	bne .L080AAAFE
	str r7, [r1, #0x60]
	b .L080AAB1C
.L080AAAFE:
	ldr r0, .L080AAB64  @ gUnknown_08A280A8
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r2, [r2]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xc5
	lsls r3, r3, #6
	str r7, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl StartSpriteAnimProc
	ldr r1, [r6, #0x14]
	str r0, [r1, #0x60]
.L080AAB1C:
	ldr r0, [r6, #0x14]
	adds r0, #0x2c
	ldrb r2, [r0]
	adds r0, r6, #0
	adds r0, #0x3c
	movs r1, #0
	strb r2, [r0]
	adds r0, #4
	strh r1, [r0]
	strh r1, [r6, #0x3e]
	ldr r0, .L080AAB68  @ gUnknown_02000000
	bl func_08014DA8
	ldr r1, .L080AAB6C  @ 0x04000018
	movs r0, #0
	bl func_08014EC4
	movs r0, #0
	bl func_08014EF4
	adds r0, r6, #0
	bl func_080AA9D8
	ldr r0, .L080AAB70  @ gUnknown_03004990
	ldr r0, [r0]
	ldr r1, .L080AAB74  @ 0x0000079E
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	bl func_080AB548
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AAB64: .4byte gUnknown_08A280A8
.L080AAB68: .4byte gUnknown_02000000
.L080AAB6C: .4byte 0x04000018
.L080AAB70: .4byte gUnknown_03004990
.L080AAB74: .4byte 0x0000079E

	THUMB_FUNC_END func_080AAA78

	THUMB_FUNC_START func_080AAB78
func_080AAB78: @ 0x080AAB78
	push {lr}
	lsls r1, r1, #0x10
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AABA4
	ldr r2, .L080AABA0  @ gPal
	lsrs r0, r1, #0x12
	movs r1, #0xf
	ands r0, r1
	movs r1, #0xc8
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0xb4
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	b .L080AABB2
	.align 2, 0
.L080AABA0: .4byte gPal
.L080AABA4:
	ldr r0, .L080AABBC  @ gPal
	ldr r2, .L080AABC0  @ 0x0000033A
	adds r1, r0, r2
	ldrh r1, [r1]
	subs r2, #0x6a
	adds r0, r0, r2
	strh r1, [r0]
.L080AABB2:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
.L080AABBC: .4byte gPal
.L080AABC0: .4byte 0x0000033A

	THUMB_FUNC_END func_080AAB78

	THUMB_FUNC_START func_080AABC4
func_080AABC4: @ 0x080AABC4
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, .L080AAC34  @ 0x000001FF
	mov r9, r1
	adds r1, r6, #0
	mov r2, r9
	ands r1, r2
	ldr r3, .L080AAC38  @ gUnknown_08A2051C
	movs r2, #0xf
	mov sl, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl PutSpriteExt
	adds r6, #8
	mov r0, r9
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r0, .L080AAC3C  @ gUnknown_08A209B8
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	mov r2, sl
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AAC34: .4byte 0x000001FF
.L080AAC38: .4byte gUnknown_08A2051C
.L080AAC3C: .4byte gUnknown_08A209B8

	THUMB_FUNC_END func_080AABC4

	THUMB_FUNC_START func_080AAC40
func_080AAC40: @ 0x080AAC40
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, .L080AACB0  @ 0x000001FF
	mov r9, r1
	adds r1, r6, #0
	mov r2, r9
	ands r1, r2
	ldr r3, .L080AACB4  @ gUnknown_08A2051C
	movs r2, #0xf
	mov sl, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl PutSpriteExt
	adds r6, #8
	mov r0, r9
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r0, .L080AACB8  @ gUnknown_08A2099C
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	mov r2, sl
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AACB0: .4byte 0x000001FF
.L080AACB4: .4byte gUnknown_08A2051C
.L080AACB8: .4byte gUnknown_08A2099C

	THUMB_FUNC_END func_080AAC40

	THUMB_FUNC_START func_080AACBC
func_080AACBC: @ 0x080AACBC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x3c
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r0, [r4]
	ldrb r2, [r1]
	cmp r0, r2
	beq .L080AACE8
	ldrb r0, [r1]
	bl func_080ABD88
	ldr r0, [r7, #0x14]
	adds r0, #0x2c
	ldrb r0, [r0]
	strb r0, [r4]
.L080AACE8:
	ldrh r0, [r7, #0x2a]
	ldrb r1, [r4]
	bl func_080ABE3C
	bl EnablePalSync
	ldr r1, [r7, #0x14]
	adds r4, r1, #0
	adds r4, #0x3f
	ldrb r3, [r4]
	adds r0, r3, #0
	cmp r0, #0xff
	beq .L080AADBA
	adds r5, r1, #0
	adds r5, #0x44
	ldrh r2, [r5]
	adds r1, r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq .L080AADBA
	cmp r1, #0xf
	bhi .L080AAD1C
	movs r0, #0xff
	strb r0, [r4]
	b .L080AADB0
.L080AAD1C:
	ldr r0, .L080AADDC  @ gSinLut
	mov r9, r0
	movs r4, #0xff
	adds r0, r4, #0
	ands r0, r2
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, r9
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	ldrh r1, [r5]
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r2, [r1]
	adds r0, r4, #0
	ands r0, r2
	lsls r0, r0, #1
	add r0, r9
	movs r2, #0
	ldrsh r0, [r0, r2]
	negs r0, r0
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r2, [r1]
	adds r0, r4, #0
	ands r0, r2
	lsls r0, r0, #1
	add r0, r9
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r0, [r1]
	ands r4, r0
	adds r4, #0x40
	lsls r4, r4, #1
	add r4, r9
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #3
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
.L080AADB0:
	ldr r1, [r7, #0x14]
	adds r1, #0x44
	ldrh r0, [r1]
	subs r0, #0x10
	strh r0, [r1]
.L080AADBA:
	ldrh r0, [r7, #0x2a]
	adds r1, r7, #0
	adds r1, #0x3c
	ldrb r1, [r1]
	bl func_080AA7AC
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AADDC: .4byte gSinLut

	THUMB_FUNC_END func_080AACBC

	THUMB_FUNC_START func_080AADE0
func_080AADE0: @ 0x080AADE0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x2f
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #4
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r5, r0, r1
	movs r0, #0xff
	ands r5, r0
	ldr r3, .L080AAE38  @ gUnknown_08A2051C
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x30
	adds r2, r5, #0
	bl PutSpriteExt
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	cmp r0, #0
	beq .L080AAE5C
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080AAE40
	adds r2, r5, #0
	adds r2, #8
	ldr r0, .L080AAE3C  @ gUnknown_08A209B8
	ldr r3, [r0, #0x28]
	b .L080AAE48
	.align 2, 0
.L080AAE38: .4byte gUnknown_08A2051C
.L080AAE3C: .4byte gUnknown_08A209B8
.L080AAE40:
	adds r2, r5, #0
	adds r2, #8
	ldr r0, .L080AAE58  @ gUnknown_08A209B8
	ldr r3, [r0, #0x20]
.L080AAE48:
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	bl PutSpriteExt
	b .L080AAE82
	.align 2, 0
.L080AAE58: .4byte gUnknown_08A209B8
.L080AAE5C:
	adds r0, r1, #0
	adds r0, #0x42
	ldrb r0, [r0]
	bl func_080A88B8
	lsls r0, r0, #0x18
	adds r2, r5, #0
	adds r2, #8
	ldr r1, .L080AAE8C  @ gUnknown_08A209B8
	lsrs r0, r0, #0x16
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	bl PutSpriteExt
.L080AAE82:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AAE8C: .4byte gUnknown_08A209B8

	THUMB_FUNC_END func_080AADE0

	THUMB_FUNC_START func_080AAE90
func_080AAE90: @ 0x080AAE90
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	ldr r2, [r5, #0x14]
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r0, #0x17
	ldrh r0, [r0]
	adds r7, r1, r0
	cmp r7, #0xdb
	bgt .L080AAF5E
	adds r0, r2, #0
	adds r0, #0x31
	ldrb r3, [r0]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #3
	adds r0, r0, r3
	asrs r0, r0, #1
	movs r1, #0x44
	subs r1, r1, r0
	mov r8, r1
	cmp r1, #1
	bgt .L080AAECC
	movs r0, #2
	mov r8, r0
.L080AAECC:
	movs r6, #0
	cmp r6, r3
	bge .L080AAF36
	mov r4, r8
	movs r2, #0x30
	mov r9, r2
.L080AAED8:
	ldr r0, [r5, #0x14]
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r6, #0
	bl func_080A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl func_080A88B8
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, [r5, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r6, r0
	bne .L080AAF10
	movs r0, #1
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	mov r2, r9
	subs r1, r2, r7
	adds r2, r4, #0
	bl func_080AABC4
	b .L080AAF24
.L080AAF10:
	movs r0, #6
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	mov r2, r9
	subs r1, r2, r7
	adds r2, r4, #0
	bl func_080AABC4
.L080AAF24:
	adds r4, #0x19
	adds r6, #1
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x31
	adds r2, r0, #0
	ldrb r1, [r1]
	cmp r6, r1
	blt .L080AAED8
.L080AAF36:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #2
	bne .L080AAF5E
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	adds r2, r2, r0
	add r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	movs r1, #0x1c
	adds r3, r5, #0
	bl func_080AB4F4
.L080AAF5E:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AAE90

	THUMB_FUNC_START func_080AAF6C
func_080AAF6C: @ 0x080AAF6C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	ldr r2, [r5, #0x14]
	adds r0, r2, #0
	adds r0, #0x46
	ldrh r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	movs r1, #0xdb
	lsls r1, r1, #0x11
	cmp r0, r1
	bhi .L080AB050
	adds r1, r2, #0
	adds r1, #0x33
	ldrb r0, [r1]
	cmp r0, #7
	bne .L080AAF9A
	movs r7, #2
	movs r0, #0x15
	b .L080AAFAE
.L080AAF9A:
	ldrb r0, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	movs r0, #0x44
	subs r7, r0, r1
	cmp r7, #1
	bgt .L080AAFAC
	movs r7, #2
.L080AAFAC:
	movs r0, #0x19
.L080AAFAE:
	mov r8, r0
	movs r6, #0
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x33
	adds r2, r0, #0
	ldrb r1, [r1]
	cmp r6, r1
	bge .L080AB030
	adds r4, r7, #0
.L080AAFC2:
	adds r0, #0x32
	ldrb r0, [r0]
	adds r1, r6, #0
	bl func_080A8844
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl func_080A88B8
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r1, [r5, #0x14]
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r6, r0
	bne .L080AB002
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	movs r1, #0x86
	lsls r1, r1, #1
	subs r1, r1, r0
	movs r0, #1
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	bl func_080AAC40
	b .L080AB01E
.L080AB002:
	adds r0, r1, #0
	adds r0, #0x46
	ldrh r0, [r0]
	movs r1, #0x86
	lsls r1, r1, #1
	subs r1, r1, r0
	movs r0, #6
	str r0, [sp]
	movs r0, #4
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	bl func_080AAC40
.L080AB01E:
	add r4, r8
	adds r6, #1
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x33
	adds r2, r0, #0
	ldrb r1, [r1]
	cmp r6, r1
	blt .L080AAFC2
.L080AB030:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0xa
	bne .L080AB050
	adds r0, r2, #0
	adds r0, #0x34
	ldrb r0, [r0]
	mov r2, r8
	muls r2, r0, r2
	adds r2, r7, r2
	movs r0, #0
	movs r1, #0x1c
	adds r3, r5, #0
	bl func_080AB4F4
.L080AB050:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AAF6C

	THUMB_FUNC_START func_080AB05C
func_080AB05C: @ 0x080AB05C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r0, [r0, #0x14]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080AB076
	b .L080AB1DA
.L080AB076:
	mov r0, r8
	bl func_080AA7EC
	mov r0, r8
	bl func_080AADE0
	movs r7, #0
	movs r0, #0xf
	mov sl, r0
	movs r1, #0xa
	mov r9, r1
.L080AB08C:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	movs r2, #0
	cmp r0, #6
	bne .L080AB0AA
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, r7
	bne .L080AB0AA
	movs r2, #0x80
	lsls r2, r2, #1
.L080AB0AA:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r0, #0xf8
	subs r1, r0, r1
	ldr r0, .L080AB168  @ 0x000001FF
	ands r1, r0
	lsls r5, r7, #5
	adds r5, #0x20
	adds r5, r2, r5
	ldr r0, .L080AB16C  @ gUnknown_08A209F0
	lsls r6, r7, #2
	adds r0, r6, r0
	ldr r3, [r0]
	lsls r4, r7, #1
	mov r0, r9
	mov r2, sl
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl PutSpriteExt
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r2, #0xf8
	subs r1, r2, r1
	ldr r0, .L080AB168  @ 0x000001FF
	ands r1, r0
	adds r5, #8
	ldr r0, .L080AB170  @ gUnknown_08A209E4
	adds r6, r6, r0
	ldr r3, [r6]
	adds r4, #0xb
	mov r2, sl
	ands r4, r2
	lsls r4, r4, #0xc
	str r4, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl PutSpriteExt
	movs r0, #2
	add r9, r0
	adds r7, #1
	cmp r7, #2
	ble .L080AB08C
	mov r1, r8
	ldr r2, [r1, #0x14]
	adds r3, r2, #0
	adds r3, #0x3f
	ldrb r0, [r3]
	cmp r0, #0xff
	beq .L080AB1DA
	adds r0, r2, #0
	adds r0, #0x44
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq .L080AB178
	ldr r0, [r2, #0x60]
	cmp r0, #0
	beq .L080AB13E
	bl EndSpriteAnimProc
	mov r2, r8
	ldr r1, [r2, #0x14]
	movs r0, #0
	str r0, [r1, #0x60]
.L080AB13E:
	mov r0, r8
	ldr r2, [r0, #0x14]
	adds r0, r2, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	adds r0, r2, #0
	adds r0, #0x3f
	ldrb r2, [r0]
	lsls r2, r2, #5
	adds r2, #0x1e
	ldr r3, .L080AB174  @ gUnknown_08A20588
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0xca
	bl PutSpriteExt
	b .L080AB1DA
	.align 2, 0
.L080AB168: .4byte 0x000001FF
.L080AB16C: .4byte gUnknown_08A209F0
.L080AB170: .4byte gUnknown_08A209E4
.L080AB174: .4byte gUnknown_08A20588
.L080AB178:
	adds r0, r2, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #1
	bne .L080AB1A0
	ldr r0, [r2, #0x60]
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	movs r1, #0xda
	lsls r1, r1, #1
	subs r1, r1, r2
	ldrb r2, [r3]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xc5
	lsls r3, r3, #6
	bl SetSpriteAnimProcParameters
	b .L080AB1DA
.L080AB1A0:
	ldr r0, [r2, #0x60]
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r2, [r3]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xc5
	lsls r3, r3, #6
	bl SetSpriteAnimProcParameters
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	movs r1, #0xd3
	lsls r1, r1, #1
	subs r1, r1, r2
	adds r0, #0x3f
	ldrb r2, [r0]
	lsls r2, r2, #5
	adds r2, #0x1e
	ldr r3, .L080AB248  @ gUnknown_08A20588
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
.L080AB1DA:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	subs r0, #5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi .L080AB28E
	adds r0, r1, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080AB250
	ldr r3, .L080AB24C  @ gUnknown_08A20536
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x2c
	movs r2, #0x80
	bl PutSpriteExt
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x36
	ldrb r1, [r0]
	subs r1, #1
	lsrs r0, r1, #0x1f
	adds r0, r1, r0
	asrs r0, r0, #1
	lsls r0, r0, #1
	subs r1, r1, r0
	movs r0, #0x2c
	muls r0, r1, r0
	adds r0, #0x34
	movs r1, #0x88
	bl DisplayUiHand
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r0, #0x2c
	ldrb r2, [r0]
	lsls r2, r2, #0x15
	movs r0, #0x80
	lsls r0, r0, #0xe
	adds r2, r2, r0
	asrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl func_080AB4F4
	b .L080AB26E
	.align 2, 0
.L080AB248: .4byte gUnknown_08A20588
.L080AB24C: .4byte gUnknown_08A20536
.L080AB250:
	adds r1, #0x2c
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L080AB26E
	adds r2, r0, #0
	lsls r2, r2, #0x15
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r2, r2, r1
	asrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl func_080AB4F4
.L080AB26E:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L080AB28E
	adds r1, r0, #0
	lsls r1, r1, #0x1d
	movs r0, #0x80
	lsls r0, r0, #0x16
	adds r1, r1, r0
	lsrs r1, r1, #0x18
	movs r0, #1
	bl func_080AB514
.L080AB28E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AB05C

	THUMB_FUNC_START func_080AB2A0
func_080AB2A0: @ 0x080AB2A0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AB2EC
	ldr r0, [r4, #0x14]
	adds r1, r0, #0
	adds r1, #0x42
	ldrh r2, [r1]
	adds r1, r2, #0
	cmp r1, #0xff
	bhi .L080AB2D4
	cmp r1, #0x20
	bne .L080AB2CE
	adds r0, #0x35
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x33
	strb r0, [r1]
	b .L080AB2D4
.L080AB2CE:
	adds r0, r4, #0
	adds r0, #0x33
	strb r2, [r0]
.L080AB2D4:
	adds r0, r4, #0
	bl func_080AAE90
	adds r0, r4, #0
	bl func_080AAF6C
	adds r0, r4, #0
	bl func_080AB05C
	adds r0, r4, #0
	bl func_080AACBC
.L080AB2EC:
	adds r0, r4, #0
	bl func_080AA9D8
	ldrh r0, [r4, #0x2a]
	bl func_080AB56C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AB2A0

	THUMB_FUNC_START StartSaveDraw
StartSaveDraw: @ 0x080AB300
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AB310  @ gUnknown_08A206A8
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080AB310: .4byte gUnknown_08A206A8

	THUMB_FUNC_END StartSaveDraw

	THUMB_FUNC_START func_080AB314
func_080AB314: @ 0x080AB314
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x36
	movs r0, #0
	strb r0, [r1]
	movs r1, #0
	strh r0, [r2, #0x2a]
	strh r0, [r2, #0x2e]
	strh r0, [r2, #0x30]
	strh r0, [r2, #0x32]
	strh r0, [r2, #0x34]
	adds r0, r2, #0
	adds r0, #0x37
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #0xe
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AB314

	THUMB_FUNC_START func_080AB340
func_080AB340: @ 0x080AB340
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	ldr r1, .L080AB3DC  @ gUnknown_08205DE9
	add r0, sp, #4
	movs r2, #8
	bl memcpy
	ldr r0, [r7, #0x14]
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080AB368
	b .L080AB4E0
.L080AB368:
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	adds r3, r7, #0
	adds r3, #0x2c
	ldrb r0, [r3]
	str r3, [sp, #0xc]
	cmp r0, #3
	bhi .L080AB37E
	adds r0, #1
	strb r0, [r3]
.L080AB37E:
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r1, [r0]
	str r0, [sp, #0x10]
	cmp r1, #0
	bne .L080AB38C
	b .L080AB49C
.L080AB38C:
	ldrh r2, [r7, #0x32]
	ldrh r5, [r7, #0x2e]
	ldrb r0, [r3]
	cmp r0, #3
	bhi .L080AB3C6
	movs r1, #0x32
	ldrsh r0, [r7, r1]
	movs r2, #0x34
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r3, [r7, #0x34]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r4, #0x2e
	ldrsh r0, [r7, r4]
	movs r3, #0x30
	ldrsh r1, [r7, r3]
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldrh r4, [r7, #0x30]
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
.L080AB3C6:
	adds r0, r7, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne .L080AB3E0
	lsls r1, r5, #0x10
	movs r4, #0x9c
	lsls r4, r4, #0x10
	b .L080AB3E6
	.align 2, 0
.L080AB3DC: .4byte gUnknown_08205DE9
.L080AB3E0:
	lsls r1, r5, #0x10
	movs r4, #0xb0
	lsls r4, r4, #0x10
.L080AB3E6:
	adds r0, r1, r4
	lsrs r6, r0, #0x10
	ldrh r0, [r7, #0x32]
	strh r0, [r7, #0x34]
	ldrh r0, [r7, #0x2e]
	strh r0, [r7, #0x30]
	ldrb r0, [r3]
	cmp r0, #0
	bne .L080AB468
	ldr r0, .L080AB460  @ 0x000001FF
	mov r9, r0
	lsrs r1, r1, #0x10
	ands r1, r0
	lsls r4, r2, #0x10
	asrs r4, r4, #0x10
	ldrh r0, [r7, #0x2a]
	lsrs r0, r0, #3
	movs r2, #7
	mov r8, r2
	mov r3, r8
	ands r0, r3
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	adds r2, r4, r2
	movs r0, #0xff
	mov sl, r0
	ands r2, r0
	movs r5, #0xc0
	lsls r5, r5, #6
	str r5, [sp]
	movs r0, #4
	ldr r3, .L080AB464  @ gUnknown_08A20570
	bl PutSpriteExt
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	mov r2, r9
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r3, #0
	orrs r1, r0
	ldrh r0, [r7, #0x2a]
	lsrs r0, r0, #3
	mov r2, r8
	ands r0, r2
	add r0, sp
	adds r0, #4
	ldrb r0, [r0]
	adds r4, r4, r0
	mov r3, sl
	ands r4, r3
	str r5, [sp]
	movs r0, #4
	adds r2, r4, #0
	ldr r3, .L080AB464  @ gUnknown_08A20570
	bl PutSpriteExt
	b .L080AB490
	.align 2, 0
.L080AB460: .4byte 0x000001FF
.L080AB464: .4byte gUnknown_08A20570
.L080AB468:
	lsls r2, r2, #0x10
	ldrh r0, [r7, #0x2a]
	lsrs r0, r0, #3
	movs r1, #7
	ands r0, r1
	add r0, sp
	adds r0, #4
	asrs r2, r2, #0x10
	ldrb r0, [r0]
	adds r2, r2, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, .L080AB498  @ gUnknown_08A20570
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #4
	bl PutSpriteExt
.L080AB490:
	movs r0, #0
	ldr r4, [sp, #0xc]
	strb r0, [r4]
	b .L080AB4A8
	.align 2, 0
.L080AB498: .4byte gUnknown_08A20570
.L080AB49C:
	ldrb r0, [r3]
	cmp r0, #4
	bne .L080AB4A8
	movs r0, #0
	ldr r1, [sp, #0x10]
	strb r0, [r1]
.L080AB4A8:
	adds r4, r7, #0
	adds r4, #0x38
	ldrb r0, [r4]
	cmp r0, #0
	beq .L080AB4C8
	adds r0, r7, #0
	adds r0, #0x37
	ldrb r2, [r0]
	ldr r3, .L080AB4F0  @ gUnknown_08A20570
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #6
	bl PutSpriteExt
.L080AB4C8:
	adds r1, r7, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080AB4D6
	movs r0, #0
	strb r0, [r4]
.L080AB4D6:
	movs r0, #0
	ldr r2, [sp, #0x10]
	strb r0, [r2]
	movs r0, #1
	strb r0, [r1]
.L080AB4E0:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AB4F0: .4byte gUnknown_08A20570

	THUMB_FUNC_END func_080AB340

	THUMB_FUNC_START func_080AB4F4
func_080AB4F4: @ 0x080AB4F4
	ldr r3, [r3, #0x34]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	subs r2, #0xc
	strh r2, [r3, #0x32]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	subs r1, #2
	strh r1, [r3, #0x2e]
	adds r2, r3, #0
	adds r2, #0x36
	movs r1, #1
	strb r1, [r2]
	adds r3, #0x3a
	strb r0, [r3]
	bx lr

	THUMB_FUNC_END func_080AB4F4

	THUMB_FUNC_START func_080AB514
func_080AB514: @ 0x080AB514
	ldr r2, [r2, #0x34]
	mov ip, r2
	adds r2, #0x37
	movs r3, #0
	strb r1, [r2]
	adds r2, #1
	movs r1, #1
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x3a
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x39
	strb r3, [r0]
	bx lr

	THUMB_FUNC_END func_080AB514

	THUMB_FUNC_START func_080AB534
func_080AB534: @ 0x080AB534
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AB544  @ gUnknown_08A206D8
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080AB544: .4byte gUnknown_08A206D8

	THUMB_FUNC_END func_080AB534

	THUMB_FUNC_START func_080AB548
func_080AB548: @ 0x080AB548
	push {lr}
	movs r2, #0
	movs r3, #0xa0
	ldr r0, .L080AB568  @ gUnknown_020007E0
	movs r1, #0x13
.L080AB552:
	strb r2, [r0, #0xe]
	str r3, [r0, #4]
	str r3, [r0]
	strh r2, [r0, #0xa]
	strh r2, [r0, #8]
	adds r0, #0x10
	subs r1, #1
	cmp r1, #0
	bge .L080AB552
	pop {r0}
	bx r0
	.align 2, 0
.L080AB568: .4byte gUnknown_020007E0

	THUMB_FUNC_END func_080AB548

	THUMB_FUNC_START func_080AB56C
func_080AB56C: @ 0x080AB56C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r9, r0
	movs r0, #0
	mov r8, r0
	ldr r6, .L080AB5C8  @ gUnknown_020007E0
	movs r7, #0x13
.L080AB580:
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq .L080AB674
	ldr r2, [r6]
	adds r1, r2, #0
	adds r1, #0xc0
	ldr r0, .L080AB5CC  @ 0x00000C5F
	cmp r1, r0
	bhi .L080AB606
	ldr r5, [r6, #4]
	ldr r0, .L080AB5D0  @ 0x000003BF
	cmp r5, r0
	bgt .L080AB5DC
	adds r0, r2, #0
	movs r1, #0xc
	bl __divsi3
	adds r4, r0, #0
	ldr r0, .L080AB5D4  @ 0x000001FF
	ands r4, r0
	adds r0, r5, #0
	movs r1, #0xc
	bl __divsi3
	movs r2, #0xff
	ands r2, r0
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xe
	adds r1, r4, #0
	ldr r3, .L080AB5D8  @ gUnknown_08A20580
	bl PutSpriteExt
	b .L080AB606
	.align 2, 0
.L080AB5C8: .4byte gUnknown_020007E0
.L080AB5CC: .4byte 0x00000C5F
.L080AB5D0: .4byte 0x000003BF
.L080AB5D4: .4byte 0x000001FF
.L080AB5D8: .4byte gUnknown_08A20580
.L080AB5DC:
	adds r0, r2, #0
	movs r1, #0xc
	bl __divsi3
	adds r4, r0, #0
	ldr r0, .L080AB65C  @ 0x000001FF
	ands r4, r0
	adds r0, r5, #0
	movs r1, #0xc
	bl __divsi3
	movs r2, #0xff
	ands r2, r0
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xe
	adds r1, r4, #0
	ldr r3, .L080AB660  @ gUnknown_08A20578
	bl PutSpriteExt
.L080AB606:
	movs r2, #8
	ldrsh r1, [r6, r2]
	ldr r0, [r6]
	adds r0, r0, r1
	str r0, [r6]
	movs r0, #0xa
	ldrsh r1, [r6, r0]
	ldr r0, [r6, #4]
	adds r0, r0, r1
	str r0, [r6, #4]
	movs r0, #3
	mov r1, r9
	ands r0, r1
	cmp r0, #0
	bne .L080AB638
	movs r0, #0xc
	ldrsb r0, [r6, r0]
	ldrh r2, [r6, #8]
	adds r0, r0, r2
	strh r0, [r6, #8]
	movs r0, #0xd
	ldrsb r0, [r6, r0]
	ldrh r1, [r6, #0xa]
	adds r0, r0, r1
	strh r0, [r6, #0xa]
.L080AB638:
	ldr r0, [r6]
	movs r2, #0xb4
	lsls r2, r2, #3
	adds r0, r0, r2
	ldr r1, .L080AB664  @ 0x0000167F
	cmp r0, r1
	bhi .L080AB654
	ldr r1, [r6, #4]
	ldr r0, .L080AB668  @ 0xFFFFFC40
	cmp r1, r0
	blt .L080AB654
	ldr r0, .L080AB66C  @ 0x00000B3F
	cmp r1, r0
	ble .L080AB670
.L080AB654:
	movs r0, #0
	strb r0, [r6, #0xe]
	b .L080AB674
	.align 2, 0
.L080AB65C: .4byte 0x000001FF
.L080AB660: .4byte gUnknown_08A20578
.L080AB664: .4byte 0x0000167F
.L080AB668: .4byte 0xFFFFFC40
.L080AB66C: .4byte 0x00000B3F
.L080AB670:
	movs r0, #1
	add r8, r0
.L080AB674:
	subs r7, #1
	adds r6, #0x10
	cmp r7, #0
	blt .L080AB67E
	b .L080AB580
.L080AB67E:
	ldr r0, .L080AB71C  @ gUnknown_020007E0
	mov r1, r8
	cmp r1, #0x12
	bgt .L080AB70E
	adds r6, r0, #0
	movs r5, #0
	movs r7, #0x13
.L080AB68C:
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne .L080AB706
	bl RandNextB
	movs r1, #0xb
	bl DivRem
	cmp r0, #0
	bne .L080AB706
	bl RandNextB
	movs r1, #0x11
	bl DivRem
	adds r4, r0, #0
	bl RandNextB
	movs r1, #0x1f
	bl DivRem
	subs r4, #8
	lsls r1, r4, #4
	subs r1, r1, r4
	lsls r1, r1, #1
	adds r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	str r0, [r6]
	movs r0, #0xf0
	lsls r0, r0, #3
	str r0, [r6, #4]
	bl RandNextB
	movs r1, #7
	bl DivRem
	adds r0, #6
	strh r0, [r6, #8]
	bl RandNextB
	movs r1, #0x19
	bl DivRem
	movs r2, #0x18
	negs r2, r2
	adds r1, r2, #0
	subs r1, r1, r0
	strh r1, [r6, #0xa]
	bl RandNextB
	movs r1, #3
	bl DivRem
	adds r0, #1
	strb r0, [r6, #0xc]
	strb r5, [r6, #0xd]
	movs r0, #1
	strb r0, [r6, #0xe]
.L080AB706:
	subs r7, #1
	adds r6, #0x10
	cmp r7, #0
	bge .L080AB68C
.L080AB70E:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AB71C: .4byte gUnknown_020007E0

	THUMB_FUNC_END func_080AB56C

	THUMB_FUNC_START func_080AB720
func_080AB720: @ 0x080AB720
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0
	strh r0, [r1]
	strh r0, [r4, #0x3e]
	ldr r1, .L080AB754  @ 0x04000018
	bl func_08014EC4
	movs r0, #0
	bl func_08014EF4
	adds r0, r4, #0
	bl func_080AA9D8
	ldr r0, .L080AB758  @ gUnknown_03004990
	ldr r0, [r0]
	ldr r1, .L080AB75C  @ 0x0000079E
	adds r0, r0, r1
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AB754: .4byte 0x04000018
.L080AB758: .4byte gUnknown_03004990
.L080AB75C: .4byte 0x0000079E

	THUMB_FUNC_END func_080AB720

	THUMB_FUNC_START func_080AB760
func_080AB760: @ 0x080AB760
	push {lr}
	ldr r0, .L080AB774  @ gUnknown_08A206F8
	movs r1, #3
	bl SpawnProc
	ldr r0, .L080AB778  @ gUnknown_02000000
	bl func_08014DA8
	pop {r0}
	bx r0
	.align 2, 0
.L080AB774: .4byte gUnknown_08A206F8
.L080AB778: .4byte gUnknown_02000000

	THUMB_FUNC_END func_080AB760

	THUMB_FUNC_START func_080AB77C
func_080AB77C: @ 0x080AB77C
	push {lr}
	ldr r0, .L080AB790  @ gUnknown_08A206F8
	bl EndEachProc
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
.L080AB790: .4byte gUnknown_08A206F8

	THUMB_FUNC_END func_080AB77C

	THUMB_FUNC_START func_080AB794
func_080AB794: @ 0x080AB794
	push {lr}
	ldr r0, .L080AB7B0  @ gUnknown_02000920
	ldr r1, .L080AB7B4  @ 0x06001000
	movs r2, #0x80
	movs r3, #4
	bl InitTextFont
	ldr r0, .L080AB7B8  @ gUnknown_02000938
	movs r1, #0xa
	bl InitText
	pop {r0}
	bx r0
	.align 2, 0
.L080AB7B0: .4byte gUnknown_02000920
.L080AB7B4: .4byte 0x06001000
.L080AB7B8: .4byte gUnknown_02000938

	THUMB_FUNC_END func_080AB794

	THUMB_FUNC_START func_080AB7BC
func_080AB7BC: @ 0x080AB7BC
	push {r4, r5, lr}
	lsls r1, r1, #0x18
	cmp r1, #0
	beq .L080AB820
	bl GetMsg
	adds r5, r0, #0
	ldr r0, .L080AB814  @ gUnknown_02000920
	bl SetTextFont
	ldr r4, .L080AB818  @ gUnknown_02000938
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x2c
	bl Text_SetCursor
	movs r0, #0xa1
	lsls r0, r0, #1
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, .L080AB81C  @ gBg1Tm+0x44E
	adds r0, r4, #0
	bl PutText
	b .L080AB82C
	.align 2, 0
.L080AB814: .4byte gUnknown_02000920
.L080AB818: .4byte gUnknown_02000938
.L080AB81C: .4byte gBg1Tm+0x44E
.L080AB820:
	ldr r0, .L080AB838  @ gBg1Tm+0x44E
	movs r1, #0xb
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
.L080AB82C:
	movs r0, #2
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AB838: .4byte gBg1Tm+0x44E

	THUMB_FUNC_END func_080AB7BC

	THUMB_FUNC_START func_080AB83C
func_080AB83C: @ 0x080AB83C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r5, .L080AB870  @ gUnknown_08A20720
	adds r0, #0x42
	ldrb r0, [r0]
	bl func_080A88B8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r5
	ldr r0, [r0]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	adds r1, r4, #0
	bl func_080AB7BC
	cmp r4, #0
	bne .L080AB86A
	adds r0, r6, #0
	adds r0, #0x36
	strb r4, [r0]
.L080AB86A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AB870: .4byte gUnknown_08A20720

	THUMB_FUNC_END func_080AB83C

	THUMB_FUNC_START func_080AB874
func_080AB874: @ 0x080AB874
	adds r3, r0, #0
	adds r3, #0x30
	ldrb r2, [r3]
	orrs r1, r2
	strb r1, [r3]
	adds r0, #0x31
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AB874

	THUMB_FUNC_START func_080AB888
func_080AB888: @ 0x080AB888
	adds r3, r0, #0
	adds r3, #0x32
	ldrb r2, [r3]
	orrs r1, r2
	strb r1, [r3]
	adds r0, #0x33
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AB888

	THUMB_FUNC_START func_080AB89C
func_080AB89C: @ 0x080AB89C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r5, #0
	adds r0, #0x31
	strb r5, [r0]
	subs r0, #1
	strb r5, [r0]
	adds r0, #0x14
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne .L080AB8BE
	adds r0, r4, #0
	movs r1, #1
	bl func_080AB874
.L080AB8BE:
	movs r1, #0
	adds r7, r4, #0
	adds r7, #0x32
	adds r6, r4, #0
	adds r6, #0x33
	adds r2, r4, #0
	adds r2, #0x37
.L080AB8CC:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq .L080AB8D6
	adds r5, #1
.L080AB8D6:
	adds r1, #1
	cmp r1, #2
	ble .L080AB8CC
	cmp r5, #0
	ble .L080AB8FC
	adds r0, r4, #0
	movs r1, #2
	bl func_080AB874
	cmp r5, #2
	bgt .L080AB8F4
	adds r0, r4, #0
	movs r1, #4
	bl func_080AB874
.L080AB8F4:
	adds r0, r4, #0
	movs r1, #8
	bl func_080AB874
.L080AB8FC:
	cmp r5, #2
	bgt .L080AB908
	adds r0, r4, #0
	movs r1, #0x10
	bl func_080AB874
.L080AB908:
	movs r0, #0
	strb r0, [r7]
	strb r0, [r6]
	bl func_080A32F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AB920
	adds r0, r4, #0
	movs r1, #1
	bl func_080AB888
.L080AB920:
	bl func_080A3328
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AB932
	adds r0, r4, #0
	movs r1, #2
	bl func_080AB888
.L080AB932:
	bl func_080A332C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AB944
	adds r0, r4, #0
	movs r1, #4
	bl func_080AB888
.L080AB944:
	bl func_080A33EC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AB956
	adds r0, r4, #0
	movs r1, #0x10
	bl func_080AB888
.L080AB956:
	bl func_080A341C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AB968
	adds r0, r4, #0
	movs r1, #0x20
	bl func_080AB888
.L080AB968:
	ldrb r0, [r7]
	cmp r0, #0
	beq .L080AB984
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r0, [r2]
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L080AB984:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AB89C

	THUMB_FUNC_START func_080AB98C
func_080AB98C: @ 0x080AB98C
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	cmp r2, #0
	ble .L080AB9CA
	movs r5, #0
	lsls r6, r1, #0x18
.L080AB9A0:
	adds r0, r4, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	cmp r0, r6
	beq .L080AB9C6
	cmp r4, #2
	bne .L080AB9B4
	movs r4, #0
	b .L080AB9BA
.L080AB9B4:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
.L080AB9BA:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls .L080AB9A0
	b .L080AB9F2
.L080AB9C6:
	adds r0, r4, #0
	b .L080AB9F4
.L080AB9CA:
	movs r5, #0
	lsls r6, r1, #0x18
.L080AB9CE:
	adds r0, r4, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	cmp r0, r6
	beq .L080AB9C6
	cmp r4, #0
	bne .L080AB9E2
	movs r4, #2
	b .L080AB9E8
.L080AB9E2:
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
.L080AB9E8:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls .L080AB9CE
.L080AB9F2:
	movs r0, #0xff
.L080AB9F4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AB98C

	THUMB_FUNC_START func_080AB9FC
func_080AB9FC: @ 0x080AB9FC
	push {r4, r5, lr}
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #0
	adds r0, #0x2c
	ldrb r5, [r0]
	adds r0, #0x16
	ldrh r0, [r0]
	cmp r0, #4
	beq .L080ABA34
	cmp r0, #4
	bgt .L080ABA20
	cmp r0, #1
	beq .L080ABA90
	cmp r0, #2
	beq .L080ABA3E
	b .L080ABA40
.L080ABA20:
	cmp r0, #0x10
	beq .L080ABA40
	cmp r0, #0x10
	bgt .L080ABA2E
	cmp r0, #8
	beq .L080ABA3E
	b .L080ABA40
.L080ABA2E:
	cmp r0, #0x80
	bne .L080ABA40
	b .L080ABA3E
.L080ABA34:
	mov r0, ip
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #0xff
	bne .L080ABA40
.L080ABA3E:
	movs r1, #1
.L080ABA40:
	lsls r0, r2, #0x18
	adds r2, r0, #0
	cmp r2, #0
	ble .L080ABA5C
	mov r0, ip
	adds r0, #0x2c
	ldrb r3, [r0]
	adds r4, r0, #0
	cmp r3, #2
	bne .L080ABA58
	movs r0, #0
	b .L080ABA6E
.L080ABA58:
	adds r0, r3, #1
	b .L080ABA6E
.L080ABA5C:
	mov r0, ip
	adds r0, #0x2c
	ldrb r3, [r0]
	adds r4, r0, #0
	cmp r3, #0
	bne .L080ABA6C
	movs r0, #2
	b .L080ABA6E
.L080ABA6C:
	subs r0, r3, #1
.L080ABA6E:
	strb r0, [r4]
	mov r0, ip
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0x40
	beq .L080ABA8C
	ldrb r0, [r4]
	asrs r2, r2, #0x18
	bl func_080AB98C
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r5, r0
	beq .L080ABA90
.L080ABA8C:
	movs r0, #1
	b .L080ABA92
.L080ABA90:
	movs r0, #0
.L080ABA92:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AB9FC

	THUMB_FUNC_START func_080ABA98
func_080ABA98: @ 0x080ABA98
	push {lr}
	adds r1, r0, #0
	adds r1, #0x42
	ldrh r1, [r1]
	adds r0, #0x30
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne .L080ABAAE
	movs r0, #0
	b .L080ABAB0
.L080ABAAE:
	movs r0, #1
.L080ABAB0:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080ABA98

	THUMB_FUNC_START func_080ABAB4
func_080ABAB4: @ 0x080ABAB4
	push {r4, lr}
	mov ip, r0
	mov r2, ip
	adds r2, #0x29
	adds r0, #0x2b
	ldrb r0, [r0]
	ldrb r1, [r2]
	adds r0, r0, r1
	strb r0, [r2]
	ldr r3, .L080ABB24  @ gDispIo
	ldrb r1, [r3, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble .L080ABB28
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r1, #4
	strb r0, [r1]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	movs r4, #0x10
	negs r4, r4
	adds r1, r4, #0
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	ldrb r0, [r2]
	lsls r0, r0, #1
	movs r2, #0x60
	negs r2, r2
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x32
	strb r1, [r0]
	b .L080ABB5E
	.align 2, 0
.L080ABB24: .4byte gDispIo
.L080ABB28:
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	movs r1, #0x78
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r0, [r2]
	lsls r0, r0, #1
	movs r1, #0x50
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x33
	strb r1, [r0]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r0, #0x78
	adds r1, r3, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldrb r0, [r2]
	lsls r0, r0, #1
	adds r0, #0x50
	adds r1, #4
	strb r0, [r1]
.L080ABB5E:
	adds r2, r3, #0
	adds r2, #0x35
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0x27
	bls .L080ABBA8
	mov r0, ip
	bl Proc_Break
.L080ABBA8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ABAB4

	THUMB_FUNC_START func_080ABBB0
func_080ABBB0: @ 0x080ABBB0
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, .L080ABBE0  @ gUnknown_08A2073C
	adds r1, r3, #0
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x2a
	movs r1, #0
	strb r4, [r2]
	adds r2, #1
	strb r5, [r2]
	adds r0, #0x29
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080ABBE0: .4byte gUnknown_08A2073C

	THUMB_FUNC_END func_080ABBB0

	THUMB_FUNC_START func_080ABBE4
func_080ABBE4: @ 0x080ABBE4
	push {lr}
	ldr r0, .L080ABBF8  @ gBg2Tm
	ldr r1, .L080ABBFC  @ 0x06007000
	movs r2, #0x80
	lsls r2, r2, #4
	bl RegisterDataMove
	pop {r0}
	bx r0
	.align 2, 0
.L080ABBF8: .4byte gBg2Tm
.L080ABBFC: .4byte 0x06007000

	THUMB_FUNC_END func_080ABBE4

	THUMB_FUNC_START func_080ABC00
func_080ABC00: @ 0x080ABC00
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080ABC10  @ gUnknown_08A2075C
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080ABC10: .4byte gUnknown_08A2075C

	THUMB_FUNC_END func_080ABC00

	THUMB_FUNC_START func_080ABC14
func_080ABC14: @ 0x080ABC14
	push {r4, r5, r6, r7, lr}
	sub sp, #0x120
	adds r7, r1, #0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r6, r5, #0
	cmp r5, #2
	bls .L080ABC26
	b .L080ABD48
.L080ABC26:
	adds r0, r5, #0
	bl IsSaveBlockValid
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq .L080ABD04
	adds r0, r5, #0
	mov r1, sp
	bl LoadSavedChapterState
	mov r0, sp
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne .L080ABC6C
	mov r0, sp
	adds r0, #0x4a
	ldrb r1, [r0]
	movs r0, #0xe
	ands r0, r1
	cmp r0, #8
	bne .L080ABC6C
	add r4, sp, #0x4c
	adds r0, r5, #0
	adds r1, r4, #0
	bl LoadSavedWMStuff
	adds r0, r4, #0
	bl func_080BD224
	adds r2, r0, #0
.L080ABC6C:
	mov r0, sp
	movs r4, #0xe
	ldrsb r4, [r0, r4]
	movs r5, #0
	strb r2, [r0, #0xe]
	bl func_08089768
	adds r1, r7, #0
	adds r1, #0x37
	adds r1, r1, r6
	strb r0, [r1]
	mov r0, sp
	strb r4, [r0, #0xe]
	lsls r1, r6, #2
	adds r0, r7, #0
	adds r0, #0x48
	adds r0, r0, r1
	ldr r1, [sp]
	str r1, [r0]
	adds r0, r7, #0
	adds r0, #0x3a
	adds r4, r0, r6
	strb r5, [r4]
	adds r0, r6, #0
	bl func_080A52BC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080ABCAE
	ldrb r0, [r4]
	movs r1, #1
	orrs r0, r1
	strb r0, [r4]
.L080ABCAE:
	adds r0, r6, #0
	bl LoadSavedEid8A
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080ABCC2
	ldrb r0, [r4]
	movs r1, #2
	orrs r0, r1
	strb r0, [r4]
.L080ABCC2:
	mov r0, sp
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080ABCD6
	ldrb r0, [r4]
	movs r1, #4
	orrs r0, r1
	strb r0, [r4]
.L080ABCD6:
	ldr r0, .L080ABCF8  @ gUnknown_02000940
	adds r0, r6, r0
	mov r1, sp
	ldrb r1, [r1, #0x14]
	strb r1, [r0]
	ldr r0, .L080ABCFC  @ gUnknown_02000944
	adds r0, r6, r0
	mov r1, sp
	ldrb r1, [r1, #0x1b]
	strb r1, [r0]
	lsls r1, r6, #3
	ldr r0, .L080ABD00  @ gUnknown_02000948
	adds r1, r1, r0
	add r0, sp, #0x40
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	b .L080ABD7E
	.align 2, 0
.L080ABCF8: .4byte gUnknown_02000940
.L080ABCFC: .4byte gUnknown_02000944
.L080ABD00: .4byte gUnknown_02000948
.L080ABD04:
	adds r0, r7, #0
	adds r0, #0x37
	adds r0, r0, r6
	movs r1, #0xff
	strb r1, [r0]
	adds r0, r7, #0
	adds r0, #0x3a
	adds r0, r0, r6
	strb r2, [r0]
	lsls r1, r6, #2
	adds r0, r7, #0
	adds r0, #0x48
	adds r0, r0, r1
	str r2, [r0]
	ldr r0, .L080ABD3C  @ gUnknown_02000940
	adds r0, r6, r0
	strb r2, [r0]
	ldr r0, .L080ABD40  @ gUnknown_02000944
	adds r0, r6, r0
	strb r2, [r0]
	lsls r0, r6, #3
	ldr r1, .L080ABD44  @ gUnknown_02000948
	adds r0, r0, r1
	movs r1, #0
	movs r2, #8
	bl memset
	b .L080ABD7E
	.align 2, 0
.L080ABD3C: .4byte gUnknown_02000940
.L080ABD40: .4byte gUnknown_02000944
.L080ABD44: .4byte gUnknown_02000948
.L080ABD48:
	adds r4, r7, #0
	adds r4, #0x44
	ldrh r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne .L080ABD7E
	movs r0, #3
	bl func_080A5DA8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080ABD7A
	movs r0, #3
	mov r1, sp
	bl LoadSuspendedChapterState
	mov r0, sp
	ldrb r0, [r0, #0xc]
	adds r1, r7, #0
	adds r1, #0x3f
	strb r0, [r1]
	ldr r0, [sp]
	str r0, [r7, #0x54]
	b .L080ABD7E
.L080ABD7A:
	movs r0, #0xf0
	strh r0, [r4]
.L080ABD7E:
	add sp, #0x120
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ABC14

	THUMB_FUNC_START func_080ABD88
func_080ABD88: @ 0x080ABD88
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	movs r6, #0
	movs r7, #0x40
.L080ABD98:
	ldr r0, .L080ABDE0  @ gUnknown_02000940
	adds r0, r6, r0
	ldrb r1, [r0]
	adds r0, r7, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	negs r0, r0
	asrs r5, r0, #0x1f
	movs r0, #4
	ands r5, r0
	ldr r1, .L080ABDE4  @ gUnknown_02000948
	lsls r0, r6, #3
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	lsls r0, r0, #0x1a
	cmp r0, #0
	blt .L080ABDEC
	ldr r0, .L080ABDE8  @ gUnknown_02000944
	adds r0, r6, r0
	ldrb r1, [r0]
	cmp r1, #1
	bne .L080ABDCA
	movs r0, #0x10
	orrs r5, r0
.L080ABDCA:
	cmp r1, #2
	bne .L080ABDD6
	movs r0, #0x20
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
.L080ABDD6:
	cmp r1, #3
	bne .L080ABDFE
.L080ABDDA:
	orrs r5, r7
	b .L080ABDFE
	.align 2, 0
.L080ABDE0: .4byte gUnknown_02000940
.L080ABDE4: .4byte gUnknown_02000948
.L080ABDE8: .4byte gUnknown_02000944
.L080ABDEC:
	ldr r0, .L080ABE38  @ gUnknown_02000944
	adds r0, r6, r0
	ldrb r0, [r0]
	cmp r0, #3
	beq .L080ABDDA
	movs r0, #0x20
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
.L080ABDFE:
	cmp r6, r8
	beq .L080ABE0A
	movs r0, #2
	orrs r5, r0
	lsls r0, r5, #0x18
	lsrs r5, r0, #0x18
.L080ABE0A:
	movs r1, #1
	adds r0, r5, #0
	orrs r0, r1
	lsls r4, r6, #1
	adds r1, r4, #0
	adds r1, #0x1a
	bl func_080895B4
	adds r4, #0x1b
	adds r0, r5, #0
	adds r1, r4, #0
	bl func_080895B4
	adds r6, #1
	cmp r6, #2
	ble .L080ABD98
	bl EnablePalSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ABE38: .4byte gUnknown_02000944

	THUMB_FUNC_END func_080ABD88

	THUMB_FUNC_START func_080ABE3C
func_080ABE3C: @ 0x080ABE3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	str r1, [sp]
	asrs r5, r5, #1
	movs r0, #0x1f
	ands r5, r0
	cmp r5, #0x10
	ble .L080ABE5E
	movs r0, #0xf
	ands r0, r5
	movs r1, #0x10
	subs r5, r1, r0
.L080ABE5E:
	movs r2, #0
.L080ABE60:
	ldr r1, .L080ABE90  @ gUnknown_02000940
	adds r0, r2, r1
	ldrb r1, [r0]
	movs r0, #0x40
	ands r0, r1
	adds r1, r2, #1
	str r1, [sp, #4]
	cmp r0, #0
	beq .L080ABF22
	lsls r0, r2, #6
	movs r1, #0xa0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, .L080ABE94  @ gPal+0x212
	adds r0, r0, r1
	mov r8, r0
	ldr r0, [sp]
	cmp r2, r0
	bne .L080ABEA0
	ldr r1, .L080ABE98  @ gUnknown_08A07AEA
	mov ip, r1
	ldr r6, .L080ABE9C  @ gUnknown_08A07BEA
	b .L080ABEA6
	.align 2, 0
.L080ABE90: .4byte gUnknown_02000940
.L080ABE94: .4byte gPal+0x212
.L080ABE98: .4byte gUnknown_08A07AEA
.L080ABE9C: .4byte gUnknown_08A07BEA
.L080ABEA0:
	ldr r0, .L080ABF3C  @ gUnknown_08A07B0A
	mov ip, r0
	ldr r6, .L080ABF40  @ gUnknown_08A07C0A
.L080ABEA6:
	adds r2, #1
	str r2, [sp, #4]
	movs r0, #0x10
	subs r7, r0, r5
	movs r1, #0xf8
	lsls r1, r1, #7
	mov sl, r1
	movs r0, #6
	mov r9, r0
.L080ABEB8:
	mov r1, ip
	ldrh r4, [r1]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	ldrh r3, [r6]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r7, r0
	adds r2, r2, r0
	asrs r2, r2, #4
	movs r0, #0x1f
	ands r2, r0
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	mov r1, r8
	strh r2, [r1]
	movs r0, #2
	add r8, r0
	add ip, r0
	adds r6, #2
	movs r1, #1
	negs r1, r1
	add r9, r1
	mov r0, r9
	cmp r0, #0
	bge .L080ABEB8
.L080ABF22:
	ldr r2, [sp, #4]
	cmp r2, #2
	ble .L080ABE60
	bl EnablePalSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ABF3C: .4byte gUnknown_08A07B0A
.L080ABF40: .4byte gUnknown_08A07C0A

	THUMB_FUNC_END func_080ABE3C

	THUMB_FUNC_START func_080ABF44
func_080ABF44: @ 0x080ABF44
	push {r4, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r1, #0
	movs r2, #1
	cmp r2, r3
	bge .L080ABF6A
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r4, [r0]
.L080ABF5A:
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq .L080ABF64
	adds r1, #1
.L080ABF64:
	lsls r2, r2, #1
	cmp r2, r3
	blt .L080ABF5A
.L080ABF6A:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080ABF44

	THUMB_FUNC_START func_080ABF74
func_080ABF74: @ 0x080ABF74
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r1, #0x60
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080ABF94
	ldr r6, .L080ABF90  @ 0x06014000
	movs r2, #0xe
	movs r4, #2
	b .L080ABFA6
	.align 2, 0
.L080ABF90: .4byte 0x06014000
.L080ABF94:
	movs r0, #0x10
	ands r0, r3
	cmp r0, #0
	beq .L080ABFA2
	ldr r6, .L080ABFD4  @ 0x06014800
	movs r2, #0xe
	movs r4, #2
.L080ABFA2:
	cmp r4, #0
	ble .L080ABFC8
.L080ABFA6:
	lsls r7, r2, #3
	ldr r5, .L080ABFD8  @ 0x060121C0
	ldr r0, .L080ABFDC  @ 0x001FFFFF
	mov r8, r0
.L080ABFAE:
	adds r0, r6, #0
	adds r1, r5, #0
	mov r2, r8
	ands r2, r7
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r6, r0
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne .L080ABFAE
.L080ABFC8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ABFD4: .4byte 0x06014800
.L080ABFD8: .4byte 0x060121C0
.L080ABFDC: .4byte 0x001FFFFF

	THUMB_FUNC_END func_080ABF74

	THUMB_FUNC_START func_080ABFE0
func_080ABFE0: @ 0x080ABFE0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x38
	movs r5, #4
.L080ABFEA:
	adds r0, r4, #0
	bl ClearText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L080ABFEA
	adds r4, r6, #0
	adds r4, #0x38
	ldr r1, .L080AC020  @ gUnknown_08A20A08
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetMsg
.L080AC00E:
	adds r1, r0, #0
.L080AC010:
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080AC02C
	cmp r0, #1
	bne .L080AC024
	adds r4, #8
	adds r1, #1
	b .L080AC010
	.align 2, 0
.L080AC020: .4byte gUnknown_08A20A08
.L080AC024:
	adds r0, r4, #0
	bl Text_DrawCharacter
	b .L080AC00E
.L080AC02C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ABFE0

	THUMB_FUNC_START func_080AC034
func_080AC034: @ 0x080AC034
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r4, .L080AC070  @ gBg0Tm+0x1CE
	adds r0, r4, #0
	movs r1, #0xe
	movs r2, #0xa
	movs r3, #0
	bl TmFillRect_thm
	movs r6, #0xe0
	lsls r6, r6, #1
	adds r5, #0x38
	ldr r0, .L080AC074  @ 0xFFFFFE56
	adds r7, r4, r0
	movs r4, #4
.L080AC052:
	adds r1, r6, r7
	adds r0, r5, #0
	bl PutText
	adds r6, #0x80
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L080AC052
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC070: .4byte gBg0Tm+0x1CE
.L080AC074: .4byte 0xFFFFFE56

	THUMB_FUNC_END func_080AC034

	THUMB_FUNC_START func_080AC078
func_080AC078: @ 0x080AC078
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x58]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AC078

	THUMB_FUNC_START func_080AC084
func_080AC084: @ 0x080AC084
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	bl ResetTextFont
	bl LoadUiFrameGraphics
	bl ResetText
	adds r4, r7, #0
	adds r4, #0x38
	movs r5, #4
.L080AC09A:
	adds r0, r4, #0
	movs r1, #0xe
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L080AC09A
	movs r6, #0
	ldr r0, .L080AC178  @ gUnknown_08A25DCC
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	adds r2, r4, #0
	bl ApplyPaletteExt
	ldr r0, .L080AC17C  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080AC180  @ gUnknown_08A27F68
	movs r1, #0x90
	lsls r1, r1, #2
	adds r2, r4, #0
	bl ApplyPaletteExt
	ldr r0, .L080AC184  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080AC188  @ gUnknown_08A28A0C
	ldr r1, .L080AC18C  @ 0x06010800
	bl Decompress
	ldr r0, .L080AC190  @ gUnknown_08A29418
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0xa0
	lsls r2, r2, #1
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x58]
	adds r0, #0x29
	strb r6, [r0]
	ldr r0, .L080AC194  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r4, .L080AC198  @ gBg1Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, .L080AC19C  @ gUnknown_08A29558
	ldr r5, .L080AC1A0  @ gBuf
	adds r1, r5, #0
	bl Decompress
	movs r0, #0xd1
	lsls r0, r0, #1
	adds r4, r4, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	adds r1, r5, #0
	bl TmApplyTsa_thm
	adds r0, r7, #0
	bl func_080ABFE0
	adds r0, r7, #0
	bl func_080AC034
	movs r0, #3
	bl EnableBgSync
	adds r0, r7, #0
	bl func_080AC698
	str r0, [r7, #0x34]
	adds r1, r7, #0
	adds r1, #0x30
	strb r6, [r1]
	ldr r0, [r7, #0x34]
	adds r0, #0x2b
	strb r6, [r0]
	ldr r2, [r7, #0x34]
	ldr r3, .L080AC1A4  @ gUnknown_08A209FC
	ldrb r0, [r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r2, #0x2c]
	ldr r2, [r7, #0x34]
	ldrb r0, [r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrb r0, [r0, #1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r2, #0x2e]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC178: .4byte gUnknown_08A25DCC
.L080AC17C: .4byte gUnknown_08A268D8
.L080AC180: .4byte gUnknown_08A27F68
.L080AC184: .4byte gUnknown_08A295B4
.L080AC188: .4byte gUnknown_08A28A0C
.L080AC18C: .4byte 0x06010800
.L080AC190: .4byte gUnknown_08A29418
.L080AC194: .4byte gBg0Tm
.L080AC198: .4byte gBg1Tm
.L080AC19C: .4byte gUnknown_08A29558
.L080AC1A0: .4byte gBuf
.L080AC1A4: .4byte gUnknown_08A209FC

	THUMB_FUNC_END func_080AC084

	THUMB_FUNC_START func_080AC1A8
func_080AC1A8: @ 0x080AC1A8
	push {lr}
	adds r2, r0, #0
	adds r2, #0x30
	movs r1, #0
	strb r1, [r2]
	str r1, [r0, #0x2c]
	bl func_080AC084
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AC1A8

	THUMB_FUNC_START func_080AC1BC
func_080AC1BC: @ 0x080AC1BC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r4, r0, #1
	str r4, [r5, #0x2c]
	ldr r3, .L080AC228  @ gDispIo
	ldrb r0, [r3, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge .L080AC1F2
	adds r0, #0xff
.L080AC1F2:
	asrs r0, r0, #8
	movs r1, #0x50
	subs r1, r1, r0
	adds r2, r3, #0
	adds r2, #0x2d
	movs r0, #0
	strb r0, [r2]
	movs r0, #0x50
	subs r0, r0, r1
	adds r2, #4
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	adds r1, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	cmp r4, #0x10
	bne .L080AC220
	adds r0, r5, #0
	bl Proc_Break
.L080AC220:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC228: .4byte gDispIo

	THUMB_FUNC_END func_080AC1BC

	THUMB_FUNC_START func_080AC22C
func_080AC22C: @ 0x080AC22C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x2c]
	adds r4, r0, #1
	str r4, [r5, #0x2c]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #4
	muls r0, r1, r0
	cmp r0, #0
	bge .L080AC248
	adds r0, #0xff
.L080AC248:
	asrs r0, r0, #8
	movs r2, #0x50
	subs r2, r2, r0
	ldr r3, .L080AC284  @ gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x60
	negs r1, r1
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
	cmp r4, #0x10
	bne .L080AC27C
	adds r0, r5, #0
	bl Proc_Break
.L080AC27C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC284: .4byte gDispIo

	THUMB_FUNC_END func_080AC22C

	THUMB_FUNC_START func_080AC288
func_080AC288: @ 0x080AC288
	push {r4, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, .L080AC2AC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080AC2B8
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080AC2B0
	movs r0, #2
	b .L080AC2B2
	.align 2, 0
.L080AC2AC: .4byte gKeySt
.L080AC2B0:
	subs r0, #1
.L080AC2B2:
	strb r0, [r1]
	movs r2, #1
	b .L080AC2D8
.L080AC2B8:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080AC2D4
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #2
	bne .L080AC2CE
	strb r2, [r1]
	b .L080AC2D2
.L080AC2CE:
	adds r0, #1
	strb r0, [r1]
.L080AC2D2:
	movs r2, #1
.L080AC2D4:
	cmp r2, #0
	beq .L080AC324
.L080AC2D8:
	ldr r0, .L080AC31C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AC2EA
	movs r0, #0x66
	bl m4aSongNumStart
.L080AC2EA:
	ldr r0, [r4, #0x34]
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	adds r0, #0x2b
	strb r1, [r0]
	ldr r0, [r4, #0x34]
	ldr r1, .L080AC320  @ gUnknown_08A209FC
	ldrb r2, [r2]
	lsls r2, r2, #2
	adds r2, r2, r1
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldrb r2, [r2, #1]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl func_080AC680
	adds r0, r4, #0
	bl func_080ABFE0
	adds r0, r4, #0
	bl func_080AC034
	b .L080AC3CC
	.align 2, 0
.L080AC31C: .4byte gPlaySt
.L080AC320: .4byte gUnknown_08A209FC
.L080AC324:
	ldr r0, [r4, #0x34]
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne .L080AC3CC
	ldr r0, .L080AC36C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq .L080AC398
	str r2, [r4, #0x2c]
	ldr r0, .L080AC370  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AC358
	movs r0, #0x6a
	bl m4aSongNumStart
.L080AC358:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080AC37E
	cmp r0, #1
	bgt .L080AC374
	cmp r0, #0
	beq .L080AC37A
	b .L080AC390
	.align 2, 0
.L080AC36C: .4byte gKeySt
.L080AC370: .4byte gPlaySt
.L080AC374:
	cmp r0, #2
	beq .L080AC388
	b .L080AC390
.L080AC37A:
	movs r0, #0
	b .L080AC380
.L080AC37E:
	movs r0, #1
.L080AC380:
	movs r1, #0
	bl savemenu_SetDifficultyChoice
	b .L080AC390
.L080AC388:
	movs r0, #2
	movs r1, #0
	bl savemenu_SetDifficultyChoice
.L080AC390:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
.L080AC398:
	ldr r0, .L080AC3D4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AC3CC
	movs r0, #0
	str r0, [r4, #0x2c]
	ldr r0, .L080AC3D8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AC3BC
	movs r0, #0x6b
	bl m4aSongNumStart
.L080AC3BC:
	movs r0, #3
	movs r1, #0
	bl savemenu_SetDifficultyChoice
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
.L080AC3CC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC3D4: .4byte gKeySt
.L080AC3D8: .4byte gPlaySt

	THUMB_FUNC_END func_080AC288

	THUMB_FUNC_START nullsub_64
nullsub_64: @ 0x080AC3DC
	bx lr

	THUMB_FUNC_END nullsub_64

	THUMB_FUNC_START StartNewGameDifficultySelect
StartNewGameDifficultySelect: @ 0x080AC3E0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AC3F0  @ gUnknown_08A20A10
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080AC3F0: .4byte gUnknown_08A20A10

	THUMB_FUNC_END StartNewGameDifficultySelect

	THUMB_FUNC_START func_080AC3F4
func_080AC3F4: @ 0x080AC3F4
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x29
	ldrb r1, [r3]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	strb r0, [r3]
	adds r1, r2, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	strh r0, [r2, #0x2e]
	strh r0, [r2, #0x2c]
	bx lr

	THUMB_FUNC_END func_080AC3F4

	THUMB_FUNC_START func_080AC418
func_080AC418: @ 0x080AC418
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AC452
	ldrh r0, [r6, #0x34]
	ldrh r2, [r6, #0x30]
	subs r0, r0, r2
	movs r3, #0
	strh r0, [r6, #0x38]
	ldrh r0, [r6, #0x36]
	ldrh r1, [r6, #0x32]
	subs r0, r0, r1
	strh r0, [r6, #0x3a]
	strh r2, [r6, #0x2c]
	strh r1, [r6, #0x2e]
	strh r3, [r6, #0x3c]
	ldrb r1, [r4]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4]
.L080AC452:
	ldrb r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AC4B8
	ldrh r0, [r6, #0x3c]
	adds r0, #1
	strh r0, [r6, #0x3c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	bgt .L080AC4A6
	movs r1, #0x3c
	ldrsh r0, [r6, r1]
	movs r1, #4
	movs r2, #0
	bl Spline_800B84C
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #5
	movs r3, #0x38
	ldrsh r0, [r6, r3]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r5, #0
	bl DivArm
	ldrh r1, [r6, #0x30]
	adds r1, r1, r0
	strh r1, [r6, #0x2c]
	movs r1, #0x3a
	ldrsh r0, [r6, r1]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r5, #0
	bl DivArm
	ldrh r1, [r6, #0x32]
	adds r1, r1, r0
	strh r1, [r6, #0x2e]
	b .L080AC4B8
.L080AC4A6:
	ldrh r0, [r6, #0x34]
	strh r0, [r6, #0x2c]
	ldrh r0, [r6, #0x36]
	strh r0, [r6, #0x2e]
	ldrb r1, [r4]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
.L080AC4B8:
	movs r3, #0x2c
	ldrsh r1, [r6, r3]
	ldr r3, .L080AC4F0  @ gUnknown_08A20B14
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsrs r0, r0, #3
	movs r2, #7
	ands r0, r2
	adds r0, r0, r3
	movs r3, #0x2e
	ldrsh r2, [r6, r3]
	ldrb r0, [r0]
	adds r2, r2, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, .L080AC4F4  @ gUnknown_08A20A98
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC4F0: .4byte gUnknown_08A20B14
.L080AC4F4: .4byte gUnknown_08A20A98

	THUMB_FUNC_END func_080AC418

	THUMB_FUNC_START func_080AC4F8
func_080AC4F8: @ 0x080AC4F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	movs r2, #0
	ldr r7, .L080AC530  @ gPal
	ldr r0, .L080AC534  @ gUnknown_08A28088
	mov r8, r0
	lsls r0, r3, #6
	ldr r1, .L080AC538  @ 0x000002A2
	adds r0, r0, r1
	adds r6, r0, r7
	lsls r1, r3, #6
	ldr r0, .L080AC53C  @ 0x000002C2
	adds r4, r7, r0
	ldr r0, .L080AC540  @ gUnknown_08A2949A
	adds r5, r1, r0
.L080AC522:
	cmp r2, r3
	bne .L080AC544
	ldrh r0, [r5]
	strh r0, [r6]
	lsls r1, r2, #5
	b .L080AC550
	.align 2, 0
.L080AC530: .4byte gPal
.L080AC534: .4byte gUnknown_08A28088
.L080AC538: .4byte 0x000002A2
.L080AC53C: .4byte 0x000002C2
.L080AC540: .4byte gUnknown_08A2949A
.L080AC544:
	lsls r0, r2, #6
	ldr r1, .L080AC580  @ gUnknown_08A294BA
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r4]
	lsls r1, r3, #5
.L080AC550:
	adds r4, #0x40
	adds r2, #1
	cmp r2, #2
	ble .L080AC522
	movs r0, #0x3f
	mov r2, ip
	ands r0, r2
	lsrs r0, r0, #2
	ldr r2, .L080AC584  @ 0x00000151
	adds r1, r1, r2
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r0, r0, #1
	add r0, r8
	ldrh r0, [r0]
	strh r0, [r1]
	bl EnablePalSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC580: .4byte gUnknown_08A294BA
.L080AC584: .4byte 0x00000151

	THUMB_FUNC_END func_080AC4F8

	THUMB_FUNC_START func_080AC588
func_080AC588: @ 0x080AC588
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r3, .L080AC600  @ gUnknown_08A20AA0
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #4
	bl PutSpriteExt
	ldr r3, .L080AC604  @ gUnknown_08A20AAE
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #4
	bl PutSpriteExt
	movs r5, #0
	movs r0, #0x2b
	adds r0, r0, r6
	mov sl, r0
	movs r1, #6
	mov r9, r1
	movs r2, #5
	mov r8, r2
	movs r7, #0xc0
	lsls r7, r7, #0xe
.L080AC5D8:
	lsrs r4, r7, #0x10
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r5, r0
	bne .L080AC60C
	lsls r4, r4, #0x10
	asrs r2, r4, #0x10
	movs r0, #0xf
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	movs r1, #8
	ldr r3, .L080AC608  @ gUnknown_08A20AC2
	bl PutSpriteExt
	b .L080AC624
	.align 2, 0
.L080AC600: .4byte gUnknown_08A20AA0
.L080AC604: .4byte gUnknown_08A20AAE
.L080AC608: .4byte gUnknown_08A20AC2
.L080AC60C:
	lsls r4, r4, #0x10
	asrs r2, r4, #0x10
	movs r0, #0xf
	mov r1, r9
	ands r0, r1
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	movs r1, #8
	ldr r3, .L080AC678  @ gUnknown_08A20AC2
	bl PutSpriteExt
.L080AC624:
	asrs r2, r4, #0x10
	ldr r1, .L080AC67C  @ gUnknown_08A20B08
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r4, #0x80
	lsls r4, r4, #0xc
	asrs r1, r4, #0x10
	bl PutSpriteExt
	movs r0, #2
	add r9, r0
	add r8, r0
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r7, r7, r1
	adds r5, #1
	cmp r5, #2
	ble .L080AC5D8
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	mov r2, sl
	ldrb r1, [r2]
	bl func_080AC4F8
	adds r0, r6, #0
	bl func_080AC418
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC678: .4byte gUnknown_08A20AC2
.L080AC67C: .4byte gUnknown_08A20B08

	THUMB_FUNC_END func_080AC588

	THUMB_FUNC_START func_080AC680
func_080AC680: @ 0x080AC680
	ldrh r3, [r0, #0x2c]
	strh r3, [r0, #0x30]
	ldrh r3, [r0, #0x2e]
	strh r3, [r0, #0x32]
	strh r1, [r0, #0x34]
	strh r2, [r0, #0x36]
	adds r0, #0x29
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AC680

	THUMB_FUNC_START func_080AC698
func_080AC698: @ 0x080AC698
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AC6A8  @ gUnknown_08A20B1C
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080AC6A8: .4byte gUnknown_08A20B1C

	THUMB_FUNC_END func_080AC698

	THUMB_FUNC_START func_080AC6AC
func_080AC6AC: @ 0x080AC6AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp]
	str r1, [sp, #4]
	mov r9, r2
	mov sl, r3
	ldr r3, [sp, #0x40]
	ldr r0, .L080AC780  @ 0xFFFFFC00
	adds r0, r0, r3
	mov r8, r0
	mov r1, r8
	muls r1, r0, r1
	lsls r5, r3, #1
	movs r6, #0x80
	lsls r6, r6, #3
	adds r0, r5, r6
	muls r0, r1, r0
	asrs r1, r0, #0x1f
	adds r4, r3, #0
	muls r4, r3, r4
	movs r2, #0xc0
	lsls r2, r2, #4
	subs r2, r2, r5
	muls r4, r2, r4
	asrs r5, r4, #0x1f
	subs r6, r6, r3
	adds r2, r6, #0
	muls r2, r6, r2
	muls r2, r3, r2
	str r2, [sp, #0x18]
	asrs r2, r2, #0x1f
	str r2, [sp, #0x1c]
	mov r2, r8
	muls r2, r3, r2
	muls r2, r3, r2
	str r2, [sp, #8]
	asrs r2, r2, #0x1f
	str r2, [sp, #0xc]
	ldr r2, [sp, #4]
	asrs r3, r2, #0x1f
	bl __muldi3
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	mov r2, r9
	asrs r3, r2, #0x1f
	adds r1, r5, #0
	adds r0, r4, #0
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, r9
	ldr r6, [sp]
	subs r3, r3, r6
	mov r9, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r0, r9
	asrs r3, r0, #0x1f
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sl
	ldr r6, [sp, #4]
	subs r3, r3, r6
	mov sl, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r0, sl
	asrs r3, r0, #0x1f
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #2
	lsrs r2, r0, #0x1e
	adds r0, r3, #0
	orrs r0, r2
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080AC780: .4byte 0xFFFFFC00

	THUMB_FUNC_END func_080AC6AC

	THUMB_FUNC_START func_080AC784
func_080AC784: @ 0x080AC784
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	mov sl, r0
	mov r9, r1
	adds r6, r2, #0
	mov r8, r3
	ldr r2, [sp, #0x38]
	lsls r3, r2, #1
	adds r3, r3, r2
	lsls r0, r3, #1
	adds r4, r2, #0
	muls r4, r0, r4
	lsls r5, r3, #0xb
	subs r0, r4, r5
	asrs r1, r0, #0x1f
	subs r4, r5, r4
	str r4, [sp]
	asrs r4, r4, #0x1f
	str r4, [sp, #4]
	muls r3, r2, r3
	lsls r4, r2, #0xc
	subs r4, r3, r4
	movs r5, #0x80
	lsls r5, r5, #0xd
	adds r4, r4, r5
	asrs r5, r4, #0x1f
	lsls r2, r2, #0xb
	subs r2, r3, r2
	str r2, [sp, #8]
	asrs r2, r2, #0x1f
	str r2, [sp, #0xc]
	mov r2, r9
	asrs r3, r2, #0x1f
	bl __muldi3
	str r0, [sp, #0x10]
	str r1, [sp, #0x14]
	adds r2, r6, #0
	asrs r3, r6, #0x1f
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, sl
	subs r6, r6, r3
	asrs r0, r6, #1
	adds r2, r0, #0
	asrs r3, r6, #0x1f
	adds r1, r5, #0
	adds r0, r4, #0
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r2, r2, r0
	adcs r3, r1
	str r2, [sp, #0x10]
	str r3, [sp, #0x14]
	mov r3, r8
	mov r5, r9
	subs r3, r3, r5
	mov r8, r3
	asrs r0, r3, #1
	adds r2, r0, #0
	mov r7, r8
	asrs r3, r7, #0x1f
	ldr r0, [sp, #8]
	ldr r1, [sp, #0xc]
	bl __muldi3
	ldr r2, [sp, #0x10]
	ldr r3, [sp, #0x14]
	adds r0, r0, r2
	adcs r1, r3
	lsls r3, r1, #0xc
	lsrs r2, r0, #0x14
	adds r0, r3, #0
	orrs r0, r2
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AC784

	THUMB_FUNC_START func_080AC844
func_080AC844: @ 0x080AC844
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x24]
	mov r8, r0
	ldr r7, [sp, #0x28]
	ldr r1, [sp, #0x2c]
	mov r9, r1
	movs r0, #3
	ands r0, r3
	bl GetBgTilemap
	str r0, [sp]
	lsls r4, r4, #5
	adds r4, r4, r5
	lsls r4, r4, #1
	add sl, r4
	mov r2, r8
	cmp r2, #0
	bge .L080AC886
	add r9, r8
	lsls r0, r2, #1
	mov r1, sl
	subs r1, r1, r0
	mov sl, r1
	movs r2, #0
	mov r8, r2
.L080AC886:
	cmp r7, #0
	bge .L080AC89A
	ldr r0, [sp, #0x30]
	adds r0, r0, r7
	str r0, [sp, #0x30]
	lsls r0, r7, #6
	mov r1, sl
	subs r1, r1, r0
	mov sl, r1
	movs r7, #0
.L080AC89A:
	movs r1, #0
	cmp r7, #0x1f
	bgt .L080AC8F4
	ldr r2, [sp, #0x30]
	cmp r1, r2
	bge .L080AC8F4
.L080AC8A6:
	movs r5, #0
	adds r4, r1, #1
	mov r0, r8
	cmp r0, #0x1f
	bgt .L080AC8E6
	cmp r5, r9
	bge .L080AC8E6
	adds r0, r7, r1
	movs r2, #0x1f
	mov ip, r2
	ands r0, r2
	lsls r6, r0, #5
	mov r2, r8
	lsls r0, r1, #6
	mov r1, sl
	adds r3, r0, r1
.L080AC8C6:
	adds r0, r2, #0
	mov r1, ip
	ands r0, r1
	adds r0, r6, r0
	lsls r0, r0, #1
	ldr r1, [sp]
	adds r0, r0, r1
	ldrh r1, [r3]
	strh r1, [r0]
	adds r2, #1
	adds r3, #2
	adds r5, #1
	cmp r2, #0x1f
	bgt .L080AC8E6
	cmp r5, r9
	blt .L080AC8C6
.L080AC8E6:
	adds r1, r4, #0
	adds r0, r7, r4
	cmp r0, #0x1f
	bgt .L080AC8F4
	ldr r2, [sp, #0x30]
	cmp r4, r2
	blt .L080AC8A6
.L080AC8F4:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AC844

	THUMB_FUNC_START func_080AC904
func_080AC904: @ 0x080AC904
	push {r4, r5, r6, lr}
	movs r2, #0
	adds r4, r0, #0
	adds r4, #0x3c
	movs r3, #0
	movs r6, #0xf0
	adds r1, r0, #0
	adds r1, #0x2c
	movs r5, #0xa0
.L080AC916:
	adds r0, r4, r2
	strb r3, [r0]
	strb r3, [r1]
	strb r3, [r1, #1]
	strb r6, [r1, #2]
	strb r5, [r1, #3]
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble .L080AC916
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AC904

	THUMB_FUNC_START func_080AC930
func_080AC930: @ 0x080AC930
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r7, #0
	adds r4, r6, #0
	adds r4, #0x2c
.L080AC93C:
	adds r0, r6, #0
	adds r0, #0x3c
	adds r0, r0, r7
	ldrb r5, [r0]
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq .L080AC9AA
	lsls r0, r7, #1
	adds r1, r6, #0
	adds r1, #0x40
	adds r1, r1, r0
	movs r2, #0
	ldrsh r3, [r1, r2]
	adds r1, r6, #0
	adds r1, #0x48
	adds r1, r1, r0
	movs r0, #0
	ldrsh r2, [r1, r0]
	ldrb r0, [r4]
	cmp r3, r0
	blt .L080AC9AA
	ldrb r0, [r4, #2]
	cmp r3, r0
	bge .L080AC9AA
	ldrb r0, [r4, #1]
	cmp r2, r0
	blt .L080AC9AA
	ldrb r0, [r4, #3]
	cmp r2, r0
	bge .L080AC9AA
	movs r0, #2
	ands r0, r5
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AC99C
	adds r1, r3, #0
	subs r1, #0xc
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	ldr r3, .L080AC998  @ gUnknown_08A20B44
	bl PutSprite
	b .L080AC9AA
	.align 2, 0
.L080AC998: .4byte gUnknown_08A20B44
.L080AC99C:
	adds r1, r3, #0
	subs r1, #0xc
	str r0, [sp]
	movs r0, #3
	ldr r3, .L080AC9BC  @ gUnknown_08A20B3C
	bl PutSprite
.L080AC9AA:
	adds r4, #4
	adds r7, #1
	cmp r7, #3
	ble .L080AC93C
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AC9BC: .4byte gUnknown_08A20B3C

	THUMB_FUNC_END func_080AC930

	THUMB_FUNC_START func_080AC9C0
func_080AC9C0: @ 0x080AC9C0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AC9D0  @ gUnknown_08A20B4C
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080AC9D0: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080AC9C0

	THUMB_FUNC_START func_080AC9D4
func_080AC9D4: @ 0x080AC9D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r7, r1, #0
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	ldr r0, .L080ACA38  @ gUnknown_08A20B4C
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L080ACA2E
	adds r1, r4, #0
	adds r1, #0x3c
	adds r1, r1, r5
	movs r3, #1
	movs r0, #1
	strb r0, [r1]
	lsls r2, r5, #1
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r2
	strh r7, [r0]
	adds r0, r4, #0
	adds r0, #0x48
	adds r0, r0, r2
	mov r2, r8
	strh r2, [r0]
	adds r0, r6, #0
	orrs r0, r3
	strb r0, [r1]
	movs r0, #2
	ands r0, r6
	cmp r0, #0
	beq .L080ACA2E
	ldr r0, .L080ACA3C  @ gUnknown_0859EDB0
	ldr r1, .L080ACA40  @ 0x060100C0
	bl Decompress
	ldr r0, .L080ACA44  @ gUnknown_0859EDEC
	ldr r1, .L080ACA48  @ 0x060104C0
	bl Decompress
.L080ACA2E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACA38: .4byte gUnknown_08A20B4C
.L080ACA3C: .4byte gUnknown_0859EDB0
.L080ACA40: .4byte 0x060100C0
.L080ACA44: .4byte gUnknown_0859EDEC
.L080ACA48: .4byte 0x060104C0

	THUMB_FUNC_END func_080AC9D4

	THUMB_FUNC_START func_080ACA4C
func_080ACA4C: @ 0x080ACA4C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, .L080ACA80  @ gUnknown_08A20B4C
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080ACA7A
	lsls r0, r4, #2
	adds r1, r1, r0
	adds r0, r1, #0
	adds r0, #0x2c
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r1, #0x2f
	ldr r0, [sp, #0x14]
	strb r0, [r1]
.L080ACA7A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACA80: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080ACA4C

	THUMB_FUNC_START func_080ACA84
func_080ACA84: @ 0x080ACA84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080ACAA0  @ gUnknown_08A20B4C
	bl FindProc
	cmp r0, #0
	beq .L080ACA9A
	adds r0, #0x3c
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
.L080ACA9A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACAA0: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080ACA84

	THUMB_FUNC_START func_080ACAA4
func_080ACAA4: @ 0x080ACAA4
	push {lr}
	ldr r0, .L080ACAC4  @ gUnknown_08A20B4C
	bl FindProc
	cmp r0, #0
	beq .L080ACAC0
	adds r1, r0, #0
	adds r1, #0x3c
	movs r2, #0
	adds r0, #0x43
.L080ACAB8:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge .L080ACAB8
.L080ACAC0:
	pop {r0}
	bx r0
	.align 2, 0
.L080ACAC4: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080ACAA4

	THUMB_FUNC_START func_080ACAC8
func_080ACAC8: @ 0x080ACAC8
	push {lr}
	ldr r0, .L080ACAE0  @ gUnknown_08A20B4C
	bl FindProc
	cmp r0, #0
	beq .L080ACADA
	movs r1, #1
	bl Proc_Goto
.L080ACADA:
	pop {r0}
	bx r0
	.align 2, 0
.L080ACAE0: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080ACAC8

	THUMB_FUNC_START func_080ACAE4
func_080ACAE4: @ 0x080ACAE4
	push {lr}
	ldr r0, .L080ACAFC  @ gUnknown_08A20B4C
	bl FindProc
	cmp r0, #0
	beq .L080ACAF6
	movs r1, #0
	bl Proc_Goto
.L080ACAF6:
	pop {r0}
	bx r0
	.align 2, 0
.L080ACAFC: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080ACAE4

	THUMB_FUNC_START func_080ACB00
func_080ACB00: @ 0x080ACB00
	push {lr}
	ldr r0, .L080ACB10  @ gUnknown_08A20B4C
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080ACB10: .4byte gUnknown_08A20B4C

	THUMB_FUNC_END func_080ACB00

	THUMB_FUNC_START func_080ACB14
func_080ACB14: @ 0x080ACB14
	movs r1, #0
	str r1, [r0, #0x2c]
	adds r2, r0, #0
	adds r2, #0x54
	strh r1, [r2]
	str r1, [r0, #0x4c]
	str r1, [r0, #0x44]
	str r1, [r0, #0x3c]
	str r1, [r0, #0x34]
	str r1, [r0, #0x50]
	str r1, [r0, #0x48]
	str r1, [r0, #0x40]
	str r1, [r0, #0x38]
	str r1, [r0, #0x30]
	bx lr

	THUMB_FUNC_END func_080ACB14

	THUMB_FUNC_START func_080ACB34
func_080ACB34: @ 0x080ACB34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r7, [r5, #0x34]
	ldr r0, [r5, #0x3c]
	mov r8, r0
	ldr r1, [r5, #0x38]
	mov r9, r1
	ldr r2, [r5, #0x40]
	mov sl, r2
	ldr r0, [r5, #0x44]
	adds r0, #1
	str r0, [r5, #0x44]
	ldr r0, [r5, #0x48]
	adds r0, #1
	str r0, [r5, #0x48]
	movs r6, #0
.L080ACB5E:
	lsls r3, r6, #2
	adds r0, r5, #0
	adds r0, #0x4c
	adds r2, r0, r3
	ldr r0, [r2]
	adds r4, r5, #0
	adds r4, #0x44
	cmp r0, #0
	beq .L080ACB7E
	adds r0, r4, r3
	ldr r1, [r0]
	adds r1, #3
	str r1, [r0]
	ldr r0, [r2]
	adds r0, #1
	str r0, [r2]
.L080ACB7E:
	adds r1, r4, r3
	ldr r0, [r1]
	asrs r0, r0, #3
	cmp r0, #5
	ble .L080ACB8C
	movs r0, #0
	str r0, [r1]
.L080ACB8C:
	adds r6, #1
	cmp r6, #1
	ble .L080ACB5E
	ldr r3, [r5, #0x2c]
	cmp r3, #0
	bne .L080ACC20
	ldr r2, [r5, #0x4c]
	cmp r2, #0
	beq .L080ACBAC
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x34]
	adds r7, r0, r1
	cmp r2, #4
	bne .L080ACBAC
	str r3, [r5, #0x4c]
.L080ACBAC:
	ldr r2, [r5, #0x50]
	cmp r2, #0
	beq .L080ACBC4
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x38]
	subs r0, r0, r1
	mov r9, r0
	cmp r2, #4
	bne .L080ACBC4
	movs r0, #0
	str r0, [r5, #0x50]
.L080ACBC4:
	ldr r0, [r5, #0x30]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080ACBEE
	ldr r1, .L080ACCD4  @ 0x000001FF
	ands r1, r7
	movs r2, #0xff
	mov r0, r8
	ands r2, r0
	ldr r3, .L080ACCD8  @ gUnknown_08A20B7C
	adds r4, r5, #0
	adds r4, #0x54
	ldr r0, [r5, #0x44]
	asrs r0, r0, #3
	ldrh r4, [r4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
.L080ACBEE:
	ldr r0, [r5, #0x30]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq .L080ACC20
	ldr r1, .L080ACCD4  @ 0x000001FF
	mov r2, r9
	ands r1, r2
	movs r0, #0x80
	lsls r0, r0, #5
	adds r1, r1, r0
	movs r2, #0xff
	mov r0, sl
	ands r2, r0
	ldr r3, .L080ACCD8  @ gUnknown_08A20B7C
	adds r4, r5, #0
	adds r4, #0x54
	ldr r0, [r5, #0x48]
	asrs r0, r0, #3
	ldrh r4, [r4]
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
.L080ACC20:
	ldr r0, [r5, #0x2c]
	cmp r0, #1
	bne .L080ACCC2
	ldr r2, [r5, #0x4c]
	cmp r2, #0
	beq .L080ACC3E
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x3c]
	adds r0, r0, r1
	mov r8, r0
	cmp r2, #4
	bne .L080ACC3E
	movs r0, #0
	str r0, [r5, #0x4c]
.L080ACC3E:
	ldr r2, [r5, #0x50]
	cmp r2, #0
	beq .L080ACC56
	asrs r2, r2, #3
	subs r1, r2, #4
	ldr r0, [r5, #0x40]
	subs r0, r0, r1
	mov sl, r0
	cmp r2, #4
	bne .L080ACC56
	movs r0, #0
	str r0, [r5, #0x50]
.L080ACC56:
	ldr r0, [r5, #0x30]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080ACC88
	ldr r0, .L080ACCD4  @ 0x000001FF
	ands r7, r0
	movs r0, #0xff
	mov r1, r8
	ands r1, r0
	mov r8, r1
	ldr r3, .L080ACCDC  @ gUnknown_08A20B8A
	adds r1, r5, #0
	adds r1, #0x54
	ldr r0, [r5, #0x44]
	asrs r0, r0, #3
	lsls r0, r0, #1
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r7, #0
	mov r2, r8
	bl PutSpriteExt
.L080ACC88:
	ldr r0, [r5, #0x30]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq .L080ACCC2
	ldr r0, .L080ACCD4  @ 0x000001FF
	mov r2, r9
	ands r2, r0
	mov r9, r2
	movs r1, #0x80
	lsls r1, r1, #6
	add r1, r9
	movs r0, #0xff
	mov r2, sl
	ands r2, r0
	mov sl, r2
	ldr r3, .L080ACCDC  @ gUnknown_08A20B8A
	adds r2, r5, #0
	adds r2, #0x54
	ldr r0, [r5, #0x48]
	asrs r0, r0, #3
	lsls r0, r0, #1
	ldrh r2, [r2]
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0xd
	mov r2, sl
	bl PutSpriteExt
.L080ACCC2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACCD4: .4byte 0x000001FF
.L080ACCD8: .4byte gUnknown_08A20B7C
.L080ACCDC: .4byte gUnknown_08A20B8A

	THUMB_FUNC_END func_080ACB34

	THUMB_FUNC_START func_080ACCE0
func_080ACCE0: @ 0x080ACCE0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080ACCF0  @ gUnknown_08A20B94
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080ACCF0: .4byte gUnknown_08A20B94

	THUMB_FUNC_END func_080ACCE0

	THUMB_FUNC_START func_080ACCF4
func_080ACCF4: @ 0x080ACCF4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	ldr r0, .L080ACD4C  @ gUnknown_08A20B94
	bl FindProc
	adds r5, r0, #0
	cmp r5, #0
	beq .L080ACD44
	ldr r0, .L080ACD50  @ gUnknown_08A1D79C
	adds r1, r7, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	cmp r6, #0
	bne .L080ACD24
	ldr r0, .L080ACD54  @ gUnknown_08A1C7D8
	ldr r2, .L080ACD58  @ 0x06010000
	adds r1, r4, r2
	bl Decompress
.L080ACD24:
	cmp r6, #1
	bne .L080ACD32
	ldr r0, .L080ACD5C  @ gUnknown_08A1C704
	ldr r2, .L080ACD58  @ 0x06010000
	adds r1, r4, r2
	bl Decompress
.L080ACD32:
	asrs r1, r4, #5
	movs r2, #0xf
	ands r2, r7
	lsls r2, r2, #0xc
	adds r1, r1, r2
	adds r2, r5, #0
	adds r2, #0x54
	strh r1, [r2]
	str r6, [r5, #0x2c]
.L080ACD44:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080ACD4C: .4byte gUnknown_08A20B94
.L080ACD50: .4byte gUnknown_08A1D79C
.L080ACD54: .4byte gUnknown_08A1C7D8
.L080ACD58: .4byte 0x06010000
.L080ACD5C: .4byte gUnknown_08A1C704

	THUMB_FUNC_END func_080ACCF4

	THUMB_FUNC_START func_080ACD60
func_080ACD60: @ 0x080ACD60
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080ACD78  @ gUnknown_08A20B94
	bl FindProc
	cmp r0, #0
	beq .L080ACD70
	str r4, [r0, #0x30]
.L080ACD70:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACD78: .4byte gUnknown_08A20B94

	THUMB_FUNC_END func_080ACD60

	THUMB_FUNC_START func_080ACD7C
func_080ACD7C: @ 0x080ACD7C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, .L080ACDA0  @ gUnknown_08A20B94
	bl FindProc
	cmp r0, #0
	beq .L080ACD98
	str r4, [r0, #0x34]
	str r5, [r0, #0x3c]
	str r6, [r0, #0x38]
	str r7, [r0, #0x40]
.L080ACD98:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACDA0: .4byte gUnknown_08A20B94

	THUMB_FUNC_END func_080ACD7C

	THUMB_FUNC_START func_080ACDA4
func_080ACDA4: @ 0x080ACDA4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080ACDD8  @ gUnknown_08A20B94
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080ACDD2
	cmp r4, #0
	bne .L080ACDBC
	movs r0, #1
	str r0, [r1, #0x4c]
.L080ACDBC:
	cmp r4, #1
	bne .L080ACDC2
	str r4, [r1, #0x50]
.L080ACDC2:
	cmp r4, #2
	bne .L080ACDCA
	movs r0, #1
	str r0, [r1, #0x4c]
.L080ACDCA:
	cmp r4, #3
	bne .L080ACDD2
	movs r0, #1
	str r0, [r1, #0x50]
.L080ACDD2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACDD8: .4byte gUnknown_08A20B94

	THUMB_FUNC_END func_080ACDA4

	THUMB_FUNC_START func_080ACDDC
func_080ACDDC: @ 0x080ACDDC
	push {lr}
	ldr r0, .L080ACDEC  @ gUnknown_08A20B94
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080ACDEC: .4byte gUnknown_08A20B94

	THUMB_FUNC_END func_080ACDDC

	THUMB_FUNC_START func_080ACDF0
func_080ACDF0: @ 0x080ACDF0
	movs r1, #0
	str r1, [r0, #0x30]
	bx lr

	THUMB_FUNC_END func_080ACDF0

	THUMB_FUNC_START func_080ACDF8
func_080ACDF8: @ 0x080ACDF8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x30]
	ldr r0, [r4, #0x2c]
	cmp r1, r0
	blt .L080ACE12
	ldr r0, [r4, #0x14]
	ldr r1, [r4, #0x34]
	bl _call_via_r1
	adds r0, r4, #0
	bl Proc_Break
.L080ACE12:
	ldr r0, [r4, #0x30]
	adds r0, #1
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ACDF8

	THUMB_FUNC_START func_080ACE20
func_080ACE20: @ 0x080ACE20
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, .L080ACE38  @ gUnknown_08A20BB4
	bl SpawnProc
	str r4, [r0, #0x2c]
	str r5, [r0, #0x34]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080ACE38: .4byte gUnknown_08A20BB4

	THUMB_FUNC_END func_080ACE20

	THUMB_FUNC_START func_080ACE3C
func_080ACE3C: @ 0x080ACE3C
	push {lr}
	movs r2, #0
	movs r1, #3
	adds r0, #0x4d
.L080ACE44:
	strb r2, [r0]
	subs r0, #1
	subs r1, #1
	cmp r1, #0
	bge .L080ACE44
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ACE3C

	THUMB_FUNC_START func_080ACE54
func_080ACE54: @ 0x080ACE54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r1, #0x4e
	str r1, [sp, #0x14]
.L080ACE6C:
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldr r2, [sp, #8]
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r2, #1
	str r2, [sp, #0x1c]
	cmp r0, #0
	bne .L080ACE80
	b .L080AD188
.L080ACE80:
	ldr r0, [sp, #4]
	adds r0, #0x3e
	ldr r3, [sp, #8]
	adds r3, r3, r0
	mov r9, r3
	movs r1, #0
	ldrsb r1, [r3, r1]
	str r0, [sp, #0x30]
	cmp r1, #1
	bgt .L080ACE96
	b .L080AD188
.L080ACE96:
	ldr r0, [sp, #4]
	adds r0, #0x3a
	ldr r1, [sp, #8]
	adds r7, r0, r1
	movs r1, #0
	ldrsb r1, [r7, r1]
	str r0, [sp, #0x2c]
	cmp r1, #1
	bgt .L080ACEAA
	b .L080AD188
.L080ACEAA:
	ldr r2, [sp, #8]
	lsls r2, r2, #1
	mov r8, r2
	ldr r3, [sp, #4]
	adds r3, #0x2a
	str r3, [sp, #0xc]
	adds r6, r3, #0
	add r6, r8
	ldrh r1, [r6]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r2, #0
	orrs r1, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldr r3, [sp, #4]
	adds r3, #0x32
	str r3, [sp, #0x10]
	adds r5, r3, #0
	add r5, r8
	movs r0, #0
	ldrsh r2, [r5, r0]
	ldr r0, [sp, #0x14]
	ldrh r3, [r0]
	ldr r0, [sp, #4]
	adds r0, #0x42
	str r0, [sp, #0x18]
	adds r4, r0, #0
	add r4, r8
	ldrh r0, [r4]
	adds r3, r3, r0
	adds r3, #4
	str r3, [sp]
	movs r0, #0xd
	ldr r3, .L080ACFD4  @ Sprite_8x8
	bl PutSpriteExt
	movs r2, #0
	ldrsh r1, [r6, r2]
	mov r3, r9
	movs r0, #0
	ldrsb r0, [r3, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r0, #0
	ldrsh r2, [r5, r0]
	ldr r3, [sp, #0x14]
	ldrh r0, [r3]
	ldrh r3, [r4]
	adds r0, r0, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, .L080ACFD4  @ Sprite_8x8
	bl PutSpriteExt
	ldrh r1, [r6]
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r0, r2, #0
	orrs r1, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, [sp, #0x14]
	ldrh r0, [r3]
	ldrh r3, [r4]
	adds r0, r0, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, .L080ACFD4  @ Sprite_8x8
	bl PutSpriteExt
	movs r0, #0
	ldrsh r1, [r6, r0]
	mov r2, r9
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r0, #0
	ldrsb r0, [r7, r0]
	subs r0, #1
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, [sp, #0x14]
	ldrh r0, [r3]
	ldrh r3, [r4]
	adds r0, r0, r3
	adds r0, #4
	str r0, [sp]
	movs r0, #0xd
	ldr r3, .L080ACFD4  @ Sprite_8x8
	bl PutSpriteExt
	mov r1, r9
	movs r0, #0
	ldrsb r0, [r1, r0]
	subs r4, r0, #2
	movs r2, #0
	ldrsh r7, [r5, r2]
	movs r3, #0
	ldrsh r0, [r6, r3]
	adds r5, r0, #0
	adds r5, #8
	mov sl, r8
	ldr r0, [sp, #0xc]
	str r0, [sp, #0x24]
	ldr r1, [sp, #0x10]
	str r1, [sp, #0x28]
	ldr r2, [sp, #4]
	adds r2, #0x4e
	mov r8, r2
	ldr r6, [sp, #0x18]
	cmp r4, #3
	ble .L080ACFFA
.L080ACFAE:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080ACFD8  @ Sprite_32x8
	bl PutSpriteExt
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt .L080ACFAE
	b .L080ACFFA
	.align 2, 0
.L080ACFD4: .4byte Sprite_8x8
.L080ACFD8: .4byte Sprite_32x8
.L080ACFDC:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD080  @ Sprite_16x8
	bl PutSpriteExt
	adds r5, #0x10
	subs r4, #2
.L080ACFFA:
	cmp r4, #1
	bgt .L080ACFDC
	cmp r4, #0
	ble .L080AD024
.L080AD002:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD084  @ Sprite_8x8
	bl PutSpriteExt
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt .L080AD002
.L080AD024:
	ldr r3, [sp, #0x30]
	ldr r1, [sp, #8]
	adds r0, r3, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r4, r0, #2
	ldr r0, [sp, #0x28]
	add r0, sl
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r3, [sp, #0x2c]
	ldr r2, [sp, #8]
	adds r0, r3, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	lsls r0, r0, #3
	adds r7, r1, r0
	ldr r0, [sp, #0x24]
	add r0, sl
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r5, r0, #0
	adds r5, #8
	cmp r4, #3
	ble .L080AD0AA
.L080AD05C:
	mov r1, r8
	ldrh r0, [r1]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD088  @ Sprite_32x8
	bl PutSpriteExt
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt .L080AD05C
	b .L080AD0AA
	.align 2, 0
.L080AD080: .4byte Sprite_16x8
.L080AD084: .4byte Sprite_8x8
.L080AD088: .4byte Sprite_32x8
.L080AD08C:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD134  @ Sprite_16x8
	bl PutSpriteExt
	adds r5, #0x10
	subs r4, #2
.L080AD0AA:
	cmp r4, #1
	bgt .L080AD08C
	cmp r4, #0
	ble .L080AD0D4
.L080AD0B2:
	mov r3, r8
	ldrh r0, [r3]
	mov r2, sl
	adds r1, r6, r2
	ldrh r1, [r1]
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD138  @ Sprite_8x8
	bl PutSpriteExt
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt .L080AD0B2
.L080AD0D4:
	ldr r3, [sp, #0x2c]
	ldr r1, [sp, #8]
	adds r0, r3, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r1, r0, #2
	ldr r0, [sp, #0x28]
	add r0, sl
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r7, r0, #0
	adds r7, #8
	cmp r1, #0
	ble .L080AD188
	add r6, sl
.L080AD0F4:
	ldr r3, [sp, #0x30]
	ldr r2, [sp, #8]
	adds r0, r3, r2
	movs r4, #0
	ldrsb r4, [r0, r4]
	ldr r0, [sp, #0x24]
	add r0, sl
	movs r3, #0
	ldrsh r5, [r0, r3]
	adds r0, r7, #0
	adds r0, #8
	str r0, [sp, #0x20]
	subs r1, #1
	mov r9, r1
	cmp r4, #3
	ble .L080AD15A
.L080AD114:
	mov r2, r8
	ldrh r1, [r2]
	ldrh r0, [r6]
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD13C  @ Sprite_32x8
	bl PutSpriteExt
	adds r5, #0x20
	subs r4, #4
	cmp r4, #3
	bgt .L080AD114
	b .L080AD15A
	.align 2, 0
.L080AD134: .4byte Sprite_16x8
.L080AD138: .4byte Sprite_8x8
.L080AD13C: .4byte Sprite_32x8
.L080AD140:
	mov r3, r8
	ldrh r1, [r3]
	ldrh r0, [r6]
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD1A4  @ Sprite_16x8
	bl PutSpriteExt
	adds r5, #0x10
	subs r4, #2
.L080AD15A:
	cmp r4, #1
	bgt .L080AD140
	cmp r4, #0
	ble .L080AD180
.L080AD162:
	mov r0, r8
	ldrh r1, [r0]
	ldrh r0, [r6]
	adds r1, r1, r0
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	ldr r3, .L080AD1A8  @ Sprite_8x8
	bl PutSpriteExt
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bgt .L080AD162
.L080AD180:
	ldr r7, [sp, #0x20]
	mov r1, r9
	cmp r1, #0
	bgt .L080AD0F4
.L080AD188:
	ldr r1, [sp, #0x1c]
	str r1, [sp, #8]
	cmp r1, #3
	bgt .L080AD192
	b .L080ACE6C
.L080AD192:
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD1A4: .4byte Sprite_16x8
.L080AD1A8: .4byte Sprite_8x8

	THUMB_FUNC_END func_080ACE54

	THUMB_FUNC_START func_080AD1AC
func_080AD1AC: @ 0x080AD1AC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L080AD1CC  @ gUnknown_08A20BD4
	adds r0, r4, #0
	bl FindProc
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080AD1CC: .4byte gUnknown_08A20BD4

	THUMB_FUNC_END func_080AD1AC

	THUMB_FUNC_START func_080AD1D0
func_080AD1D0: @ 0x080AD1D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AD1F8  @ gUnknown_08A20BD4
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080AD1F2
	lsls r0, r4, #0xf
	lsrs r0, r0, #0x14
	adds r1, #0x4e
	strh r0, [r1]
	ldr r0, .L080AD1FC  @ gUnknown_08A2E950
	ldr r2, .L080AD200  @ 0x06010000
	adds r1, r4, r2
	bl Decompress
.L080AD1F2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD1F8: .4byte gUnknown_08A20BD4
.L080AD1FC: .4byte gUnknown_08A2E950
.L080AD200: .4byte 0x06010000

	THUMB_FUNC_END func_080AD1D0

	THUMB_FUNC_START func_080AD204
func_080AD204: @ 0x080AD204
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, [sp, #0x1c]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldr r0, .L080AD268  @ gUnknown_08A20BD4
	bl FindProc
	adds r3, r0, #0
	cmp r3, #0
	beq .L080AD25C
	adds r0, #0x4a
	adds r0, r0, r4
	movs r1, #1
	strb r1, [r0]
	lsls r2, r4, #1
	adds r0, r3, #0
	adds r0, #0x2a
	adds r0, r0, r2
	strh r5, [r0]
	adds r0, r3, #0
	adds r0, #0x32
	adds r0, r0, r2
	strh r6, [r0]
	adds r0, r3, #0
	adds r0, #0x3e
	adds r0, r0, r4
	strb r7, [r0]
	adds r0, r3, #0
	adds r0, #0x3a
	adds r0, r0, r4
	ldr r1, [sp, #0x18]
	strb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x42
	adds r0, r0, r2
	mov r1, r8
	strh r1, [r0]
.L080AD25C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD268: .4byte gUnknown_08A20BD4

	THUMB_FUNC_END func_080AD204

	THUMB_FUNC_START func_080AD26C
func_080AD26C: @ 0x080AD26C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AD288  @ gUnknown_08A20BD4
	bl FindProc
	cmp r0, #0
	beq .L080AD282
	adds r0, #0x4a
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
.L080AD282:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD288: .4byte gUnknown_08A20BD4

	THUMB_FUNC_END func_080AD26C

	THUMB_FUNC_START func_080AD28C
func_080AD28C: @ 0x080AD28C
	push {lr}
	ldr r0, .L080AD2A4  @ gUnknown_08A20BD4
	bl FindProc
	cmp r0, #0
	beq .L080AD29E
	movs r1, #1
	bl Proc_Goto
.L080AD29E:
	pop {r0}
	bx r0
	.align 2, 0
.L080AD2A4: .4byte gUnknown_08A20BD4

	THUMB_FUNC_END func_080AD28C

	THUMB_FUNC_START func_080AD2A8
func_080AD2A8: @ 0x080AD2A8
	push {r4, lr}
	ldr r0, .L080AD2D0  @ gUnknown_08A20BD4
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L080AD2C8
	movs r1, #0
	bl Proc_Goto
	adds r0, r4, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	lsls r0, r0, #5
	bl func_080AD1D0
.L080AD2C8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD2D0: .4byte gUnknown_08A20BD4

	THUMB_FUNC_END func_080AD2A8

	THUMB_FUNC_START func_080AD2D4
func_080AD2D4: @ 0x080AD2D4
	push {lr}
	ldr r0, .L080AD2E4  @ gUnknown_08A20BD4
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080AD2E4: .4byte gUnknown_08A20BD4

	THUMB_FUNC_END func_080AD2D4

	THUMB_FUNC_START ParallelWorker_OnLoop
ParallelWorker_OnLoop: @ 0x080AD2E8
	push {lr}
	ldr r1, [r0, #0x14]
	ldr r2, [r0, #0x2c]
	adds r0, r1, #0
	bl _call_via_r2
	pop {r0}
	bx r0

	THUMB_FUNC_END ParallelWorker_OnLoop

	THUMB_FUNC_START StartParallelWorker
StartParallelWorker: @ 0x080AD2F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl GetParallelWorker
	cmp r0, #0
	bne .L080AD310
	ldr r0, .L080AD318  @ gUnknown_08A20C04
	adds r1, r5, #0
	bl SpawnProc
	str r4, [r0, #0x2c]
.L080AD310:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080AD318: .4byte gUnknown_08A20C04

	THUMB_FUNC_END StartParallelWorker

	THUMB_FUNC_START EndAllParallelWorkers
EndAllParallelWorkers: @ 0x080AD31C
	push {lr}
	b .L080AD324
.L080AD320:
	bl Proc_End
.L080AD324:
	ldr r0, .L080AD334  @ gUnknown_08A20C04
	bl FindProc
	cmp r0, #0
	bne .L080AD320
	pop {r0}
	bx r0
	.align 2, 0
.L080AD334: .4byte gUnknown_08A20C04

	THUMB_FUNC_END EndAllParallelWorkers

	THUMB_FUNC_START GetParallelWorker
GetParallelWorker: @ 0x080AD338
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	b .L080AD34A
.L080AD340:
	ldr r0, [r1, #0x2c]
	cmp r0, r4
	bne .L080AD34A
	adds r0, r1, #0
	b .L080AD358
.L080AD34A:
	ldr r0, .L080AD360  @ gUnknown_08A20C04
	bl Proc_FindAfter
	adds r1, r0, #0
	cmp r1, #0
	bne .L080AD340
	movs r0, #0
.L080AD358:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080AD360: .4byte gUnknown_08A20C04

	THUMB_FUNC_END GetParallelWorker

	THUMB_FUNC_START func_080AD364
func_080AD364: @ 0x080AD364
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl GetGameTime
	ldr r1, .L080AD424  @ gPal
	ldrh r2, [r5, #0x3a]
	lsls r2, r2, #5
	movs r3, #0x87
	lsls r3, r3, #2
	adds r2, r2, r3
	adds r2, r2, r1
	ldr r1, .L080AD428  @ gPlaySt
	adds r1, #0x41
	ldrb r1, [r1]
	lsls r1, r1, #0x1c
	lsrs r1, r1, #0x1e
	lsls r1, r1, #4
	lsrs r0, r0, #2
	movs r4, #0xf
	ands r0, r4
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, .L080AD42C  @ gUnknown_08A1D448
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, [r5, #0x2c]
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldr r3, .L080AD430  @ Sprite_8x8
	ldrh r0, [r5, #0x3a]
	ands r4, r0
	lsls r4, r4, #0xc
	ldrh r0, [r5, #0x3c]
	adds r4, r4, r0
	ldrh r0, [r5, #0x36]
	adds r4, r4, r0
	str r4, [sp]
	movs r0, #4
	bl PutSpriteExt
	movs r4, #1
	ldrh r3, [r5, #0x38]
	cmp r4, r3
	bge .L080AD3F2
.L080AD3C4:
	lsls r0, r4, #3
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldrh r3, [r5, #0x3a]
	movs r0, #0xf
	ands r0, r3
	lsls r0, r0, #0xc
	ldrh r3, [r5, #0x3c]
	adds r0, r0, r3
	ldrh r3, [r5, #0x36]
	adds r0, r0, r3
	adds r0, #1
	str r0, [sp]
	movs r0, #4
	ldr r3, .L080AD430  @ Sprite_8x8
	bl PutSpriteExt
	adds r4, #1
	ldrh r0, [r5, #0x38]
	cmp r4, r0
	blt .L080AD3C4
.L080AD3F2:
	ldrh r0, [r5, #0x38]
	lsls r0, r0, #3
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	ldr r2, [r5, #0x30]
	adds r2, #8
	ldr r3, .L080AD430  @ Sprite_8x8
	ldrh r4, [r5, #0x3a]
	movs r0, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	ldrh r4, [r5, #0x3c]
	adds r0, r0, r4
	ldrh r4, [r5, #0x36]
	adds r0, r0, r4
	adds r0, #2
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD424: .4byte gPal
.L080AD428: .4byte gPlaySt
.L080AD42C: .4byte gUnknown_08A1D448
.L080AD430: .4byte Sprite_8x8

	THUMB_FUNC_END func_080AD364

	THUMB_FUNC_START func_080AD434
func_080AD434: @ 0x080AD434
	adds r0, #0x35
	movs r1, #0
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AD434

	THUMB_FUNC_START func_080AD43C
func_080AD43C: @ 0x080AD43C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	bl DisplayUiHand
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AD45C
	adds r0, r4, #0
	bl func_080AD364
.L080AD45C:
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AD474
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, #2
	bl func_08015B88
.L080AD474:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AD43C

	THUMB_FUNC_START ResetPrepScreenHandCursor
ResetPrepScreenHandCursor: @ 0x080AD47C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L080AD49C  @ gUnknown_08A20C1C
	adds r0, r4, #0
	bl FindProc
	bl Proc_End
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080AD49C: .4byte gUnknown_08A20C1C

	THUMB_FUNC_END ResetPrepScreenHandCursor

	THUMB_FUNC_START func_080AD4A0
func_080AD4A0: @ 0x080AD4A0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, .L080AD4D8  @ gUnknown_08A20C1C
	bl FindProc
	adds r2, r0, #0
	cmp r2, #0
	beq .L080AD4D0
	adds r1, r2, #0
	adds r1, #0x34
	movs r0, #0
	strb r0, [r1]
	lsls r0, r5, #0xf
	lsrs r0, r0, #0x14
	strh r0, [r2, #0x36]
	movs r0, #0xf
	ands r4, r0
	strh r4, [r2, #0x3a]
	ldr r0, .L080AD4DC  @ gUnknown_08A1D4E8
	ldr r2, .L080AD4E0  @ 0x06010000
	adds r1, r5, r2
	bl Decompress
.L080AD4D0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD4D8: .4byte gUnknown_08A20C1C
.L080AD4DC: .4byte gUnknown_08A1D4E8
.L080AD4E0: .4byte 0x06010000

	THUMB_FUNC_END func_080AD4A0

	THUMB_FUNC_START func_080AD4E4
func_080AD4E4: @ 0x080AD4E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AD4FC  @ gUnknown_08A20C1C
	bl FindProc
	cmp r0, #0
	beq .L080AD4F4
	str r4, [r0, #0x2c]
.L080AD4F4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD4FC: .4byte gUnknown_08A20C1C

	THUMB_FUNC_END func_080AD4E4

	THUMB_FUNC_START func_080AD500
func_080AD500: @ 0x080AD500
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AD518  @ gUnknown_08A20C1C
	bl FindProc
	cmp r0, #0
	beq .L080AD510
	str r4, [r0, #0x30]
.L080AD510:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD518: .4byte gUnknown_08A20C1C

	THUMB_FUNC_END func_080AD500

	THUMB_FUNC_START func_080AD51C
func_080AD51C: @ 0x080AD51C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	lsls r3, r3, #0x10
	lsrs r7, r3, #0x10
	ldr r0, .L080AD544  @ gUnknown_08A20C1C
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080AD55C
	str r5, [r1, #0x2c]
	str r6, [r1, #0x30]
	cmp r4, #0
	bne .L080AD548
	adds r0, #0x35
	strb r4, [r0]
	b .L080AD554
	.align 2, 0
.L080AD544: .4byte gUnknown_08A20C1C
.L080AD548:
	adds r2, r1, #0
	adds r2, #0x35
	movs r0, #1
	strb r0, [r2]
	strh r4, [r1, #0x38]
	strh r7, [r1, #0x3c]
.L080AD554:
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
.L080AD55C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AD51C

	THUMB_FUNC_START HidePrepScreenHandCursor
HidePrepScreenHandCursor: @ 0x080AD564
	push {lr}
	ldr r0, .L080AD57C  @ gUnknown_08A20C1C
	bl FindProc
	cmp r0, #0
	beq .L080AD576
	movs r1, #0
	bl Proc_Goto
.L080AD576:
	pop {r0}
	bx r0
	.align 2, 0
.L080AD57C: .4byte gUnknown_08A20C1C

	THUMB_FUNC_END HidePrepScreenHandCursor

	THUMB_FUNC_START EndPrepScreenHandCursor
EndPrepScreenHandCursor: @ 0x080AD580
	push {lr}
	ldr r0, .L080AD590  @ gUnknown_08A20C1C
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080AD590: .4byte gUnknown_08A20C1C

	THUMB_FUNC_END EndPrepScreenHandCursor

	THUMB_FUNC_START func_080AD594
func_080AD594: @ 0x080AD594
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, .L080AD5B0  @ gUnknown_08A20C1C
	bl FindProc
	cmp r0, #0
	beq .L080AD5A8
	adds r0, #0x34
	strb r4, [r0]
.L080AD5A8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD5B0: .4byte gUnknown_08A20C1C

	THUMB_FUNC_END func_080AD594

	THUMB_FUNC_START func_080AD5B4
func_080AD5B4: @ 0x080AD5B4
	ldr r2, .L080AD5D4  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080AD5D4: .4byte gDispIo

	THUMB_FUNC_END func_080AD5B4

	THUMB_FUNC_START EnableAllGfx
EnableAllGfx: @ 0x080AD5D8
	ldr r2, .L080AD5F4  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080AD5F4: .4byte gDispIo

	THUMB_FUNC_END EnableAllGfx

	THUMB_FUNC_START func_080AD5F8
func_080AD5F8: @ 0x080AD5F8
	push {lr}
	movs r2, #0
	movs r1, #3
	adds r0, #0x50
.L080AD600:
	strb r2, [r0]
	subs r0, #0xc
	subs r1, #1
	cmp r1, #0
	bge .L080AD600
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AD5F8

	THUMB_FUNC_START func_080AD610
func_080AD610: @ 0x080AD610
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	movs r1, #0
.L080AD620:
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r2, [sp, #4]
	adds r5, r2, r0
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r1, #1
	str r1, [sp, #0xc]
	cmp r0, #0
	bne .L080AD63A
	b .L080AD934
.L080AD63A:
	ldr r1, [r2, #0x60]
	movs r0, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r0, [r2, #0x5c]
	adds r0, r0, r1
	ldrh r3, [r5, #8]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldrb r0, [r5, #1]
	ldrh r2, [r5, #2]
	ldr r1, .L080AD8B8  @ 0x000001FF
	ands r1, r2
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, .L080AD8BC  @ Sprite_8x8
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	ldr r3, .L080AD8B8  @ 0x000001FF
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, .L080AD8BC  @ Sprite_8x8
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	ldr r3, .L080AD8B8  @ 0x000001FF
	ands r1, r3
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, .L080AD8BC  @ Sprite_8x8
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	ldrh r2, [r5, #2]
	ldr r1, .L080AD8B8  @ 0x000001FF
	ands r1, r2
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	mov r3, r8
	str r3, [sp]
	ldr r3, .L080AD8BC  @ Sprite_8x8
	bl PutSpriteExt
	movs r7, #1
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r7, r0
	bge .L080AD750
	ldr r0, .L080AD8B8  @ 0x000001FF
	mov sl, r0
	ldr r1, .L080AD8C0  @ Sprite_32x8
	mov r9, r1
	mov r6, r8
	adds r6, #1
.L080AD700:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl PutSpriteExt
	adds r7, #4
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r7, r0
	blt .L080AD700
.L080AD750:
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r7, r0
	bge .L080AD7B4
	ldr r0, .L080AD8B8  @ 0x000001FF
	mov sl, r0
	ldr r1, .L080AD8C4  @ Sprite_16x8
	mov r9, r1
	mov r6, r8
	adds r6, #1
.L080AD764:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl PutSpriteExt
	adds r7, #2
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r7, r0
	blt .L080AD764
.L080AD7B4:
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r7, r0
	bge .L080AD818
	ldr r0, .L080AD8B8  @ 0x000001FF
	mov sl, r0
	ldr r1, .L080AD8BC  @ Sprite_8x8
	mov r9, r1
	mov r6, r8
	adds r6, #1
.L080AD7C8:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r4, r7, #3
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	ldrh r3, [r5, #4]
	movs r2, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	adds r1, r1, r4
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	ldrb r3, [r5, #7]
	subs r3, #1
	lsls r3, r3, #3
	adds r2, r2, r3
	movs r3, #0xff
	ands r2, r3
	str r6, [sp]
	mov r3, r9
	bl PutSpriteExt
	adds r7, #1
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r7, r0
	blt .L080AD7C8
.L080AD818:
	movs r7, #1
	ldrb r0, [r5, #7]
	subs r0, #1
	cmp r7, r0
	blt .L080AD824
	b .L080AD934
.L080AD824:
	ldr r0, .L080AD8B8  @ 0x000001FF
	mov sl, r0
	movs r1, #0xff
	mov r9, r1
	mov r2, r8
	adds r2, #9
	str r2, [sp, #8]
.L080AD832:
	ldrb r0, [r5, #1]
	ldrh r2, [r5, #2]
	mov r1, sl
	ands r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	lsls r4, r7, #3
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	ldr r3, [sp, #8]
	str r3, [sp]
	ldr r3, .L080AD8BC  @ Sprite_8x8
	bl PutSpriteExt
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldrb r2, [r5, #6]
	subs r2, #1
	lsls r2, r2, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	ldr r3, [sp, #8]
	str r3, [sp]
	ldr r3, .L080AD8BC  @ Sprite_8x8
	bl PutSpriteExt
	movs r6, #1
	ldrb r0, [r5, #6]
	subs r0, #4
	adds r7, #1
	cmp r6, r0
	bge .L080AD8EE
.L080AD888:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, .L080AD8C0  @ Sprite_32x8
	bl PutSpriteExt
	adds r6, #4
	ldrb r0, [r5, #6]
	subs r0, #4
	cmp r6, r0
	blt .L080AD888
	b .L080AD8EE
	.align 2, 0
.L080AD8B8: .4byte 0x000001FF
.L080AD8BC: .4byte Sprite_8x8
.L080AD8C0: .4byte Sprite_32x8
.L080AD8C4: .4byte Sprite_16x8
.L080AD8C8:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, .L080AD8F8  @ Sprite_16x8
	bl PutSpriteExt
	adds r6, #2
.L080AD8EE:
	ldrb r0, [r5, #6]
	subs r0, #2
	cmp r6, r0
	blt .L080AD8C8
	b .L080AD922
	.align 2, 0
.L080AD8F8: .4byte Sprite_16x8
.L080AD8FC:
	ldrb r0, [r5, #1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #3
	adds r1, r1, r2
	mov r3, sl
	ands r1, r3
	movs r3, #4
	ldrsh r2, [r5, r3]
	adds r2, r2, r4
	mov r3, r9
	ands r2, r3
	mov r3, r8
	adds r3, #5
	str r3, [sp]
	ldr r3, .L080AD94C  @ Sprite_8x8
	bl PutSpriteExt
	adds r6, #1
.L080AD922:
	ldrb r0, [r5, #6]
	subs r0, #1
	cmp r6, r0
	blt .L080AD8FC
	ldrb r0, [r5, #7]
	subs r0, #1
	cmp r7, r0
	bge .L080AD934
	b .L080AD832
.L080AD934:
	ldr r1, [sp, #0xc]
	cmp r1, #3
	bgt .L080AD93C
	b .L080AD620
.L080AD93C:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD94C: .4byte Sprite_8x8

	THUMB_FUNC_END func_080AD610

	THUMB_FUNC_START func_080AD950
func_080AD950: @ 0x080AD950
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r1, r2, #0
	ldr r0, .L080AD988  @ gUnknown_08A20C4C
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, .L080AD98C  @ gUnknown_085B92C4
	ldr r2, .L080AD990  @ 0x06010000
	adds r1, r4, r2
	bl Decompress
	ldr r0, .L080AD994  @ gPal+0x20
	adds r1, r6, #0
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r4, r4, #0xf
	lsrs r4, r4, #0x14
	str r4, [r5, #0x5c]
	str r6, [r5, #0x60]
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080AD988: .4byte gUnknown_08A20C4C
.L080AD98C: .4byte gUnknown_085B92C4
.L080AD990: .4byte 0x06010000
.L080AD994: .4byte gPal+0x20

	THUMB_FUNC_END func_080AD950

	THUMB_FUNC_START func_080AD998
func_080AD998: @ 0x080AD998
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x20]
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r0, .L080AD9E4  @ gUnknown_08A20C4C
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080AD9D8
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	adds r0, r1, r0
	movs r1, #1
	strb r1, [r0]
	strb r6, [r0, #1]
	strh r7, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	ldr r1, [sp, #0x18]
	strb r1, [r0, #6]
	ldr r1, [sp, #0x1c]
	strb r1, [r0, #7]
	strh r5, [r0, #8]
.L080AD9D8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AD9E4: .4byte gUnknown_08A20C4C

	THUMB_FUNC_END func_080AD998

	THUMB_FUNC_START func_080AD9E8
func_080AD9E8: @ 0x080AD9E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080ADA0C  @ gUnknown_08A20C4C
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080ADA06
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	adds r0, r1, r0
	movs r1, #0
	strb r1, [r0]
.L080ADA06:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADA0C: .4byte gUnknown_08A20C4C

	THUMB_FUNC_END func_080AD9E8

	THUMB_FUNC_START func_080ADA10
func_080ADA10: @ 0x080ADA10
	push {lr}
	ldr r0, .L080ADA20  @ gUnknown_08A20C4C
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080ADA20: .4byte gUnknown_08A20C4C

	THUMB_FUNC_END func_080ADA10

	THUMB_FUNC_START func_080ADA24
func_080ADA24: @ 0x080ADA24
	push {lr}
	movs r2, #0
	adds r0, #0x2c
	movs r1, #3
.L080ADA2C:
	strb r2, [r0]
	strb r2, [r0, #6]
	adds r0, #8
	subs r1, #1
	cmp r1, #0
	bge .L080ADA2C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ADA24

	THUMB_FUNC_START func_080ADA3C
func_080ADA3C: @ 0x080ADA3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	mov sl, r0
	add r1, sp, #4
	ldr r0, .L080ADB24  @ gUnknown_08205E18
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	add r2, sp, #0x14
	adds r1, r2, #0
	ldr r0, .L080ADB28  @ gUnknown_08205E28
	ldm r0!, {r3, r5, r7}
	stm r1!, {r3, r5, r7}
	ldr r0, [r0]
	str r0, [r1]
	mov r4, sl
	adds r4, #0x2d
	str r4, [sp, #0x28]
	mov r5, sl
	adds r5, #0x2c
	movs r7, #3
	str r7, [sp, #0x24]
.L080ADA72:
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq .L080ADB58
	movs r0, #2
	ldrsh r6, [r5, r0]
	movs r0, #6
	ldrsb r0, [r5, r0]
	cmp r0, #0
	beq .L080ADB2C
	ldrb r4, [r5, #1]
	adds r0, r4, #0
	movs r1, #1
	ands r0, r1
	mov r7, sl
	adds r7, #0x50
	movs r2, #0x4e
	add r2, sl
	mov r8, r2
	movs r3, #0x4c
	add r3, sl
	mov r9, r3
	cmp r0, #0
	beq .L080ADACA
	ldrb r0, [r7]
	adds r1, r6, #0
	adds r1, #0x60
	movs r3, #4
	ldrsh r2, [r5, r3]
	mov ip, r2
	mov r2, r8
	movs r3, #0
	ldrsh r2, [r2, r3]
	add r2, ip
	lsls r3, r4, #2
	add r3, sp
	adds r3, #0x14
	ldr r3, [r3]
	mov r4, r9
	ldrh r4, [r4]
	str r4, [sp]
	bl PutSpriteExt
	adds r6, #0x20
.L080ADACA:
	ldrb r0, [r7]
	movs r1, #4
	ldrsh r2, [r5, r1]
	mov r3, r8
	movs r4, #0
	ldrsh r1, [r3, r4]
	adds r2, r2, r1
	ldr r3, [sp, #0x28]
	ldrb r1, [r3]
	lsls r1, r1, #2
	add r1, sp
	adds r1, #4
	ldr r3, [r1]
	mov r4, r9
	ldrh r1, [r4]
	str r1, [sp]
	adds r1, r6, #0
	bl PutSpriteExt
	ldr r0, [sp, #0x28]
	ldrb r3, [r0]
	adds r0, r3, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne .L080ADB58
	adds r6, #0x60
	ldrb r0, [r7]
	movs r4, #4
	ldrsh r2, [r5, r4]
	mov r7, r8
	movs r4, #0
	ldrsh r1, [r7, r4]
	adds r2, r2, r1
	lsls r1, r3, #2
	add r1, sp
	adds r1, #0x14
	ldr r3, [r1]
	mov r7, r9
	ldrh r1, [r7]
	str r1, [sp]
	adds r1, r6, #0
	bl PutSpriteExt
	b .L080ADB58
	.align 2, 0
.L080ADB24: .4byte gUnknown_08205E18
.L080ADB28: .4byte gUnknown_08205E28
.L080ADB2C:
	mov r0, sl
	adds r0, #0x50
	ldrb r0, [r0]
	movs r1, #4
	ldrsh r2, [r5, r1]
	mov r1, sl
	adds r1, #0x4e
	movs r3, #0
	ldrsh r1, [r1, r3]
	adds r2, r2, r1
	ldrb r1, [r5, #1]
	lsls r1, r1, #2
	add r1, sp
	adds r1, #4
	ldr r3, [r1]
	mov r1, sl
	adds r1, #0x4c
	ldrh r1, [r1]
	str r1, [sp]
	adds r1, r6, #0
	bl PutSpriteExt
.L080ADB58:
	ldr r4, [sp, #0x28]
	adds r4, #8
	str r4, [sp, #0x28]
	adds r5, #8
	ldr r7, [sp, #0x24]
	subs r7, #1
	str r7, [sp, #0x24]
	cmp r7, #0
	blt .L080ADB6C
	b .L080ADA72
.L080ADB6C:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ADA3C

	THUMB_FUNC_START StartSmallBrownNameBoxes
StartSmallBrownNameBoxes: @ 0x080ADB7C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r9, r0
	adds r4, r1, #0
	mov r8, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x1c]
	ldr r7, [sp, #0x20]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	bl EndSmallBrownNameBoxes
	ldr r0, .L080ADBEC  @ gUnknown_08A20D6C
	adds r1, r7, #0
	bl SpawnProc
	adds r7, r0, #0
	ldr r0, .L080ADBF0  @ gUnknown_08A1B0D8
	ldr r2, .L080ADBF4  @ 0x06010000
	adds r1, r4, r2
	bl Decompress
	ldr r0, .L080ADBF8  @ gUnknown_08A1B154
	mov r1, r8
	adds r1, #0x10
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r4, r4, #0xf
	lsrs r4, r4, #0x14
	movs r0, #0xf
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #0xc
	adds r4, r4, r0
	adds r5, r5, r4
	adds r0, r7, #0
	adds r0, #0x4c
	strh r5, [r0]
	adds r0, #2
	strh r6, [r0]
	adds r0, #2
	mov r2, r9
	strb r2, [r0]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADBEC: .4byte gUnknown_08A20D6C
.L080ADBF0: .4byte gUnknown_08A1B0D8
.L080ADBF4: .4byte 0x06010000
.L080ADBF8: .4byte gUnknown_08A1B154

	THUMB_FUNC_END StartSmallBrownNameBoxes

	THUMB_FUNC_START func_080ADBFC
func_080ADBFC: @ 0x080ADBFC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, .L080ADC3C  @ gUnknown_08A20D6C
	bl FindProc
	lsls r4, r4, #3
	adds r0, r0, r4
	adds r2, r0, #0
	adds r2, #0x2c
	movs r1, #1
	strb r1, [r2]
	ldr r2, .L080ADC40  @ 0x000001FF
	adds r1, r2, #0
	ands r5, r1
	strh r5, [r0, #0x2e]
	movs r1, #0xff
	ands r6, r1
	strh r6, [r0, #0x30]
	adds r0, #0x2d
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADC3C: .4byte gUnknown_08A20D6C
.L080ADC40: .4byte 0x000001FF

	THUMB_FUNC_END func_080ADBFC

	THUMB_FUNC_START func_080ADC44
func_080ADC44: @ 0x080ADC44
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080ADC64  @ gUnknown_08A20D6C
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080ADC5E
	lsls r0, r4, #3
	adds r0, r1, r0
	adds r0, #0x2c
	movs r1, #0
	strb r1, [r0]
.L080ADC5E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADC64: .4byte gUnknown_08A20D6C

	THUMB_FUNC_END func_080ADC44

	THUMB_FUNC_START func_080ADC68
func_080ADC68: @ 0x080ADC68
	push {r4, r5, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	ldr r0, .L080ADC8C  @ gUnknown_08A20D6C
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080ADC84
	lsls r0, r4, #3
	adds r0, r1, r0
	adds r0, #0x32
	strb r5, [r0]
.L080ADC84:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADC8C: .4byte gUnknown_08A20D6C

	THUMB_FUNC_END func_080ADC68

	THUMB_FUNC_START EndSmallBrownNameBoxes
EndSmallBrownNameBoxes: @ 0x080ADC90
	push {lr}
	ldr r0, .L080ADCA0  @ gUnknown_08A20D6C
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080ADCA0: .4byte gUnknown_08A20D6C

	THUMB_FUNC_END EndSmallBrownNameBoxes

	THUMB_FUNC_START func_080ADCA4
func_080ADCA4: @ 0x080ADCA4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	bl SetTextFont
	adds r2, r4, #0
	adds r2, #0x5a
	adds r1, r4, #0
	adds r1, #0x5c
	ldrh r0, [r2]
	ldrh r1, [r1]
	cmp r0, r1
	bne .L080ADCC2
	movs r0, #0
	strh r0, [r2]
.L080ADCC2:
	ldrh r0, [r2]
	adds r7, r2, #0
	cmp r0, #0
	bne .L080ADD10
	movs r6, #0
	adds r5, r4, #0
	adds r5, #0x5e
	b .L080ADCFC
.L080ADCD2:
	ldrb r0, [r1]
	cmp r0, #1
	bne .L080ADCE8
	adds r0, r4, #0
	adds r0, #0x58
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r0, [r4, #0x54]
	adds r0, #1
	b .L080ADCF8
.L080ADCE8:
	adds r0, r4, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, #0x44
	adds r0, r4, r0
	bl Text_DrawCharacter
.L080ADCF8:
	str r0, [r4, #0x54]
	adds r6, #1
.L080ADCFC:
	ldrh r0, [r5]
	cmp r6, r0
	bge .L080ADD10
	ldr r1, [r4, #0x54]
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080ADCD2
	adds r0, r4, #0
	bl Proc_Break
.L080ADD10:
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
	movs r0, #0
	bl SetTextFont
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080ADCA4

	THUMB_FUNC_START func_080ADD24
func_080ADD24: @ 0x080ADD24
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	mov r9, r1
	mov r8, r2
	adds r5, r3, #0
	ldr r4, .L080ADDC8  @ gUnknown_08A20D8C
	adds r0, r4, #0
	bl FindProc
	adds r6, r0, #0
	cmp r6, #0
	bne .L080ADD4C
	adds r0, r4, #0
	ldr r1, [sp, #0x24]
	bl SpawnProcLocking
	adds r6, r0, #0
.L080ADD4C:
	adds r0, r6, #0
	adds r0, #0x2c
	ldr r2, .L080ADDCC  @ 0x06010000
	adds r1, r7, r2
	mov r2, r9
	bl InitSpriteTextFont
	mov r0, r8
	str r0, [r6, #0x54]
	adds r0, r6, #0
	adds r0, #0x58
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strh r1, [r0]
	adds r1, r6, #0
	adds r1, #0x5c
	ldr r0, [sp, #0x1c]
	strh r0, [r1]
	adds r1, #2
	ldr r0, [sp, #0x20]
	strh r0, [r1]
	mov r7, r9
	adds r7, #0x10
	cmp r5, #0
	ble .L080ADD9E
	adds r4, r6, #0
	adds r4, #0x44
.L080ADD88:
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bne .L080ADD88
.L080ADD9E:
	ldr r0, .L080ADDD0  @ Pal_SystemText
	lsls r1, r7, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADDC8: .4byte gUnknown_08A20D8C
.L080ADDCC: .4byte 0x06010000
.L080ADDD0: .4byte Pal_SystemText

	THUMB_FUNC_END func_080ADD24

	THUMB_FUNC_START EndAllProcChildren
EndAllProcChildren: @ 0x080ADDD4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b .L080ADDE2
.L080ADDDC:
	adds r0, r4, #0
	bl Proc_End
.L080ADDE2:
	adds r0, r4, #0
	adds r1, r5, #0
	bl Proc_FindAfterWithParent
	adds r4, r0, #0
	cmp r4, #0
	bne .L080ADDDC
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END EndAllProcChildren

	THUMB_FUNC_START func_080ADDF8
func_080ADDF8: @ 0x080ADDF8
	bx lr

	THUMB_FUNC_END func_080ADDF8

	THUMB_FUNC_START func_080ADDFC
func_080ADDFC: @ 0x080ADDFC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	ldr r4, [sp, #0x2c]
	ldr r5, [sp, #0x30]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r1, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r6, r5, #0x10
	lsrs r2, r4, #0x10
	asrs r4, r4, #0x10
	cmp r4, #4
	bgt .L080ADE2A
	movs r2, #4
.L080ADE2A:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bgt .L080ADE34
	movs r6, #4
.L080ADE34:
	lsls r0, r1, #0x10
	asrs r0, r0, #8
	str r0, [sp]
	lsls r0, r3, #0x10
	asrs r0, r0, #8
	str r0, [sp, #4]
	mov r0, sp
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r5, sp
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	movs r4, #0x80
	lsls r4, r4, #9
	adds r0, r4, #0
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r5, sp
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl __divsi3
	strh r0, [r5, #0xe]
	mov r1, sp
	lsls r0, r7, #4
	strh r0, [r1, #0x10]
	ldr r1, .L080ADE8C  @ gUnknown_030030D8
	mov r0, r8
	cmp r0, #2
	bne .L080ADE78
	subs r1, #0x10
.L080ADE78:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADE8C: .4byte gUnknown_030030D8

	THUMB_FUNC_END func_080ADDFC

	THUMB_FUNC_START func_080ADE90
func_080ADE90: @ 0x080ADE90
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r3, #0
	cmp r0, #2
	bne .L080ADEA6
	ldr r3, .L080ADEDC  @ gUnknown_030030C8
.L080ADEA6:
	movs r4, #2
	ldrsh r0, [r3, r4]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #2]
	movs r4, #6
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #6]
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3]
	movs r2, #4
	ldrsh r0, [r3, r2]
	muls r0, r1, r0
	asrs r0, r0, #8
	strh r0, [r3, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADEDC: .4byte gUnknown_030030C8

	THUMB_FUNC_END func_080ADE90

	THUMB_FUNC_START func_080ADEE0
func_080ADEE0: @ 0x080ADEE0
	push {r4, r5, r6, r7, lr}
	ldr r4, [sp, #0x14]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r5, r3, #0x10
	lsls r4, r4, #0x10
	lsrs r6, r4, #0x10
	movs r4, #0
	cmp r0, #2
	bne .L080ADF00
	ldr r4, .L080ADF44  @ gUnknown_030030C8
.L080ADF00:
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r3, r1, #0x10
	asrs r3, r3, #0x10
	negs r3, r3
	adds r1, r0, #0
	muls r1, r3, r1
	movs r7, #2
	ldrsh r0, [r4, r7]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	negs r2, r2
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r5, #0x10
	asrs r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #8]
	movs r1, #4
	ldrsh r0, [r4, r1]
	adds r1, r0, #0
	muls r1, r3, r1
	movs r3, #6
	ldrsh r0, [r4, r3]
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r6, #0x10
	asrs r0, r0, #8
	adds r1, r1, r0
	str r1, [r4, #0xc]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADF44: .4byte gUnknown_030030C8

	THUMB_FUNC_END func_080ADEE0

	THUMB_FUNC_START func_080ADF48
func_080ADF48: @ 0x080ADF48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r8, r1
	adds r1, r2, #0
	ldr r2, [sp, #0x2c]
	ldr r6, [sp, #0x30]
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	movs r0, #0x80
	lsls r0, r0, #3
	cmp r2, r0
	bgt .L080ADF66
	adds r2, r0, #0
.L080ADF66:
	cmp r6, r0
	bgt .L080ADF6C
	adds r6, r0, #0
.L080ADF6C:
	str r1, [sp]
	str r3, [sp, #4]
	mov r0, sp
	movs r1, #0
	strh r1, [r0, #8]
	strh r1, [r0, #0xa]
	mov r5, sp
	movs r4, #0x80
	lsls r4, r4, #0x11
	adds r0, r4, #0
	adds r1, r2, #0
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r5, sp
	adds r0, r4, #0
	adds r1, r6, #0
	bl __divsi3
	strh r0, [r5, #0xe]
	mov r1, sp
	mov r2, r8
	asrs r0, r2, #4
	strh r0, [r1, #0x10]
	ldr r1, .L080ADFB8  @ gUnknown_030030D8
	cmp r7, #2
	bne .L080ADFA4
	subs r1, #0x10
.L080ADFA4:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADFB8: .4byte gUnknown_030030D8

	THUMB_FUNC_END func_080ADF48

	THUMB_FUNC_START func_080ADFBC
func_080ADFBC: @ 0x080ADFBC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r3, #0
	cmp r0, #2
	bne .L080ADFCA
	ldr r3, .L080ADFF8  @ gUnknown_030030C8
.L080ADFCA:
	movs r4, #2
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #2]
	movs r4, #6
	ldrsh r0, [r3, r4]
	muls r0, r1, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #6]
	movs r1, #0
	ldrsh r0, [r3, r1]
	muls r0, r2, r0
	asrs r0, r0, #0x10
	strh r0, [r3]
	movs r4, #4
	ldrsh r0, [r3, r4]
	muls r0, r2, r0
	asrs r0, r0, #0x10
	strh r0, [r3, #4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080ADFF8: .4byte gUnknown_030030C8

	THUMB_FUNC_END func_080ADFBC

	THUMB_FUNC_START func_080ADFFC
func_080ADFFC: @ 0x080ADFFC
	push {r4, r5, r6, lr}
	adds r5, r3, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0
	cmp r0, #2
	bne .L080AE00C
	ldr r4, .L080AE040  @ gUnknown_030030C8
.L080AE00C:
	movs r3, #0
	ldrsh r0, [r4, r3]
	negs r3, r1
	muls r0, r3, r0
	movs r6, #2
	ldrsh r1, [r4, r6]
	negs r2, r2
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	adds r0, r0, r5
	str r0, [r4, #8]
	movs r1, #4
	ldrsh r0, [r4, r1]
	muls r0, r3, r0
	movs r3, #6
	ldrsh r1, [r4, r3]
	muls r1, r2, r1
	adds r0, r0, r1
	asrs r0, r0, #8
	ldr r1, [sp, #0x10]
	adds r0, r0, r1
	str r0, [r4, #0xc]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE040: .4byte gUnknown_030030C8

	THUMB_FUNC_END func_080ADFFC

	THUMB_FUNC_START func_080AE044
func_080AE044: @ 0x080AE044
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r1, #0
	mov ip, r2
	mov r9, r3
	ldr r2, [sp, #0x20]
	ldr r4, [sp, #0x28]
	ldr r3, [sp, #0x2c]
	ldrh r1, [r7]
	lsrs r1, r1, #1
	mov r8, r1
	movs r1, #0x78
	mov sl, r1
	adds r6, r7, #4
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #0xd
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r1, r0
	cmp r4, #0
	beq .L080AE0DC
	cmp r3, #0
	beq .L080AE0DC
	movs r0, #1
	negs r0, r0
	cmp r4, r0
	bne .L080AE086
	ldrh r4, [r7]
	ldrh r3, [r7, #2]
.L080AE086:
	mov r1, ip
	asrs r1, r1, #1
	mov ip, r1
	asrs r2, r2, #1
	asrs r4, r4, #1
	lsls r4, r4, #1
	ldr r0, [sp, #0x24]
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	lsls r0, r0, #1
	adds r0, r6, r0
	lsls r1, r2, #1
	adds r6, r0, r1
	mov r2, sl
	mov r0, r9
	muls r0, r2, r0
	lsls r0, r0, #1
	adds r0, r5, r0
	mov r2, ip
	lsls r1, r2, #1
	adds r5, r0, r1
	cmp r3, #0
	ble .L080AE0DC
	asrs r7, r4, #1
	adds r4, r3, #0
	ldr r0, .L080AE0EC  @ 0x001FFFFF
	mov r9, r0
.L080AE0BE:
	adds r0, r6, #0
	adds r1, r5, #0
	mov r2, r9
	ands r2, r7
	bl CpuSet
	mov r1, r8
	lsls r0, r1, #1
	adds r6, r6, r0
	mov r2, sl
	lsls r0, r2, #1
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne .L080AE0BE
.L080AE0DC:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE0EC: .4byte 0x001FFFFF

	THUMB_FUNC_END func_080AE044

	THUMB_FUNC_START func_080AE0F0
func_080AE0F0: @ 0x080AE0F0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r1, #0
	ldr r6, [sp, #0x20]
	ldr r1, [sp, #0x24]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r9, r1
	movs r1, #0x78
	mov r8, r1
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #0xd
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r1, r0
	cmp r3, #0
	beq .L080AE15A
	cmp r6, #0
	beq .L080AE15A
	asrs r4, r4, #1
	asrs r3, r3, #1
	lsls r3, r3, #1
	mov r0, r8
	muls r0, r2, r0
	lsls r0, r0, #1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r5, r0, r1
	cmp r6, #0
	ble .L080AE15A
	adds r4, r6, #0
	lsls r0, r3, #0xa
	lsrs r6, r0, #0xb
	movs r7, #0x80
	lsls r7, r7, #0x11
.L080AE13E:
	mov r0, sp
	mov r1, r9
	strh r1, [r0]
	adds r1, r5, #0
	adds r2, r6, #0
	orrs r2, r7
	bl CpuSet
	mov r1, r8
	lsls r0, r1, #1
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bne .L080AE13E
.L080AE15A:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AE0F0

	THUMB_FUNC_START func_080AE168
func_080AE168: @ 0x080AE168
	push {r4, lr}
	movs r3, #0x1f
	ands r1, r3
	ands r2, r3
	ldr r4, .L080AE188  @ gPal
	lsls r2, r2, #0xa
	lsls r1, r1, #5
	adds r2, r2, r1
	ands r3, r0
	adds r2, r2, r3
	strh r2, [r4]
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE188: .4byte gPal

	THUMB_FUNC_END func_080AE168

	THUMB_FUNC_START FadeInOut_Init
FadeInOut_Init: @ 0x080AE18C
	push {r4, lr}
	adds r4, r0, #0
	bl ArchiveCurrentPalettes
	movs r0, #0
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END FadeInOut_Init

	THUMB_FUNC_START FadeIn_Loop
FadeIn_Loop: @ 0x080AE1A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, r0, r1
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AE1C4
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #2
	subs r2, r0, r1
	b .L080AE1C6
.L080AE1C4:
	lsls r2, r1, #1
.L080AE1C6:
	ldr r3, [r4, #0x34]
	adds r0, r2, #0
	adds r1, r2, #0
	bl WriteFadedPaletteFromArchive
	ldr r2, .L080AE1FC  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, [r4, #0x2c]
	cmp r0, #0x80
	bne .L080AE1F6
	adds r0, r4, #0
	bl Proc_Break
.L080AE1F6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE1FC: .4byte gDispIo

	THUMB_FUNC_END FadeIn_Loop

	THUMB_FUNC_START FadeOut_Loop
FadeOut_Loop: @ 0x080AE200
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	adds r1, r0, r1
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AE224
	lsls r0, r1, #1
	movs r1, #0x80
	lsls r1, r1, #1
	adds r2, r0, r1
	b .L080AE22C
.L080AE224:
	lsls r1, r1, #1
	movs r0, #0x80
	lsls r0, r0, #1
	subs r2, r0, r1
.L080AE22C:
	ldr r3, [r4, #0x34]
	adds r0, r2, #0
	adds r1, r2, #0
	bl WriteFadedPaletteFromArchive
	ldr r0, [r4, #0x2c]
	cmp r0, #0x80
	bne .L080AE242
	adds r0, r4, #0
	bl Proc_Break
.L080AE242:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END FadeOut_Loop

	THUMB_FUNC_START FadeInOut_DisableGfx
FadeInOut_DisableGfx: @ 0x080AE248
	push {lr}
	ldr r1, [r0, #0x34]
	ldr r0, .L080AE270  @ 0x0000FFFF
	cmp r1, r0
	bne .L080AE278
	ldr r2, .L080AE274  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	b .L080AE294
	.align 2, 0
.L080AE270: .4byte 0x0000FFFF
.L080AE274: .4byte gDispIo
.L080AE278:
	ldr r2, .L080AE29C  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
.L080AE294:
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
.L080AE29C: .4byte gDispIo

	THUMB_FUNC_END FadeInOut_DisableGfx

	THUMB_FUNC_START FadeInExists
FadeInExists: @ 0x080AE2A0
	push {lr}
	ldr r0, .L080AE2B4  @ gUnknown_08A20DA4
	bl FindProc
	cmp r0, #0
	beq .L080AE2AE
	movs r0, #1
.L080AE2AE:
	pop {r1}
	bx r1
	.align 2, 0
.L080AE2B4: .4byte gUnknown_08A20DA4

	THUMB_FUNC_END FadeInExists

	THUMB_FUNC_START FadeOutExists
FadeOutExists: @ 0x080AE2B8
	push {lr}
	ldr r0, .L080AE2CC  @ gUnknown_08A20DCC
	bl FindProc
	cmp r0, #0
	beq .L080AE2C6
	movs r0, #1
.L080AE2C6:
	pop {r1}
	bx r1
	.align 2, 0
.L080AE2CC: .4byte gUnknown_08A20DCC

	THUMB_FUNC_END FadeOutExists

	THUMB_FUNC_START NewFadeIn
NewFadeIn: @ 0x080AE2D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE2F0  @ gUnknown_08A20DA4
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE2F0: .4byte gUnknown_08A20DA4

	THUMB_FUNC_END NewFadeIn

	THUMB_FUNC_START NewFadeOut
NewFadeOut: @ 0x080AE2F4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE314  @ gUnknown_08A20DCC
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE314: .4byte gUnknown_08A20DCC

	THUMB_FUNC_END NewFadeOut

	THUMB_FUNC_START func_080AE318
func_080AE318: @ 0x080AE318
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE338  @ gUnknown_08A20DA4
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE338: .4byte gUnknown_08A20DA4

	THUMB_FUNC_END func_080AE318

	THUMB_FUNC_START func_080AE33C
func_080AE33C: @ 0x080AE33C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE35C  @ gUnknown_08A20DCC
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #1
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE35C: .4byte gUnknown_08A20DCC

	THUMB_FUNC_END func_080AE33C

	THUMB_FUNC_START func_080AE360
func_080AE360: @ 0x080AE360
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE380  @ gUnknown_08A20DA4
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, .L080AE384  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE380: .4byte gUnknown_08A20DA4
.L080AE384: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080AE360

	THUMB_FUNC_START func_080AE388
func_080AE388: @ 0x080AE388
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE3A8  @ gUnknown_08A20DCC
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, .L080AE3AC  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE3A8: .4byte gUnknown_08A20DCC
.L080AE3AC: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080AE388

	THUMB_FUNC_START func_080AE3B0
func_080AE3B0: @ 0x080AE3B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE3D0  @ gUnknown_08A20DA4
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE3D0: .4byte gUnknown_08A20DA4

	THUMB_FUNC_END func_080AE3B0

	THUMB_FUNC_START func_080AE3D4
func_080AE3D4: @ 0x080AE3D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE3F4  @ gUnknown_08A20DCC
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE3F4: .4byte gUnknown_08A20DCC

	THUMB_FUNC_END func_080AE3D4

	THUMB_FUNC_START func_080AE3F8
func_080AE3F8: @ 0x080AE3F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE418  @ gUnknown_08A20DA4
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE418: .4byte gUnknown_08A20DA4

	THUMB_FUNC_END func_080AE3F8

	THUMB_FUNC_START func_080AE41C
func_080AE41C: @ 0x080AE41C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE43C  @ gUnknown_08A20DCC
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	subs r1, #2
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE43C: .4byte gUnknown_08A20DCC

	THUMB_FUNC_END func_080AE41C

	THUMB_FUNC_START func_080AE440
func_080AE440: @ 0x080AE440
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE460  @ gUnknown_08A20DA4
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, .L080AE464  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE460: .4byte gUnknown_08A20DA4
.L080AE464: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080AE440

	THUMB_FUNC_START func_080AE468
func_080AE468: @ 0x080AE468
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AE488  @ gUnknown_08A20DCC
	movs r1, #4
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #1
	strb r1, [r2]
	str r4, [r0, #0x30]
	ldr r1, .L080AE48C  @ 0x0000FFFF
	str r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE488: .4byte gUnknown_08A20DCC
.L080AE48C: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080AE468

	THUMB_FUNC_START func_080AE490
func_080AE490: @ 0x080AE490
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r1, .L080AE4AC  @ gPal
	ldr r2, .L080AE4B0  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080AE4AC: .4byte gPal
.L080AE4B0: .4byte 0x01000100

	THUMB_FUNC_END func_080AE490

	THUMB_FUNC_START func_080AE4B4
func_080AE4B4: @ 0x080AE4B4
	push {lr}
	ldr r0, .L080AE4D0  @ gUnknown_08A20DA4
	bl FindProc
	bl Proc_End
	ldr r0, .L080AE4D4  @ gUnknown_08A20DCC
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080AE4D0: .4byte gUnknown_08A20DA4
.L080AE4D4: .4byte gUnknown_08A20DCC

	THUMB_FUNC_END func_080AE4B4

	THUMB_FUNC_START func_080AE4D8
func_080AE4D8: @ 0x080AE4D8
	adds r2, r0, #0
	movs r0, #0
	str r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x34
	strb r0, [r1]
	str r0, [r2, #0x3c]
	str r0, [r2, #0x44]
	str r0, [r2, #0x40]
	str r0, [r2, #0x48]
	adds r1, #3
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	str r0, [r2, #0x4c]
	str r0, [r2, #0x50]
	str r0, [r2, #0x58]
	adds r1, #1
	strb r0, [r1]
	str r0, [r2, #0x54]
	movs r1, #0
	strh r0, [r2, #0x30]
	strh r0, [r2, #0x32]
	adds r3, r2, #0
	adds r3, #0x3a
	movs r0, #1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x36
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080AE4D8

	THUMB_FUNC_START func_080AE518
func_080AE518: @ 0x080AE518
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r6, [r5, #0x2c]
	ldr r0, [r5, #0x58]
	cmp r0, #0
	beq .L080AE54C
	adds r1, r5, #0
	adds r1, #0x39
	movs r0, #0
	strb r0, [r1]
	ldr r1, [r5, #0x58]
	adds r0, r5, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AE542
	b .L080AE70E
.L080AE542:
	b .L080AE54E
.L080AE544:
	adds r0, r5, #0
	bl Proc_Break
	b .L080AE706
.L080AE54C:
	str r0, [r5, #0x58]
.L080AE54E:
	movs r0, #0x37
	adds r0, r0, r5
	mov r9, r0
.L080AE554:
	ldrb r0, [r6]
	cmp r0, #4
	bne .L080AE55C
	adds r6, #0xc
.L080AE55C:
	ldrb r0, [r6]
	cmp r0, #5
	bne .L080AE5AE
	adds r0, r5, #0
	adds r0, #0x3a
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq .L080AE5A6
	subs r0, #4
	ldrb r3, [r0]
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r2, r0, #0
	cmp r1, #0
	bne .L080AE580
	ldrb r0, [r6, #0xa]
	b .L080AE586
.L080AE580:
	cmp r1, #0
	ble .L080AE588
	subs r0, r3, #1
.L080AE586:
	strb r0, [r2]
.L080AE588:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq .L080AE5AC
	adds r1, r6, #0
	subs r1, #0xc
	ldrb r0, [r1]
	cmp r0, #4
	beq .L080AE5AE
.L080AE59A:
	adds r6, r1, #0
	subs r1, #0xc
	ldrb r0, [r1]
	cmp r0, #4
	bne .L080AE59A
	b .L080AE5AE
.L080AE5A6:
	adds r0, r5, #0
	adds r0, #0x36
	strb r1, [r0]
.L080AE5AC:
	adds r6, #0xc
.L080AE5AE:
	ldrb r0, [r6]
	cmp r0, #8
	bne .L080AE5D2
	ldr r0, [r5, #0x58]
	cmp r0, #0
	beq .L080AE5D0
	ldr r0, [r5, #0x54]
	adds r0, #1
	str r0, [r5, #0x54]
	adds r1, r5, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	ldr r1, [r5, #0x58]
	adds r0, r5, #0
	bl _call_via_r1
.L080AE5D0:
	adds r6, #0xc
.L080AE5D2:
	ldrb r0, [r6]
	cmp r0, #6
	bne .L080AE5DA
	b .L080AE706
.L080AE5DA:
	subs r0, #9
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls .L080AE544
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r1, [r0]
	mov r8, r0
	cmp r1, #0
	bne .L080AE6EA
	ldrb r0, [r6]
	cmp r0, #1
	bgt .L080AE60A
	cmp r0, #0
	blt .L080AE60A
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne .L080AE60A
	mov r2, r9
	ldrb r1, [r2]
	movs r0, #1
	subs r0, r0, r1
	strb r0, [r2]
.L080AE60A:
	ldrb r0, [r6]
	cmp r0, #1
	beq .L080AE64A
	cmp r0, #1
	bgt .L080AE61A
	cmp r0, #0
	beq .L080AE624
	b .L080AE6EA
.L080AE61A:
	cmp r0, #2
	beq .L080AE674
	cmp r0, #3
	beq .L080AE6D8
	b .L080AE6EA
.L080AE624:
	ldr r0, [r6, #4]
	ldr r2, [r5, #0x40]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, [r5, #0x44]
	adds r1, r1, r2
	mov r2, r9
	ldrb r3, [r2]
	ldr r2, [r5, #0x48]
	muls r2, r3, r2
	adds r1, r1, r2
	ldrh r2, [r6, #8]
	lsrs r2, r2, #2
	bl CpuFastSet
	b .L080AE66A
.L080AE64A:
	ldr r0, [r6, #4]
	ldr r2, [r5, #0x40]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r2, r2, r1
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, [r5, #0x44]
	adds r1, r1, r2
	mov r2, r9
	ldrb r3, [r2]
	ldr r2, [r5, #0x48]
	muls r2, r3, r2
	adds r1, r1, r2
	bl Decompress
.L080AE66A:
	ldrh r1, [r6, #8]
	ldr r0, [r5, #0x44]
	adds r0, r0, r1
	str r0, [r5, #0x44]
	b .L080AE6EA
.L080AE674:
	ldr r1, [r5, #0x48]
	movs r0, #0x80
	lsls r0, r0, #8
	adds r4, r5, #0
	adds r4, #0x37
	adds r7, r5, #0
	adds r7, #0x34
	cmp r1, r0
	bne .L080AE69A
	ldrb r0, [r7]
	mov r1, r9
	ldrb r2, [r1]
	lsls r2, r2, #0xf
	ldr r1, [r5, #0x3c]
	adds r1, r1, r2
	ldr r2, .L080AE6D4  @ 0x0000FFFF
	ands r1, r2
	bl SetBgChrOffset
.L080AE69A:
	ldrb r0, [r7]
	bl GetBgTilemap
	ldr r1, [r6, #4]
	adds r2, r5, #0
	adds r2, #0x35
	ldrb r2, [r2]
	lsls r2, r2, #0xc
	ldrb r4, [r4]
	ldr r3, [r5, #0x48]
	muls r4, r3, r4
	ldr r3, [r5, #0x40]
	adds r3, r3, r4
	lsls r3, r3, #0x11
	lsrs r3, r3, #0x16
	adds r2, r2, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_thm
	movs r0, #0
	str r0, [r5, #0x44]
	movs r0, #1
	ldrb r7, [r7]
	lsls r0, r7
	bl EnableBgSync
	b .L080AE6EA
	.align 2, 0
.L080AE6D4: .4byte 0x0000FFFF
.L080AE6D8:
	ldr r0, [r6, #4]
	adds r1, r5, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #5
	ldrh r2, [r6, #8]
	lsls r2, r2, #5
	bl ApplyPaletteExt
.L080AE6EA:
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #0
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r2, [r6, #0xa]
	cmp r0, r2
	bls .L080AE706
	adds r6, #0xc
	mov r0, r8
	strb r1, [r0]
	b .L080AE554
.L080AE706:
	str r6, [r5, #0x2c]
	ldr r0, [r5, #0x50]
	adds r0, #1
	str r0, [r5, #0x50]
.L080AE70E:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AE518

	THUMB_FUNC_START func_080AE71C
func_080AE71C: @ 0x080AE71C
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	ldrb r0, [r0]
	cmp r0, #0xa
	bne .L080AE74A
	adds r4, r1, #0
	adds r4, #0x34
	ldrb r0, [r4]
	ldr r1, [r1, #0x3c]
	bl SetBgChrOffset
	ldrb r0, [r4]
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	ldrb r4, [r4]
	lsls r0, r4
	bl EnableBgSync
.L080AE74A:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AE71C

	THUMB_FUNC_START func_080AE750
func_080AE750: @ 0x080AE750
	push {lr}
	ldr r0, .L080AE760  @ gUnknown_08A20DFC
	bl FindProc
	cmp r0, #0
	bne .L080AE764
	movs r0, #0
	b .L080AE766
	.align 2, 0
.L080AE760: .4byte gUnknown_08A20DFC
.L080AE764:
	movs r0, #1
.L080AE766:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AE750

	THUMB_FUNC_START func_080AE76C
func_080AE76C: @ 0x080AE76C
	push {lr}
	ldr r0, .L080AE78C  @ gUnknown_08A20DFC
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080AE788
	ldr r2, [r1, #0x2c]
	ldrb r0, [r2]
	cmp r0, #6
	bne .L080AE788
	adds r0, r2, #0
	adds r0, #0xc
	str r0, [r1, #0x2c]
.L080AE788:
	pop {r0}
	bx r0
	.align 2, 0
.L080AE78C: .4byte gUnknown_08A20DFC

	THUMB_FUNC_END func_080AE76C

	THUMB_FUNC_START func_080AE790
func_080AE790: @ 0x080AE790
	push {lr}
	ldr r0, .L080AE7A0  @ gUnknown_08A20DFC
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080AE7A0: .4byte gUnknown_08A20DFC

	THUMB_FUNC_END func_080AE790

	THUMB_FUNC_START func_080AE7A4
func_080AE7A4: @ 0x080AE7A4
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, .L080AE7C0  @ gUnknown_08A20DFC
	bl FindProc
	cmp r0, #0
	beq .L080AE7B8
	adds r0, #0x3a
	strb r4, [r0]
.L080AE7B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE7C0: .4byte gUnknown_08A20DFC

	THUMB_FUNC_END func_080AE7A4

	THUMB_FUNC_START func_080AE7C4
func_080AE7C4: @ 0x080AE7C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	mov r8, r1
	mov r9, r2
	mov sl, r3
	ldr r6, [sp, #0x20]
	ldr r7, [sp, #0x24]
	ldr r1, [sp, #0x30]
	cmp r1, #0
	bne .L080AE7EC
	ldr r0, .L080AE7E8  @ gUnknown_08A20DFC
	movs r1, #3
	b .L080AE7EE
	.align 2, 0
.L080AE7E8: .4byte gUnknown_08A20DFC
.L080AE7EC:
	ldr r0, .L080AE848  @ gUnknown_08A20DFC
.L080AE7EE:
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x34
	mov r1, r8
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x35
	ldr r0, [sp, #0x28]
	strb r0, [r1]
	cmp r7, #0
	bge .L080AE80E
	movs r7, #0x80
	lsls r7, r7, #7
.L080AE80E:
	cmp r6, #0
	bge .L080AE814
	movs r6, #0
.L080AE814:
	mov r0, r8
	bl GetBgChrOffset
	str r0, [r4, #0x3c]
	str r6, [r4, #0x40]
	str r7, [r4, #0x48]
	mov r2, r9
	strh r2, [r4, #0x30]
	mov r6, sl
	strh r6, [r4, #0x32]
	ldr r0, [sp, #0x2c]
	str r0, [r4, #0x58]
	mov r1, r8
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	mov r2, r9
	negs r1, r2
	movs r3, #0xff
	ands r1, r3
	mov r6, sl
	negs r2, r6
	ands r2, r3
	bl SetBgOffset
	b .L080AE856
	.align 2, 0
.L080AE848: .4byte gUnknown_08A20DFC
.L080AE84C:
	ldrb r0, [r5, #0xa]
	ldr r1, [r4, #0x4c]
	adds r1, r1, r0
	str r1, [r4, #0x4c]
	adds r5, #0xc
.L080AE856:
	ldrb r0, [r5]
	cmp r0, #9
	bls .L080AE84C
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AE7C4

	THUMB_FUNC_START func_080AE86C
func_080AE86C: @ 0x080AE86C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r1, #0
	ldr r1, [r0, #0x30]
	lsls r1, r1, #5
	ldr r2, .L080AE92C  @ gPal
	adds r1, r1, r2
	mov r8, r1
	ldr r1, [r0, #0x3c]
	mov ip, r1
	ldr r7, [r0, #0x40]
	movs r1, #0
	ldr r0, [r0, #0x34]
	cmp r1, r0
	bge .L080AE918
	str r0, [sp, #4]
	movs r0, #0x80
	subs r5, r0, r6
	movs r0, #0xf8
	lsls r0, r0, #7
	mov sl, r0
.L080AE89E:
	adds r1, #1
	str r1, [sp]
	movs r1, #0xf
	mov r9, r1
.L080AE8A6:
	mov r0, ip
	ldrh r4, [r0]
	movs r0, #0x1f
	ands r0, r4
	adds r2, r0, #0
	muls r2, r5, r2
	ldrh r3, [r7]
	movs r0, #0x1f
	ands r0, r3
	muls r0, r6, r0
	adds r2, r2, r0
	asrs r2, r2, #7
	movs r1, #0x1f
	ands r2, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #7
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r1, r0
	adds r2, r2, r1
	mov r0, sl
	ands r0, r4
	adds r1, r0, #0
	muls r1, r5, r1
	mov r0, sl
	ands r0, r3
	muls r0, r6, r0
	adds r1, r1, r0
	asrs r1, r1, #7
	mov r0, sl
	ands r1, r0
	adds r2, r2, r1
	mov r1, r8
	strh r2, [r1]
	movs r0, #2
	add r8, r0
	add ip, r0
	adds r7, #2
	movs r1, #1
	negs r1, r1
	add r9, r1
	mov r0, r9
	cmp r0, #0
	bge .L080AE8A6
	ldr r1, [sp]
	ldr r0, [sp, #4]
	cmp r1, r0
	blt .L080AE89E
.L080AE918:
	bl EnablePalSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE92C: .4byte gPal

	THUMB_FUNC_END func_080AE86C

	THUMB_FUNC_START func_080AE930
func_080AE930: @ 0x080AE930
	movs r1, #0
	str r1, [r0, #0x38]
	bx lr

	THUMB_FUNC_END func_080AE930

	THUMB_FUNC_START func_080AE938
func_080AE938: @ 0x080AE938
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x38]
	ldr r1, [r2, #0x2c]
	adds r0, r0, r1
	str r0, [r2, #0x38]
	movs r1, #0x80
	lsls r1, r1, #1
	cmp r0, r1
	ble .L080AE950
	movs r0, #0
	str r0, [r2, #0x38]
.L080AE950:
	ldr r0, [r2, #0x38]
	subs r1, r1, r0
	cmp r0, #0x7f
	bgt .L080AE95A
	adds r1, r0, #0
.L080AE95A:
	adds r0, r2, #0
	bl func_080AE86C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AE938

	THUMB_FUNC_START func_080AE964
func_080AE964: @ 0x080AE964
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	mov r8, r0
	mov r9, r1
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r6, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r0, .L080AE998  @ gUnknown_08A20E24
	bl SpawnProc
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	mov r1, r8
	str r1, [r0, #0x3c]
	mov r1, r9
	str r1, [r0, #0x40]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AE998: .4byte gUnknown_08A20E24

	THUMB_FUNC_END func_080AE964

	THUMB_FUNC_START func_080AE99C
func_080AE99C: @ 0x080AE99C
	push {lr}
	ldr r0, .L080AE9AC  @ gUnknown_08A20E24
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080AE9AC: .4byte gUnknown_08A20E24

	THUMB_FUNC_END func_080AE99C

	THUMB_FUNC_START func_080AE9B0
func_080AE9B0: @ 0x080AE9B0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	mov r9, r3
	ldr r4, [sp, #0x2c]
	ldr r0, [sp, #0x34]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r7, r0, #0
	cmp r5, #0
	beq .L080AE9E0
	ldr r1, .L080AEA1C  @ 0x000003FF
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, .L080AEA20  @ 0x06010000
	adds r1, r1, r0
	adds r0, r5, #0
	bl Decompress
.L080AE9E0:
	cmp r6, #0
	beq .L080AE9F4
	adds r1, r4, #0
	adds r1, #0x10
	lsls r1, r1, #5
	ldr r2, [sp, #0x30]
	lsls r2, r2, #5
	adds r0, r6, #0
	bl ApplyPaletteExt
.L080AE9F4:
	movs r0, #0xf
	ands r4, r0
	lsls r3, r4, #0xc
	adds r3, r3, r7
	ldr r0, [sp, #0x28]
	str r0, [sp]
	ldr r0, [sp, #0x38]
	str r0, [sp, #4]
	mov r0, r8
	mov r1, r9
	ldr r2, [sp, #0x24]
	bl StartSpriteAnimProc
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080AEA1C: .4byte 0x000003FF
.L080AEA20: .4byte 0x06010000

	THUMB_FUNC_END func_080AE9B0

	THUMB_FUNC_START func_080AEA24
func_080AEA24: @ 0x080AEA24
	push {lr}
	adds r1, r0, #0
	cmp r1, #1
	beq .L080AEA4C
	cmp r1, #1
	bgt .L080AEA36
	cmp r1, #0
	beq .L080AEA40
	b .L080AEA68
.L080AEA36:
	cmp r1, #2
	beq .L080AEA58
	cmp r1, #3
	beq .L080AEA64
	b .L080AEA68
.L080AEA40:
	ldr r0, .L080AEA48  @ gDispIo
	ldrh r0, [r0, #0x1c]
	b .L080AEA68
	.align 2, 0
.L080AEA48: .4byte gDispIo
.L080AEA4C:
	ldr r0, .L080AEA54  @ gDispIo
	ldrh r0, [r0, #0x20]
	b .L080AEA68
	.align 2, 0
.L080AEA54: .4byte gDispIo
.L080AEA58:
	ldr r0, .L080AEA60  @ gDispIo
	ldrh r0, [r0, #0x24]
	b .L080AEA68
	.align 2, 0
.L080AEA60: .4byte gDispIo
.L080AEA64:
	ldr r0, .L080AEA6C  @ gDispIo
	ldrh r0, [r0, #0x28]
.L080AEA68:
	pop {r1}
	bx r1
	.align 2, 0
.L080AEA6C: .4byte gDispIo

	THUMB_FUNC_END func_080AEA24

	THUMB_FUNC_START func_080AEA70
func_080AEA70: @ 0x080AEA70
	push {lr}
	adds r1, r0, #0
	cmp r1, #1
	beq .L080AEA98
	cmp r1, #1
	bgt .L080AEA82
	cmp r1, #0
	beq .L080AEA8C
	b .L080AEAB4
.L080AEA82:
	cmp r1, #2
	beq .L080AEAA4
	cmp r1, #3
	beq .L080AEAB0
	b .L080AEAB4
.L080AEA8C:
	ldr r0, .L080AEA94  @ gDispIo
	ldrh r0, [r0, #0x1e]
	b .L080AEAB4
	.align 2, 0
.L080AEA94: .4byte gDispIo
.L080AEA98:
	ldr r0, .L080AEAA0  @ gDispIo
	ldrh r0, [r0, #0x22]
	b .L080AEAB4
	.align 2, 0
.L080AEAA0: .4byte gDispIo
.L080AEAA4:
	ldr r0, .L080AEAAC  @ gDispIo
	ldrh r0, [r0, #0x26]
	b .L080AEAB4
	.align 2, 0
.L080AEAAC: .4byte gDispIo
.L080AEAB0:
	ldr r0, .L080AEAB8  @ gDispIo
	ldrh r0, [r0, #0x2a]
.L080AEAB4:
	pop {r1}
	bx r1
	.align 2, 0
.L080AEAB8: .4byte gDispIo

	THUMB_FUNC_END func_080AEA70

	THUMB_FUNC_START func_080AEABC
func_080AEABC: @ 0x080AEABC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl strcpy
	adds r0, r5, #0
	bl strlen
	adds r4, r4, r0
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEABC

	THUMB_FUNC_START func_080AEADC
func_080AEADC: @ 0x080AEADC
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	adds r0, r1, #0
	bx lr

	THUMB_FUNC_END func_080AEADC

	THUMB_FUNC_START func_080AEAE8
func_080AEAE8: @ 0x080AEAE8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, [r5]
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r1, [r5]
	subs r4, r4, r1
	ldr r0, [r6]
	adds r2, r4, #0
	bl memcpy
	ldr r0, [r5]
	adds r0, r0, r4
	str r0, [r5]
	ldr r0, [r6]
	adds r0, r0, r4
	str r0, [r6]
	adds r0, r4, #0
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEAE8

	THUMB_FUNC_START func_080AEB1C
func_080AEB1C: @ 0x080AEB1C
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AEB1C

	THUMB_FUNC_START func_080AEB28
func_080AEB28: @ 0x080AEB28
	push {lr}
	sub sp, #4
	adds r3, r0, #0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	str r0, [sp]
	movs r2, #0
	bl func_080029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AEB28

	THUMB_FUNC_START func_080AEB44
func_080AEB44: @ 0x080AEB44
	push {lr}
	sub sp, #4
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	str r1, [sp]
	adds r1, r2, #0
	movs r3, #0x20
	bl func_080029E8
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AEB44

	THUMB_FUNC_START func_080AEB60
func_080AEB60: @ 0x080AEB60
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AEB88  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AEB76
	movs r0, #0x70
	bl m4aSongNumStart
.L080AEB76:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl ShowSilentTextHelpBox
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AEB88: .4byte gPlaySt

	THUMB_FUNC_END func_080AEB60

	THUMB_FUNC_START func_080AEB8C
func_080AEB8C: @ 0x080AEB8C
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080AEBC0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	ldr r0, .L080AEBC4  @ 0x0000030B
	ands r0, r1
	cmp r0, #0
	beq .L080AEBBA
	adds r0, r2, #0
	bl Proc_Break
	ldr r0, .L080AEBC8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AEBB6
	movs r0, #0x71
	bl m4aSongNumStart
.L080AEBB6:
	bl MoveableHelpBox_OnEnd
.L080AEBBA:
	pop {r0}
	bx r0
	.align 2, 0
.L080AEBC0: .4byte gKeySt
.L080AEBC4: .4byte 0x0000030B
.L080AEBC8: .4byte gPlaySt

	THUMB_FUNC_END func_080AEB8C

	THUMB_FUNC_START func_080AEBCC
func_080AEBCC: @ 0x080AEBCC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, .L080AEBE8  @ gUnknown_08A20E44
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AEBE8: .4byte gUnknown_08A20E44

	THUMB_FUNC_END func_080AEBCC

	THUMB_FUNC_START func_080AEBEC
func_080AEBEC: @ 0x080AEBEC
	push {r4, lr}
	movs r4, #0
.L080AEBF0:
	adds r4, #1
	movs r1, #0xa
	bl __divsi3
	cmp r0, #0
	bne .L080AEBF0
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEBEC

	THUMB_FUNC_START func_080AEC04
func_080AEC04: @ 0x080AEC04
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, [sp, #0x14]
	ldr r0, [sp, #0x18]
	subs r7, r2, r6
	subs r2, r0, r5
	adds r1, r7, #0
	muls r1, r2, r1
	subs r3, r3, r5
	subs r4, r4, r6
	adds r0, r3, #0
	muls r0, r4, r0
	subs r1, r1, r0
	cmp r1, #0
	blt .L080AEC4C
	ldr r0, [sp, #0x20]
	subs r5, r0, r5
	adds r1, r4, #0
	muls r1, r5, r1
	ldr r0, [sp, #0x1c]
	subs r4, r0, r6
	adds r0, r2, #0
	muls r0, r4, r0
	subs r1, r1, r0
	cmp r1, #0
	blt .L080AEC4C
	adds r0, r4, #0
	muls r0, r3, r0
	adds r1, r5, #0
	muls r1, r7, r1
	subs r0, r0, r1
	cmp r0, #0
	blt .L080AEC4C
	movs r0, #1
	b .L080AEC4E
.L080AEC4C:
	movs r0, #0
.L080AEC4E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEC04

	THUMB_FUNC_START func_080AEC54
func_080AEC54: @ 0x080AEC54
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	movs r0, #0
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEC54

	THUMB_FUNC_START func_080AEC68
func_080AEC68: @ 0x080AEC68
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	movs r0, #0
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEC68

	THUMB_FUNC_START func_080AEC7C
func_080AEC7C: @ 0x080AEC7C
	push {lr}
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0x64
	beq .L080AEC8A
	movs r0, #0
	b .L080AEC8C
.L080AEC8A:
	movs r0, #1
.L080AEC8C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEC7C

	THUMB_FUNC_START func_080AEC90
func_080AEC90: @ 0x080AEC90
	movs r0, #0
	bx lr

	THUMB_FUNC_END func_080AEC90

	THUMB_FUNC_START func_080AEC94
func_080AEC94: @ 0x080AEC94
	push {lr}
	movs r2, #0
	ldr r1, .L080AECA8  @ gUnknown_08A20E74
.L080AEC9A:
	ldr r0, [r1]
	cmp r0, #0
	blt .L080AECAC
	adds r1, #0x10
	adds r2, #1
	b .L080AEC9A
	.align 2, 0
.L080AECA8: .4byte gUnknown_08A20E74
.L080AECAC:
	adds r0, r2, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AEC94

	THUMB_FUNC_START func_080AECB4
func_080AECB4: @ 0x080AECB4
	push {r4, r5, lr}
	movs r3, #0
	movs r4, #0
	ldr r0, .L080AECD0  @ gUnknown_08A20E74
	adds r5, r0, #0
	adds r5, #8
	adds r2, r0, #0
.L080AECC2:
	lsls r1, r3, #4
	ldr r0, [r2]
	cmp r0, #0
	bge .L080AECD4
	adds r0, r4, #0
	b .L080AECE4
	.align 2, 0
.L080AECD0: .4byte gUnknown_08A20E74
.L080AECD4:
	adds r0, r1, r5
	ldr r0, [r0]
	cmp r0, #0
	beq .L080AECDE
	adds r4, #1
.L080AECDE:
	adds r2, #0x10
	adds r3, #1
	b .L080AECC2
.L080AECE4:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AECB4

	THUMB_FUNC_START func_080AECEC
func_080AECEC: @ 0x080AECEC
	push {lr}
	asrs r3, r1, #5
	lsls r3, r3, #2
	adds r3, r3, r0
	movs r2, #0x1f
	ands r2, r1
	ldr r0, [r3, #0x40]
	lsrs r0, r2
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne .L080AED08
	movs r0, #0
	b .L080AED0A
.L080AED08:
	movs r0, #1
.L080AED0A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AECEC

	THUMB_FUNC_START func_080AED10
func_080AED10: @ 0x080AED10
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r2, #0
	movs r4, #0
	ldr r3, .L080AED2C  @ gUnknown_08A20E74
	adds r5, r3, #0
.L080AED1C:
	lsls r1, r2, #4
	adds r0, r1, r5
	ldr r0, [r0]
	cmp r0, #0
	bge .L080AED30
	adds r0, r4, #0
	b .L080AED5E
	.align 2, 0
.L080AED2C: .4byte gUnknown_08A20E74
.L080AED30:
	adds r0, r3, #0
	adds r0, #8
	adds r0, r1, r0
	ldr r0, [r0]
	cmp r0, #0
	beq .L080AED56
	asrs r1, r2, #5
	lsls r1, r1, #2
	adds r1, r1, r6
	movs r0, #0x1f
	ands r0, r2
	ldr r1, [r1, #0x40]
	lsrs r1, r0
	movs r0, #1
	ands r1, r0
	adds r0, r2, #1
	cmp r1, #0
	beq .L080AED5A
	b .L080AED58
.L080AED56:
	adds r0, r2, #1
.L080AED58:
	adds r4, r0, #0
.L080AED5A:
	adds r2, r0, #0
	b .L080AED1C
.L080AED5E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AED10

	THUMB_FUNC_START func_080AED64
func_080AED64: @ 0x080AED64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	adds r7, r0, #0
	bl func_080AEC94
	movs r1, #0x36
	adds r1, r1, r7
	mov r8, r1
	movs r1, #0
	mov r2, r8
	strb r0, [r2]
	add r0, sp, #0x24
	movs r4, #0
	strh r1, [r0]
	adds r1, r7, #0
	adds r1, #0x40
	ldr r2, .L080AEEB8  @ 0x01000008
	bl CpuSet
	adds r5, r7, #0
	adds r5, #0x33
	strb r4, [r5]
	mov r0, sp
	bl func_080A3E4C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AEE9A
	movs r6, #0
	ldr r1, .L080AEEBC  @ gUnknown_08A20E74
	ldr r0, [r1]
	mov r9, r8
	mov r8, r5
	movs r3, #0x34
	adds r3, r3, r7
	mov sl, r3
	cmp r0, #0
	blt .L080AEE0C
	movs r4, #0
	movs r0, #8
	adds r0, r0, r1
	mov ip, r0
.L080AEDC0:
	mov r2, ip
	ldr r0, [r2]
	cmp r0, #0
	bne .L080AEDFA
	adds r0, r4, r1
	ldr r1, [r0]
	asrs r0, r1, #5
	lsls r0, r0, #2
	add r0, sp
	movs r3, #0x1f
	ands r1, r3
	ldr r0, [r0]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AEDFA
	asrs r2, r6, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	adds r0, r6, #0
	ands r0, r3
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
.L080AEDFA:
	adds r4, #0x10
	movs r3, #0x10
	add ip, r3
	adds r6, #1
	ldr r1, .L080AEEBC  @ gUnknown_08A20E74
	adds r0, r4, r1
	ldr r0, [r0]
	cmp r0, #0
	bge .L080AEDC0
.L080AEE0C:
	bl func_080AECB4
	adds r2, r0, #0
	mov r0, r8
	ldrb r1, [r0]
	movs r0, #0x64
	muls r0, r1, r0
	mov r3, r9
	ldrb r1, [r3]
	subs r1, r1, r2
	bl __divsi3
	mov r1, sl
	strb r0, [r1]
	movs r6, #0
	ldr r1, .L080AEEBC  @ gUnknown_08A20E74
	ldr r0, [r1]
	cmp r0, #0
	blt .L080AEE9A
	movs r5, #0
.L080AEE34:
	adds r0, r1, #0
	adds r0, #8
	adds r0, r5, r0
	ldr r2, [r0]
	cmp r2, #0
	beq .L080AEE8C
	adds r0, r5, r1
	ldr r1, [r0]
	asrs r0, r1, #5
	lsls r0, r0, #2
	add r0, sp
	movs r3, #0x1f
	ands r1, r3
	ldr r0, [r0]
	lsrs r0, r1
	movs r4, #1
	ands r0, r4
	cmp r0, #0
	bne .L080AEE6A
	adds r0, r7, #0
	str r3, [sp, #0x28]
	bl _call_via_r2
	lsls r0, r0, #0x18
	ldr r3, [sp, #0x28]
	cmp r0, #0
	beq .L080AEE8C
.L080AEE6A:
	asrs r2, r6, #5
	lsls r2, r2, #2
	adds r2, r2, r7
	adds r0, r6, #0
	ands r0, r3
	adds r1, r4, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r4, [r0]
.L080AEE8C:
	adds r5, #0x10
	adds r6, #1
	ldr r1, .L080AEEBC  @ gUnknown_08A20E74
	adds r0, r5, r1
	ldr r0, [r0]
	cmp r0, #0
	bge .L080AEE34
.L080AEE9A:
	adds r0, r7, #0
	bl func_080AED10
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AEEB8: .4byte 0x01000008
.L080AEEBC: .4byte gUnknown_08A20E74

	THUMB_FUNC_END func_080AED64

	THUMB_FUNC_START func_080AEEC0
func_080AEEC0: @ 0x080AEEC0
	bx lr

	THUMB_FUNC_END func_080AEEC0

	THUMB_FUNC_START func_080AEEC4
func_080AEEC4: @ 0x080AEEC4
	push {r4, lr}
	sub sp, #4
	ldr r4, [r0, #0x14]
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0x78
	bl func_080029E8
	adds r4, #0x3f
	movs r0, #1
	strb r0, [r4]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AEEC4

	THUMB_FUNC_START func_080AEEE8
func_080AEEE8: @ 0x080AEEE8
	push {r4, lr}
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r1, [r0]
	ldr r0, .L080AEF20  @ gUnknown_08A212E0
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	movs r2, #0
	bl func_080AF7F4
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl func_080B0018
	adds r4, #0x3f
	movs r0, #0
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AEF20: .4byte gUnknown_08A212E0

	THUMB_FUNC_END func_080AEEE8

	THUMB_FUNC_START func_080AEF24
func_080AEF24: @ 0x080AEF24
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080AEF5C  @ gUnknown_08A212E4
	adds r1, r4, #0
	bl SpawnProc
	adds r4, #0x31
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r2, [r4]
	ldr r0, .L080AEF60  @ gUnknown_08A212E0
	ldr r0, [r0]
	adds r0, r0, r2
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq .L080AEF50
	cmp r2, #0x80
	bne .L080AEF54
.L080AEF50:
	movs r0, #0
	strb r0, [r4]
.L080AEF54:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AEF5C: .4byte gUnknown_08A212E4
.L080AEF60: .4byte gUnknown_08A212E0

	THUMB_FUNC_END func_080AEF24

	THUMB_FUNC_START func_080AEF64
func_080AEF64: @ 0x080AEF64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	movs r6, #0
	ldr r2, .L080AF0AC  @ gUnknown_08A212E0
	movs r0, #1
	negs r0, r0
	adds r1, r0, #0
.L080AEF7C:
	ldr r0, [r2]
	adds r0, r0, r6
	strb r1, [r0]
	adds r6, #1
	cmp r6, #0x7f
	ble .L080AEF7C
	bl GetGameTime
	adds r3, r0, #0
	movs r0, #0x7f
	ands r3, r0
	adds r2, r3, #0
	movs r6, #0
	mov r7, r9
	adds r7, #0x31
	mov r1, r9
	adds r1, #0x35
	str r1, [sp, #4]
	mov r5, r9
	adds r5, #0x30
	str r5, [sp]
.L080AEFA6:
	asrs r0, r2, #5
	lsls r0, r0, #2
	add r0, r9
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AEFC6
	ldr r0, .L080AF0AC  @ gUnknown_08A212E0
	ldr r0, [r0]
	adds r0, r0, r6
	strb r2, [r0]
	adds r6, #1
.L080AEFC6:
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge .L080AEFD2
	adds r0, r2, #0
	adds r0, #0x80
.L080AEFD2:
	asrs r2, r0, #7
	lsls r0, r2, #7
	subs r2, r1, r0
	cmp r2, r3
	bne .L080AEFA6
	mov r8, r6
	bl GetGameTime
	adds r4, r0, #0
	adds r4, #0x7b
	ldr r0, .L080AF0AC  @ gUnknown_08A212E0
	mov sl, r0
	movs r6, #0xff
.L080AEFEC:
	movs r1, #0xd
	adds r2, r4, #0
	muls r2, r1, r2
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge .L080AF000
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r2, r3
.L080AF000:
	asrs r4, r0, #0xf
	lsls r0, r4, #0xf
	subs r4, r1, r0
	asrs r0, r4, #8
	mov r1, r8
	bl __modsi3
	adds r5, r0, #0
	movs r0, #0xd
	adds r2, r4, #0
	muls r2, r0, r2
	adds r1, r2, #1
	adds r0, r1, #0
	cmp r1, #0
	bge .L080AF024
	movs r3, #0x80
	lsls r3, r3, #8
	adds r0, r2, r3
.L080AF024:
	asrs r4, r0, #0xf
	lsls r0, r4, #0xf
	subs r4, r1, r0
	asrs r0, r4, #8
	mov r1, r8
	bl __modsi3
	adds r3, r0, #0
	cmp r5, r3
	beq .L080AF068
	mov r1, sl
	ldr r0, [r1]
	adds r1, r0, r5
	adds r0, r0, r3
	ldrb r0, [r0]
	ldrb r2, [r1]
	adds r0, r0, r2
	strb r0, [r1]
	mov r1, sl
	ldr r0, [r1]
	adds r2, r0, r3
	adds r0, r0, r5
	ldrb r0, [r0]
	ldrb r1, [r2]
	subs r0, r0, r1
	strb r0, [r2]
	mov r2, sl
	ldr r1, [r2]
	adds r2, r1, r5
	adds r1, r1, r3
	ldrb r0, [r2]
	ldrb r1, [r1]
	subs r0, r0, r1
	strb r0, [r2]
.L080AF068:
	subs r6, #1
	cmp r6, #0
	bge .L080AEFEC
	movs r0, #0
	strb r0, [r7]
	ldr r3, [sp, #4]
	ldrb r2, [r3]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	add r0, r9
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AF0C4
	ldr r0, .L080AF0AC  @ gUnknown_08A212E0
	ldr r1, [r0]
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r5, r2, #0
	cmp r0, r5
	beq .L080AF0C4
	adds r3, r7, #0
	movs r4, #0
	ldr r2, [sp, #4]
.L080AF0A0:
	ldrb r0, [r3]
	cmp r0, #0x80
	bne .L080AF0B0
	strb r4, [r7]
	b .L080AF0C4
	.align 2, 0
.L080AF0AC: .4byte gUnknown_08A212E0
.L080AF0B0:
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r5, [r2]
	cmp r0, r5
	bne .L080AF0A0
.L080AF0C4:
	movs r0, #1
	ldr r1, [sp]
	strb r0, [r1]
	mov r0, r9
	bl func_080AEF24
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AEF64

	THUMB_FUNC_START func_080AF0E0
func_080AF0E0: @ 0x080AF0E0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x32
	ldrb r0, [r0]
	adds r2, r0, #1
	movs r0, #0x7f
	ands r2, r0
.L080AF0EE:
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AF12A
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl func_080AF7F4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AF126
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl func_080B0018
	movs r0, #1
	b .L080AF138
.L080AF126:
	movs r0, #0
	b .L080AF138
.L080AF12A:
	adds r1, r2, #1
	lsls r1, r1, #0x18
	movs r0, #0xfe
	lsls r0, r0, #0x17
	ands r0, r1
	lsrs r2, r0, #0x18
	b .L080AF0EE
.L080AF138:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AF0E0

	THUMB_FUNC_START func_080AF140
func_080AF140: @ 0x080AF140
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x32
	ldrb r0, [r0]
	subs r2, r0, #1
	movs r0, #0x7f
	ands r2, r0
.L080AF14E:
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r1, #0x1f
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AF18A
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl func_080AF7F4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AF186
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl func_080B0018
	movs r0, #1
	b .L080AF198
.L080AF186:
	movs r0, #0
	b .L080AF198
.L080AF18A:
	subs r1, r2, #1
	lsls r1, r1, #0x18
	movs r0, #0xfe
	lsls r0, r0, #0x17
	ands r0, r1
	lsrs r2, r0, #0x18
	b .L080AF14E
.L080AF198:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AF140

	THUMB_FUNC_START func_080AF1A0
func_080AF1A0: @ 0x080AF1A0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r6, .L080AF1D4  @ gUnknown_0201F19C
	lsls r1, r4, #1
	adds r0, r1, r4
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r2, r0, r6
	movs r3, #0x2f
.L080AF1B4:
	ldrb r0, [r2, #1]
	strb r0, [r2]
	adds r2, #1
	subs r3, #1
	cmp r3, #0
	bge .L080AF1B4
	adds r0, r1, r4
	lsls r0, r0, #4
	adds r0, r0, r4
	adds r1, r6, #0
	adds r1, #0x30
	adds r0, r0, r1
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AF1D4: .4byte gUnknown_0201F19C

	THUMB_FUNC_END func_080AF1A0

	THUMB_FUNC_START func_080AF1D8
func_080AF1D8: @ 0x080AF1D8
	push {r4, r5, lr}
	movs r1, #0
	ldr r5, .L080AF210  @ gUnknown_08A2C838
	ldr r3, .L080AF214  @ gUnknown_0201F19C
	movs r2, #0
	adds r4, r3, #0
	adds r4, #0x31
.L080AF1E6:
	adds r0, r1, r3
	strb r2, [r0]
	adds r0, r1, r4
	strb r2, [r0]
	adds r1, #1
	cmp r1, #0x30
	ble .L080AF1E6
	ldr r1, .L080AF218  @ 0x06010800
	adds r0, r5, #0
	bl Decompress
	ldr r0, .L080AF21C  @ gUnknown_08A2C8A8
	movs r1, #0xe8
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080AF210: .4byte gUnknown_08A2C838
.L080AF214: .4byte gUnknown_0201F19C
.L080AF218: .4byte 0x06010800
.L080AF21C: .4byte gUnknown_08A2C8A8

	THUMB_FUNC_END func_080AF1D8

	THUMB_FUNC_START func_080AF220
func_080AF220: @ 0x080AF220
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_END func_080AF220

	THUMB_FUNC_START nullsub_65
nullsub_65: @ 0x080AF228
	bx lr

	THUMB_FUNC_END nullsub_65

	THUMB_FUNC_START func_080AF22C
func_080AF22C: @ 0x080AF22C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	movs r5, #0
	movs r0, #0xff
	mov r8, r0
	mov ip, r0
	movs r6, #0
	ldr r1, .L080AF32C  @ gUnknown_08A212DC
	mov r9, r1
	movs r2, #0xd4
	lsls r2, r2, #2
	mov sl, r2
.L080AF250:
	mov r0, r9
	ldr r2, [r0]
	lsls r3, r6, #1
	adds r2, r3, r2
	str r2, [sp]
	ldr r2, .L080AF330  @ gUnknown_08A21304
	ldr r1, [r2]
	ldr r0, [r4, #0x2c]
	movs r2, #0xc6
	lsls r2, r2, #3
	adds r0, r0, r2
	add r1, sl
	adds r1, r1, r0
	ldrb r0, [r1]
	subs r0, #0x80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x19
	ldr r1, [sp]
	strb r0, [r1]
	mov r0, r9
	ldr r2, [r0]
	adds r2, r3, r2
	ldr r1, .L080AF330  @ gUnknown_08A21304
	ldr r0, [r1]
	add r0, sl
	ldr r1, [r4, #0x2c]
	adds r0, r0, r1
	ldrb r0, [r0]
	subs r0, #0x80
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x19
	movs r1, #0xf0
	subs r1, r1, r0
	strb r1, [r2, #1]
	mov r2, r9
	ldr r0, [r2]
	adds r3, r3, r0
	ldrb r0, [r3]
	cmp r0, r5
	bcs .L080AF2A2
	adds r0, r5, #0
.L080AF2A2:
	adds r5, r0, #0
	ldrb r0, [r3]
	cmp r0, ip
	bls .L080AF2AC
	mov r0, ip
.L080AF2AC:
	mov ip, r0
	ldrb r3, [r3, #1]
	adds r0, r3, #0
	cmp r3, r7
	bcs .L080AF2B8
	adds r3, r7, #0
.L080AF2B8:
	adds r7, r3, #0
	adds r1, r0, #0
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	cmp r0, r8
	bls .L080AF2C6
	mov r1, r8
.L080AF2C6:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	ldr r0, [r4, #0x2c]
	adds r1, r0, #1
	str r1, [r4, #0x2c]
	ldr r0, .L080AF334  @ 0x0000062F
	cmp r1, r0
	ble .L080AF2E0
	movs r2, #0xc6
	lsls r2, r2, #3
	subs r0, r1, r2
	str r0, [r4, #0x2c]
.L080AF2E0:
	adds r6, #1
	cmp r6, #0xdf
	ble .L080AF250
	mov r1, ip
	subs r0, r5, r1
	cmp r0, #0x3f
	ble .L080AF2F0
	movs r0, #0x3f
.L080AF2F0:
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	mov r2, r8
	subs r0, r7, r2
	cmp r0, #0x3f
	ble .L080AF2FE
	movs r0, #0x3f
.L080AF2FE:
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r0, r5, #1
	adds r0, r0, r5
	asrs r1, r0, #2
	movs r0, #0
	bl func_080AF1A0
	lsls r0, r7, #1
	adds r0, r0, r7
	asrs r1, r0, #2
	movs r0, #1
	bl func_080AF1A0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AF32C: .4byte gUnknown_08A212DC
.L080AF330: .4byte gUnknown_08A21304
.L080AF334: .4byte 0x0000062F

	THUMB_FUNC_END func_080AF22C

	THUMB_FUNC_START func_080AF338
func_080AF338: @ 0x080AF338
	push {lr}
	ldrh r1, [r0, #0x2a]
	adds r0, #0x36
	ldrb r0, [r0]
	adds r2, r0, #3
	asrs r2, r2, #2
	movs r0, #8
	movs r3, #5
	bl func_080976CC
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AF338

	THUMB_FUNC_START func_080AF350
func_080AF350: @ 0x080AF350
	push {lr}
	adds r2, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0x60
	lsrs r1, r1, #2
	lsls r1, r1, #4
	ldrh r2, [r2, #0x2a]
	subs r2, #0x40
	subs r1, r1, r2
	movs r3, #0x80
	lsls r3, r3, #4
	movs r2, #2
	bl func_080AD51C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AF350

	THUMB_FUNC_START func_080AF378
func_080AF378: @ 0x080AF378
	push {r4, lr}
	adds r2, r0, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsrs r0, r0, #2
	lsls r0, r0, #4
	ldrh r1, [r2, #0x2a]
	subs r0, r0, r1
	cmp r0, #0
	bge .L080AF38E
	adds r0, #0xf
.L080AF38E:
	asrs r4, r0, #4
	cmp r1, #0
	beq .L080AF39E
	cmp r4, #0
	bgt .L080AF39E
	movs r0, #1
	negs r0, r0
	b .L080AF3C2
.L080AF39E:
	ldrh r0, [r2, #0x2a]
	lsrs r0, r0, #4
	adds r3, r0, #5
	adds r0, r2, #0
	adds r0, #0x36
	ldrb r1, [r0]
	subs r0, r1, #1
	cmp r0, #0
	bge .L080AF3B2
	adds r0, r1, #2
.L080AF3B2:
	asrs r0, r0, #2
	cmp r3, r0
	bgt .L080AF3C0
	cmp r4, #3
	ble .L080AF3C0
	movs r0, #1
	b .L080AF3C2
.L080AF3C0:
	movs r0, #0
.L080AF3C2:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AF378

	THUMB_FUNC_START func_080AF3C8
func_080AF3C8: @ 0x080AF3C8
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	lsrs r0, r0, #4
	subs r0, #1
	lsls r7, r0, #2
	ldr r0, .L080AF3E4  @ gBg2Tm
	movs r1, #0
	bl TmFill
	adds r4, r7, #0
	adds r0, r4, #0
	b .L080AF4A8
	.align 2, 0
.L080AF3E4: .4byte gBg2Tm
.L080AF3E8:
	adds r0, r6, #0
	adds r1, r4, #0
	bl func_080AECEC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AF3FA
	movs r5, #0
	b .L080AF440
.L080AF3FA:
	ldr r0, .L080AF438  @ gUnknown_08A20E74
	lsls r1, r4, #4
	adds r0, #8
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq .L080AF440
	adds r2, r4, #0
	cmp r4, #0
	bge .L080AF410
	adds r2, r4, #3
.L080AF410:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xc
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, .L080AF43C  @ gBg2Tm
	adds r0, r0, r1
	movs r1, #1
	movs r2, #0x14
	movs r3, #0x14
	bl PutTwoSpecialChar
	b .L080AF4A4
	.align 2, 0
.L080AF438: .4byte gUnknown_08A20E74
.L080AF43C: .4byte gBg2Tm
.L080AF440:
	cmp r4, #0x62
	ble .L080AF478
	adds r2, r4, #0
	cmp r4, #0
	bge .L080AF44C
	adds r2, r4, #3
.L080AF44C:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xd
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, .L080AF474  @ gBg2Tm
	adds r0, r0, r1
	adds r2, r4, #1
	adds r1, r5, #0
	bl PutNumber
	b .L080AF4A4
	.align 2, 0
.L080AF474: .4byte gBg2Tm
.L080AF478:
	adds r2, r4, #0
	cmp r4, #0
	bge .L080AF480
	adds r2, r4, #3
.L080AF480:
	asrs r2, r2, #2
	lsls r0, r2, #1
	adds r0, #8
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #5
	adds r0, #0xd
	lsls r2, r2, #2
	subs r2, r4, r2
	lsls r2, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, .L080AF4CC  @ gBg2Tm
	adds r0, r0, r1
	adds r2, r4, #1
	adds r1, r5, #0
	bl PutNumber2Digit
.L080AF4A4:
	adds r4, #1
	adds r0, r7, #0
.L080AF4A8:
	adds r0, #0x1c
	cmp r4, r0
	bge .L080AF4BE
	movs r5, #1
	cmp r4, #0
	blt .L080AF4A4
	adds r0, r6, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080AF3E8
.L080AF4BE:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AF4CC: .4byte gBg2Tm

	THUMB_FUNC_END func_080AF3C8

	THUMB_FUNC_START func_080AF4D0
func_080AF4D0: @ 0x080AF4D0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r6, .L080AF50C  @ gUnknown_0201F160
	adds r0, r6, #0
	adds r1, r5, #0
	bl PutText
	adds r3, r5, #0
	adds r3, #0x10
	adds r4, #0x34
	ldrb r0, [r4]
	movs r1, #2
	cmp r0, #0x64
	bne .L080AF4F0
	movs r1, #4
.L080AF4F0:
	ldrb r2, [r4]
	adds r0, r3, #0
	bl PutNumber
	adds r0, r6, #0
	adds r0, #0x30
	adds r1, r5, #0
	adds r1, #0x12
	bl PutText
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AF50C: .4byte gUnknown_0201F160

	THUMB_FUNC_END func_080AF4D0

	THUMB_FUNC_START func_080AF510
func_080AF510: @ 0x080AF510
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, #0
	beq .L080AF51E
	adds r0, #1
	strh r0, [r1, #0x2c]
.L080AF51E:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AF510

	THUMB_FUNC_START func_080AF524
func_080AF524: @ 0x080AF524
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	bl ResetTextFont
	bl ResetText
	bl LoadObjUiGfx
	bl LoadUiFrameGraphics
	bl InitSystemTextFont
	ldr r7, .L080AF7A4  @ gDispIo
	ldrb r2, [r7, #1]
	movs r0, #1
	orrs r2, r0
	movs r1, #2
	mov sl, r1
	mov r3, sl
	orrs r2, r3
	movs r0, #4
	orrs r2, r0
	movs r1, #8
	orrs r2, r1
	movs r3, #0x10
	orrs r2, r3
	ldrb r3, [r7, #0xc]
	subs r1, #0xc
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r7, #0xc]
	ldrb r3, [r7, #0x10]
	adds r0, r1, #0
	ands r0, r3
	mov r3, sl
	orrs r0, r3
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #0x21
	negs r0, r0
	ands r2, r0
	movs r1, #0x41
	negs r1, r1
	ands r2, r1
	movs r3, #0x7f
	ands r2, r3
	strb r2, [r7, #1]
	movs r0, #0
	bl SetBlankChr
	ldr r0, .L080AF7A8  @ gBg0Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r6, .L080AF7AC  @ gBg1Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r0, .L080AF7B0  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080AF7B4  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	adds r0, r4, #0
	adds r0, #0x35
	movs r1, #0
	mov r9, r1
	mov r2, r9
	strb r2, [r0]
	adds r0, #2
	strb r2, [r0]
	mov r3, r9
	strh r3, [r4, #0x2a]
	adds r0, #4
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	subs r0, #0xf
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r2, r4, #0
	adds r2, #0x32
	movs r0, #0xff
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	strh r3, [r4, #0x2c]
	adds r0, #0x11
	strb r1, [r0]
	adds r0, r4, #0
	bl func_080AED64
	bl func_080AFF30
	adds r0, r4, #0
	bl func_080AF878
	adds r0, r4, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xa0
	lsls r0, r0, #2
	movs r1, #2
	bl func_080AD4A0
	adds r0, r4, #0
	bl func_080AF350
	adds r0, r4, #0
	bl func_080AF3C8
	movs r5, #0x80
	lsls r5, r5, #5
	movs r0, #3
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xd8
	movs r2, #0x48
	adds r3, r5, #0
	bl func_08097748
	adds r0, r4, #0
	bl func_080AF338
	ldr r0, .L080AF7B8  @ gUnknown_08A2C908
	ldr r1, .L080AF7BC  @ 0x06004000
	bl Decompress
	ldr r0, .L080AF7C0  @ gUnknown_08A01EE4
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080AF7C4  @ gUnknown_08A01F04
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0xe1
	lsls r1, r1, #1
	adds r0, r6, r1
	ldr r1, .L080AF7C8  @ gUnknown_08A2C4C8
	adds r2, r5, #0
	bl TmApplyTsa_thm
	movs r2, #0xab
	lsls r2, r2, #1
	adds r6, r6, r2
	ldr r1, .L080AF7CC  @ gUnknown_08A2C5A8
	adds r0, r6, #0
	adds r2, r5, #0
	bl TmApplyTsa_thm
	movs r3, #0xcf
	lsls r3, r3, #1
	add r8, r3
	mov r0, r8
	adds r1, r4, #0
	bl func_080AF4D0
	ldr r0, .L080AF7D0  @ gUnknown_08A2D32C
	ldr r1, .L080AF7D4  @ 0x06016000
	bl Decompress
	ldr r0, .L080AF7D8  @ gUnknown_08A2E1B8
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, .L080AF7DC  @ 0x0000FFFC
	movs r0, #2
	movs r2, #0
	bl SetBgOffset
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r2, #0x7f
	ands r0, r2
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	movs r3, #1
	orrs r0, r3
	mov r2, sl
	orrs r0, r2
	movs r3, #4
	orrs r0, r3
	movs r2, #8
	orrs r0, r2
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r1]
	subs r1, #7
	movs r0, #4
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x42
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x90
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	mov r3, sl
	orrs r0, r3
	subs r1, #6
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	ldr r0, .L080AF7E0  @ gUnknown_08A2CABC
	ldr r1, .L080AF7E4  @ 0x06012000
	bl Decompress
	ldr r0, .L080AF7E8  @ gUnknown_08A2D2CC
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	adds r0, r4, #0
	bl func_080B0444
	movs r0, #1
	movs r1, #0xf
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	mov r0, r9
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	mov r1, r9
	str r1, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0xe
	bl StartScreenMenuScrollingBg
	adds r0, r4, #0
	bl StartGreenText
	bl func_080AF1D8
	ldr r0, .L080AF7EC  @ func_080AF510
	adds r1, r4, #0
	bl StartParallelWorker
	ldr r0, .L080AF7F0  @ gUnknown_08A21308
	adds r1, r4, #0
	bl SpawnProc
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AF7A4: .4byte gDispIo
.L080AF7A8: .4byte gBg0Tm
.L080AF7AC: .4byte gBg1Tm
.L080AF7B0: .4byte gBg2Tm
.L080AF7B4: .4byte gBg3Tm
.L080AF7B8: .4byte gUnknown_08A2C908
.L080AF7BC: .4byte 0x06004000
.L080AF7C0: .4byte gUnknown_08A01EE4
.L080AF7C4: .4byte gUnknown_08A01F04
.L080AF7C8: .4byte gUnknown_08A2C4C8
.L080AF7CC: .4byte gUnknown_08A2C5A8
.L080AF7D0: .4byte gUnknown_08A2D32C
.L080AF7D4: .4byte 0x06016000
.L080AF7D8: .4byte gUnknown_08A2E1B8
.L080AF7DC: .4byte 0x0000FFFC
.L080AF7E0: .4byte gUnknown_08A2CABC
.L080AF7E4: .4byte 0x06012000
.L080AF7E8: .4byte gUnknown_08A2D2CC
.L080AF7EC: .4byte func_080AF510
.L080AF7F0: .4byte gUnknown_08A21308

	THUMB_FUNC_END func_080AF524

	THUMB_FUNC_START func_080AF7F4
func_080AF7F4: @ 0x080AF7F4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl func_08002A6C
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne .L080AF834
	adds r0, r4, #0
	adds r0, #0x32
	strb r5, [r0]
	movs r0, #1
	strh r0, [r4, #0x2c]
	ldr r1, .L080AF830  @ gUnknown_08A20E74
	lsls r0, r5, #4
	adds r0, r0, r1
	ldr r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	adds r1, r2, #0
	adds r3, r6, #0
	bl func_080029E8
	movs r0, #1
	b .L080AF836
	.align 2, 0
.L080AF830: .4byte gUnknown_08A20E74
.L080AF834:
	movs r0, #0
.L080AF836:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080AF7F4

	THUMB_FUNC_START func_080AF840
func_080AF840: @ 0x080AF840
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl func_08002A6C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080AF870
	movs r4, #0
	strh r0, [r5, #0x2c]
	movs r1, #0x80
	lsls r1, r1, #1
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	movs r3, #0x18
	bl func_080029E8
	adds r0, r5, #0
	adds r0, #0x2f
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
.L080AF870:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AF840

	THUMB_FUNC_START func_080AF878
func_080AF878: @ 0x080AF878
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x35
	ldrb r1, [r4]
	bl func_080AECEC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AF892
	ldrb r0, [r4]
	bl func_080B0018
	b .L080AF89A
.L080AF892:
	movs r0, #1
	negs r0, r0
	bl func_080B0018
.L080AF89A:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AF878

	THUMB_FUNC_START func_080AF8A0
func_080AF8A0: @ 0x080AF8A0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080AF994
	ldr r0, .L080AF97C  @ gKeySt
	ldr r2, [r0]
	ldrh r3, [r2, #6]
	adds r5, r4, #0
	adds r5, #0x38
	movs r0, #4
	strb r0, [r5]
	ldrh r1, [r2, #4]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AF8D2
	ldrh r3, [r2, #4]
	movs r0, #8
	strb r0, [r5]
.L080AF8D2:
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq .L080AF8DE
	movs r6, #4
	negs r6, r6
.L080AF8DE:
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq .L080AF8E8
	movs r6, #4
.L080AF8E8:
	movs r0, #0x20
	ands r0, r3
	cmp r0, #0
	beq .L080AF902
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	beq .L080AF902
	movs r6, #1
	negs r6, r6
.L080AF902:
	movs r0, #0x10
	ands r3, r0
	cmp r3, #0
	beq .L080AF91A
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	movs r1, #3
	ands r0, r1
	cmp r0, #2
	bhi .L080AF91A
	movs r6, #1
.L080AF91A:
	cmp r6, #0
	beq .L080AF986
	adds r2, r4, #0
	adds r2, #0x35
	ldrb r0, [r2]
	adds r0, r0, r6
	cmp r0, #0
	bge .L080AF92C
	b .L080AFA5C
.L080AF92C:
	adds r1, r4, #0
	adds r1, #0x36
	ldrb r1, [r1]
	cmp r0, r1
	blt .L080AF938
	b .L080AFA5C
.L080AF938:
	strb r0, [r2]
	adds r0, r4, #0
	bl func_080AF878
	adds r0, r4, #0
	bl func_080AF378
	adds r5, r4, #0
	adds r5, #0x37
	strb r0, [r5]
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq .L080AF980
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	bne .L080AF964
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
.L080AF964:
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #1
	bne .L080AF974
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
.L080AF974:
	adds r0, r4, #0
	bl func_080AF3C8
	b .L080AF986
	.align 2, 0
.L080AF97C: .4byte gKeySt
.L080AF980:
	adds r0, r4, #0
	bl func_080AF350
.L080AF986:
	adds r0, r4, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AF9D4
.L080AF994:
	adds r5, r4, #0
	adds r5, #0x37
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	adds r2, r1, #0
	muls r2, r0, r2
	ldrh r0, [r4, #0x2a]
	adds r2, r2, r0
	strh r2, [r4, #0x2a]
	ldr r1, .L080AF9D0  @ 0x0000FFFC
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrh r0, [r4, #0x2a]
	movs r1, #0xf
	ands r0, r1
	cmp r0, #0
	bne .L080AF9C6
	movs r0, #0
	strb r0, [r5]
.L080AF9C6:
	adds r0, r4, #0
	bl func_080AF338
	b .L080AFA5C
	.align 2, 0
.L080AF9D0: .4byte 0x0000FFFC
.L080AF9D4:
	ldr r0, .L080AF9EC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080AF9F0
	adds r0, r4, #0
	bl func_080AF840
	b .L080AFA5C
	.align 2, 0
.L080AF9EC: .4byte gKeySt
.L080AF9F0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080AFA30
	adds r5, r4, #0
	adds r5, #0x35
	ldrb r1, [r5]
	adds r0, r4, #0
	bl func_080AECEC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080AFA16
	ldrb r1, [r5]
	adds r0, r4, #0
	movs r2, #0x20
	bl func_080AF7F4
	b .L080AFA5C
.L080AFA16:
	ldr r0, .L080AFA2C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080AFA5C
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L080AFA5C
	.align 2, 0
.L080AFA2C: .4byte gPlaySt
.L080AFA30:
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080AFA4C
	bl func_08002A6C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080AFA5C
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b .L080AFA5C
.L080AFA4C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AFA5C
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
.L080AFA5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AF8A0

	THUMB_FUNC_START func_080AFA64
func_080AFA64: @ 0x080AFA64
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl func_08002A6C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne .L080AFA8A
	str r0, [sp]
	movs r0, #0x43
	movs r1, #0
	movs r2, #0xc0
	movs r3, #0x18
	bl func_080029E8
	adds r0, r4, #0
	bl Proc_Break
.L080AFA8A:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFA64

	THUMB_FUNC_START func_080AFA94
func_080AFA94: @ 0x080AFA94
	push {r4, lr}
	adds r4, r0, #0
	bl EndBG3Slider
	adds r0, r4, #0
	bl EndAllProcChildren
	ldr r0, .L080AFAB0  @ gUnknown_08A21308
	bl EndEachProc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080AFAB0: .4byte gUnknown_08A21308

	THUMB_FUNC_END func_080AFA94

	THUMB_FUNC_START func_080AFAB4
func_080AFAB4: @ 0x080AFAB4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x3b
	ldrb r0, [r5]
	negs r0, r0
	movs r1, #3
	bl __divsi3
	adds r1, r4, #0
	adds r1, #0x3c
	movs r2, #0
	mov r8, r2
	strb r0, [r1]
	ldrb r0, [r5]
	negs r0, r0
	lsls r0, r0, #1
	movs r1, #3
	bl __divsi3
	adds r6, r4, #0
	adds r6, #0x3d
	strb r0, [r6]
	ldrb r0, [r5]
	adds r5, #3
	strb r0, [r5]
	ldr r0, .L080AFBA8  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080AFBAC  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080AFBB0  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r4, .L080AFBB4  @ gUnknown_08A212D4
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r1, #1
	str r1, [sp]
	movs r1, #7
	str r1, [sp, #4]
	movs r6, #0xa
	str r6, [sp, #8]
	movs r1, #0xb
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #7
	movs r3, #1
	bl func_080AC844
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #0xb
	str r1, [sp]
	movs r1, #5
	str r1, [sp, #4]
	movs r1, #0x12
	str r1, [sp, #8]
	movs r1, #0xe
	str r1, [sp, #0xc]
	movs r1, #0xa
	movs r2, #5
	movs r3, #1
	bl func_080AC844
	ldr r4, .L080AFBB8  @ gUnknown_08A212D8
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #0xc
	str r1, [sp]
	mov r1, r8
	str r1, [sp, #4]
	movs r1, #0x10
	str r1, [sp, #8]
	movs r1, #0x20
	str r1, [sp, #0xc]
	movs r1, #0xc
	movs r2, #0
	movs r3, #2
	bl func_080AC844
	ldr r0, [r4]
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r1, #0xf
	str r1, [sp]
	movs r1, #6
	str r1, [sp, #4]
	str r6, [sp, #8]
	movs r1, #2
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl func_080AC844
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #3
	adds r0, #0xd8
	movs r1, #0x48
	bl func_080976AC
	movs r0, #7
	bl EnableBgSync
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AFBA8: .4byte gBg0Tm
.L080AFBAC: .4byte gBg1Tm
.L080AFBB0: .4byte gBg2Tm
.L080AFBB4: .4byte gUnknown_08A212D4
.L080AFBB8: .4byte gUnknown_08A212D8

	THUMB_FUNC_END func_080AFAB4

	THUMB_FUNC_START func_080AFBBC
func_080AFBBC: @ 0x080AFBBC
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	adds r5, r0, #0
	adds r0, #0x3b
	movs r1, #0
	mov r9, r1
	mov r2, r9
	strb r2, [r0]
	ldr r6, .L080AFC3C  @ gUnknown_08A212D4
	ldr r0, [r6]
	movs r1, #0xe0
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, .L080AFC40  @ gUnknown_08A2C4C8
	movs r2, #0x80
	lsls r2, r2, #5
	mov r8, r2
	bl TmApplyTsa_thm
	ldr r0, [r6]
	movs r1, #0xaa
	lsls r1, r1, #1
	adds r0, r0, r1
	ldr r1, .L080AFC44  @ gUnknown_08A2C5A8
	mov r2, r8
	bl TmApplyTsa_thm
	ldr r0, .L080AFC48  @ gBg2Tm
	ldr r4, .L080AFC4C  @ gUnknown_08A212D8
	ldr r1, [r4]
	movs r2, #0x80
	lsls r2, r2, #2
	bl CpuFastSet
	ldr r0, [r4]
	adds r1, r5, #0
	bl func_080AF4D0
	ldr r0, .L080AFC50  @ gBg1Tm+0x4C4
	ldr r1, .L080AFC54  @ gUnknown_08A2C92C
	movs r2, #0x90
	lsls r2, r2, #5
	bl TmApplyTsa_thm
	ldr r0, [r6]
	ldr r2, .L080AFC58  @ 0x00000642
	adds r0, r0, r2
	ldr r1, .L080AFC5C  @ gUnknown_08A2C7A4
	mov r2, r8
	bl TmApplyTsa_thm
	bl HidePrepScreenHandCursor
	adds r5, #0x3a
	mov r0, r9
	strb r0, [r5]
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AFC3C: .4byte gUnknown_08A212D4
.L080AFC40: .4byte gUnknown_08A2C4C8
.L080AFC44: .4byte gUnknown_08A2C5A8
.L080AFC48: .4byte gBg2Tm
.L080AFC4C: .4byte gUnknown_08A212D8
.L080AFC50: .4byte gBg1Tm+0x4C4
.L080AFC54: .4byte gUnknown_08A2C92C
.L080AFC58: .4byte 0x00000642
.L080AFC5C: .4byte gUnknown_08A2C7A4

	THUMB_FUNC_END func_080AFBBC

	THUMB_FUNC_START func_080AFC60
func_080AFC60: @ 0x080AFC60
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	asrs r0, r0, #6
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	adds r0, r5, #0
	bl func_080AFAB4
	ldrb r0, [r4]
	cmp r0, #0x18
	bne .L080AFC92
	adds r0, r5, #0
	bl Proc_Break
.L080AFC92:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFC60

	THUMB_FUNC_START func_080AFC98
func_080AFC98: @ 0x080AFC98
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080AFCBC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #5
	ands r0, r1
	cmp r0, #0
	bne .L080AFCE0
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080AFCC0
	adds r0, r2, #0
	bl func_080AF0E0
	b .L080AFCE0
	.align 2, 0
.L080AFCBC: .4byte gKeySt
.L080AFCC0:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080AFCD0
	adds r0, r2, #0
	bl func_080AF140
	b .L080AFCE0
.L080AFCD0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AFCE0
	adds r0, r2, #0
	movs r1, #3
	bl Proc_Goto
.L080AFCE0:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFC98

	THUMB_FUNC_START func_080AFCE4
func_080AFCE4: @ 0x080AFCE4
	push {r4, lr}
	adds r4, r0, #0
	bl func_080AF878
	adds r4, #0x3a
	movs r0, #0
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFCE4

	THUMB_FUNC_START func_080AFCF8
func_080AFCF8: @ 0x080AFCF8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r0, [r1]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge .L080AFD1A
	adds r0, #0x3f
.L080AFD1A:
	asrs r0, r0, #6
	adds r4, r5, #0
	adds r4, #0x3b
	strb r0, [r4]
	adds r0, r5, #0
	bl func_080AFAB4
	ldrb r0, [r4]
	cmp r0, #0
	bne .L080AFD40
	adds r0, r5, #0
	bl func_080AF350
	adds r0, r5, #0
	bl func_080AF338
	adds r0, r5, #0
	bl Proc_Break
.L080AFD40:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFCF8

	THUMB_FUNC_START func_080AFD48
func_080AFD48: @ 0x080AFD48
	push {lr}
	adds r2, r0, #0
	adds r2, #0x3a
	movs r1, #0
	strb r1, [r2]
	strh r1, [r0, #0x2c]
	bl func_080AEF64
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFD48

	THUMB_FUNC_START func_080AFD5C
func_080AFD5C: @ 0x080AFD5C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	mov r8, r0
	mov r7, r8
	adds r7, #0x3a
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldrb r0, [r7]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r1, r0, r1
	cmp r1, #0
	bge .L080AFD84
	adds r1, #0x3f
.L080AFD84:
	asrs r1, r1, #6
	movs r0, #0x18
	subs r0, r0, r1
	mov r6, r8
	adds r6, #0x3b
	strb r0, [r6]
	ldrb r0, [r6]
	movs r5, #3
	movs r1, #3
	bl __udivsi3
	movs r1, #0x14
	subs r1, r1, r0
	mov r4, r8
	adds r4, #0x3c
	strb r1, [r4]
	ldr r0, .L080AFDEC  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080AFDF0  @ gUnknown_08A212D4
	ldr r0, [r0]
	str r5, [sp]
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r1, #4
	str r1, [sp, #4]
	movs r1, #0x18
	str r1, [sp, #8]
	str r5, [sp, #0xc]
	movs r1, #1
	movs r2, #0x19
	movs r3, #1
	bl func_080AC844
	movs r0, #2
	bl EnableBgSync
	ldrb r0, [r6]
	cmp r0, #0x18
	bne .L080AFDE0
	movs r0, #0
	strb r0, [r7]
	mov r0, r8
	bl Proc_Break
.L080AFDE0:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AFDEC: .4byte gBg1Tm
.L080AFDF0: .4byte gUnknown_08A212D4

	THUMB_FUNC_END func_080AFD5C

	THUMB_FUNC_START func_080AFDF4
func_080AFDF4: @ 0x080AFDF4
	push {lr}
	adds r3, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080AFE88
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080AFE34
	ldrh r2, [r3, #0x2c]
	ldr r1, .L080AFE30  @ gUnknown_08A20E74
	adds r0, r3, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #4
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r2, r0
	blt .L080AFE34
	adds r0, r3, #0
	bl func_080AEF24
	b .L080AFE88
	.align 2, 0
.L080AFE30: .4byte gUnknown_08A20E74
.L080AFE34:
	ldr r0, .L080AFE4C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080AFE50
	adds r0, r3, #0
	bl func_080AF0E0
	b .L080AFE88
	.align 2, 0
.L080AFE4C: .4byte gKeySt
.L080AFE50:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080AFE60
	adds r0, r3, #0
	bl func_080AF140
	b .L080AFE88
.L080AFE60:
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	beq .L080AFE70
	adds r0, r3, #0
	bl Proc_Break
	b .L080AFE88
.L080AFE70:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080AFE88
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080AFE88
	adds r0, r3, #0
	movs r1, #3
	bl Proc_Goto
.L080AFE88:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080AFDF4

	THUMB_FUNC_START func_080AFE8C
func_080AFE8C: @ 0x080AFE8C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	adds r1, r7, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrb r0, [r1]
	movs r1, #8
	subs r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	muls r0, r1, r0
	cmp r0, #0
	bge .L080AFEB0
	adds r0, #0x3f
.L080AFEB0:
	asrs r0, r0, #6
	adds r6, r7, #0
	adds r6, #0x3b
	strb r0, [r6]
	ldrb r0, [r6]
	movs r5, #3
	movs r1, #3
	bl __udivsi3
	movs r1, #0x14
	subs r1, r1, r0
	adds r4, r7, #0
	adds r4, #0x3c
	strb r1, [r4]
	ldr r0, .L080AFF14  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080AFF18  @ gUnknown_08A212D4
	ldr r0, [r0]
	str r5, [sp]
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r1, #4
	str r1, [sp, #4]
	movs r1, #0x18
	str r1, [sp, #8]
	str r5, [sp, #0xc]
	movs r1, #1
	movs r2, #0x19
	movs r3, #1
	bl func_080AC844
	movs r0, #2
	bl EnableBgSync
	ldrb r1, [r6]
	cmp r1, #0
	bne .L080AFF0A
	adds r0, r7, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r0, r7, #0
	bl Proc_Break
.L080AFF0A:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080AFF14: .4byte gBg1Tm
.L080AFF18: .4byte gUnknown_08A212D4

	THUMB_FUNC_END func_080AFE8C

	THUMB_FUNC_START func_080AFF1C
func_080AFF1C: @ 0x080AFF1C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080AFF2C  @ gUnknown_08A21338
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
.L080AFF2C: .4byte gUnknown_08A21338

	THUMB_FUNC_END func_080AFF1C

	THUMB_FUNC_START func_080AFF30
func_080AFF30: @ 0x080AFF30
	push {r4, r5, r6, lr}
	ldr r6, .L080AFFF8  @ 0x06014000
	ldr r4, .L080AFFFC  @ gUnknown_0201F148
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #5
	bl InitSpriteTextFont
	ldr r0, .L080B0000  @ Pal_SystemText
	movs r5, #0xd0
	lsls r5, r5, #2
	adds r1, r5, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L080B0004  @ gPal
	adds r0, r0, r5
	movs r1, #0
	strh r1, [r0]
	bl EnablePalSync
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x28
	bl InitSpriteText
	adds r4, #0x30
	movs r5, #2
.L080AFF74:
	adds r0, r4, #0
	bl InitSpriteText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L080AFF74
	movs r0, #0
	bl SetTextFont
	ldr r5, .L080AFFFC  @ gUnknown_0201F148
	ldr r0, .L080B0008  @ 0x0001FFFF
	ands r0, r6
	lsrs r0, r0, #5
	ldr r2, .L080B000C  @ 0x000003FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #8
	adds r1, r2, #0
	adds r0, r0, r1
	adds r1, r5, #0
	adds r1, #0x50
	strh r0, [r1]
	movs r0, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r4, r5, #0
	adds r4, #0x18
	adds r0, r4, #0
	movs r1, #5
	bl InitText
	adds r0, r4, #0
	bl ClearText
	ldr r0, .L080B0010  @ 0x000005AA
	bl GetMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r4, #0x30
	adds r0, r4, #0
	movs r1, #2
	bl InitText
	adds r0, r4, #0
	bl ClearText
	ldr r0, .L080B0014  @ 0x000005AE
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080AFFF8: .4byte 0x06014000
.L080AFFFC: .4byte gUnknown_0201F148
.L080B0000: .4byte Pal_SystemText
.L080B0004: .4byte gPal
.L080B0008: .4byte 0x0001FFFF
.L080B000C: .4byte 0x000003FF
.L080B0010: .4byte 0x000005AA
.L080B0014: .4byte 0x000005AE

	THUMB_FUNC_END func_080AFF30

	THUMB_FUNC_START func_080B0018
func_080B0018: @ 0x080B0018
	push {r4, r5, lr}
	adds r1, r0, #0
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	bne .L080B002A
	movs r0, #0xfa
	lsls r0, r0, #3
	b .L080B0034
.L080B002A:
	ldr r0, .L080B0080  @ gUnknown_08A20E74
	lsls r1, r1, #4
	adds r0, #0xc
	adds r1, r1, r0
	ldr r0, [r1]
.L080B0034:
	bl GetMsg
	adds r5, r0, #0
	ldr r4, .L080B0084  @ gUnknown_0201F148
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	adds r4, #0x20
	adds r0, r4, #0
	movs r1, #0
	bl DrawSpriteTextBackgroundExt
	movs r0, #0xb0
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0080: .4byte gUnknown_08A20E74
.L080B0084: .4byte gUnknown_0201F148

	THUMB_FUNC_END func_080B0018

	THUMB_FUNC_START func_080B0088
func_080B0088: @ 0x080B0088
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	cmp r7, #0x20
	bls .L080B015C
	movs r0, #0xff
	mov r1, sl
	ands r1, r0
	mov sl, r1
	ldr r4, .L080B016C  @ gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r4, #0
	ldr r6, .L080B0170  @ gUnknown_0201F198
	movs r5, #0x24
.L080B0112:
	lsls r0, r4, #2
	ldrh r1, [r6]
	adds r0, r0, r1
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x84
	lsls r2, r2, #1
	add r2, sl
	ldr r3, .L080B0174  @ Sprite_32x16
	bl PutSpriteExt
	adds r5, #0x20
	adds r4, #1
	cmp r4, #4
	ble .L080B0112
	movs r6, #0xcb
	lsls r6, r6, #8
	movs r5, #0x18
	movs r4, #2
.L080B0140:
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x80
	lsls r2, r2, #1
	add r2, sl
	ldr r3, .L080B0178  @ Sprite_64x32
	bl PutSpriteExt
	adds r6, #8
	adds r5, #0x40
	subs r4, #1
	cmp r4, #0
	bge .L080B0140
.L080B015C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B016C: .4byte gSinLut
.L080B0170: .4byte gUnknown_0201F198
.L080B0174: .4byte Sprite_32x16
.L080B0178: .4byte Sprite_64x32

	THUMB_FUNC_END func_080B0088

	THUMB_FUNC_START func_080B017C
func_080B017C: @ 0x080B017C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r9, r0
	mov r8, r1
	adds r4, r2, #0
	movs r6, #0
	movs r7, #0xd
	cmp r3, #0
	beq .L080B01EA
	movs r0, #0xff
	ands r1, r0
	mov r8, r1
	cmp r4, #7
	ble .L080B01CC
	mov r5, r9
.L080B01A0:
	subs r4, #8
	ldr r1, .L080B01F8  @ 0x000001FF
	ands r1, r5
	lsls r0, r7, #0xc
	ldr r2, .L080B01FC  @ 0x00000847
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	mov r2, r8
	ldr r3, .L080B0200  @ Sprite_8x8
	bl PutSpriteExt
	adds r5, #8
	adds r6, #1
	cmp r6, #2
	ble .L080B01C2
	movs r7, #0xe
.L080B01C2:
	cmp r6, #4
	ble .L080B01C8
	movs r7, #0xf
.L080B01C8:
	cmp r4, #7
	bgt .L080B01A0
.L080B01CC:
	lsls r1, r6, #3
	add r1, r9
	ldr r0, .L080B01F8  @ 0x000001FF
	ands r1, r0
	ldr r3, .L080B0200  @ Sprite_8x8
	lsls r0, r7, #0xc
	adds r0, r4, r0
	movs r2, #0x84
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0
	mov r2, r8
	bl PutSpriteExt
.L080B01EA:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B01F8: .4byte 0x000001FF
.L080B01FC: .4byte 0x00000847
.L080B0200: .4byte Sprite_8x8

	THUMB_FUNC_END func_080B017C

	THUMB_FUNC_START func_080B0204
func_080B0204: @ 0x080B0204
	push {r4, r5, r6, r7, lr}
	ldr r7, [r0, #0x14]
	ldr r0, .L080B023C  @ gUnknown_0201F19C
	movs r6, #0x40
	adds r5, r0, #0
	adds r5, #0x30
	movs r4, #1
.L080B0212:
	ldrb r3, [r5]
	adds r0, r7, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r0, #0xf
	adds r1, r6, #0
	adds r2, r3, #0
	bl func_080B017C
	adds r6, #8
	adds r5, #0x31
	subs r4, #1
	cmp r4, #0
	bge .L080B0212
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B023C: .4byte gUnknown_0201F19C

	THUMB_FUNC_END func_080B0204

	THUMB_FUNC_START func_080B0240
func_080B0240: @ 0x080B0240
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	adds r0, r2, #0
	movs r1, #0x3c
	bl __divsi3
	adds r5, r0, #0
	movs r1, #0x3c
	bl __divsi3
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0x3c
	bl __modsi3
	mov r8, r0
	ldr r3, .L080B02C8  @ gUnknown_08A214A6
	movs r5, #0x80
	lsls r5, r5, #7
	str r5, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	bl PutSpriteExt
	adds r1, r6, #0
	adds r1, #0x28
	ldr r0, .L080B02CC  @ gUnknown_08A21508
	mov r9, r0
	lsls r4, r4, #2
	add r4, r9
	ldr r3, [r4]
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl PutSpriteExt
	adds r1, r6, #0
	adds r1, #0x30
	ldr r3, .L080B02D0  @ gUnknown_08A214AE
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl PutSpriteExt
	mov r0, r8
	cmp r0, #9
	ble .L080B02D4
	adds r4, r6, #0
	adds r4, #0x38
	movs r1, #0xa
	bl __divsi3
	lsls r0, r0, #2
	add r0, r9
	ldr r3, [r0]
	str r5, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r7, #0
	bl PutSpriteExt
	b .L080B02E6
	.align 2, 0
.L080B02C8: .4byte gUnknown_08A214A6
.L080B02CC: .4byte gUnknown_08A21508
.L080B02D0: .4byte gUnknown_08A214AE
.L080B02D4:
	adds r1, r6, #0
	adds r1, #0x38
	mov r0, r9
	ldr r3, [r0]
	str r5, [sp]
	movs r0, #0
	adds r2, r7, #0
	bl PutSpriteExt
.L080B02E6:
	adds r5, r6, #0
	adds r5, #0x40
	ldr r4, .L080B0318  @ gUnknown_08A21508
	mov r0, r8
	movs r1, #0xa
	bl __modsi3
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0318: .4byte gUnknown_08A21508

	THUMB_FUNC_END func_080B0240

	THUMB_FUNC_START func_080B031C
func_080B031C: @ 0x080B031C
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_END func_080B031C

	THUMB_FUNC_START func_080B0324
func_080B0324: @ 0x080B0324
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r6, [r7, #0x14]
	adds r4, r6, #0
	adds r4, #0x3c
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #3
	adds r0, #6
	movs r1, #0x80
	lsls r1, r1, #1
	bl func_080B0088
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B03CA
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r5, r0, #3
	adds r5, #0x24
	movs r4, #0xff
	ands r5, r4
	movs r2, #0xc
	subs r2, r2, r0
	lsls r2, r2, #3
	adds r2, #4
	ands r2, r4
	movs r0, #0x80
	lsls r0, r0, #3
	adds r2, r2, r0
	ldr r3, .L080B0424  @ gUnknown_08A2146A
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0
	movs r1, #4
	bl PutSpriteExt
	adds r2, r5, #1
	ands r2, r4
	ldr r3, .L080B0428  @ gUnknown_08A2148A
	movs r4, #0x80
	lsls r4, r4, #7
	str r4, [sp]
	movs r0, #0
	movs r1, #0x7c
	bl PutSpriteExt
	ldrh r1, [r6, #0x2c]
	lsls r0, r1, #5
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r2, .L080B042C  @ gUnknown_08A20E74
	adds r1, r6, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r2, #4
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, #0x78
	bl __divsi3
	adds r1, r0, #0
	adds r1, #0x7c
	ldr r3, .L080B0430  @ gUnknown_08A2149E
	str r4, [sp]
	movs r0, #0
	adds r2, r5, #0
	bl PutSpriteExt
	ldrh r2, [r6, #0x2c]
	movs r0, #0x30
	adds r1, r5, #0
	bl func_080B0240
.L080B03CA:
	adds r6, #0x3d
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x11
	ldr r5, .L080B0434  @ 0x000001FF
	ands r1, r5
	ldr r3, .L080B0438  @ gUnknown_08A21440
	movs r4, #0xc0
	lsls r4, r4, #6
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x58
	bl PutSprite
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x11
	ands r1, r5
	ldr r3, .L080B043C  @ gUnknown_08A2144E
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x68
	bl PutSprite
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r1, r1, #3
	adds r1, #0x11
	ands r1, r5
	ldr r3, .L080B0440  @ gUnknown_08A2145C
	str r4, [sp]
	movs r0, #0xb
	movs r2, #0x78
	bl PutSprite
	adds r0, r7, #0
	bl func_080B0204
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0424: .4byte gUnknown_08A2146A
.L080B0428: .4byte gUnknown_08A2148A
.L080B042C: .4byte gUnknown_08A20E74
.L080B0430: .4byte gUnknown_08A2149E
.L080B0434: .4byte 0x000001FF
.L080B0438: .4byte gUnknown_08A21440
.L080B043C: .4byte gUnknown_08A2144E
.L080B0440: .4byte gUnknown_08A2145C

	THUMB_FUNC_END func_080B0324

	THUMB_FUNC_START func_080B0444
func_080B0444: @ 0x080B0444
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B0454  @ gUnknown_08A21530
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080B0454: .4byte gUnknown_08A21530

	THUMB_FUNC_END func_080B0444

	THUMB_FUNC_START func_080B0458
func_080B0458: @ 0x080B0458
	push {r4, lr}
	ldr r0, .L080B0490  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0xa0
	bls .L080B046A
	movs r2, #0
.L080B046A:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne .L080B04AE
	cmp r2, #0x63
	bhi .L080B049C
	ldr r1, .L080B0494  @ 0x04000050
	movs r0, #0xc1
	strh r0, [r1]
	ldr r4, .L080B0498  @ 0x04000054
	movs r0, #0x64
	subs r0, r0, r2
	lsls r0, r0, #4
	movs r1, #0x64
	bl __divsi3
	strh r0, [r4]
	b .L080B04AE
	.align 2, 0
.L080B0490: .4byte 0x04000006
.L080B0494: .4byte 0x04000050
.L080B0498: .4byte 0x04000054
.L080B049C:
	ldr r1, .L080B04B4  @ 0x04000050
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, #2
	ldr r2, .L080B04B8  @ 0x0000100A
	adds r0, r2, #0
	strh r0, [r1]
.L080B04AE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B04B4: .4byte 0x04000050
.L080B04B8: .4byte 0x0000100A

	THUMB_FUNC_END func_080B0458

	THUMB_FUNC_START func_080B04BC
func_080B04BC: @ 0x080B04BC
	push {lr}
	movs r1, #4
	str r1, [r0, #0x58]
	ldr r0, .L080B04F0  @ gUnknown_08A21550
	bl SetupBackgrounds
	ldr r2, .L080B04F4  @ gDispIo
	ldrb r1, [r2]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	ldrb r1, [r2, #0x15]
	movs r0, #0x3f
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	strb r0, [r2, #0x15]
	pop {r0}
	bx r0
	.align 2, 0
.L080B04F0: .4byte gUnknown_08A21550
.L080B04F4: .4byte gDispIo

	THUMB_FUNC_END func_080B04BC

	THUMB_FUNC_START func_080B04F8
func_080B04F8: @ 0x080B04F8
	push {lr}
	ldr r0, .L080B058C  @ gUnknown_08B1754C
	movs r1, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L080B0590  @ gUnknown_08A295B4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B0594  @ gUnknown_08B12DB4
	ldr r1, .L080B0598  @ 0x06001000
	bl Decompress
	ldr r0, .L080B059C  @ gBg0Tm
	ldr r1, .L080B05A0  @ gUnknown_08A295D4
	movs r2, #0x80
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	ldr r0, .L080B05A4  @ gUnknown_08A2C11C
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	bl ApplyPaletteExt
	ldr r0, .L080B05A8  @ gUnknown_08A29A88
	ldr r1, .L080B05AC  @ 0x06010800
	bl Decompress
	ldr r0, .L080B05B0  @ gUnknown_08A2B1E4
	ldr r1, .L080B05B4  @ 0x06014000
	bl Decompress
	ldr r0, .L080B05B8  @ func_080B0458
	bl SetOnHBlankA
	ldr r2, .L080B05BC  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldrb r0, [r2, #0xc]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0xc]
	ldrb r3, [r2, #0x10]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0x10]
	ldrb r3, [r2, #0x14]
	adds r0, r1, #0
	ands r0, r3
	movs r3, #2
	orrs r0, r3
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r1, r0
	orrs r1, r3
	strb r1, [r2, #0x18]
	pop {r0}
	bx r0
	.align 2, 0
.L080B058C: .4byte gUnknown_08B1754C
.L080B0590: .4byte gUnknown_08A295B4
.L080B0594: .4byte gUnknown_08B12DB4
.L080B0598: .4byte 0x06001000
.L080B059C: .4byte gBg0Tm
.L080B05A0: .4byte gUnknown_08A295D4
.L080B05A4: .4byte gUnknown_08A2C11C
.L080B05A8: .4byte gUnknown_08A29A88
.L080B05AC: .4byte 0x06010800
.L080B05B0: .4byte gUnknown_08A2B1E4
.L080B05B4: .4byte 0x06014000
.L080B05B8: .4byte func_080B0458
.L080B05BC: .4byte gDispIo

	THUMB_FUNC_END func_080B04F8

	THUMB_FUNC_START nullsub_66
nullsub_66: @ 0x080B05C0
	bx lr

	THUMB_FUNC_END nullsub_66

	THUMB_FUNC_START func_080B05C4
func_080B05C4: @ 0x080B05C4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x58]
	cmp r0, #0
	blt .L080B05FC
	ldr r3, .L080B0604  @ gUnknown_08A2051C
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	movs r2, #8
	bl PutSpriteExt
	ldr r1, .L080B0608  @ gUnknown_08A2099C
	ldr r0, [r4, #0x58]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x40
	movs r2, #0x10
	bl PutSpriteExt
.L080B05FC:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0604: .4byte gUnknown_08A2051C
.L080B0608: .4byte gUnknown_08A2099C

	THUMB_FUNC_END func_080B05C4

	THUMB_FUNC_START func_080B060C
func_080B060C: @ 0x080B060C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B061C  @ gUnknown_08A21568
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B061C: .4byte gUnknown_08A21568

	THUMB_FUNC_END func_080B060C

	THUMB_FUNC_START func_080B0620
func_080B0620: @ 0x080B0620
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080B0634  @ gUnknown_08A21568
	bl FindProc
	str r4, [r0, #0x58]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0634: .4byte gUnknown_08A21568

	THUMB_FUNC_END func_080B0620

	THUMB_FUNC_START func_080B0638
func_080B0638: @ 0x080B0638
	push {lr}
	sub sp, #4
	ldr r0, .L080B066C  @ gUnknown_08A209F0
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x18
	movs r2, #8
	bl PutSpriteExt
	ldr r0, .L080B0670  @ gUnknown_08A209E4
	ldr r3, [r0]
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x18
	movs r2, #0x10
	bl PutSpriteExt
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080B066C: .4byte gUnknown_08A209F0
.L080B0670: .4byte gUnknown_08A209E4

	THUMB_FUNC_END func_080B0638

	THUMB_FUNC_START func_080B0674
func_080B0674: @ 0x080B0674
	push {r4, lr}
	ldr r2, .L080B06B4  @ gPlaySt
	ldrb r1, [r2, #0x14]
	movs r3, #0x40
	adds r0, r3, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	negs r0, r0
	asrs r4, r0, #0x1f
	movs r0, #4
	ands r4, r0
	adds r0, r2, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	cmp r0, #0
	blt .L080B06B8
	ldrb r1, [r2, #0x1b]
	cmp r1, #1
	bne .L080B06A2
	movs r0, #0x10
	orrs r4, r0
.L080B06A2:
	cmp r1, #2
	bne .L080B06AA
	movs r0, #0x20
	orrs r4, r0
.L080B06AA:
	cmp r1, #3
	bne .L080B06C2
.L080B06AE:
	orrs r4, r3
	b .L080B06C2
	.align 2, 0
.L080B06B4: .4byte gPlaySt
.L080B06B8:
	ldrb r0, [r2, #0x1b]
	cmp r0, #3
	beq .L080B06AE
	movs r0, #0x20
	orrs r4, r0
.L080B06C2:
	movs r0, #1
	orrs r0, r4
	movs r1, #0x18
	bl func_080895B4
	adds r0, r4, #0
	movs r1, #0x19
	bl func_080895B4
	bl EnablePalSync
	movs r0, #0xac
	lsls r0, r0, #4
	bl func_08089678
	movs r4, #0xb4
	lsls r4, r4, #4
	ldr r0, .L080B06F8  @ gPlaySt
	bl func_08089768
	adds r1, r0, #0
	adds r0, r4, #0
	bl LoadChapterTitleGfx
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B06F8: .4byte gPlaySt

	THUMB_FUNC_END func_080B0674

	THUMB_FUNC_START func_080B06FC
func_080B06FC: @ 0x080B06FC
	push {r4, r5, lr}
	ldr r0, .L080B074C  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0xa0
	bls .L080B070E
	movs r5, #0
.L080B070E:
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	bne .L080B0746
	cmp r5, #0x63
	bhi .L080B0730
	ldr r1, .L080B0750  @ 0x04000050
	movs r0, #0xc8
	strh r0, [r1]
	ldr r4, .L080B0754  @ 0x04000054
	movs r0, #0x64
	subs r0, r0, r5
	lsls r0, r0, #4
	movs r1, #0x64
	bl __divsi3
	strh r0, [r4]
.L080B0730:
	cmp r5, #0
	bne .L080B073C
	ldr r0, .L080B0758  @ 0x04000012
	ldr r1, .L080B075C  @ gDispIo
	ldrh r1, [r1, #0x1e]
	strh r1, [r0]
.L080B073C:
	cmp r5, #0x78
	bne .L080B0746
	ldr r1, .L080B0758  @ 0x04000012
	movs r0, #4
	strh r0, [r1]
.L080B0746:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B074C: .4byte 0x04000006
.L080B0750: .4byte 0x04000050
.L080B0754: .4byte 0x04000054
.L080B0758: .4byte 0x04000012
.L080B075C: .4byte gDispIo

	THUMB_FUNC_END func_080B06FC

	THUMB_FUNC_START InitBonusContentClaimList
InitBonusContentClaimList: @ 0x080B0760
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	movs r0, #0
	mov r9, r0
	mov r0, sp
	mov r1, r9
	strh r1, [r0]
	ldr r0, .L080B07D0  @ gUnknown_08A21598
	ldr r1, [r0]
	ldr r2, .L080B07D4  @ 0x01000040
	mov r0, sp
	bl CpuSet
	mov r0, sp
	adds r0, #2
	mov r3, r9
	strh r3, [r0]
	ldr r4, .L080B07D8  @ gUnknown_08A21590
	ldr r1, [r4]
	ldr r2, .L080B07DC  @ 0x010000A2
	bl CpuSet
	ldr r0, [r4]
	bl LoadBonusContentData
	cmp r0, #0
	beq .L080B086E
	ldr r0, [r4]
	ldr r1, .L080B07E0  @ gUnknown_08A21594
	ldr r1, [r1]
	movs r2, #0x51
	bl CpuFastSet
	movs r0, #0
	mov r8, r0
	movs r7, #0
.L080B07AE:
	ldr r2, .L080B07D8  @ gUnknown_08A21590
	ldr r0, [r2]
	adds r3, r0, r7
	ldrb r1, [r3]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq .L080B0852
	ldrb r1, [r3, #1]
	cmp r1, #1
	beq .L080B07EA
	cmp r1, #1
	bgt .L080B07E4
	cmp r1, #0
	beq .L080B07F6
	b .L080B0834
	.align 2, 0
.L080B07D0: .4byte gUnknown_08A21598
.L080B07D4: .4byte 0x01000040
.L080B07D8: .4byte gUnknown_08A21590
.L080B07DC: .4byte 0x010000A2
.L080B07E0: .4byte gUnknown_08A21594
.L080B07E4:
	cmp r1, #2
	beq .L080B07F6
	b .L080B0834
.L080B07EA:
	ldr r0, .L080B0820  @ gPlaySt
	adds r0, #0x2b
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq .L080B0852
.L080B07F6:
	ldr r5, .L080B0824  @ gUnknown_08A21598
	ldr r0, [r5]
	mov r1, r9
	lsls r4, r1, #2
	adds r0, r4, r0
	movs r6, #0
	mov r3, r8
	strb r3, [r0]
	bl GetBonusContentClaimFlags
	movs r2, #1
	adds r1, r2, #0
	mov r3, r8
	lsls r1, r3
	ands r1, r0
	cmp r1, #0
	beq .L080B0828
	ldr r0, [r5]
	adds r0, r4, r0
	strb r6, [r0, #1]
	b .L080B082E
	.align 2, 0
.L080B0820: .4byte gPlaySt
.L080B0824: .4byte gUnknown_08A21598
.L080B0828:
	ldr r0, [r5]
	adds r0, r4, r0
	strb r2, [r0, #1]
.L080B082E:
	movs r0, #1
	add r9, r0
	ldr r2, .L080B0878  @ gUnknown_08A21590
.L080B0834:
	ldr r0, [r2]
	adds r0, r0, r7
	ldrb r1, [r0]
	movs r0, #3
	ands r0, r1
	cmp r0, #1
	bne .L080B0852
	ldr r0, .L080B087C  @ gUnknown_08A21594
	ldr r1, [r0]
	adds r1, r1, r7
	ldrb r2, [r1]
	movs r0, #0xfc
	ands r0, r2
	adds r0, #2
	strb r0, [r1]
.L080B0852:
	adds r7, #0x14
	movs r1, #1
	add r8, r1
	mov r3, r8
	cmp r3, #0xf
	ble .L080B07AE
	ldr r0, .L080B0880  @ gUnknown_08A2159C
	ldr r0, [r0]
	mov r1, r9
	str r1, [r0]
	ldr r0, .L080B087C  @ gUnknown_08A21594
	ldr r0, [r0]
	bl SaveBonusContentData
.L080B086E:
	mov r3, r9
	cmp r3, #0
	beq .L080B0884
	movs r0, #1
	b .L080B0886
	.align 2, 0
.L080B0878: .4byte gUnknown_08A21590
.L080B087C: .4byte gUnknown_08A21594
.L080B0880: .4byte gUnknown_08A2159C
.L080B0884:
	movs r0, #0
.L080B0886:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END InitBonusContentClaimList

	THUMB_FUNC_START DrawBonusItemMenuEntry
DrawBonusItemMenuEntry: @ 0x080B0894
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r5, r0, #0
	ldr r4, .L080B0938  @ gUnknown_08A215A0
	movs r1, #6
	bl __modsi3
	lsls r0, r0, #4
	ldr r1, [r4]
	adds r6, r1, r0
	lsls r0, r5, #1
	str r0, [sp, #8]
	movs r0, #0x1f
	ldr r1, [sp, #8]
	ands r1, r0
	str r1, [sp, #8]
	ldr r0, .L080B093C  @ gUnknown_08A21598
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldrb r2, [r0, #1]
	str r2, [sp, #0xc]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r3, .L080B0940  @ gUnknown_08A21590
	ldr r1, [r3]
	lsls r0, r0, #2
	ldr r2, [sp, #0x10]
	adds r0, r0, r2
	lsls r7, r0, #2
	adds r1, r1, r7
	ldrb r1, [r1, #2]
	mov r8, r1
	movs r3, #0
	mov r9, r3
	ldr r0, [sp, #8]
	lsls r4, r0, #6
	ldr r1, .L080B0944  @ gBg2Tm
	adds r1, r1, r4
	mov sl, r1
	mov r0, sl
	movs r1, #0x14
	movs r2, #1
	bl TmFillRect_thm
	adds r0, r6, #0
	bl ClearText
	cmp r5, #0x1f
	ble .L080B0906
	b .L080B0A08
.L080B0906:
	ldr r2, .L080B0940  @ gUnknown_08A21590
	ldr r0, [r2]
	adds r1, r0, r7
	ldrb r0, [r1]
	movs r2, #3
	ands r2, r0
	cmp r2, #0
	beq .L080B0A08
	cmp r2, #1
	bne .L080B091E
	movs r3, #4
	mov r9, r3
.L080B091E:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	bne .L080B0928
	movs r2, #1
	mov r9, r2
.L080B0928:
	ldrb r0, [r1, #1]
	cmp r0, #0
	blt .L080B09CA
	cmp r0, #1
	ble .L080B0948
	cmp r0, #2
	beq .L080B099C
	b .L080B09CA
	.align 2, 0
.L080B0938: .4byte gUnknown_08A215A0
.L080B093C: .4byte gUnknown_08A21598
.L080B0940: .4byte gUnknown_08A21590
.L080B0944: .4byte gBg2Tm
.L080B0948:
	mov r0, r8
	bl GetItemName
	ldr r1, .L080B0998  @ gBg2Tm
	adds r1, #4
	adds r1, r4, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	mov r2, r9
	movs r3, #0
	bl PutDrawText
	ldr r0, .L080B0998  @ gBg2Tm
	adds r0, #0x14
	adds r5, r4, r0
	mov r4, r9
	cmp r4, #0
	bne .L080B0972
	movs r4, #2
.L080B0972:
	mov r0, r8
	bl GetItemMaxUses
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutNumberOrBlank
	mov r0, r8
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl PutIcon
	b .L080B09CA
	.align 2, 0
.L080B0998: .4byte gBg2Tm
.L080B099C:
	mov r0, r8
	bl GetItemName
	ldr r1, .L080B0A18  @ gBg2Tm
	adds r1, #4
	adds r1, r4, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	mov r2, r9
	movs r3, #0
	bl PutDrawText
	mov r0, r8
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl PutIcon
.L080B09CA:
	adds r6, #8
	adds r0, r6, #0
	bl ClearText
	ldr r3, [sp, #8]
	lsls r1, r3, #6
	ldr r0, .L080B0A1C  @ gBg2Tm+0x18
	adds r5, r1, r0
	mov r2, r9
	cmp r2, #0
	bne .L080B09E2
	movs r2, #3
.L080B09E2:
	movs r0, #0
	str r0, [sp]
	ldr r0, .L080B0A20  @ gUnknown_08A21590
	ldr r3, [sp, #0x10]
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #2
	ldr r0, [r0]
	adds r0, r0, r1
	adds r0, #3
	str r0, [sp, #4]
	adds r0, r6, #0
	adds r1, r5, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #4
	bl EnableBgSync
.L080B0A08:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0A18: .4byte gBg2Tm
.L080B0A1C: .4byte gBg2Tm+0x18
.L080B0A20: .4byte gUnknown_08A21590

	THUMB_FUNC_END DrawBonusItemMenuEntry

	THUMB_FUNC_START SetBonusContentClaimed
SetBonusContentClaimed: @ 0x080B0A24
	push {r4, r5, lr}
	ldr r1, .L080B0A4C  @ gUnknown_08A21598
	lsls r0, r0, #2
	ldr r4, [r1]
	adds r4, r4, r0
	movs r5, #0
	ldrsb r5, [r4, r5]
	bl GetBonusContentClaimFlags
	adds r1, r0, #0
	movs r0, #1
	lsls r0, r5
	orrs r0, r1
	bl SetBonusContentClaimFlags
	movs r0, #0
	strb r0, [r4, #1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0A4C: .4byte gUnknown_08A21598

	THUMB_FUNC_END SetBonusContentClaimed

	THUMB_FUNC_START func_080B0A50
func_080B0A50: @ 0x080B0A50
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	bl ResetUnitSprites
	movs r4, #1
.L080B0A5C:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L080B0A98
	ldr r3, [r2]
	cmp r3, #0
	beq .L080B0A98
	ldr r0, [r2, #0xc]
	ldr r1, .L080B0AB4  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L080B0A98
	ldrb r0, [r3, #4]
	cmp r0, #1
	beq .L080B0A82
	cmp r0, #0xf
	bne .L080B0A98
.L080B0A82:
	ldr r0, .L080B0AB8  @ gUnknown_08A215A4
	ldr r1, [r0]
	lsls r0, r5, #3
	adds r0, r0, r1
	str r2, [r0, #4]
	adds r5, #1
	adds r0, r2, #0
	bl GetUnitSpriteId
	bl UseUnitSprite
.L080B0A98:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080B0A5C
	adds r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x2b
	strb r1, [r0]
	bl ApplyUnitSpritePalettes
	bl ForceSyncUnitSpriteSheet
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0AB4: .4byte 0x00010004
.L080B0AB8: .4byte gUnknown_08A215A4

	THUMB_FUNC_END func_080B0A50

	THUMB_FUNC_START func_080B0ABC
func_080B0ABC: @ 0x080B0ABC
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	movs r1, #6
	movs r2, #0x18
	movs r3, #0xc
	bl DrawUiFrame2
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B0ABC

	THUMB_FUNC_START ClaimBonusItemMenu_Init
ClaimBonusItemMenu_Init: @ 0x080B0ADC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	ldr r0, .L080B0D04  @ gUnknown_08B1754C
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L080B0D08  @ gUnknown_08A295B4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B0D0C  @ gUnknown_08B12DB4
	ldr r1, .L080B0D10  @ 0x06008000
	bl Decompress
	ldr r0, .L080B0D14  @ gBg3Tm
	ldr r1, .L080B0D18  @ gUnknown_08A295D4
	movs r2, #0xc0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	bl LoadUiFrameGraphics
	bl ResetText
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl LoadObjUiGfx
	bl func_080B0674
	bl func_080B0ABC
	ldr r0, .L080B0D1C  @ gDispIo
	mov ip, r0
	ldrb r1, [r0, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r7, ip
	adds r7, #0x35
	ldrb r0, [r7]
	movs r4, #1
	orrs r0, r4
	movs r5, #2
	orrs r0, r5
	movs r1, #4
	orrs r0, r1
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r7]
	adds r7, #1
	ldrb r0, [r7]
	orrs r0, r4
	orrs r0, r5
	movs r1, #5
	negs r1, r1
	ands r0, r1
	orrs r0, r3
	orrs r0, r2
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	mov r0, ip
	ldrb r2, [r0, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	mov r2, ip
	strb r0, [r2, #0xc]
	ldrb r2, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r5
	mov r2, ip
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	bl InitBonusContentClaimList
	movs r5, #0
	ldr r0, .L080B0D20  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r5, r0
	bge .L080B0C0C
	ldr r7, .L080B0D24  @ gUnknown_08A215A0
.L080B0BDE:
	lsls r0, r5, #4
	ldr r4, [r7]
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #0xa
	bl InitText
	adds r0, r5, #0
	bl DrawBonusItemMenuEntry
	adds r5, #1
	cmp r5, #5
	bgt .L080B0C0C
	ldr r0, .L080B0D20  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r5, r0
	blt .L080B0BDE
.L080B0C0C:
	adds r0, r6, #0
	adds r0, #0x29
	str r0, [sp]
	movs r1, #0x2e
	adds r1, r1, r6
	mov sl, r1
	movs r2, #0x2a
	adds r2, r2, r6
	mov r8, r2
	movs r0, #0x2b
	adds r0, r0, r6
	mov r9, r0
	ldr r7, .L080B0D24  @ gUnknown_08A215A0
	movs r4, #0x60
	movs r5, #1
.L080B0C2A:
	ldr r0, [r7]
	adds r0, r0, r4
	movs r1, #6
	bl InitText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge .L080B0C2A
	movs r5, #2
	ldr r0, .L080B0D24  @ gUnknown_08A215A0
	ldr r0, [r0]
	adds r0, #0x70
	movs r1, #0xf
	bl InitText
	ldr r0, .L080B0D28  @ func_080B0638
	adds r1, r6, #0
	bl StartParallelWorker
	movs r0, #2
	bl EnableBgSync
	ldr r0, .L080B0D2C  @ func_080B06FC
	bl SetOnHBlankA
	movs r0, #0
	ldr r1, [sp]
	strb r0, [r1]
	movs r1, #0
	strh r0, [r6, #0x2c]
	mov r2, sl
	strb r1, [r2]
	mov r2, r8
	strb r1, [r2]
	mov r1, r9
	strb r5, [r1]
	str r0, [r6, #0x34]
	ldr r1, .L080B0D30  @ 0x0000FFD8
	ldrh r2, [r6, #0x2c]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r0, r6, #0
	bl ResetPrepScreenHandCursor
	movs r0, #0xc0
	lsls r0, r0, #3
	movs r1, #1
	bl func_080AD4A0
	ldr r2, [sp]
	ldrb r1, [r2]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r6, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl func_080AD51C
	adds r0, r6, #0
	bl StartGreenText
	adds r0, r6, #0
	bl Make6CMenuScroll
	movs r0, #0xc8
	movs r1, #0x40
	bl func_080976AC
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	bl func_08097700
	ldrh r1, [r6, #0x2c]
	ldr r0, .L080B0D20  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldrh r2, [r0]
	movs r0, #8
	movs r3, #5
	bl func_080976CC
	adds r0, r6, #0
	bl func_080AC9C0
	adds r0, r6, #0
	bl func_080B0A50
	ldr r0, .L080B0D34  @ 0x06013800
	movs r1, #5
	bl LoadHelpBoxGfx
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0D04: .4byte gUnknown_08B1754C
.L080B0D08: .4byte gUnknown_08A295B4
.L080B0D0C: .4byte gUnknown_08B12DB4
.L080B0D10: .4byte 0x06008000
.L080B0D14: .4byte gBg3Tm
.L080B0D18: .4byte gUnknown_08A295D4
.L080B0D1C: .4byte gDispIo
.L080B0D20: .4byte gUnknown_08A2159C
.L080B0D24: .4byte gUnknown_08A215A0
.L080B0D28: .4byte func_080B0638
.L080B0D2C: .4byte func_080B06FC
.L080B0D30: .4byte 0x0000FFD8
.L080B0D34: .4byte 0x06013800

	THUMB_FUNC_END ClaimBonusItemMenu_Init

	THUMB_FUNC_START ClaimBonusItemMenu_MainLoop
ClaimBonusItemMenu_MainLoop: @ 0x080B0D38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x29
	ldrb r4, [r6]
	movs r0, #0x2e
	adds r0, r0, r5
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B0D58
	b .L080B0F36
.L080B0D58:
	ldr r0, .L080B0D94  @ gKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r7, #1
	adds r0, r7, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B0E48
	ldr r0, .L080B0D98  @ gUnknown_08A21598
	ldr r1, [r0]
	lsls r0, r4, #2
	adds r0, r0, r1
	movs r4, #0
	ldrsb r4, [r0, r4]
	bl GetBonusContentClaimFlags
	adds r1, r7, #0
	lsls r1, r4
	ands r1, r0
	cmp r1, #0
	beq .L080B0DA0
	movs r1, #1
	negs r1, r1
	ldr r2, .L080B0D9C  @ 0x0000088F
	adds r0, r1, #0
	adds r3, r5, #0
	bl func_080AEBCC
	b .L080B0F82
	.align 2, 0
.L080B0D94: .4byte gKeySt
.L080B0D98: .4byte gUnknown_08A21598
.L080B0D9C: .4byte 0x0000088F
.L080B0DA0:
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B0E2C
	ldr r7, .L080B0DC8  @ gUnknown_08A21590
	ldr r1, [r7]
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r4, r0, #2
	adds r1, r1, r4
	ldrb r0, [r1, #1]
	cmp r0, #0
	bge .L080B0DBE
	b .L080B0F82
.L080B0DBE:
	cmp r0, #1
	ble .L080B0DCC
	cmp r0, #2
	beq .L080B0DF0
	b .L080B0F82
	.align 2, 0
.L080B0DC8: .4byte gUnknown_08A21590
.L080B0DCC:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	ldr r0, .L080B0DEC  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080B0DE2
	b .L080B0F82
.L080B0DE2:
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L080B0F82
	.align 2, 0
.L080B0DEC: .4byte gPlaySt
.L080B0DF0:
	ldrb r0, [r1, #2]
	cmp r0, #0x9f
	bne .L080B0DFC
	ldr r0, .L080B0E24  @ 0x00000BB8
	bl AddGold
.L080B0DFC:
	ldr r0, [r7]
	adds r0, r0, r4
	ldrb r0, [r0, #2]
	cmp r0, #0xa0
	bne .L080B0E0C
	ldr r0, .L080B0E28  @ 0x00001388
	bl AddGold
.L080B0E0C:
	ldrb r0, [r6]
	bl SetBonusContentClaimed
	ldrb r0, [r6]
	bl DrawBonusItemMenuEntry
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b .L080B0F82
	.align 2, 0
.L080B0E24: .4byte 0x00000BB8
.L080B0E28: .4byte 0x00001388
.L080B0E2C:
	ldr r0, .L080B0E44  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080B0E3A
	b .L080B0F82
.L080B0E3A:
	movs r0, #0x6c
	bl m4aSongNumStart
	b .L080B0F82
	.align 2, 0
.L080B0E44: .4byte gPlaySt
.L080B0E48:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B0E70
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, .L080B0E6C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge .L080B0E64
	b .L080B0F82
.L080B0E64:
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080B0F82
	.align 2, 0
.L080B0E6C: .4byte gPlaySt
.L080B0E70:
	ldrh r1, [r2, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080B0E7C
	subs r4, #1
.L080B0E7C:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080B0E86
	adds r4, #1
.L080B0E86:
	ldrb r0, [r6]
	cmp r0, r4
	beq .L080B0F28
	cmp r4, #0
	blt .L080B0F82
	ldr r0, .L080B0ED0  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	cmp r4, r0
	bge .L080B0F82
	ldr r0, .L080B0ED4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B0EAC
	movs r0, #0x66
	bl m4aSongNumStart
.L080B0EAC:
	strb r4, [r6]
	ldrb r2, [r6]
	lsls r1, r2, #4
	movs r3, #0x2c
	ldrsh r0, [r5, r3]
	cmp r1, r0
	bne .L080B0ED8
	cmp r2, #0
	beq .L080B0ED8
	movs r0, #0xff
	mov r4, r8
	strb r0, [r4]
	ldrb r0, [r6]
	subs r0, #1
	bl DrawBonusItemMenuEntry
	b .L080B0F28
	.align 2, 0
.L080B0ED0: .4byte gUnknown_08A2159C
.L080B0ED4: .4byte gPlaySt
.L080B0ED8:
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r3, [r0]
	lsls r1, r3, #4
	movs r4, #0x2c
	ldrsh r2, [r5, r4]
	subs r1, r1, r2
	adds r2, r0, #0
	cmp r1, #0x40
	bne .L080B0F10
	ldr r0, .L080B0F0C  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldr r0, [r0]
	subs r0, #1
	cmp r3, r0
	bge .L080B0F10
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #1
	strb r0, [r1]
	ldrb r0, [r2]
	adds r0, #1
	bl DrawBonusItemMenuEntry
	b .L080B0F28
	.align 2, 0
.L080B0F0C: .4byte gUnknown_08A2159C
.L080B0F10:
	ldrb r1, [r2]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl func_080AD51C
.L080B0F28:
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B0F82
.L080B0F36:
	adds r2, r5, #0
	adds r2, #0x2e
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bge .L080B0F48
	ldrh r0, [r5, #0x2c]
	subs r0, #4
	strh r0, [r5, #0x2c]
.L080B0F48:
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble .L080B0F56
	ldrh r0, [r5, #0x2c]
	adds r0, #4
	strh r0, [r5, #0x2c]
.L080B0F56:
	ldrh r1, [r5, #0x2c]
	movs r0, #0xf
	ands r1, r0
	cmp r1, #0
	bne .L080B0F62
	strb r1, [r2]
.L080B0F62:
	ldr r1, .L080B0F8C  @ 0x0000FFD8
	ldrh r2, [r5, #0x2c]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrh r1, [r5, #0x2c]
	ldr r0, .L080B0F90  @ gUnknown_08A2159C
	ldr r0, [r0]
	ldrh r2, [r0]
	movs r0, #8
	movs r3, #5
	bl func_080976CC
.L080B0F82:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B0F8C: .4byte 0x0000FFD8
.L080B0F90: .4byte gUnknown_08A2159C

	THUMB_FUNC_END ClaimBonusItemMenu_MainLoop

	THUMB_FUNC_START func_080B0F94
func_080B0F94: @ 0x080B0F94
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	bge .L080B0FFC
	movs r4, #0x30
.L080B0FA8:
	ldr r0, .L080B0FD4  @ gUnknown_08A215A4
	ldr r1, [r0]
	lsls r0, r5, #3
	adds r0, r0, r1
	ldr r1, [r0, #4]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B0FD8
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x60
	adds r2, r4, #0
	movs r3, #0xc4
	lsls r3, r3, #8
	bl PutUnitSpriteForJid
	b .L080B0FEC
	.align 2, 0
.L080B0FD4: .4byte gUnknown_08A215A4
.L080B0FD8:
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x60
	adds r2, r4, #0
	movs r3, #0xf4
	lsls r3, r3, #8
	bl PutUnitSpriteForJid
.L080B0FEC:
	adds r4, #0x10
	adds r5, #1
	adds r0, r6, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r5, r0
	blt .L080B0FA8
.L080B0FFC:
	bl SyncUnitSpriteSheet
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B0F94

	THUMB_FUNC_START func_080B1008
func_080B1008: @ 0x080B1008
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq .L080B101A
	bl Proc_End
	movs r0, #0
	str r0, [r4, #0x34]
.L080B101A:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B1008

	THUMB_FUNC_START func_080B1020
func_080B1020: @ 0x080B1020
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	ldr r0, .L080B1138  @ gUnknown_08A215A0
	ldr r0, [r0]
	adds r6, r0, #0
	adds r6, #0x60
	ldr r0, [sp, #4]
	adds r0, #0x2b
	ldrb r0, [r0]
	mov sl, r0
	lsls r4, r0, #1
	adds r3, r4, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0xb
	movs r1, #5
	movs r2, #0xe
	bl DrawUiFrame2
	ldr r3, .L080B113C  @ gDispIo
	ldrb r0, [r3, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0x58
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xc8
	strb r0, [r1]
	adds r4, #7
	lsls r4, r4, #3
	adds r0, r3, #0
	adds r0, #0x30
	strb r4, [r0]
	ldr r0, [sp, #4]
	adds r0, #0x29
	ldrb r2, [r0]
	lsls r2, r2, #4
	ldr r1, [sp, #4]
	movs r3, #0x2c
	ldrsh r0, [r1, r3]
	subs r0, #0x38
	subs r2, r2, r0
	movs r0, #0
	movs r1, #0x28
	movs r3, #1
	bl func_080AC9D4
	ldr r0, [sp, #4]
	adds r0, #0x2a
	ldrb r1, [r0]
	lsls r1, r1, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x5c
	movs r2, #0xc
	bl func_080AD51C
	movs r0, #0
	mov r9, r0
	cmp r9, sl
	bge .L080B11C0
	ldr r0, .L080B1140  @ gBg0Tm+0x1C
	movs r1, #0xc9
	lsls r1, r1, #1
	adds r1, r0, r1
	str r1, [sp, #8]
	movs r3, #0xc0
	lsls r3, r3, #1
	adds r3, r0, r3
	str r3, [sp, #0xc]
	movs r0, #0
	mov r8, r0
.L080B10EE:
	movs r7, #0
	ldr r1, .L080B1144  @ gUnknown_08A215A4
	ldr r0, [r1]
	add r0, r8
	ldr r4, [r0, #4]
	adds r0, r6, #0
	bl ClearText
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetCursor
	mov r0, sl
	subs r0, #1
	cmp r9, r0
	bne .L080B1148
	bl GetConvoyItemCount
	adds r5, r0, #0
	cmp r5, #0x64
	bne .L080B111A
	movs r7, #1
.L080B111A:
	adds r0, r6, #0
	movs r1, #0
	adds r2, r7, #0
	bl Text_SetParams
	movs r0, #0xc2
	lsls r0, r0, #2
	bl GetMsg
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
	b .L080B1170
	.align 2, 0
.L080B1138: .4byte gUnknown_08A215A0
.L080B113C: .4byte gDispIo
.L080B1140: .4byte gBg0Tm+0x1C
.L080B1144: .4byte gUnknown_08A215A4
.L080B1148:
	adds r0, r4, #0
	bl GetUnitItemCount
	adds r5, r0, #0
	cmp r5, #5
	bne .L080B1156
	movs r7, #1
.L080B1156:
	adds r0, r6, #0
	movs r1, #0
	adds r2, r7, #0
	bl Text_SetParams
	ldr r0, [r4]
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
.L080B1170:
	cmp r7, #0
	bne .L080B1184
	ldr r3, .L080B1180  @ gUnknown_08A215A4
	ldr r0, [r3]
	add r0, r8
	movs r1, #1
	b .L080B118C
	.align 2, 0
.L080B1180: .4byte gUnknown_08A215A4
.L080B1184:
	ldr r1, .L080B11DC  @ gUnknown_08A215A4
	ldr r0, [r1]
	add r0, r8
	movs r1, #0
.L080B118C:
	strb r1, [r0]
	adds r0, r6, #0
	ldr r1, [sp, #0xc]
	bl PutText
	movs r1, #1
	cmp r7, #0
	bne .L080B119E
	movs r1, #2
.L080B119E:
	ldr r0, [sp, #8]
	adds r2, r5, #0
	bl PutNumber
	adds r6, #8
	ldr r3, [sp, #8]
	adds r3, #0x80
	str r3, [sp, #8]
	ldr r0, [sp, #0xc]
	adds r0, #0x80
	str r0, [sp, #0xc]
	movs r1, #8
	add r8, r1
	movs r3, #1
	add r9, r3
	cmp r9, sl
	blt .L080B10EE
.L080B11C0:
	ldr r0, .L080B11E0  @ func_080B0F94
	ldr r1, [sp, #4]
	bl StartParallelWorker
	ldr r1, [sp, #4]
	str r0, [r1, #0x34]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B11DC: .4byte gUnknown_08A215A4
.L080B11E0: .4byte func_080B0F94

	THUMB_FUNC_END func_080B1020

	THUMB_FUNC_START func_080B11E4
func_080B11E4: @ 0x080B11E4
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	movs r0, #0x2a
	adds r0, r0, r4
	mov r8, r0
	ldrb r3, [r0]
	ldr r1, .L080B122C  @ gUnknown_08A215A4
	mov r9, r1
	ldr r0, [r1]
	lsls r3, r3, #3
	adds r3, r3, r0
	ldr r0, .L080B1230  @ gUnknown_08A21598
	adds r6, r4, #0
	adds r6, #0x29
	ldrb r5, [r6]
	lsls r1, r5, #2
	ldr r0, [r0]
	adds r0, r0, r1
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, .L080B1234  @ gUnknown_08A21590
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r1, r1, r0
	ldrb r7, [r1, #2]
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bne .L080B1238
	movs r0, #0
	b .L080B127A
	.align 2, 0
.L080B122C: .4byte gUnknown_08A215A4
.L080B1230: .4byte gUnknown_08A21598
.L080B1234: .4byte gUnknown_08A21590
.L080B1238:
	adds r0, r5, #0
	bl SetBonusContentClaimed
	ldrb r0, [r6]
	bl DrawBonusItemMenuEntry
	mov r0, r8
	ldrb r2, [r0]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bne .L080B1260
	adds r0, r7, #0
	bl CreateItem
	bl AddItemToConvoy
	b .L080B1278
.L080B1260:
	mov r0, r9
	ldr r1, [r0]
	lsls r0, r2, #3
	adds r0, r0, r1
	ldr r4, [r0, #4]
	adds r0, r7, #0
	bl CreateItem
	adds r1, r0, #0
	adds r0, r4, #0
	bl UnitAddItem
.L080B1278:
	movs r0, #1
.L080B127A:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B11E4

	THUMB_FUNC_START func_080B1288
func_080B1288: @ 0x080B1288
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2a
	ldrb r4, [r6]
	ldr r0, .L080B12B8  @ gKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B12CE
	adds r0, r5, #0
	bl func_080B11E4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B12BC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b .L080B1344
	.align 2, 0
.L080B12B8: .4byte gKeySt
.L080B12BC:
	movs r1, #1
	negs r1, r1
	movs r2, #0x89
	lsls r2, r2, #4
	adds r0, r1, #0
	adds r3, r5, #0
	bl func_080AEBCC
	b .L080B1344
.L080B12CE:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B12F4
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, .L080B12F0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B1344
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080B1344
	.align 2, 0
.L080B12F0: .4byte gPlaySt
.L080B12F4:
	ldrh r1, [r2, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080B1300
	subs r4, #1
.L080B1300:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq .L080B130A
	adds r4, #1
.L080B130A:
	ldrb r0, [r6]
	cmp r4, r0
	beq .L080B1344
	cmp r4, #0
	blt .L080B1344
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r4, r0
	bge .L080B1344
	ldr r0, .L080B134C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B1330
	movs r0, #0x66
	bl m4aSongNumStart
.L080B1330:
	strb r4, [r6]
	ldrb r1, [r6]
	lsls r1, r1, #4
	adds r1, #0x30
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x5c
	movs r2, #0xc
	bl func_080AD51C
.L080B1344:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B134C: .4byte gPlaySt

	THUMB_FUNC_END func_080B1288

	THUMB_FUNC_START func_080B1350
func_080B1350: @ 0x080B1350
	push {r4, lr}
	adds r4, r0, #0
	bl func_080B1008
	ldr r2, .L080B13B0  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, .L080B13B4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B13B8  @ gBg0Tm
	movs r1, #0
	bl TmFill
	bl func_080B0ABC
	movs r0, #3
	bl EnableBgSync
	movs r0, #0
	bl func_080ACA84
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl func_080AD51C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B13B0: .4byte gDispIo
.L080B13B4: .4byte gBg1Tm
.L080B13B8: .4byte gBg0Tm

	THUMB_FUNC_END func_080B1350

	THUMB_FUNC_START func_080B13BC
func_080B13BC: @ 0x080B13BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x29
	ldrb r0, [r6]
	ldr r1, .L080B14FC  @ gUnknown_08A21598
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, .L080B1500  @ gUnknown_08A21590
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	str r0, [sp, #0x30]
	adds r1, r1, r0
	ldrb r1, [r1, #2]
	str r1, [sp, #0x2c]
	ldr r0, .L080B1504  @ gUnknown_08A215A0
	ldr r0, [r0]
	adds r5, r0, #0
	adds r5, #0x70
	ldr r2, .L080B1508  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r1, .L080B150C  @ gBg0Tm
	mov sl, r1
	mov r0, sl
	movs r1, #0
	bl TmFill
	ldr r0, .L080B1510  @ gBg1Tm
	movs r1, #0
	bl TmFill
	bl func_080B0ABC
	movs r0, #3
	bl EnableBgSync
	adds r0, r4, #0
	bl func_080B1008
	bl GetLastUsedGameSaveSlot
	bl SaveGame
	movs r0, #0
	str r0, [r4, #0x30]
	bl func_080ACA84
	ldrb r1, [r6]
	lsls r1, r1, #4
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	subs r0, #0x38
	subs r1, r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #0x28
	movs r2, #0x13
	bl func_080AD51C
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_SetParams
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [sp, #0x2c]
	bl GetItemName
	adds r7, r0, #0
	ldr r0, .L080B1514  @ 0x00000883
	add r1, sp, #0xc
	bl GetMsgTo
	adds r6, r0, #0
	adds r0, r7, #0
	bl GetStringTextLen
	adds r4, r0, #0
	adds r0, r6, #0
	bl GetStringTextLen
	adds r4, r4, r0
	adds r0, r4, #7
	cmp r0, #0
	bge .L080B1498
	adds r0, #7
.L080B1498:
	asrs r0, r0, #3
	adds r0, #4
	mov r9, r0
	lsrs r0, r0, #0x1f
	add r0, r9
	asrs r0, r0, #1
	movs r1, #0xf
	subs r1, r1, r0
	mov r8, r1
	adds r0, r5, #0
	adds r1, r7, #0
	bl Text_DrawString
	adds r0, r5, #0
	adds r1, r6, #0
	bl Text_DrawString
	mov r0, r8
	lsls r4, r0, #1
	ldr r1, .L080B1518  @ 0x00000286
	add r1, sl
	adds r1, r4, r1
	adds r0, r5, #0
	bl PutText
	ldr r0, .L080B151C  @ 0x00000282
	add r0, sl
	adds r4, r4, r0
	ldr r0, [sp, #0x2c]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	ldr r1, .L080B1500  @ gUnknown_08A21590
	ldr r0, [r1]
	ldr r2, [sp, #0x30]
	adds r0, r0, r2
	ldrb r0, [r0, #1]
	cmp r0, #0
	blt .L080B154A
	cmp r0, #1
	ble .L080B1520
	cmp r0, #2
	beq .L080B1538
	b .L080B154A
	.align 2, 0
.L080B14FC: .4byte gUnknown_08A21598
.L080B1500: .4byte gUnknown_08A21590
.L080B1504: .4byte gUnknown_08A215A0
.L080B1508: .4byte gDispIo
.L080B150C: .4byte gBg0Tm
.L080B1510: .4byte gBg1Tm
.L080B1514: .4byte 0x00000883
.L080B1518: .4byte 0x00000286
.L080B151C: .4byte 0x00000282
.L080B1520:
	ldr r0, .L080B1534  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B154A
	movs r0, #0x5a
	bl m4aSongNumStart
	b .L080B154A
	.align 2, 0
.L080B1534: .4byte gPlaySt
.L080B1538:
	ldr r0, .L080B15D8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B154A
	movs r0, #0xb9
	bl m4aSongNumStart
.L080B154A:
	ldr r0, .L080B15DC  @ gBg1Tm
	movs r1, #3
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	mov r1, r8
	movs r2, #0xa
	mov r3, r9
	bl DrawUiFrame
	ldr r0, .L080B15E0  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r2]
	mov r2, r8
	lsls r0, r2, #3
	mov r1, ip
	adds r1, #0x2d
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x50
	strb r0, [r1]
	mov r0, r8
	add r0, r9
	lsls r0, r0, #3
	subs r1, #5
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x68
	strb r0, [r1]
	movs r0, #3
	bl EnableBgSync
	ldr r2, .L080B15E4  @ 0x0000FFFC
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B15D8: .4byte gPlaySt
.L080B15DC: .4byte gBg1Tm
.L080B15E0: .4byte gDispIo
.L080B15E4: .4byte 0x0000FFFC

	THUMB_FUNC_END func_080B13BC

	THUMB_FUNC_START func_080B15E8
func_080B15E8: @ 0x080B15E8
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x30]
	adds r0, #1
	str r0, [r2, #0x30]
	cmp r0, #0x1e
	ble .L080B1610
	ldr r0, .L080B160C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq .L080B1610
	adds r0, r2, #0
	bl Proc_Break
	b .L080B161C
	.align 2, 0
.L080B160C: .4byte gKeySt
.L080B1610:
	ldr r0, [r2, #0x30]
	cmp r0, #0x78
	ble .L080B161C
	adds r0, r2, #0
	bl Proc_Break
.L080B161C:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B15E8

	THUMB_FUNC_START func_080B1620
func_080B1620: @ 0x080B1620
	push {lr}
	ldr r0, .L080B1660  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B1664  @ gBg1Tm
	movs r1, #0
	bl TmFill
	bl func_080B0ABC
	movs r0, #3
	bl EnableBgSync
	ldr r2, .L080B1668  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	pop {r0}
	bx r0
	.align 2, 0
.L080B1660: .4byte gBg0Tm
.L080B1664: .4byte gBg1Tm
.L080B1668: .4byte gDispIo

	THUMB_FUNC_END func_080B1620

	THUMB_FUNC_START func_080B166C
func_080B166C: @ 0x080B166C
	push {r4, lr}
	adds r4, r0, #0
	bl EndGreenText
	adds r0, r4, #0
	bl EndAllProcChildren
	movs r0, #0
	bl SetOnHBlankA
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B166C

	THUMB_FUNC_START StartClaimBonusItemMenu
StartClaimBonusItemMenu: @ 0x080B1688
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B1698  @ gUnknown_08A215A8
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080B1698: .4byte gUnknown_08A215A8

	THUMB_FUNC_END StartClaimBonusItemMenu

	THUMB_FUNC_START func_080B169C
func_080B169C: @ 0x080B169C
	push {lr}
	ldr r0, .L080B16BC  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r1, #0x32
	ldrsh r2, [r0, r1]
	ldr r0, .L080B16C0  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080B16C4
	adds r0, r2, #3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	b .L080B16C6
	.align 2, 0
.L080B16BC: .4byte gUnknown_08A2E974
.L080B16C0: .4byte gPlaySt
.L080B16C4:
	adds r0, r2, #0
.L080B16C6:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B169C

	THUMB_FUNC_START func_080B16CC
func_080B16CC: @ 0x080B16CC
	ldr r0, .L080B16D8  @ gUnknown_08A2E974
	ldr r0, [r0]
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bx lr
	.align 2, 0
.L080B16D8: .4byte gUnknown_08A2E974

	THUMB_FUNC_END func_080B16CC

	THUMB_FUNC_START func_080B16DC
func_080B16DC: @ 0x080B16DC
	push {lr}
	ldr r1, .L080B16F8  @ gUnknown_08A2E978
	ldr r0, .L080B16FC  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl func_080B1DE8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
.L080B16F8: .4byte gUnknown_08A2E978
.L080B16FC: .4byte gUnknown_08A2E974

	THUMB_FUNC_END func_080B16DC

	THUMB_FUNC_START func_080B1700
func_080B1700: @ 0x080B1700
	push {r4, r5, lr}
	lsls r2, r0, #1
	adds r2, r2, r1
	movs r4, #0x1f
	ands r2, r4
	lsls r2, r2, #5
	ldr r3, .L080B176C  @ gUnknown_08A2E99C
	ldr r1, .L080B1770  @ gUnknown_08A2E978
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #0x2c
	muls r0, r1, r0
	adds r0, r0, r3
	adds r0, #0x24
	ldrb r1, [r0]
	adds r3, r1, #0
	ands r3, r4
	lsls r0, r1, #1
	ldr r1, .L080B1774  @ 0x0000FFC0
	ands r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r3, r3, r0
	movs r0, #0x80
	lsls r0, r0, #7
	adds r1, r3, r0
	ldr r4, .L080B1778  @ gBg1Tm
	adds r0, r2, #2
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r1, [r0]
	adds r0, r2, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r5, .L080B177C  @ 0x00004001
	adds r1, r3, r5
	strh r1, [r0]
	adds r0, r2, #0
	adds r0, #0x22
	lsls r0, r0, #1
	adds r0, r0, r4
	adds r5, #0x1f
	adds r1, r3, r5
	strh r1, [r0]
	adds r2, #0x23
	lsls r2, r2, #1
	adds r2, r2, r4
	ldr r0, .L080B1780  @ 0x00004021
	adds r3, r3, r0
	strh r3, [r2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B176C: .4byte gUnknown_08A2E99C
.L080B1770: .4byte gUnknown_08A2E978
.L080B1774: .4byte 0x0000FFC0
.L080B1778: .4byte gBg1Tm
.L080B177C: .4byte 0x00004001
.L080B1780: .4byte 0x00004021

	THUMB_FUNC_END func_080B1700

	THUMB_FUNC_START func_080B1784
func_080B1784: @ 0x080B1784
	push {r4, r5, lr}
	sub sp, #8
	ldr r4, .L080B17D4  @ gUnknown_08A2E974
	ldr r0, [r4]
	adds r0, #0xa8
	bl ClearText
	ldr r5, .L080B17D8  @ gUnknown_08A2E99C
	bl func_080B16DC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	ldr r2, .L080B17DC  @ gUnknown_08A2E978
	ldr r1, [r4]
	movs r3, #0x2a
	ldrsh r1, [r1, r3]
	adds r1, r1, r2
	ldrb r2, [r1]
	movs r1, #0x2c
	muls r1, r2, r1
	adds r0, r0, r1
	adds r0, r0, r5
	ldrh r0, [r0, #4]
	bl GetMsg
	adds r3, r0, #0
	ldr r0, [r4]
	adds r0, #0xa8
	ldr r1, .L080B17E0  @ gBg0Tm+0x488
	movs r2, #0x16
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B17D4: .4byte gUnknown_08A2E974
.L080B17D8: .4byte gUnknown_08A2E99C
.L080B17DC: .4byte gUnknown_08A2E978
.L080B17E0: .4byte gBg0Tm+0x488

	THUMB_FUNC_END func_080B1784

	THUMB_FUNC_START func_080B17E4
func_080B17E4: @ 0x080B17E4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	ldr r0, .L080B1840  @ gUnknown_08A2E974
	mov r8, r0
	lsls r4, r4, #3
	adds r4, #0x38
	ldr r0, [r0]
	adds r0, r0, r4
	bl ClearText
	ldr r2, .L080B1844  @ gUnknown_08A2E99C
	ldr r0, .L080B1848  @ gUnknown_08A2E978
	adds r5, r5, r0
	ldrb r1, [r5]
	movs r0, #0x2c
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	lsls r6, r6, #6
	ldr r1, .L080B184C  @ gBg1Tm+0x8
	adds r6, r6, r1
	movs r1, #9
	str r1, [sp]
	str r2, [sp, #4]
	adds r1, r6, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B1840: .4byte gUnknown_08A2E974
.L080B1844: .4byte gUnknown_08A2E99C
.L080B1848: .4byte gUnknown_08A2E978
.L080B184C: .4byte gBg1Tm+0x8

	THUMB_FUNC_END func_080B17E4

	THUMB_FUNC_START func_080B1850
func_080B1850: @ 0x080B1850
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp]
	str r2, [sp, #4]
	ldr r1, .L080B1910  @ gUnknown_08A2E978
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r9, r0
	ldr r1, .L080B1914  @ gUnknown_08A2E99C
	movs r0, #0x2c
	mov r2, r9
	muls r2, r0, r2
	adds r0, r2, #0
	adds r4, r0, r1
	ldrb r0, [r4, #8]
	lsrs r0, r0, #3
	str r0, [sp, #8]
	ldr r1, .L080B1918  @ gUnknown_08A2E974
	ldr r2, [sp]
	lsls r0, r2, #3
	adds r5, r0, #0
	adds r5, #0x70
	ldr r0, [r1]
	adds r0, r0, r5
	bl ClearText
	movs r0, #0
	mov r8, r0
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq .L080B18E0
	mov sl, r5
.L080B1898:
	ldr r0, .L080B1918  @ gUnknown_08A2E974
	ldr r0, [r0]
	mov r1, sl
	adds r7, r0, r1
	ldrb r0, [r4, #8]
	adds r6, r0, #0
	subs r6, #0x70
	mov r2, r9
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	bl func_080B1DE8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r5, #1
	cmp r8, r0
	bne .L080B18BC
	movs r5, #2
.L080B18BC:
	ldrh r0, [r4, #6]
	bl GetMsg
	adds r3, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl Text_InsertDrawString
	adds r4, #8
	movs r0, #1
	add r8, r0
	mov r1, r8
	cmp r1, #3
	bgt .L080B18E0
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne .L080B1898
.L080B18E0:
	ldr r0, .L080B1918  @ gUnknown_08A2E974
	ldr r2, [sp]
	lsls r1, r2, #3
	adds r1, #0x70
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r2, [sp, #4]
	lsls r1, r2, #5
	ldr r2, [sp, #8]
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, .L080B191C  @ gBg1Tm
	adds r1, r1, r2
	bl PutText
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B1910: .4byte gUnknown_08A2E978
.L080B1914: .4byte gUnknown_08A2E99C
.L080B1918: .4byte gUnknown_08A2E974
.L080B191C: .4byte gBg1Tm

	THUMB_FUNC_END func_080B1850

	THUMB_FUNC_START func_080B1920
func_080B1920: @ 0x080B1920
	push {lr}
	movs r0, #1
	movs r1, #0x12
	bl ApplyIconPalette
	movs r0, #0x80
	movs r1, #3
	bl UnpackUiVArrowGfx
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B1920

	THUMB_FUNC_START func_080B1938
func_080B1938: @ 0x080B1938
	push {r4, r5, r6, r7, lr}
	ldr r1, .L080B19F0  @ gUnknown_08A2E978
	ldr r6, .L080B19F4  @ gUnknown_08A2E974
	ldr r0, [r6]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r5, [r0]
	bl GetGameTime
	movs r1, #0xf
	ands r0, r1
	movs r1, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r2, .L080B19F8  @ gUnknown_08A2E986
	movs r3, #0x83
	lsls r3, r3, #6
	movs r0, #0x12
	movs r1, #8
	bl PutOamHiRam
	ldr r0, [r6]
	movs r1, #0x2a
	ldrsh r4, [r0, r1]
	movs r2, #0x2c
	ldrsh r0, [r0, r2]
	subs r4, r4, r0
	lsls r4, r4, #4
	adds r4, #0x28
	movs r0, #0x10
	adds r1, r4, #0
	bl DisplayFrozenUiHand
	adds r0, r5, #0
	bl func_080B1DE8
	ldr r2, .L080B19FC  @ gUnknown_08A2E99C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	movs r1, #0x2c
	muls r1, r5, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	subs r0, #2
	adds r1, r4, #0
	bl DisplayUiHand
	ldr r0, [r6]
	adds r0, #0x37
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B19B2
	bl func_08095970
	cmp r0, #0
	beq .L080B19DA
.L080B19B2:
	bl func_080B16CC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B19DA
	bl func_080B16DC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne .L080B19DA
	ldr r2, .L080B1A00  @ Sprite_16x16
	ldr r3, .L080B1A04  @ 0x000020CC
	cmp r7, #0
	beq .L080B19D2
	adds r3, #2
.L080B19D2:
	movs r0, #0xc0
	movs r1, #0x28
	bl PutOamHiRam
.L080B19DA:
	ldr r0, .L080B19F4  @ gUnknown_08A2E974
	ldr r0, [r0]
	ldrh r1, [r0, #0x2e]
	ldrh r2, [r0, #0x34]
	movs r0, #0xa
	movs r3, #6
	bl func_080976CC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B19F0: .4byte gUnknown_08A2E978
.L080B19F4: .4byte gUnknown_08A2E974
.L080B19F8: .4byte gUnknown_08A2E986
.L080B19FC: .4byte gUnknown_08A2E99C
.L080B1A00: .4byte Sprite_16x16
.L080B1A04: .4byte 0x000020CC

	THUMB_FUNC_END func_080B1938

	THUMB_FUNC_START func_080B1A08
func_080B1A08: @ 0x080B1A08
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov r9, r0
	ldr r1, .L080B1C54  @ gUnknown_08205E50
	add r0, sp, #4
	movs r2, #0x18
	bl memcpy
	movs r0, #0
	mov sl, r0
	add r0, sp, #4
	bl SetupBackgrounds
	ldr r2, .L080B1C58  @ gUnknown_08A2E974
	ldr r1, [r2]
	mov r0, sl
	strh r0, [r1, #0x32]
	movs r0, #0xd
	strh r0, [r1, #0x34]
	mov r2, sl
	strh r2, [r1, #0x2a]
	strh r2, [r1, #0x2c]
	strh r2, [r1, #0x2e]
	mov r0, r9
	strh r2, [r0, #0x30]
	adds r0, #0x36
	movs r2, #0
	strb r2, [r0]
	adds r1, #0x37
	ldrb r2, [r1]
	movs r0, #2
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	ldr r0, .L080B1C58  @ gUnknown_08A2E974
	ldr r1, [r0]
	adds r1, #0x37
	ldrb r2, [r1]
	movs r0, #3
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	bl ResetText
	bl func_080156BC
	bl LoadUiFrameGraphics
	ldr r7, .L080B1C5C  @ gDispIo
	ldrb r0, [r7, #1]
	movs r1, #1
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r6, #4
	orrs r0, r6
	movs r5, #8
	orrs r0, r5
	movs r4, #0x10
	orrs r0, r4
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, .L080B1C58  @ gUnknown_08A2E974
	ldr r0, [r2]
	ldrh r2, [r0, #0x2e]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #0
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	mov r2, r8
	orrs r0, r2
	movs r2, #2
	orrs r0, r2
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	strb r0, [r1]
	adds r1, #2
	ldrb r0, [r1]
	mov r2, r8
	orrs r0, r2
	movs r2, #3
	negs r2, r2
	ands r0, r2
	orrs r0, r6
	orrs r0, r5
	orrs r0, r4
	strb r0, [r1]
	movs r0, #1
	movs r1, #0xe
	movs r2, #4
	movs r3, #0
	bl SetBlendConfig
	mov r0, sl
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	mov r1, sl
	str r1, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	ldr r0, .L080B1C60  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B1C64  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r5, .L080B1C68  @ gBg2Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r0, .L080B1C6C  @ gBg3Tm
	movs r1, #0
	bl TmFill
	ldr r4, .L080B1C70  @ gUnknown_08A07A98
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B1C74  @ gUnknown_08A0733C
	ldr r1, .L080B1C78  @ 0x06011800
	bl Decompress
	ldr r0, .L080B1C7C  @ gUnknown_08A0754C
	ldr r1, .L080B1C80  @ 0x06004000
	bl Decompress
	ldr r0, .L080B1C84  @ gUnknown_08A079B4
	ldr r4, .L080B1C88  @ gBuf+0x80
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r5, #0
	adds r1, r4, #0
	bl TmApplyTsa_thm
	bl ResetTextFont
	ldr r2, .L080B1C58  @ gUnknown_08A2E974
	ldr r0, [r2]
	adds r0, #0xa8
	movs r1, #0x16
	bl InitText
	bl func_080B1784
	movs r3, #0xe4
	lsls r3, r3, #7
	movs r0, #1
	str r0, [sp]
	mov r0, r9
	movs r1, #0xe0
	movs r2, #0x2f
	bl func_08097748
	ldr r1, .L080B1C58  @ gUnknown_08A2E974
	ldr r0, [r1]
	adds r0, #0x68
	movs r1, #9
	bl InitText
	ldr r2, .L080B1C58  @ gUnknown_08A2E974
	ldr r0, [r2]
	adds r0, #0xa0
	movs r1, #0xe
	bl InitText
	ldr r7, .L080B1C58  @ gUnknown_08A2E974
	movs r6, #0x70
	movs r5, #0x38
	movs r4, #5
.L080B1BE4:
	mov r0, sl
	movs r1, #5
	bl func_080B1700
	ldr r0, [r7]
	adds r0, r0, r5
	movs r1, #9
	bl InitText
	ldr r0, [r7]
	adds r0, r0, r6
	movs r1, #0xe
	bl InitText
	mov r0, sl
	mov r1, sl
	adds r2, r4, #0
	bl func_080B17E4
	mov r0, sl
	mov r1, sl
	adds r2, r4, #0
	bl func_080B1850
	adds r6, #8
	adds r5, #8
	adds r4, #2
	movs r0, #1
	add sl, r0
	mov r1, sl
	cmp r1, #5
	ble .L080B1BE4
	movs r0, #0
	str r0, [sp]
	mov r0, r9
	movs r1, #0
	movs r2, #0x12
	movs r3, #2
	bl func_08086CE8
	ldr r0, .L080B1C8C  @ gUnknown_08A2ECA8
	mov r1, r9
	bl SpawnProc
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B1C54: .4byte gUnknown_08205E50
.L080B1C58: .4byte gUnknown_08A2E974
.L080B1C5C: .4byte gDispIo
.L080B1C60: .4byte gBg0Tm
.L080B1C64: .4byte gBg1Tm
.L080B1C68: .4byte gBg2Tm
.L080B1C6C: .4byte gBg3Tm
.L080B1C70: .4byte gUnknown_08A07A98
.L080B1C74: .4byte gUnknown_08A0733C
.L080B1C78: .4byte 0x06011800
.L080B1C7C: .4byte gUnknown_08A0754C
.L080B1C80: .4byte 0x06004000
.L080B1C84: .4byte gUnknown_08A079B4
.L080B1C88: .4byte gBuf+0x80
.L080B1C8C: .4byte gUnknown_08A2ECA8

	THUMB_FUNC_END func_080B1A08

	THUMB_FUNC_START func_080B1C90
func_080B1C90: @ 0x080B1C90
	push {lr}
	bl func_080B1D14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B1CA4
	movs r0, #1
	negs r0, r0
	bl UnpackUiFrameBuffered
.L080B1CA4:
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B1C90

	THUMB_FUNC_START func_080B1CAC
func_080B1CAC: @ 0x080B1CAC
	push {r4, lr}
	bl func_080B1D14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B1D0A
	ldr r1, .L080B1CD8  @ gUnknown_08A2E978
	ldr r4, .L080B1CDC  @ gUnknown_08A2E974
	ldr r0, [r4]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl func_080B1DE8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B1CE0
	bl func_08002AC8
	b .L080B1D0A
	.align 2, 0
.L080B1CD8: .4byte gUnknown_08A2E978
.L080B1CDC: .4byte gUnknown_08A2E974
.L080B1CE0:
	ldr r0, [r4]
	adds r0, #0x37
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B1CF8
	movs r0, #0x34
	movs r1, #0
	bl StartBgm
	b .L080B1D0A
.L080B1CF8:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B1D06
	bl func_080B9FC0
	b .L080B1D0A
.L080B1D06:
	bl UpdatePlayMapMusic
.L080B1D0A:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B1CAC

	THUMB_FUNC_START func_080B1D14
func_080B1D14: @ 0x080B1D14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	ldr r0, .L080B1D64  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r1, #0x2a
	ldrsh r5, [r0, r1]
	ldr r0, .L080B1D68  @ gUnknown_08A2E978
	adds r0, r5, r0
	ldrb r4, [r0]
	adds r6, r4, #0
	bl func_080B16DC
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, .L080B1D6C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq .L080B1DCE
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq .L080B1D70
	cmp r3, #0
	beq .L080B1D96
	subs r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r4, #0
	adds r1, r3, #0
	bl func_080B1F64
	movs r7, #1
	b .L080B1D9A
	.align 2, 0
.L080B1D64: .4byte gUnknown_08A2E974
.L080B1D68: .4byte gUnknown_08A2E978
.L080B1D6C: .4byte gKeySt
.L080B1D70:
	ldr r2, .L080B1DDC  @ gUnknown_08A2E99C
	adds r4, r3, #1
	lsls r0, r4, #3
	movs r1, #0x2c
	muls r1, r6, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrh r0, [r0, #6]
	cmp r0, #0
	beq .L080B1D96
	cmp r3, #2
	bhi .L080B1D96
	lsls r0, r4, #0x18
	lsrs r3, r0, #0x18
	adds r0, r6, #0
	adds r1, r3, #0
	bl func_080B1F64
	movs r7, #1
.L080B1D96:
	cmp r7, #0
	beq .L080B1DCE
.L080B1D9A:
	ldr r0, .L080B1DE0  @ gUnknown_08A2EC88
	mov r1, r8
	bl SpawnProc
	adds r0, r5, #0
	movs r1, #7
	bl __modsi3
	adds r1, r0, #0
	lsls r2, r5, #1
	adds r2, #5
	adds r0, r5, #0
	bl func_080B1850
	movs r0, #3
	bl EnableBgSync
	ldr r0, .L080B1DE4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B1DCE
	movs r0, #0x67
	bl m4aSongNumStart
.L080B1DCE:
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B1DDC: .4byte gUnknown_08A2E99C
.L080B1DE0: .4byte gUnknown_08A2EC88
.L080B1DE4: .4byte gPlaySt

	THUMB_FUNC_END func_080B1D14

	THUMB_FUNC_START func_080B1DE8
func_080B1DE8: @ 0x080B1DE8
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r2, #0
	cmp r0, #0x10
	bls .L080B1DF6
	b .L080B1F5A
.L080B1DF6:
	lsls r0, r0, #2
	ldr r1, .L080B1E00  @ .L080B1E04
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B1E00: .4byte .L080B1E04
.L080B1E04: @ jump table
	.4byte .L080B1E48 @ case 0
	.4byte .L080B1E7E @ case 1
	.4byte .L080B1E8C @ case 2
	.4byte .L080B1E98 @ case 3
	.4byte .L080B1EA8 @ case 4
	.4byte .L080B1EB8 @ case 5
	.4byte .L080B1EC4 @ case 6
	.4byte .L080B1ED4 @ case 7
	.4byte .L080B1EE4 @ case 8
	.4byte .L080B1F5A @ case 9
	.4byte .L080B1EF4 @ case 10
	.4byte .L080B1F04 @ case 11
	.4byte .L080B1F14 @ case 12
	.4byte .L080B1F20 @ case 13
	.4byte .L080B1F30 @ case 14
	.4byte .L080B1F40 @ case 15
	.4byte .L080B1F50 @ case 16
.L080B1E48:
	ldr r0, .L080B1E60  @ gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1d
	lsrs r0, r0, #0x1e
	cmp r0, #1
	beq .L080B1E76
	cmp r0, #1
	bgt .L080B1E64
	cmp r0, #0
	beq .L080B1E6E
	b .L080B1E7E
	.align 2, 0
.L080B1E60: .4byte gPlaySt
.L080B1E64:
	cmp r0, #2
	beq .L080B1E7A
	cmp r0, #3
	beq .L080B1E72
	b .L080B1E7E
.L080B1E6E:
	movs r0, #0
	b .L080B1F5C
.L080B1E72:
	movs r0, #1
	b .L080B1F5C
.L080B1E76:
	movs r0, #2
	b .L080B1F5C
.L080B1E7A:
	movs r0, #3
	b .L080B1F5C
.L080B1E7E:
	ldr r0, .L080B1E88  @ gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	b .L080B1F58
	.align 2, 0
.L080B1E88: .4byte gPlaySt
.L080B1E8C:
	ldr r0, .L080B1E94  @ gPlaySt
	adds r0, #0x40
	b .L080B1EE8
	.align 2, 0
.L080B1E94: .4byte gPlaySt
.L080B1E98:
	ldr r0, .L080B1EA4  @ gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	b .L080B1F58
	.align 2, 0
.L080B1EA4: .4byte gPlaySt
.L080B1EA8:
	ldr r0, .L080B1EB4  @ gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	b .L080B1F5A
	.align 2, 0
.L080B1EB4: .4byte gPlaySt
.L080B1EB8:
	ldr r0, .L080B1EC0  @ gPlaySt
	adds r0, #0x40
	b .L080B1F08
	.align 2, 0
.L080B1EC0: .4byte gPlaySt
.L080B1EC4:
	ldr r0, .L080B1ED0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b .L080B1F58
	.align 2, 0
.L080B1ED0: .4byte gPlaySt
.L080B1ED4:
	ldr r0, .L080B1EE0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	b .L080B1F58
	.align 2, 0
.L080B1EE0: .4byte gPlaySt
.L080B1EE4:
	ldr r0, .L080B1EF0  @ gPlaySt
	adds r0, #0x41
.L080B1EE8:
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r2, r0, #0x1e
	b .L080B1F5A
	.align 2, 0
.L080B1EF0: .4byte gPlaySt
.L080B1EF4:
	ldr r0, .L080B1F00  @ gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r2, r0, #0x1e
	b .L080B1F5A
	.align 2, 0
.L080B1F00: .4byte gPlaySt
.L080B1F04:
	ldr r0, .L080B1F10  @ gPlaySt
	adds r0, #0x41
.L080B1F08:
	ldrb r0, [r0]
	lsrs r2, r0, #7
	b .L080B1F5A
	.align 2, 0
.L080B1F10: .4byte gPlaySt
.L080B1F14:
	ldr r0, .L080B1F1C  @ gPlaySt
	adds r0, #0x41
	b .L080B1F54
	.align 2, 0
.L080B1F1C: .4byte gPlaySt
.L080B1F20:
	ldr r0, .L080B1F2C  @ gPlaySt
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b .L080B1F58
	.align 2, 0
.L080B1F2C: .4byte gPlaySt
.L080B1F30:
	ldr r0, .L080B1F3C  @ gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	b .L080B1F58
	.align 2, 0
.L080B1F3C: .4byte gPlaySt
.L080B1F40:
	ldr r0, .L080B1F4C  @ gPlaySt
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	b .L080B1F58
	.align 2, 0
.L080B1F4C: .4byte gPlaySt
.L080B1F50:
	ldr r0, .L080B1F60  @ gPlaySt
	adds r0, #0x42
.L080B1F54:
	ldrb r0, [r0]
	lsls r0, r0, #0x19
.L080B1F58:
	lsrs r2, r0, #0x1f
.L080B1F5A:
	adds r0, r2, #0
.L080B1F5C:
	pop {r1}
	bx r1
	.align 2, 0
.L080B1F60: .4byte gPlaySt

	THUMB_FUNC_END func_080B1DE8

	THUMB_FUNC_START func_080B1F64
func_080B1F64: @ 0x080B1F64
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	cmp r0, #0x10
	bls .L080B1F74
	b .L080B2180
.L080B1F74:
	lsls r0, r0, #2
	ldr r1, .L080B1F80  @ .L080B1F84
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B1F80: .4byte .L080B1F84
.L080B1F84: @ jump table
	.4byte .L080B1FC8 @ case 0
	.4byte .L080B2030 @ case 1
	.4byte .L080B2048 @ case 2
	.4byte .L080B2060 @ case 3
	.4byte .L080B2078 @ case 4
	.4byte .L080B2090 @ case 5
	.4byte .L080B209C @ case 6
	.4byte .L080B20B4 @ case 7
	.4byte .L080B20CC @ case 8
	.4byte .L080B2180 @ case 9
	.4byte .L080B20E4 @ case 10
	.4byte .L080B20FC @ case 11
	.4byte .L080B2114 @ case 12
	.4byte .L080B2120 @ case 13
	.4byte .L080B2138 @ case 14
	.4byte .L080B2150 @ case 15
	.4byte .L080B2168 @ case 16
.L080B1FC8:
	cmp r3, #1
	beq .L080B1FF4
	cmp r3, #1
	bgt .L080B1FD6
	cmp r3, #0
	beq .L080B1FE0
	b .L080B2030
.L080B1FD6:
	cmp r3, #2
	beq .L080B2008
	cmp r3, #3
	beq .L080B201C
	b .L080B2030
.L080B1FE0:
	ldr r0, .L080B1FF0  @ gPlaySt
	adds r0, #0x42
	ldrb r2, [r0]
	movs r1, #7
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
	b .L080B2180
	.align 2, 0
.L080B1FF0: .4byte gPlaySt
.L080B1FF4:
	ldr r0, .L080B2004  @ gPlaySt
	adds r0, #0x42
	ldrb r1, [r0]
	movs r2, #6
	orrs r1, r2
	strb r1, [r0]
	b .L080B2180
	.align 2, 0
.L080B2004: .4byte gPlaySt
.L080B2008:
	ldr r2, .L080B2018  @ gPlaySt
	adds r2, #0x42
	ldrb r1, [r2]
	movs r0, #7
	negs r0, r0
	ands r0, r1
	movs r1, #2
	b .L080B217C
	.align 2, 0
.L080B2018: .4byte gPlaySt
.L080B201C:
	ldr r2, .L080B202C  @ gPlaySt
	adds r2, #0x42
	ldrb r1, [r2]
	movs r0, #7
	negs r0, r0
	ands r0, r1
	movs r1, #4
	b .L080B217C
	.align 2, 0
.L080B202C: .4byte gPlaySt
.L080B2030:
	ldr r2, .L080B2044  @ gPlaySt
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	ldrb r3, [r2]
	movs r0, #3
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B2044: .4byte gPlaySt
.L080B2048:
	ldr r2, .L080B205C  @ gPlaySt
	adds r2, #0x40
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	ldrb r3, [r2]
	movs r0, #0xd
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B205C: .4byte gPlaySt
.L080B2060:
	ldr r2, .L080B2074  @ gPlaySt
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldrb r3, [r2]
	movs r0, #0x11
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B2074: .4byte gPlaySt
.L080B2078:
	ldr r2, .L080B208C  @ gPlaySt
	adds r2, #0x40
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	ldrb r3, [r2]
	movs r0, #0x61
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B208C: .4byte gPlaySt
.L080B2090:
	ldr r1, .L080B2098  @ gPlaySt
	adds r1, #0x40
	b .L080B2100
	.align 2, 0
.L080B2098: .4byte gPlaySt
.L080B209C:
	ldr r2, .L080B20B0  @ gPlaySt
	adds r2, #0x41
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	ldrb r3, [r2]
	movs r0, #2
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B20B0: .4byte gPlaySt
.L080B20B4:
	ldr r2, .L080B20C8  @ gPlaySt
	adds r2, #0x41
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	ldrb r3, [r2]
	movs r0, #3
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B20C8: .4byte gPlaySt
.L080B20CC:
	ldr r2, .L080B20E0  @ gPlaySt
	adds r2, #0x41
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	ldrb r3, [r2]
	movs r0, #0xd
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B20E0: .4byte gPlaySt
.L080B20E4:
	ldr r2, .L080B20F8  @ gPlaySt
	adds r2, #0x42
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #3
	ldrb r3, [r2]
	movs r0, #0x19
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B20F8: .4byte gPlaySt
.L080B20FC:
	ldr r1, .L080B2110  @ gPlaySt
	adds r1, #0x41
.L080B2100:
	lsls r3, r3, #7
	ldrb r2, [r1]
	movs r0, #0x7f
	ands r0, r2
	orrs r0, r3
	strb r0, [r1]
	b .L080B2180
	.align 2, 0
.L080B2110: .4byte gPlaySt
.L080B2114:
	ldr r2, .L080B211C  @ gPlaySt
	adds r2, #0x41
	b .L080B216C
	.align 2, 0
.L080B211C: .4byte gPlaySt
.L080B2120:
	ldr r2, .L080B2134  @ gPlaySt
	adds r2, #0x40
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	ldrb r3, [r2]
	movs r0, #2
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B2134: .4byte gPlaySt
.L080B2138:
	ldr r2, .L080B214C  @ gPlaySt
	adds r2, #0x42
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	ldrb r3, [r2]
	movs r0, #2
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B214C: .4byte gPlaySt
.L080B2150:
	ldr r2, .L080B2164  @ gPlaySt
	adds r2, #0x42
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	ldrb r3, [r2]
	movs r0, #0x21
	negs r0, r0
	b .L080B217A
	.align 2, 0
.L080B2164: .4byte gPlaySt
.L080B2168:
	ldr r2, .L080B2184  @ gPlaySt
	adds r2, #0x42
.L080B216C:
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #6
	ldrb r3, [r2]
	movs r0, #0x41
	negs r0, r0
.L080B217A:
	ands r0, r3
.L080B217C:
	orrs r0, r1
	strb r0, [r2]
.L080B2180:
	pop {r0}
	bx r0
	.align 2, 0
.L080B2184: .4byte gPlaySt

	THUMB_FUNC_END func_080B1F64

	THUMB_FUNC_START func_080B2188
func_080B2188: @ 0x080B2188
	push {r4, r5, r6, r7, lr}
	adds r6, r1, #0
	adds r7, r2, #0
	lsls r0, r6, #1
	adds r5, r0, #5
	movs r0, #0x1f
	ands r5, r0
	lsls r0, r5, #5
	ldr r2, .L080B2204  @ gBg1Tm
	movs r4, #0
	adds r1, r0, #0
	adds r1, #0x22
	adds r0, #2
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
.L080B21AC:
	strh r4, [r0]
	strh r4, [r1]
	adds r1, #2
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge .L080B21AC
	adds r0, r6, #0
	movs r1, #7
	bl __modsi3
	adds r4, r0, #0
	adds r0, r6, #0
	movs r1, #5
	bl func_080B1700
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl func_080B17E4
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl func_080B1850
	ldr r1, .L080B2208  @ gBg0Tm
	movs r2, #0
	adds r0, r7, #0
	adds r0, #0x62
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r1
.L080B21EE:
	strh r2, [r0]
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge .L080B21EE
	movs r0, #3
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2204: .4byte gBg1Tm
.L080B2208: .4byte gBg0Tm

	THUMB_FUNC_END func_080B2188

	THUMB_FUNC_START func_080B220C
func_080B220C: @ 0x080B220C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r3, #0
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	cmp r0, #6
	bls .L080B221C
	b .L080B244C
.L080B221C:
	lsls r0, r0, #2
	ldr r1, .L080B2228  @ .L080B222C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B2228: .4byte .L080B222C
.L080B222C: @ jump table
	.4byte .L080B2248 @ case 0
	.4byte .L080B2410 @ case 1
	.4byte .L080B2410 @ case 2
	.4byte .L080B2410 @ case 3
	.4byte .L080B242C @ case 4
	.4byte .L080B242C @ case 5
	.4byte .L080B242C @ case 6
.L080B2248:
	ldr r0, .L080B226C  @ gKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B2274
	ldr r0, .L080B2270  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B22D4
	movs r0, #0x6b
	bl m4aSongNumStart
	b .L080B22D4
	.align 2, 0
.L080B226C: .4byte gKeySt
.L080B2270: .4byte gPlaySt
.L080B2274:
	movs r6, #1
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B22E8
	ldr r5, .L080B22DC  @ gUnknown_08A2E974
	ldr r0, [r5]
	adds r0, #0x37
	ldrb r1, [r0]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B2298
	bl func_08095970
	cmp r0, #0
	bne .L080B2298
	b .L080B244C
.L080B2298:
	ldr r1, .L080B22E0  @ gUnknown_08A2E978
	ldr r0, [r5]
	movs r2, #0x2a
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B22AA
	b .L080B244C
.L080B22AA:
	movs r0, #0
	bl func_080B1DE8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	beq .L080B22BA
	b .L080B244C
.L080B22BA:
	ldr r0, .L080B22E4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B22CC
	movs r0, #0x6a
	bl m4aSongNumStart
.L080B22CC:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
.L080B22D4:
	adds r0, r4, #0
	bl Proc_Break
	b .L080B244C
	.align 2, 0
.L080B22DC: .4byte gUnknown_08A2E974
.L080B22E0: .4byte gUnknown_08A2E978
.L080B22E4: .4byte gPlaySt
.L080B22E8:
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq .L080B23CC
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080B2348
	ldr r5, .L080B2344  @ gUnknown_08A2E974
	ldr r2, [r5]
	ldrh r1, [r2, #0x2a]
	movs r7, #0x2a
	ldrsh r0, [r2, r7]
	cmp r0, #0
	beq .L080B2398
	subs r0, r1, #1
	strh r0, [r2, #0x2a]
	movs r1, #0x2a
	ldrsh r0, [r2, r1]
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bgt .L080B2340
	ldrh r1, [r2, #0x2c]
	movs r7, #0x2c
	ldrsh r0, [r2, r7]
	cmp r0, #0
	beq .L080B2340
	subs r0, r1, #1
	strh r0, [r2, #0x2c]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	subs r1, #1
	adds r0, r4, #0
	movs r2, #0
	bl func_080B2188
	ldr r1, [r5]
	ldrh r0, [r1, #0x2e]
	subs r0, #4
	strh r0, [r1, #0x2e]
	strh r6, [r4, #0x30]
.L080B2340:
	movs r3, #1
	b .L080B239C
	.align 2, 0
.L080B2344: .4byte gUnknown_08A2E974
.L080B2348:
	ldr r5, .L080B23C0  @ gUnknown_08A2E974
	ldr r2, [r5]
	movs r6, #0x2a
	ldrsh r1, [r2, r6]
	movs r7, #0x34
	ldrsh r0, [r2, r7]
	subs r0, #1
	cmp r1, r0
	bge .L080B2398
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	movs r3, #0x2c
	ldrsh r0, [r2, r3]
	subs r0, r1, r0
	cmp r0, #4
	ble .L080B2396
	movs r6, #0x34
	ldrsh r0, [r2, r6]
	subs r0, #1
	cmp r1, r0
	bge .L080B2396
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	adds r1, #1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r4, #0
	bl func_080B2188
	ldr r1, [r5]
	ldrh r0, [r1, #0x2e]
	adds r0, #4
	strh r0, [r1, #0x2e]
	movs r0, #4
	strh r0, [r4, #0x30]
.L080B2396:
	movs r3, #1
.L080B2398:
	cmp r3, #0
	beq .L080B23CC
.L080B239C:
	ldr r0, .L080B23C4  @ gUnknown_08A2EC88
	adds r1, r4, #0
	bl SpawnProc
	movs r0, #3
	bl EnableBgSync
	ldr r0, .L080B23C8  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B244C
	movs r0, #0x66
	bl m4aSongNumStart
	b .L080B244C
	.align 2, 0
.L080B23C0: .4byte gUnknown_08A2E974
.L080B23C4: .4byte gUnknown_08A2EC88
.L080B23C8: .4byte gPlaySt
.L080B23CC:
	ldr r0, .L080B2400  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq .L080B244C
	ldr r2, .L080B2404  @ gUnknown_08A2E99C
	ldr r1, .L080B2408  @ gUnknown_08A2E978
	ldr r0, .L080B240C  @ gUnknown_08A2E974
	ldr r0, [r0]
	movs r3, #0x2a
	ldrsh r0, [r0, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r0, #0x2c
	muls r0, r1, r0
	adds r2, #0x28
	adds r0, r0, r2
	ldr r1, [r0]
	cmp r1, #0
	beq .L080B244C
	adds r0, r4, #0
	bl _call_via_r1
	b .L080B244C
	.align 2, 0
.L080B2400: .4byte gKeySt
.L080B2404: .4byte gUnknown_08A2E99C
.L080B2408: .4byte gUnknown_08A2E978
.L080B240C: .4byte gUnknown_08A2E974
.L080B2410:
	ldr r0, .L080B2428  @ gUnknown_08A2E974
	ldr r1, [r0]
	ldrh r0, [r1, #0x2e]
	subs r0, #4
	strh r0, [r1, #0x2e]
	ldrh r1, [r4, #0x30]
	movs r6, #0x30
	ldrsh r0, [r4, r6]
	cmp r0, #3
	bne .L080B2448
	movs r0, #0
	b .L080B244A
	.align 2, 0
.L080B2428: .4byte gUnknown_08A2E974
.L080B242C:
	ldr r0, .L080B2444  @ gUnknown_08A2E974
	ldr r1, [r0]
	ldrh r0, [r1, #0x2e]
	adds r0, #4
	strh r0, [r1, #0x2e]
	ldrh r1, [r4, #0x30]
	movs r7, #0x30
	ldrsh r0, [r4, r7]
	cmp r0, #6
	bne .L080B2448
	movs r0, #0
	b .L080B244A
	.align 2, 0
.L080B2444: .4byte gUnknown_08A2E974
.L080B2448:
	adds r0, r1, #1
.L080B244A:
	strh r0, [r4, #0x30]
.L080B244C:
	ldr r0, .L080B2460  @ gUnknown_08A2E974
	ldr r0, [r0]
	ldrh r2, [r0, #0x2e]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2460: .4byte gUnknown_08A2E974

	THUMB_FUNC_END func_080B220C

	THUMB_FUNC_START func_080B2464
func_080B2464: @ 0x080B2464
	push {r4, lr}
	adds r4, r0, #0
	bl Delete6CMenuScroll
	bl EndBG3Slider
	ldr r0, .L080B248C  @ gUnknown_08A2ECA8
	bl EndEachProc
	ldr r0, .L080B2490  @ gUnknown_08A2EC88
	bl EndEachProc
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080B2494
	movs r0, #1
	b .L080B24A4
	.align 2, 0
.L080B248C: .4byte gUnknown_08A2ECA8
.L080B2490: .4byte gUnknown_08A2EC88
.L080B2494:
	adds r0, r4, #0
	bl func_08092134
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	movs r0, #0
.L080B24A4:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B2464

	THUMB_FUNC_START func_080B24AC
func_080B24AC: @ 0x080B24AC
	ldr r0, .L080B24BC  @ gUnknown_08A2E974
	ldr r1, [r0]
	adds r1, #0x37
	ldrb r0, [r1]
	movs r2, #1
	orrs r0, r2
	strb r0, [r1]
	bx lr
	.align 2, 0
.L080B24BC: .4byte gUnknown_08A2E974

	THUMB_FUNC_END func_080B24AC

	THUMB_FUNC_START func_080B24C0
func_080B24C0: @ 0x080B24C0
	push {lr}
	ldr r0, .L080B24D8  @ gUnknown_08A2E974
	ldr r1, [r0]
	adds r1, #0x37
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
	bl ResetUnitSprites
	pop {r0}
	bx r0
	.align 2, 0
.L080B24D8: .4byte gUnknown_08A2E974

	THUMB_FUNC_END func_080B24C0

	THUMB_FUNC_START func_080B24DC
func_080B24DC: @ 0x080B24DC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, [r5, #0x5c]
	ldr r0, [r5, #0x60]
	adds r0, r3, r0
	cmp r3, r0
	bge .L080B2508
	ldr r2, .L080B2510  @ gUnknown_02014EF4
	ldr r1, .L080B2514  @ gPal
	lsls r0, r3, #1
	adds r4, r0, r1
	adds r2, r0, r2
.L080B24F4:
	ldrh r0, [r4]
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	adds r3, #1
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x60]
	adds r0, r0, r1
	cmp r3, r0
	blt .L080B24F4
.L080B2508:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2510: .4byte gUnknown_02014EF4
.L080B2514: .4byte gPal

	THUMB_FUNC_END func_080B24DC

	THUMB_FUNC_START nullsub_67
nullsub_67: @ 0x080B2518
	bx lr

	THUMB_FUNC_END nullsub_67

	THUMB_FUNC_START func_080B251C
func_080B251C: @ 0x080B251C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r0, #0x4e
	ldrh r0, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r9, r1
	mov r0, r8
	ldr r7, [r0, #0x5c]
	ldr r0, [r0, #0x60]
	adds r0, r7, r0
	cmp r7, r0
	bge .L080B25D0
	movs r1, #0xf8
	lsls r1, r1, #7
	mov sl, r1
.L080B254C:
	lsls r2, r7, #1
	mov ip, r2
	ldr r0, .L080B2600  @ gUnknown_02014EF4
	add r0, ip
	ldrh r6, [r0]
	mov r1, sl
	ands r1, r6
	mov r0, r8
	ldr r4, [r0, #0x58]
	adds r0, r4, #0
	mov r2, sl
	ands r0, r2
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge .L080B2572
	adds r0, #0xff
.L080B2572:
	asrs r0, r0, #8
	adds r2, r0, r4
	mov r0, sl
	ands r2, r0
	movs r5, #0xf8
	lsls r5, r5, #2
	adds r1, r5, #0
	ands r1, r6
	adds r0, r4, #0
	ands r0, r5
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge .L080B2594
	adds r0, #0xff
.L080B2594:
	asrs r0, r0, #8
	adds r3, r0, r4
	ands r3, r5
	movs r5, #0x1f
	adds r1, r5, #0
	ands r1, r6
	adds r0, r4, #0
	ands r0, r5
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge .L080B25B2
	adds r0, #0xff
.L080B25B2:
	asrs r0, r0, #8
	adds r0, r0, r4
	ands r0, r5
	ldr r1, .L080B2604  @ gPal
	add r1, ip
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	adds r7, #1
	mov r2, r8
	ldr r0, [r2, #0x5c]
	ldr r1, [r2, #0x60]
	adds r0, r0, r1
	cmp r7, r0
	blt .L080B254C
.L080B25D0:
	bl EnablePalSync
	mov r1, r8
	adds r1, #0x4e
	mov r0, r8
	adds r0, #0x64
	ldrh r0, [r0]
	ldrh r2, [r1]
	adds r0, r0, r2
	strh r0, [r1]
	mov r0, r9
	cmp r0, #0
	bne .L080B25F0
	mov r0, r8
	bl Proc_Break
.L080B25F0:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2600: .4byte gUnknown_02014EF4
.L080B2604: .4byte gPal

	THUMB_FUNC_END func_080B251C

	THUMB_FUNC_START func_080B2608
func_080B2608: @ 0x080B2608
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r0, #0x4e
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	cmp r0, #0
	beq .L080B26C0
	mov r4, r8
	ldr r6, [r4, #0x5c]
	ldr r0, [r4, #0x60]
	adds r0, r6, r0
	cmp r6, r0
	bge .L080B26C0
	movs r5, #0xf8
	lsls r5, r5, #7
	mov sl, r5
.L080B263C:
	mov r0, r8
	ldr r5, [r0, #0x58]
	adds r2, r5, #0
	mov r1, sl
	ands r2, r1
	lsls r4, r6, #1
	mov ip, r4
	ldr r3, .L080B2724  @ gUnknown_02014EF4
	add r3, ip
	ldrh r1, [r3]
	mov r0, sl
	ands r0, r1
	subs r0, r2, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge .L080B2662
	adds r0, #0xff
.L080B2662:
	asrs r0, r0, #8
	ldrh r4, [r3]
	adds r2, r0, r4
	mov r0, sl
	ands r2, r0
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r1, r5, #0
	ands r1, r7
	adds r0, r4, #0
	ands r0, r7
	subs r0, r1, r0
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge .L080B2686
	adds r0, #0xff
.L080B2686:
	asrs r0, r0, #8
	adds r3, r0, r4
	ands r3, r7
	movs r1, #0x1f
	ands r5, r1
	adds r0, r4, #0
	ands r0, r1
	subs r0, r5, r0
	mov r5, r9
	muls r5, r0, r5
	adds r0, r5, #0
	cmp r0, #0
	bge .L080B26A2
	adds r0, #0xff
.L080B26A2:
	asrs r0, r0, #8
	adds r0, r0, r4
	ands r0, r1
	ldr r1, .L080B2728  @ gPal
	add r1, ip
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	adds r6, #1
	mov r1, r8
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r6, r0
	blt .L080B263C
.L080B26C0:
	bl EnablePalSync
	mov r1, r8
	adds r1, #0x4e
	mov r0, r8
	adds r0, #0x64
	ldrh r0, [r0]
	ldrh r2, [r1]
	adds r0, r0, r2
	strh r0, [r1]
	mov r4, r9
	cmp r4, #0
	bne .L080B2714
	mov r5, r8
	ldr r6, [r5, #0x5c]
	ldr r0, [r5, #0x60]
	adds r0, r6, r0
	cmp r6, r0
	bge .L080B270E
	ldr r0, .L080B2728  @ gPal
	ldr r2, .L080B2724  @ gUnknown_02014EF4
	lsls r1, r6, #1
	adds r3, r1, r0
	adds r2, r1, r2
.L080B26F0:
	ldrh r0, [r2]
	strh r0, [r3]
	ldrh r0, [r2]
	strh r0, [r3]
	ldrh r0, [r2]
	strh r0, [r3]
	adds r3, #2
	adds r2, #2
	adds r6, #1
	mov r1, r8
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r6, r0
	blt .L080B26F0
.L080B270E:
	mov r0, r8
	bl Proc_Break
.L080B2714:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2724: .4byte gUnknown_02014EF4
.L080B2728: .4byte gPal

	THUMB_FUNC_END func_080B2608

	THUMB_FUNC_START func_080B272C
func_080B272C: @ 0x080B272C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, .L080B2758  @ gUnknown_08A2EE90
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r0, #0x64
	movs r2, #0
	strh r5, [r0]
	str r4, [r1, #0x58]
	subs r0, #0x16
	strh r2, [r0]
	cmp r6, #1
	beq .L080B2768
	cmp r6, #1
	bgt .L080B275C
	cmp r6, #0
	beq .L080B2762
	b .L080B2778
	.align 2, 0
.L080B2758: .4byte gUnknown_08A2EE90
.L080B275C:
	cmp r6, #2
	beq .L080B2770
	b .L080B2778
.L080B2762:
	movs r0, #0x80
	str r0, [r1, #0x5c]
	b .L080B2776
.L080B2768:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #2
	b .L080B2776
.L080B2770:
	str r2, [r1, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #3
.L080B2776:
	str r0, [r1, #0x60]
.L080B2778:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B272C

	THUMB_FUNC_START func_080B2780
func_080B2780: @ 0x080B2780
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	ldr r0, .L080B27B0  @ gUnknown_08A2EEC0
	bl SpawnProcLocking
	mov ip, r0
	adds r0, #0x64
	movs r1, #0
	strh r5, [r0]
	mov r0, ip
	str r4, [r0, #0x58]
	adds r0, #0x4e
	strh r1, [r0]
	cmp r6, #1
	beq .L080B27C2
	cmp r6, #1
	bgt .L080B27B4
	cmp r6, #0
	beq .L080B27BA
	b .L080B27DA
	.align 2, 0
.L080B27B0: .4byte gUnknown_08A2EEC0
.L080B27B4:
	cmp r6, #2
	beq .L080B27CE
	b .L080B27DA
.L080B27BA:
	movs r0, #0x80
	mov r1, ip
	str r0, [r1, #0x5c]
	b .L080B27D8
.L080B27C2:
	mov r6, ip
	str r1, [r6, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [r6, #0x60]
	b .L080B27DA
.L080B27CE:
	mov r0, ip
	str r1, [r0, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #3
	mov r1, ip
.L080B27D8:
	str r0, [r1, #0x60]
.L080B27DA:
	mov r6, ip
	ldr r4, [r6, #0x5c]
	ldr r0, [r6, #0x60]
	adds r0, r4, r0
	cmp r4, r0
	bge .L080B280A
	ldr r2, .L080B2810  @ gUnknown_02014EF4
	ldr r1, .L080B2814  @ gPal
	movs r5, #0
	lsls r0, r4, #1
	adds r3, r0, r1
	adds r2, r0, r2
.L080B27F2:
	ldrh r0, [r3]
	strh r0, [r2]
	strh r5, [r3]
	adds r3, #2
	adds r2, #2
	adds r4, #1
	mov r1, ip
	ldr r0, [r1, #0x5c]
	ldr r1, [r1, #0x60]
	adds r0, r0, r1
	cmp r4, r0
	blt .L080B27F2
.L080B280A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2810: .4byte gUnknown_02014EF4
.L080B2814: .4byte gPal

	THUMB_FUNC_END func_080B2780

	THUMB_FUNC_START func_080B2818
func_080B2818: @ 0x080B2818
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, .L080B289C  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl SetupBackgrounds
	bl StartEkrAnimeDrvProc
	bl func_0806E8F0
	movs r5, #0
	str r5, [r6, #0x38]
	str r5, [r6, #0x3c]
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r6, #0
	adds r0, #0x34
	strb r5, [r0]
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B289C: .4byte gDispIo

	THUMB_FUNC_END func_080B2818

	THUMB_FUNC_START func_080B28A0
func_080B28A0: @ 0x080B28A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080B28F8  @ gUnknown_08A20DA4
	bl FindProc
	bl Proc_End
	ldr r0, .L080B28FC  @ gUnknown_08A20DCC
	bl FindProc
	bl Proc_End
	adds r0, r4, #0
	bl EndAllProcChildren
	movs r0, #1
	bl FadeBgmOut
	ldr r2, .L080B2900  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetNextGameActionId
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B28F8: .4byte gUnknown_08A20DA4
.L080B28FC: .4byte gUnknown_08A20DCC
.L080B2900: .4byte gDispIo

	THUMB_FUNC_END func_080B28A0

	THUMB_FUNC_START func_080B2904
func_080B2904: @ 0x080B2904
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x2c
	ldrb r0, [r6]
	cmp r0, #2
	beq .L080B2922
	cmp r0, #2
	bgt .L080B291C
	cmp r0, #1
	beq .L080B296A
	b .L080B297E
.L080B291C:
	cmp r0, #3
	beq .L080B295C
	b .L080B297E
.L080B2922:
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	adds r5, r4, #0
	adds r5, #0x34
	ldrb r1, [r5]
	bl func_080B40EC
	str r0, [r4, #0x4c]
	cmp r0, #0
	bne .L080B2948
	movs r0, #1
	bl SetNextGameActionId
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	b .L080B297E
.L080B2948:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	movs r0, #1
	strb r0, [r6]
	ldr r1, [r4, #0x4c]
	adds r0, r4, #0
	bl func_080B2F3C
	b .L080B297E
.L080B295C:
	ldr r1, [r4, #0x4c]
	adds r0, r4, #0
	bl func_080B3EDC
	movs r0, #1
	strb r0, [r6]
	b .L080B297E
.L080B296A:
	ldr r0, .L080B2984  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq .L080B297E
	adds r0, r4, #0
	bl func_080B28A0
.L080B297E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2984: .4byte gKeySt

	THUMB_FUNC_END func_080B2904

	THUMB_FUNC_START func_080B2988
func_080B2988: @ 0x080B2988
	push {lr}
	ldr r0, .L080B29AC  @ gUnknown_08A2EEF0
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	beq .L080B29B0
	adds r0, #0x33
	ldrb r0, [r0]
	adds r1, #0x34
	ldrb r1, [r1]
	bl func_080B40EC
	cmp r0, #0
	bne .L080B29B0
	movs r0, #1
	b .L080B29B2
	.align 2, 0
.L080B29AC: .4byte gUnknown_08A2EEF0
.L080B29B0:
	movs r0, #0
.L080B29B2:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B2988

	THUMB_FUNC_START func_080B29B8
func_080B29B8: @ 0x080B29B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080B29D0  @ gUnknown_08A2EEF0
	bl FindProc
	cmp r0, #0
	beq .L080B29CA
	adds r0, #0x2c
	strb r4, [r0]
.L080B29CA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B29D0: .4byte gUnknown_08A2EEF0

	THUMB_FUNC_END func_080B29B8

	THUMB_FUNC_START func_080B29D4
func_080B29D4: @ 0x080B29D4
	push {lr}
	movs r0, #3
	bl FadeBgmOut
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B29D4

	THUMB_FUNC_START func_080B29E0
func_080B29E0: @ 0x080B29E0
	push {lr}
	bl EndAllProcChildren
	bl EndEkrAnimeDrvProc
	movs r0, #0
	bl func_08009A84
	bl func_0806E920
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B29E0

	THUMB_FUNC_START Make6C_opinfo
Make6C_opinfo: @ 0x080B29F8
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L080B2A10  @ gUnknown_08A2EEF0
	bl SpawnProcLocking
	adds r0, #0x33
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2A10: .4byte gUnknown_08A2EEF0

	THUMB_FUNC_END Make6C_opinfo

	THUMB_FUNC_START func_080B2A14
func_080B2A14: @ 0x080B2A14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r1
	str r2, [sp, #4]
	ldr r1, [sp, #0x30]
	ldr r2, [sp, #0x34]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r9, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #8]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	movs r4, #1
	ldr r2, .L080B2A6C  @ gPal
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r1, .L080B2A70  @ 0x0000021E
	adds r5, r2, r1
	ldr r3, [sp, #0xc]
	adds r0, r3, r0
	mov r3, r9
	lsls r1, r3, #5
	lsls r0, r0, #1
	adds r0, r0, r2
	adds r3, r0, #2
	ldr r0, .L080B2A74  @ 0x00000222
	adds r1, r1, r0
	adds r1, r1, r2
.L080B2A60:
	ldr r2, [sp, #0xc]
	adds r0, r4, r2
	cmp r0, #0xf
	ble .L080B2A78
	ldrh r0, [r5]
	b .L080B2A7A
	.align 2, 0
.L080B2A6C: .4byte gPal
.L080B2A70: .4byte 0x0000021E
.L080B2A74: .4byte 0x00000222
.L080B2A78:
	ldrh r0, [r3]
.L080B2A7A:
	strh r0, [r1]
	mov r7, r9
	adds r7, #1
	adds r1, #2
	adds r3, #2
	adds r4, #1
	cmp r4, #0xf
	ble .L080B2A60
	bl EnablePalSync
	ldr r3, [sp, #8]
	cmp r3, #8
	bls .L080B2B74
	mov r0, sl
	cmp r0, #7
	bhi .L080B2A9E
	movs r1, #8
	mov sl, r1
.L080B2A9E:
	ldr r4, .L080B2B34  @ gSinLut
	ldr r2, .L080B2B38  @ gSinLut+0x80
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	ldr r1, [sp, #8]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r3, .L080B2B38  @ gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	ldr r1, [sp, #8]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, r9
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r2, [sp, #0xc]
	cmp r2, #0
	beq .L080B2B44
	ldr r0, .L080B2B3C  @ 0x000001FF
	mov r3, r8
	ands r3, r0
	mov r8, r3
	mov r2, r9
	lsls r1, r2, #9
	add r1, r8
	ldr r3, [sp, #4]
	ands r3, r0
	str r3, [sp, #4]
	ldr r3, .L080B2B40  @ gUnknown_08A2EF48
	lsls r0, r2, #1
	movs r2, #0xf
	ands r7, r2
	lsls r2, r7, #0xc
	adds r0, r0, r2
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	ldr r2, [sp, #4]
	bl PutSpriteExt
	b .L080B2B74
	.align 2, 0
.L080B2B34: .4byte gSinLut
.L080B2B38: .4byte gSinLut+0x80
.L080B2B3C: .4byte 0x000001FF
.L080B2B40: .4byte gUnknown_08A2EF48
.L080B2B44:
	ldr r0, .L080B2B84  @ 0x000001FF
	mov r3, r8
	ands r3, r0
	mov r8, r3
	mov r2, r9
	lsls r1, r2, #9
	add r1, r8
	ldr r3, [sp, #4]
	ands r3, r0
	str r3, [sp, #4]
	ldr r3, .L080B2B88  @ gUnknown_08A2EF48
	lsls r0, r2, #1
	movs r2, #0xf
	ands r7, r2
	lsls r2, r7, #0xc
	adds r0, r0, r2
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	ldr r2, [sp, #4]
	bl PutSpriteExt
.L080B2B74:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2B84: .4byte 0x000001FF
.L080B2B88: .4byte gUnknown_08A2EF48

	THUMB_FUNC_END func_080B2A14

	THUMB_FUNC_START func_080B2B8C
func_080B2B8C: @ 0x080B2B8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	ldr r1, .L080B2D8C  @ gUnknown_08205E94
	add r0, sp, #4
	movs r2, #0x18
	bl memcpy
	add r0, sp, #4
	bl SetupBackgrounds
	ldr r3, .L080B2D90  @ gDispIo
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3]
	ldrb r0, [r3, #0xc]
	movs r2, #3
	orrs r0, r2
	strb r0, [r3, #0xc]
	ldrb r0, [r3, #0x10]
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r1, [r3, #0x14]
	movs r0, #4
	negs r0, r0
	ands r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r0, r2
	strb r0, [r3, #0x18]
	ldrb r0, [r3, #1]
	movs r1, #2
	negs r1, r1
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	movs r0, #9
	negs r0, r0
	ands r1, r0
	movs r0, #0x10
	orrs r1, r0
	ldrb r2, [r3, #0x15]
	movs r0, #0x3f
	ands r0, r2
	movs r2, #0x40
	orrs r0, r2
	movs r2, #0x21
	negs r2, r2
	ands r0, r2
	strb r0, [r3, #0x15]
	ands r1, r2
	movs r0, #0x41
	negs r0, r0
	ands r1, r0
	movs r0, #0x7f
	ands r1, r0
	strb r1, [r3, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	strh r4, [r7, #0x2a]
	ldr r0, .L080B2D94  @ gUnknown_03001D50
	str r0, [r7, #0x34]
	movs r2, #0
	movs r1, #0x13
	adds r0, #0x4c
.L080B2C48:
	str r2, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge .L080B2C48
	movs r0, #0
	str r0, [r7, #0x38]
	ldr r0, .L080B2D98  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B2D9C  @ gUnknown_08A37300
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, [r7, #0x40]
	ldrb r0, [r0, #5]
	movs r1, #0
	bl func_080B369C
	adds r4, r0, #0
	movs r6, #0
	bl strlen
	adds r1, r7, #0
	adds r1, #0x2e
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r4, r0]
	mov sl, r1
	cmp r0, #0
	beq .L080B2CD2
	ldr r0, .L080B2DA0  @ gUnknown_08A2F2C0
	mov r8, r0
	movs r1, #0xb0
	lsls r1, r1, #1
	add r1, r8
	mov r9, r1
	ldr r5, .L080B2DA4  @ gBuf
.L080B2C9A:
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #2
	add r0, r8
	ldr r0, [r0]
	cmp r0, #0
	bne .L080B2CAC
	mov r1, r9
	ldr r0, [r1]
.L080B2CAC:
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L080B2DA8  @ 0x06010000
	adds r1, r6, r0
	adds r0, r5, #0
	movs r2, #2
	movs r3, #4
	bl CopyTileGfxForObj
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x40
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne .L080B2C9A
.L080B2CD2:
	ldr r4, .L080B2DAC  @ gUnknown_08A30780
	movs r1, #0xf0
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0xf8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B2DB0  @ gUnknown_08A301B0
	ldr r1, .L080B2DB4  @ 0x06016000
	bl Decompress
	mov r1, sl
	ldrb r0, [r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r0, r0, #1
	subs r0, #8
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	movs r1, #0
	bl func_080B305C
	ldr r1, [r7, #0x34]
	str r0, [r1]
	ldr r0, .L080B2DB8  @ gUnknown_08A360E8
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	ldr r0, .L080B2DBC  @ gUnknown_08A36284
	ldr r4, .L080B2DA4  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080B2DC0  @ gBg0Tm+0x1C0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080B2DC4  @ gUnknown_08A35A3C
	ldr r1, .L080B2DC8  @ 0x06000800
	bl Decompress
	ldr r0, .L080B2DCC  @ gUnknown_08A35FD0
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080B2DD0  @ gBg1Tm
	ldr r2, .L080B2DD4  @ 0x00005040
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080B2DD8  @ gUnknown_08A360C8
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B2DDC  @ gUnknown_08B17B64
	ldr r1, .L080B2DE0  @ 0x06008000
	bl Decompress
	ldr r0, .L080B2DE4  @ gBg2Tm
	ldr r1, .L080B2DE8  @ gUnknown_08B18D68
	movs r2, #0
	movs r3, #5
	bl func_0800154C
	ldr r0, .L080B2DEC  @ gUnknown_08B18ED4
	movs r1, #0
	movs r2, #0x60
	bl ApplyPaletteExt
	movs r0, #4
	bl EnableBgSync
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B2D8C: .4byte gUnknown_08205E94
.L080B2D90: .4byte gDispIo
.L080B2D94: .4byte gUnknown_03001D50
.L080B2D98: .4byte gBg0Tm
.L080B2D9C: .4byte gUnknown_08A37300
.L080B2DA0: .4byte gUnknown_08A2F2C0
.L080B2DA4: .4byte gBuf
.L080B2DA8: .4byte 0x06010000
.L080B2DAC: .4byte gUnknown_08A30780
.L080B2DB0: .4byte gUnknown_08A301B0
.L080B2DB4: .4byte 0x06016000
.L080B2DB8: .4byte gUnknown_08A360E8
.L080B2DBC: .4byte gUnknown_08A36284
.L080B2DC0: .4byte gBg0Tm+0x1C0
.L080B2DC4: .4byte gUnknown_08A35A3C
.L080B2DC8: .4byte 0x06000800
.L080B2DCC: .4byte gUnknown_08A35FD0
.L080B2DD0: .4byte gBg1Tm
.L080B2DD4: .4byte 0x00005040
.L080B2DD8: .4byte gUnknown_08A360C8
.L080B2DDC: .4byte gUnknown_08B17B64
.L080B2DE0: .4byte 0x06008000
.L080B2DE4: .4byte gBg2Tm
.L080B2DE8: .4byte gUnknown_08B18D68
.L080B2DEC: .4byte gUnknown_08B18ED4

	THUMB_FUNC_END func_080B2B8C

	THUMB_FUNC_START func_080B2DF0
func_080B2DF0: @ 0x080B2DF0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #1
	movs r3, #0x10
	subs r3, r3, r0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBlendConfig
	movs r0, #1
	bl SetBlendBackdropA
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x20
	bne .L080B2E28
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
.L080B2E28:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2DF0

	THUMB_FUNC_START func_080B2E30
func_080B2E30: @ 0x080B2E30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x3c
	bne .L080B2E4E
	ldr r0, [r4, #0x40]
	ldrb r1, [r0, #5]
	adds r0, r4, #0
	bl func_080B325C
	str r0, [r4, #0x38]
	ldr r0, .L080B2E60  @ gUnknown_08A2F038
	adds r1, r4, #0
	bl SpawnProc
.L080B2E4E:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x5f
	bls .L080B2E64
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	b .L080B2E9E
	.align 2, 0
.L080B2E60: .4byte gUnknown_08A2F038
.L080B2E64:
	cmp r0, #0xf
	bls .L080B2E9A
	ldrh r0, [r4, #0x2a]
	adds r1, r0, #0
	subs r1, #0x10
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080B2E9A
	lsrs r0, r1, #0x1f
	adds r0, r1, r0
	asrs r5, r0, #1
	adds r1, r5, #1
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r1, r0
	bge .L080B2E9A
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl func_080B305C
	ldr r2, [r4, #0x34]
	lsls r1, r5, #2
	adds r1, r1, r2
	str r0, [r1, #4]
.L080B2E9A:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
.L080B2E9E:
	strh r0, [r4, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2E30

	THUMB_FUNC_START func_080B2EA8
func_080B2EA8: @ 0x080B2EA8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x14
	bne .L080B2EBA
	ldr r0, [r4, #0x38]
	movs r1, #4
	bl Proc_Goto
.L080B2EBA:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x4f
	bls .L080B2ECA
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	b .L080B2F00
.L080B2ECA:
	ldrh r5, [r4, #0x2a]
	adds r0, r5, #0
	movs r1, #3
	bl __umodsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	bne .L080B2EFC
	adds r0, r5, #0
	movs r1, #3
	bl __udivsi3
	adds r2, r4, #0
	adds r2, #0x2e
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldrb r2, [r2]
	cmp r1, r2
	bcs .L080B2EFC
	ldr r0, [r4, #0x34]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	bl Proc_Break
.L080B2EFC:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
.L080B2F00:
	strh r0, [r4, #0x2a]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2EA8

	THUMB_FUNC_START func_080B2F08
func_080B2F08: @ 0x080B2F08
	ldr r2, .L080B2F28  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080B2F28: .4byte gDispIo

	THUMB_FUNC_END func_080B2F08

	THUMB_FUNC_START func_080B2F2C
func_080B2F2C: @ 0x080B2F2C
	push {lr}
	bl EndAllProcChildren
	movs r0, #3
	bl func_080B29B8
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2F2C

	THUMB_FUNC_START func_080B2F3C
func_080B2F3C: @ 0x080B2F3C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080B2F54  @ gUnknown_08A2EF50
	adds r1, r4, #0
	bl SpawnProc
	str r4, [r0, #0x3c]
	str r5, [r0, #0x40]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080B2F54: .4byte gUnknown_08A2EF50

	THUMB_FUNC_END func_080B2F3C

	THUMB_FUNC_START func_080B2F58
func_080B2F58: @ 0x080B2F58
	movs r1, #0
	strh r1, [r0, #0x2a]
	ldr r3, [r0, #0x14]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r2, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	ldrh r3, [r3, #0x2c]
	adds r1, r1, r3
	strh r1, [r0, #0x2e]
	bx lr

	THUMB_FUNC_END func_080B2F58

	THUMB_FUNC_START func_080B2F74
func_080B2F74: @ 0x080B2F74
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	adds r1, r3, #0
	asrs r1, r1, #4
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r5, [r1]
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	subs r2, r1, r0
	movs r6, #0x80
	lsls r6, r6, #1
	str r6, [sp]
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #4
	movs r1, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #4]
	adds r0, r5, #0
	adds r1, r2, #0
	movs r2, #0x18
	bl func_080B2A14
	ldrh r0, [r4, #0x2a]
	adds r0, #0x10
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r6
	bne .L080B2FC8
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
.L080B2FC8:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2F74

	THUMB_FUNC_START func_080B2FD0
func_080B2FD0: @ 0x080B2FD0
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	movs r5, #0
	str r5, [sp, #4]
	movs r2, #0x18
	bl func_080B2A14
	strh r5, [r4, #0x2a]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2FD0

	THUMB_FUNC_START func_080B2FF8
func_080B2FF8: @ 0x080B2FF8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r0, r5
	subs r0, r5, r0
	adds r7, r4, #0
	adds r7, #0x2c
	ldrb r2, [r7]
	movs r6, #0x2e
	ldrsh r3, [r4, r6]
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	adds r0, r2, #0
	adds r1, r3, #0
	movs r2, #0x18
	adds r3, r6, #0
	bl func_080B2A14
	ldrh r0, [r4, #0x2a]
	cmp r0, r5
	bne .L080B304C
	ldr r1, [r4, #0x14]
	ldrb r0, [r7]
	ldr r1, [r1, #0x34]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
.L080B304C:
	ldrh r0, [r4, #0x2a]
	adds r0, #8
	strh r0, [r4, #0x2a]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B2FF8

	THUMB_FUNC_START func_080B305C
func_080B305C: @ 0x080B305C
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L080B3078  @ gUnknown_08A2EFC0
	adds r1, r2, #0
	bl SpawnProc
	adds r1, r0, #0
	adds r1, #0x2c
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B3078: .4byte gUnknown_08A2EFC0

	THUMB_FUNC_END func_080B305C

	THUMB_FUNC_START func_080B307C
func_080B307C: @ 0x080B307C
	push {lr}
	bl EnablePalSync
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B307C

	THUMB_FUNC_START func_080B3088
func_080B3088: @ 0x080B3088
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x2a]
	ldr r0, .L080B30F8  @ gPal
	movs r2, #0
	adds r1, r0, #0
	adds r1, #0x80
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r0, r4
	movs r4, #0xf
.L080B30A0:
	strh r2, [r0]
	strh r2, [r1]
	adds r1, #2
	adds r0, #2
	subs r4, #1
	cmp r4, #0
	bge .L080B30A0
	adds r0, r3, #0
	adds r0, #0x2e
	movs r1, #0
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x2d
	strb r1, [r2]
	movs r4, #0
	adds r7, r3, #0
	adds r7, #0x2c
	adds r6, r0, #0
	adds r5, r2, #0
.L080B30C6:
	ldrb r0, [r7]
	bl GetJInfo
	adds r0, #0x2c
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B30E6
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r6]
	orrs r0, r1
	strb r0, [r6]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
.L080B30E6:
	adds r4, #1
	cmp r4, #7
	ble .L080B30C6
	bl EnablePalSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B30F8: .4byte gPal

	THUMB_FUNC_END func_080B3088

	THUMB_FUNC_START func_080B30FC
func_080B30FC: @ 0x080B30FC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov ip, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r9, r2
	movs r4, #0
	ldr r7, .L080B31A4  @ gPal
	adds r5, r7, #0
	adds r5, #0x80
	lsls r2, r0, #0x10
	movs r0, #0xf8
	lsls r0, r0, #2
	adds r3, r7, r0
.L080B3128:
	mov r1, ip
	adds r0, r1, r4
	movs r1, #0xf
	cmp r0, #0xf
	bgt .L080B3134
	lsrs r1, r2, #0x10
.L080B3134:
	movs r6, #0xf0
	lsls r6, r6, #1
	adds r0, r1, r6
	lsls r0, r0, #1
	adds r0, r0, r7
	ldrh r1, [r0]
	strh r1, [r3]
	ldrh r0, [r0]
	strh r0, [r5]
	adds r5, #2
	movs r0, #0x80
	lsls r0, r0, #9
	adds r2, r2, r0
	adds r3, #2
	adds r4, #1
	cmp r4, #0xf
	ble .L080B3128
	bl EnablePalSync
	movs r0, #8
	mov r1, r8
	subs r0, r0, r1
	lsls r0, r0, #4
	movs r4, #0
	ldr r6, .L080B31A8  @ gUnknown_08A2F1D0
	adds r5, r0, #0
	subs r5, #8
.L080B316A:
	mov r0, r9
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B318C
	ldr r1, .L080B31AC  @ 0x000001FF
	ands r1, r5
	ldr r3, [r6]
	movs r0, #0xf0
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r2, #0x50
	bl PutSpriteExt
	adds r5, #0x20
.L080B318C:
	adds r6, #4
	adds r4, #1
	cmp r4, #7
	ble .L080B316A
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B31A4: .4byte gPal
.L080B31A8: .4byte gUnknown_08A2F1D0
.L080B31AC: .4byte 0x000001FF

	THUMB_FUNC_END func_080B30FC

	THUMB_FUNC_START func_080B31B0
func_080B31B0: @ 0x080B31B0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0x20
	bls .L080B31CC
	movs r5, #0
	adds r0, r4, #0
	bl Proc_Break
	b .L080B31D6
.L080B31CC:
	lsrs r1, r1, #0x11
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
.L080B31D6:
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	adds r0, r5, #0
	bl func_080B30FC
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B31B0

	THUMB_FUNC_START func_080B31EC
func_080B31EC: @ 0x080B31EC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	movs r0, #0
	bl func_080B30FC
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B31EC

	THUMB_FUNC_START func_080B3208
func_080B3208: @ 0x080B3208
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2a]
	adds r0, #1
	strh r0, [r3, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x11
	cmp r0, #0x10
	bls .L080B3244
	ldr r2, .L080B3240  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r3, #0
	bl Proc_Break
	b .L080B3258
	.align 2, 0
.L080B3240: .4byte gDispIo
.L080B3244:
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r3, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, r3, #0
	adds r2, #0x2e
	ldrb r2, [r2]
	bl func_080B30FC
.L080B3258:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B3208

	THUMB_FUNC_START func_080B325C
func_080B325C: @ 0x080B325C
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L080B3278  @ gUnknown_08A2EFF8
	adds r1, r2, #0
	bl SpawnProc
	adds r1, r0, #0
	adds r1, #0x2c
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B3278: .4byte gUnknown_08A2EFF8

	THUMB_FUNC_END func_080B325C

	THUMB_FUNC_START func_080B327C
func_080B327C: @ 0x080B327C
	adds r1, r0, #0
	adds r1, #0x4c
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x4e
	strh r2, [r0]
	ldr r2, .L080B32A8  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080B32A8: .4byte gDispIo

	THUMB_FUNC_END func_080B327C

	THUMB_FUNC_START func_080B32AC
func_080B32AC: @ 0x080B32AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	mov r5, r9
	adds r5, #0x4c
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0x1d
	bgt .L080B32E6
	adds r3, r0, #0
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #5
	movs r1, #4
	movs r2, #0x32
	bl Interpolate
	adds r7, r0, #0
	movs r0, #0
	ldrsh r3, [r5, r0]
	str r4, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x10
	b .L080B330A
.L080B32E6:
	movs r1, #0
	ldrsh r3, [r5, r1]
	subs r3, #0x1e
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x32
	movs r2, #0x64
	bl Interpolate
	adds r7, r0, #0
	movs r2, #0
	ldrsh r3, [r5, r2]
	subs r3, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
.L080B330A:
	bl Interpolate
	mov sl, r0
	cmp r7, #0x31
	ble .L080B3318
	movs r0, #0x64
	subs r7, r0, r7
.L080B3318:
	mov r6, r9
	adds r6, #0x4c
	movs r0, #0
	ldrsh r3, [r6, r0]
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd6
	bl Interpolate
	adds r5, r0, #0
	movs r1, #0
	ldrsh r3, [r6, r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x80
	bl Interpolate
	adds r4, r0, #0
	movs r2, #0x4e
	add r2, r9
	mov r8, r2
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r7, #2
	adds r0, r0, r7
	adds r0, #0x80
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #2
	movs r2, #0
	movs r3, #0
	bl func_080ADDFC
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #2
	adds r1, r2, #0
	bl func_080ADE90
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r0, #0x48
	str r0, [sp]
	movs r0, #2
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x50
	bl func_080ADEE0
	mov r1, r8
	ldrh r0, [r1]
	subs r0, #0x40
	strh r0, [r1]
	mov r2, sl
	lsls r1, r2, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	ble .L080B33D0
	mov r0, r9
	bl Proc_Break
	ldr r2, .L080B33E0  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
.L080B33D0:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B33E0: .4byte gDispIo

	THUMB_FUNC_END func_080B32AC

	THUMB_FUNC_START func_080B33E4
func_080B33E4: @ 0x080B33E4
	adds r2, r0, #0
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	adds r0, #0x18
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	adds r0, #2
	strh r1, [r0]
	bx lr

	THUMB_FUNC_END func_080B33E4

	THUMB_FUNC_START func_080B33FC
func_080B33FC: @ 0x080B33FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r1, #0
	mov r8, r3
	adds r4, #0x4c
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r5, #0x46
	str r5, [sp]
	movs r0, #5
	movs r1, #0x78
	bl Interpolate
	adds r7, r0, #0
	movs r0, #0
	ldrsh r3, [r4, r0]
	str r5, [sp]
	movs r0, #5
	movs r1, #0x50
	mov r2, r8
	bl Interpolate
	mov sl, r0
	adds r1, r7, #0
	subs r1, #8
	ldr r4, .L080B3490  @ 0x000001FF
	ands r1, r4
	lsls r6, r6, #9
	orrs r1, r6
	mov r2, sl
	subs r2, #8
	ands r2, r4
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	orrs r2, r0
	ldr r0, .L080B3494  @ gUnknown_08A2F1F0
	mov r9, r0
	movs r5, #0xf0
	lsls r5, r5, #8
	str r5, [sp]
	movs r0, #4
	mov r3, r9
	bl PutSpriteExt
	movs r1, #0xe8
	subs r1, r1, r7
	ands r1, r4
	orrs r1, r6
	movs r2, #0x98
	mov r0, sl
	subs r2, r2, r0
	ands r2, r4
	mov r0, r8
	orrs r2, r0
	str r5, [sp]
	movs r0, #4
	mov r3, r9
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3490: .4byte 0x000001FF
.L080B3494: .4byte gUnknown_08A2F1F0

	THUMB_FUNC_END func_080B33FC

	THUMB_FUNC_START func_080B3498
func_080B3498: @ 0x080B3498
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	movs r0, #0x64
	add r0, sl
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x46
	bgt .L080B3534
	movs r1, #0x90
	lsls r1, r1, #1
	mov r2, r9
	movs r0, #0
	ldrsh r3, [r2, r0]
	movs r0, #0x46
	str r0, [sp]
	movs r0, #4
	movs r2, #0x10
	bl Interpolate
	adds r7, r0, #0
	ldr r4, .L080B3698  @ gSinLut
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x15
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	mov r1, r9
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
.L080B3534:
	mov r0, sl
	movs r1, #0x15
	movs r2, #0xd7
	movs r3, #0x11
	bl func_080B33FC
	movs r2, #0x66
	add r2, sl
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	bgt .L080B35CA
	movs r1, #0x90
	lsls r1, r1, #1
	adds r3, r0, #0
	movs r0, #0x46
	str r0, [sp]
	movs r0, #0
	movs r2, #0x10
	bl Interpolate
	adds r7, r0, #0
	ldr r4, .L080B3698  @ gSinLut
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x16
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	mov r1, r9
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
.L080B35CA:
	mov r0, sl
	movs r1, #0x16
	movs r2, #0xc0
	movs r3, #0x20
	bl func_080B33FC
	movs r2, #0x68
	add r2, sl
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	bgt .L080B3660
	movs r1, #0x90
	lsls r1, r1, #1
	adds r3, r0, #0
	movs r0, #0x46
	str r0, [sp]
	movs r0, #1
	movs r2, #0x10
	bl Interpolate
	adds r7, r0, #0
	ldr r4, .L080B3698  @ gSinLut
	movs r1, #0x80
	adds r1, r1, r4
	mov r8, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r8
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x17
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	mov r1, r9
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
.L080B3660:
	mov r0, sl
	movs r1, #0x17
	movs r2, #0xa9
	movs r3, #0x2f
	bl func_080B33FC
	mov r0, sl
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	ble .L080B3686
	mov r0, sl
	bl Proc_Break
.L080B3686:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3698: .4byte gSinLut

	THUMB_FUNC_END func_080B3498

	THUMB_FUNC_START func_080B369C
func_080B369C: @ 0x080B369C
	push {r4, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetJInfo
	cmp r4, #0
	bne .L080B36B6
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	b .L080B36BE
.L080B36B6:
	ldrh r0, [r0]
	adds r1, r4, #0
	bl GetMsgTo
.L080B36BE:
	ldr r1, .L080B36D8  @ gUnknown_08205ED0
	adds r0, r4, #0
	bl strstr
	cmp r0, #0
	beq .L080B36D0
	ldr r1, .L080B36DC  @ gUnknown_08205ED4
	bl sprintf
.L080B36D0:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B36D8: .4byte gUnknown_08205ED0
.L080B36DC: .4byte gUnknown_08205ED4

	THUMB_FUNC_END func_080B369C

	THUMB_FUNC_START func_080B36E0
func_080B36E0: @ 0x080B36E0
	push {lr}
	ldr r0, .L080B3708  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x6d
	bhi .L080B3718
	ldr r3, .L080B370C  @ 0x04000008
	ldrh r2, [r3]
	ldr r1, .L080B3710  @ 0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #2
	strh r0, [r3]
	ldr r2, .L080B3714  @ 0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #2
	b .L080B372E
	.align 2, 0
.L080B3708: .4byte 0x04000006
.L080B370C: .4byte 0x04000008
.L080B3710: .4byte 0x0000FFFC
.L080B3714: .4byte 0x0400000C
.L080B3718:
	ldr r3, .L080B3734  @ 0x04000008
	ldrh r2, [r3]
	ldr r1, .L080B3738  @ 0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	ldr r2, .L080B373C  @ 0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #1
.L080B372E:
	strh r1, [r2]
	pop {r0}
	bx r0
	.align 2, 0
.L080B3734: .4byte 0x04000008
.L080B3738: .4byte 0x0000FFFC
.L080B373C: .4byte 0x0400000C

	THUMB_FUNC_END func_080B36E0

	THUMB_FUNC_START func_080B3740
func_080B3740: @ 0x080B3740
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	ldr r0, .L080B37F8  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r2, #0x34
	add r2, ip
	mov r8, r2
	ldrb r1, [r2]
	movs r2, #1
	orrs r1, r2
	movs r0, #2
	orrs r1, r0
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	mov r7, ip
	adds r7, #0x36
	ldrb r0, [r7]
	orrs r0, r2
	movs r2, #3
	negs r2, r2
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r2, r8
	strb r1, [r2]
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x3d
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B37F8: .4byte gDispIo

	THUMB_FUNC_END func_080B3740

	THUMB_FUNC_START func_080B37FC
func_080B37FC: @ 0x080B37FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x3c
	mov r9, r0
	movs r0, #0
	str r0, [sp, #0x34]
	add r1, sp, #4
	ldr r0, .L080B3830  @ gUnknown_08205EDC
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r1, r9
	ldr r0, [r1, #0x34]
	ldr r0, [r0, #0x10]
	str r0, [r1, #0x38]
	movs r7, #4
	b .L080B3836
	.align 2, 0
.L080B3830: .4byte gUnknown_08205EDC
.L080B3834:
	adds r7, #1
.L080B3836:
	cmp r7, #7
	bgt .L080B3852
	mov r2, r9
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	adds r0, #0x2c
	adds r0, r0, r7
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B3834
	movs r3, #1
	str r3, [sp, #0x34]
.L080B3852:
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	mov r4, r9
	strh r0, [r4, #0x2a]
	strh r0, [r4, #0x2c]
	mov r1, r9
	adds r1, #0x46
	movs r0, #0xfa
	strb r0, [r1]
	ldr r6, .L080B3A28  @ gBg0Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r0, .L080B3A2C  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B3A30  @ gBg2Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r4, .L080B3A34  @ gDispIo
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	bl SetBlendNone
	bl ResetTextFont
	bl ResetText
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	movs r3, #2
	orrs r0, r3
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, .L080B3A38  @ gUnknown_08A30E2C
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080B3A3C  @ gUnknown_08A3593C
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0xe0
	bl ApplyPaletteExt
	ldr r0, .L080B3A40  @ gBg3Tm
	ldr r1, .L080B3A44  @ gUnknown_08A35488
	movs r2, #0xe0
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	ldr r4, .L080B3A48  @ gUnknown_08A30800
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080B3A4C  @ gUiFramePaletteA
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, .L080B3A50  @ gUnknown_08A30978
	movs r2, #0xc0
	lsls r2, r2, #7
	mov r0, r8
	bl TmApplyTsa_thm
	movs r0, #0xf
	bl EnableBgSync
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	mov r1, r9
	ldr r0, [r1, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	ldrb r0, [r0, #0xb]
	mov r4, r9
	adds r4, #0x40
	strb r0, [r4]
	mov r2, r9
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	ldrb r0, [r0, #0xc]
	mov r1, r9
	adds r1, #0x41
	strb r0, [r1]
	mov r3, r9
	ldr r0, [r3, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	ldrb r0, [r0, #0xd]
	mov r1, r9
	adds r1, #0x42
	strb r0, [r1]
	mov r1, r9
	ldr r0, [r1, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	ldrb r0, [r0, #0xe]
	mov r1, r9
	adds r1, #0x43
	strb r0, [r1]
	mov r2, r9
	ldr r0, [r2, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	ldrb r1, [r0, #0xf]
	mov r0, r9
	adds r0, #0x44
	strb r1, [r0]
	mov r3, r9
	ldr r0, [r3, #0x34]
	ldrb r0, [r0, #5]
	bl GetJInfo
	ldrb r0, [r0, #0x10]
	mov r1, r9
	adds r1, #0x45
	strb r0, [r1]
	movs r7, #0
	str r4, [sp, #0x38]
	movs r4, #0x4a
	adds r4, r4, r6
	mov sl, r4
	adds r6, #0x42
	mov r8, r6
	movs r6, #0
	movs r4, #0
.L080B39EC:
	ldr r0, .L080B3A54  @ gUnknown_0201FB28
	adds r5, r4, r0
	adds r0, r5, #0
	movs r1, #3
	bl InitText
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #3
	bl Text_SetColor
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [sp, #0x34]
	cmp r0, #0
	beq .L080B3A58
	add r0, sp, #0x1c
	adds r0, r0, r6
	ldr r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	b .L080B3A6C
	.align 2, 0
.L080B3A28: .4byte gBg0Tm
.L080B3A2C: .4byte gBg1Tm
.L080B3A30: .4byte gBg2Tm
.L080B3A34: .4byte gDispIo
.L080B3A38: .4byte gUnknown_08A30E2C
.L080B3A3C: .4byte gUnknown_08A3593C
.L080B3A40: .4byte gBg3Tm
.L080B3A44: .4byte gUnknown_08A35488
.L080B3A48: .4byte gUnknown_08A30800
.L080B3A4C: .4byte gUiFramePaletteA
.L080B3A50: .4byte gUnknown_08A30978
.L080B3A54: .4byte gUnknown_0201FB28
.L080B3A58:
	mov r0, sp
	adds r0, r0, r6
	adds r0, #4
	ldr r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
.L080B3A6C:
	ldr r0, .L080B3BD0  @ gUnknown_0201FB28
	adds r0, r4, r0
	mov r1, r8
	bl PutText
	ldr r1, [sp, #0x38]
	adds r0, r1, r7
	ldrb r2, [r0]
	mov r0, sl
	movs r1, #0
	bl PutNumber
	movs r2, #0x80
	add sl, r2
	add r8, r2
	adds r6, #4
	adds r4, #8
	adds r7, #1
	cmp r7, #5
	ble .L080B39EC
	movs r5, #0
	mov r0, r9
	bl func_080B40D0
	mov r3, r9
	str r0, [r3, #0x3c]
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl SetInitTalkTextFont
	bl Dialogue_ClearLines
	bl EndTalk
	mov r4, r9
	ldr r0, [r4, #0x34]
	ldr r2, [r0]
	movs r0, #2
	movs r1, #0xf
	bl StartTalkMsg
	movs r0, #0
	bl Dialogue_SetDefaultTextColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #8
	bl SetTalkFlag
	movs r0, #0x40
	bl SetTalkFlag
	movs r0, #4
	bl Dialogue_SetCharacterDisplayDelay
	ldr r0, .L080B3BD4  @ gUnknown_02000000
	ldr r3, [r4, #0x34]
	movs r1, #4
	ldrsb r1, [r3, r1]
	strh r1, [r0, #8]
	movs r1, #0x82
	lsls r1, r1, #1
	strh r1, [r0, #2]
	movs r1, #0x58
	strh r1, [r0, #4]
	ldrb r1, [r3, #7]
	strh r1, [r0, #6]
	movs r1, #6
	strh r1, [r0, #0xa]
	ldrb r1, [r3, #6]
	strb r1, [r0, #1]
	movs r4, #1
	strh r4, [r0, #0xc]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r0, #0xe]
	movs r1, #2
	strh r1, [r0, #0x10]
	ldr r1, .L080B3BD8  @ gUnknown_02000038
	str r1, [r0, #0x1c]
	ldr r1, .L080B3BDC  @ gUnknown_02002038
	str r1, [r0, #0x24]
	ldr r1, .L080B3BE0  @ gUnknown_02007838
	str r1, [r0, #0x20]
	ldr r1, .L080B3BE4  @ gUnknown_020078D8
	str r1, [r0, #0x28]
	ldr r1, .L080B3BE8  @ gUnknown_0200A2D8
	str r1, [r0, #0x30]
	ldrb r2, [r3, #8]
	strh r2, [r1]
	ldrb r2, [r3, #9]
	strh r2, [r1, #2]
	ldrb r2, [r3, #0xa]
	strh r2, [r1, #4]
	ldrb r2, [r3, #0xb]
	strh r2, [r1, #6]
	ldrb r2, [r3, #0xc]
	strh r2, [r1, #8]
	movs r2, #0xa0
	lsls r2, r2, #2
	strh r2, [r1, #0xe]
	movs r3, #0xf
	strh r3, [r1, #0x10]
	subs r2, #0x80
	strh r2, [r1, #0xa]
	strh r3, [r1, #0xc]
	strh r4, [r1, #0x12]
	ldr r2, .L080B3BEC  @ gBg1Tm
	str r2, [r1, #0x14]
	ldr r2, .L080B3BF0  @ gUnknown_0200A300
	str r2, [r1, #0x18]
	ldr r2, .L080B3BF4  @ gUnknown_0200C300
	str r2, [r1, #0x1c]
	ldr r2, .L080B3BF8  @ gUnknown_0200CB00
	str r2, [r1, #0x20]
	ldr r2, .L080B3BFC  @ func_080B3740
	str r2, [r1, #0x24]
	bl StartEkrUnitMainMini
	ldr r4, .L080B3C00  @ gUnknown_0201DB00
	mov r0, r9
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #0xd]
	strh r0, [r4]
	movs r0, #0xa
	strh r0, [r4, #2]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r4, #4]
	ldrb r0, [r1, #0xe]
	strh r0, [r4, #6]
	movs r0, #0xb
	strh r0, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r5, [r4, #0xc]
	ldr r0, .L080B3C04  @ 0x0000FFFF
	strh r0, [r4, #0xe]
	ldr r0, .L080B3C08  @ 0x06010000
	str r0, [r4, #0x1c]
	ldr r0, .L080B3C0C  @ gUnknown_0201DB28
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl func_0805AA68
	movs r3, #0x98
	lsls r3, r3, #1
	movs r0, #0x68
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xd0
	movs r2, #0x68
	bl func_0805AE40
	ldr r0, .L080B3C10  @ func_080B36E0
	bl SetOnHBlankA
	add sp, #0x3c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3BD0: .4byte gUnknown_0201FB28
.L080B3BD4: .4byte gUnknown_02000000
.L080B3BD8: .4byte gUnknown_02000038
.L080B3BDC: .4byte gUnknown_02002038
.L080B3BE0: .4byte gUnknown_02007838
.L080B3BE4: .4byte gUnknown_020078D8
.L080B3BE8: .4byte gUnknown_0200A2D8
.L080B3BEC: .4byte gBg1Tm
.L080B3BF0: .4byte gUnknown_0200A300
.L080B3BF4: .4byte gUnknown_0200C300
.L080B3BF8: .4byte gUnknown_0200CB00
.L080B3BFC: .4byte func_080B3740
.L080B3C00: .4byte gUnknown_0201DB00
.L080B3C04: .4byte 0x0000FFFF
.L080B3C08: .4byte 0x06010000
.L080B3C0C: .4byte gUnknown_0201DB28
.L080B3C10: .4byte func_080B36E0

	THUMB_FUNC_END func_080B37FC

	THUMB_FUNC_START func_080B3C14
func_080B3C14: @ 0x080B3C14
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x2c]
	movs r0, #0xc8
	lsls r0, r0, #1
	cmp r1, r0
	bne .L080B3C44
	bl func_080B2988
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B3C3C
	movs r0, #0x3c
	bl FadeBgmOut
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b .L080B3C44
.L080B3C3C:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
.L080B3C44:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B3C14

	THUMB_FUNC_START func_080B3C50
func_080B3C50: @ 0x080B3C50
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x46
	adds r0, r0, r7
	mov r9, r0
	ldrh r1, [r7, #0x2a]
	movs r0, #0x50
	subs r0, r0, r1
	movs r1, #0xe
	bl __divsi3
	mvns r0, r0
	mov r1, r9
	ldrb r1, [r1]
	adds r0, r0, r1
	mov r2, r9
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xb3
	bhi .L080B3C88
	movs r0, #0xb4
	strb r0, [r2]
.L080B3C88:
	ldr r0, .L080B3D38  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #1
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r1, #2
	mov sl, r1
	mov r2, sl
	orrs r0, r2
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	ldrh r6, [r7, #0x2a]
	adds r1, r6, #0
	movs r0, #0x50
	subs r0, r0, r1
	mov r2, ip
	adds r2, #0x31
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	adds r1, #0x50
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x34
	ldrb r0, [r1]
	mov r2, r8
	orrs r0, r2
	mov r2, sl
	orrs r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x36
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x50
	bne .L080B3D40
	movs r0, #0xb4
	mov r1, r9
	strb r0, [r1]
	movs r2, #0
	strh r2, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, .L080B3D3C  @ func_080B3C14
	adds r1, r7, #0
	bl StartParallelWorker
	b .L080B3D44
	.align 2, 0
.L080B3D38: .4byte gDispIo
.L080B3D3C: .4byte func_080B3C14
.L080B3D40:
	adds r0, r6, #4
	strh r0, [r7, #0x2a]
.L080B3D44:
	ldr r0, .L080B3D7C  @ gUnknown_02000000
	adds r4, r7, #0
	adds r4, #0x46
	ldrb r1, [r4]
	movs r2, #0x58
	bl func_0805A940
	ldr r0, .L080B3D80  @ gUnknown_0201DB00
	ldrb r3, [r4]
	adds r1, r3, #0
	subs r1, #0x30
	adds r3, #0x30
	movs r2, #0x68
	str r2, [sp]
	bl func_0805AE40
	ldr r0, [r7, #0x3c]
	movs r1, #0x64
	bl func_080B40E4
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3D7C: .4byte gUnknown_02000000
.L080B3D80: .4byte gUnknown_0201DB00

	THUMB_FUNC_END func_080B3C50

	THUMB_FUNC_START func_080B3D84
func_080B3D84: @ 0x080B3D84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	ldrb r0, [r0]
	cmp r0, #8
	bhi .L080B3E0A
	lsls r0, r0, #2
	ldr r1, .L080B3D9C  @ .L080B3DA0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B3D9C: .4byte .L080B3DA0
.L080B3DA0: @ jump table
	.4byte .L080B3DC4 @ case 0
	.4byte .L080B3DCE @ case 1
	.4byte .L080B3DD8 @ case 2
	.4byte .L080B3DE4 @ case 3
	.4byte .L080B3DF0 @ case 4
	.4byte .L080B3E0A @ case 5
	.4byte .L080B3E00 @ case 6
	.4byte .L080B3DE4 @ case 7
	.4byte .L080B3E0A @ case 8
.L080B3DC4:
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
	b .L080B3E0A
.L080B3DCE:
	ldr r0, .L080B3DD4  @ gUnknown_02000000
	movs r1, #0
	b .L080B3DF4
	.align 2, 0
.L080B3DD4: .4byte gUnknown_02000000
.L080B3DD8:
	ldr r0, .L080B3DE0  @ gUnknown_02000000
	movs r1, #1
	b .L080B3DF4
	.align 2, 0
.L080B3DE0: .4byte gUnknown_02000000
.L080B3DE4:
	ldr r0, .L080B3DEC  @ gUnknown_02000000
	bl func_0805A990
	b .L080B3E0A
	.align 2, 0
.L080B3DEC: .4byte gUnknown_02000000
.L080B3DF0:
	ldr r0, .L080B3DFC  @ gUnknown_02000000
	movs r1, #2
.L080B3DF4:
	strh r1, [r0, #0xa]
	bl func_0805A7B4
	b .L080B3E0A
	.align 2, 0
.L080B3DFC: .4byte gUnknown_02000000
.L080B3E00:
	ldr r0, .L080B3E14  @ gUnknown_02000000
	movs r1, #4
	strh r1, [r0, #0xa]
	bl func_0805A7B4
.L080B3E0A:
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3E14: .4byte gUnknown_02000000

	THUMB_FUNC_END func_080B3D84

	THUMB_FUNC_START func_080B3E18
func_080B3E18: @ 0x080B3E18
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #7
	bhi .L080B3E90
	lsls r0, r0, #2
	ldr r1, .L080B3E30  @ .L080B3E34
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B3E30: .4byte .L080B3E34
.L080B3E34: @ jump table
	.4byte .L080B3E54 @ case 0
	.4byte .L080B3E54 @ case 1
	.4byte .L080B3E54 @ case 2
	.4byte .L080B3E54 @ case 3
	.4byte .L080B3E5A @ case 4
	.4byte .L080B3E54 @ case 5
	.4byte .L080B3E54 @ case 6
	.4byte .L080B3E78 @ case 7
.L080B3E54:
	ldr r0, [r4, #0x38]
	adds r0, #2
	b .L080B3E6E
.L080B3E5A:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldr r1, [r4, #0x38]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r2, [r1, #1]
	cmp r0, r2
	bcc .L080B3E90
	adds r0, r1, #2
.L080B3E6E:
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
	b .L080B3E90
.L080B3E78:
	ldr r0, .L080B3E98  @ gUnknown_02000000
	bl func_0805A96C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B3E90
	ldr r0, [r4, #0x38]
	adds r0, #2
	str r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
.L080B3E90:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3E98: .4byte gUnknown_02000000

	THUMB_FUNC_END func_080B3E18

	THUMB_FUNC_START func_080B3E9C
func_080B3E9C: @ 0x080B3E9C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetOnHBlankA
	bl EndTalk
	bl func_0806E920
	ldr r0, .L080B3ED4  @ gUnknown_0201DB00
	bl func_0805AE14
	bl func_0806E904
	ldr r0, .L080B3ED8  @ gUnknown_02000000
	bl func_0805AA28
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq .L080B3EC8
	bl Proc_End
.L080B3EC8:
	movs r0, #2
	bl func_080B29B8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3ED4: .4byte gUnknown_0201DB00
.L080B3ED8: .4byte gUnknown_02000000

	THUMB_FUNC_END func_080B3E9C

	THUMB_FUNC_START func_080B3EDC
func_080B3EDC: @ 0x080B3EDC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080B3EF8  @ gUnknown_08A2F088
	adds r1, r4, #0
	bl SpawnProc
	str r4, [r0, #0x30]
	str r5, [r0, #0x34]
	movs r1, #0
	str r1, [r0, #0x3c]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080B3EF8: .4byte gUnknown_08A2F088

	THUMB_FUNC_END func_080B3EDC

	THUMB_FUNC_START func_080B3EFC
func_080B3EFC: @ 0x080B3EFC
	push {r4, r5, lr}
	sub sp, #0x20
	adds r2, r0, #0
	ldr r0, [r2, #0x14]
	str r0, [r2, #0x30]
	movs r1, #0
	movs r0, #0
	strh r0, [r2, #0x2a]
	adds r4, r2, #0
	adds r4, #0x34
	strb r1, [r4]
	adds r1, r2, #0
	adds r1, #0x35
	movs r0, #0x64
	strb r0, [r1]
	ldr r0, [r2, #0x30]
	ldr r0, [r0, #0x34]
	ldrb r0, [r0, #5]
	mov r1, sp
	bl func_080B369C
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B3F66
	adds r5, r4, #0
	mov r4, sp
.L080B3F36:
	ldrb r0, [r4]
	bl func_080B4108
	adds r1, r0, #0
	cmp r1, #0
	beq .L080B3F4E
	ldrb r0, [r1, #5]
	ldrb r1, [r1, #4]
	subs r0, r0, r1
	ldrb r1, [r5]
	adds r0, r0, r1
	b .L080B3F52
.L080B3F4E:
	ldrb r0, [r5]
	adds r0, #4
.L080B3F52:
	strb r0, [r5]
	adds r4, #1
	mov r0, sp
	adds r0, #0xd
	cmp r4, r0
	bgt .L080B3F66
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne .L080B3F36
.L080B3F66:
	ldr r0, .L080B3F84  @ gUnknown_08A36338
	ldr r1, .L080B3F88  @ 0x06010000
	bl Decompress
	ldr r0, .L080B3F8C  @ gUnknown_08A372C0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B3F84: .4byte gUnknown_08A36338
.L080B3F88: .4byte 0x06010000
.L080B3F8C: .4byte gUnknown_08A372C0

	THUMB_FUNC_END func_080B3EFC

	THUMB_FUNC_START func_080B3F90
func_080B3F90: @ 0x080B3F90
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	mov sl, r0
	movs r0, #0
	mov r9, r0
.L080B3FA2:
	mov r1, sl
	ldr r0, [r1, #0x30]
	adds r0, #0x40
	add r0, r9
	ldrb r5, [r0]
	cmp r5, #0x1d
	bls .L080B3FB2
	movs r5, #0x1e
.L080B3FB2:
	movs r7, #0
	lsrs r0, r5, #2
	mov r2, r9
	adds r2, #1
	str r2, [sp, #0x2c]
	mov r3, sl
	adds r3, #0x34
	str r3, [sp, #0x24]
	mov r1, sl
	adds r1, #0x35
	str r1, [sp, #0x28]
	cmp r7, r0
	bge .L080B3FF6
	mov r8, r0
	movs r4, #0x30
	mov r2, r9
	lsls r6, r2, #4
	mov r7, r8
.L080B3FD6:
	ldr r0, .L080B4098  @ gUnknown_08A2F180
	ldr r3, [r0, #0xc]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r6, #0
	adds r2, #0x10
	bl PutSpriteExt
	adds r4, #8
	subs r7, #1
	cmp r7, #0
	bne .L080B3FD6
	mov r7, r8
.L080B3FF6:
	movs r0, #3
	ands r0, r5
	cmp r0, #0
	beq .L080B401E
	lsls r1, r7, #3
	adds r1, #0x30
	mov r3, r9
	lsls r2, r3, #4
	adds r2, #0x10
	subs r0, #1
	lsls r0, r0, #2
	ldr r3, .L080B4098  @ gUnknown_08A2F180
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
.L080B401E:
	ldr r0, [sp, #0x2c]
	mov r9, r0
	cmp r0, #5
	ble .L080B3FA2
	ldr r2, [sp, #0x24]
	ldrb r1, [r2]
	movs r0, #0x78
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldr r3, [sp, #0x28]
	ldrb r3, [r3]
	adds r7, r0, r3
	mov r1, sl
	ldr r0, [r1, #0x30]
	ldr r0, [r0, #0x34]
	ldrb r0, [r0, #5]
	add r1, sp, #4
	bl func_080B369C
	movs r2, #0
	mov r9, r2
	add r0, sp, #4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B40B2
	add r5, sp, #4
.L080B405A:
	ldrb r0, [r5]
	bl func_080B4108
	adds r4, r0, #0
	cmp r4, #0
	beq .L080B409C
	ldr r3, [r4]
	cmp r3, #0
	beq .L080B409E
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r1, r7, r1
	subs r1, #2
	movs r0, #6
	ldrsb r0, [r4, r0]
	movs r2, #5
	subs r2, r2, r0
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	movs r0, #5
	ldrsb r0, [r4, r0]
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r0, r0, r1
	adds r7, r7, r0
	b .L080B409E
	.align 2, 0
.L080B4098: .4byte gUnknown_08A2F180
.L080B409C:
	adds r7, #4
.L080B409E:
	adds r5, #1
	movs r3, #1
	add r9, r3
	mov r0, r9
	cmp r0, #0xd
	bgt .L080B40B2
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne .L080B405A
.L080B40B2:
	mov r1, sl
	ldrh r0, [r1, #0x2a]
	cmp r0, #0xfe
	bhi .L080B40BE
	adds r0, #1
	strh r0, [r1, #0x2a]
.L080B40BE:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B3F90

	THUMB_FUNC_START func_080B40D0
func_080B40D0: @ 0x080B40D0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B40E0  @ gUnknown_08A2F138
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080B40E0: .4byte gUnknown_08A2F138

	THUMB_FUNC_END func_080B40D0

	THUMB_FUNC_START func_080B40E4
func_080B40E4: @ 0x080B40E4
	adds r0, #0x35
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080B40E4

	THUMB_FUNC_START func_080B40EC
func_080B40EC: @ 0x080B40EC
	ldr r3, .L080B4100  @ gUnknown_08A2FBE0
	ldr r2, .L080B4104  @ gUnknown_08A2FBD4
	adds r0, r0, r2
	ldrb r0, [r0]
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L080B4100: .4byte gUnknown_08A2FBE0
.L080B4104: .4byte gUnknown_08A2FBD4

	THUMB_FUNC_END func_080B40EC

	THUMB_FUNC_START func_080B4108
func_080B4108: @ 0x080B4108
	push {lr}
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	adds r2, r1, #0
	adds r0, r1, #0
	subs r0, #0x61
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bhi .L080B4128
	lsls r0, r1, #3
	ldr r1, .L080B4124  @ gUnknown_08A2FDD0
	adds r0, r0, r1
	b .L080B414A
	.align 2, 0
.L080B4124: .4byte gUnknown_08A2FDD0
.L080B4128:
	adds r0, r1, #0
	subs r0, #0x41
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x19
	bhi .L080B4140
	lsls r0, r1, #3
	ldr r1, .L080B413C  @ gUnknown_08A2FE00
	adds r0, r0, r1
	b .L080B414A
	.align 2, 0
.L080B413C: .4byte gUnknown_08A2FE00
.L080B4140:
	cmp r2, #0x2e
	beq .L080B4148
	movs r0, #0
	b .L080B414A
.L080B4148:
	ldr r0, .L080B4150  @ gUnknown_08A301A8
.L080B414A:
	pop {r1}
	bx r1
	.align 2, 0
.L080B4150: .4byte gUnknown_08A301A8

	THUMB_FUNC_END func_080B4108

	THUMB_FUNC_START ShopProc_GetPortraitIndex
ShopProc_GetPortraitIndex: @ 0x080B4154
	ldr r1, .L080B4164  @ gUnknown_08A3918C
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L080B4164: .4byte gUnknown_08A3918C

	THUMB_FUNC_END ShopProc_GetPortraitIndex

	THUMB_FUNC_START StartShopDialogue
StartShopDialogue: @ 0x080B4168
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, .L080B41BC  @ gUnknown_08A39180
	adds r0, r5, #0
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r4, r4, r0
	bl SetInitTalkTextFont
	bl Dialogue_ClearLines
	adds r0, r4, #0
	bl GetMsg
	adds r2, r0, #0
	movs r0, #8
	movs r1, #2
	adds r3, r5, #0
	bl StartTalkExt
	movs r0, #0
	bl Dialogue_SetDefaultTextColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #1
	bl SetActiveTalkFace
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B41BC: .4byte gUnknown_08A39180

	THUMB_FUNC_END StartShopDialogue

	THUMB_FUNC_START func_080B41C0
func_080B41C0: @ 0x080B41C0
	push {lr}
	adds r3, r1, #0
	movs r1, #0
	movs r2, #0
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B41C0

	THUMB_FUNC_START func_080B41D0
func_080B41D0: @ 0x080B41D0
	push {lr}
	movs r2, #0
	movs r3, #0
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B41D0

	THUMB_FUNC_START StartArmoryScreen
StartArmoryScreen: @ 0x080B41E0
	push {lr}
	adds r3, r2, #0
	movs r2, #0
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END StartArmoryScreen

	THUMB_FUNC_START func_080B41F0
func_080B41F0: @ 0x080B41F0
	push {lr}
	movs r2, #1
	movs r3, #0
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B41F0

	THUMB_FUNC_START StartVendorScreen
StartVendorScreen: @ 0x080B4200
	push {lr}
	adds r3, r2, #0
	movs r2, #1
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END StartVendorScreen

	THUMB_FUNC_START func_080B4210
func_080B4210: @ 0x080B4210
	push {lr}
	movs r2, #2
	movs r3, #0
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4210

	THUMB_FUNC_START func_080B4220
func_080B4220: @ 0x080B4220
	push {lr}
	adds r3, r2, #0
	movs r2, #2
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4220

	THUMB_FUNC_START func_080B4230
func_080B4230: @ 0x080B4230
	push {lr}
	movs r2, #0
	movs r3, #0
	bl StartShopScreen
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4230

	THUMB_FUNC_START StartShopScreen
StartShopScreen: @ 0x080B4240
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r6, r1, #0
	adds r4, r3, #0
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	bl EndPlayerPhaseSideWindows
	cmp r4, #0
	beq .L080B4268
	ldr r0, .L080B4264  @ gUnknown_08A39210
	adds r1, r4, #0
	bl SpawnProcLocking
	b .L080B4270
	.align 2, 0
.L080B4264: .4byte gUnknown_08A39210
.L080B4268:
	ldr r0, .L080B42AC  @ gUnknown_08A39210
	movs r1, #3
	bl SpawnProc
.L080B4270:
	adds r7, r0, #0
	adds r0, r7, #0
	adds r0, #0x61
	strb r5, [r0]
	mov r0, r8
	str r0, [r7, #0x2c]
	ldr r5, .L080B42B0  @ gUnknown_08A39170
	cmp r6, #0
	beq .L080B4284
	adds r5, r6, #0
.L080B4284:
	adds r4, r7, #0
	adds r4, #0x30
	movs r6, #0x14
.L080B428A:
	ldrh r0, [r5]
	adds r5, #2
	bl CreateItem
	strh r0, [r4]
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge .L080B428A
	adds r0, r7, #0
	bl func_080B42B4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B42AC: .4byte gUnknown_08A39210
.L080B42B0: .4byte gUnknown_08A39170

	THUMB_FUNC_END StartShopScreen

	THUMB_FUNC_START func_080B42B4
func_080B42B4: @ 0x080B42B4
	push {r4, lr}
	adds r4, r0, #0
	movs r2, #0
	ldrh r0, [r4, #0x30]
	cmp r0, #0
	beq .L080B42CE
	adds r1, r4, #0
	adds r1, #0x30
.L080B42C4:
	adds r1, #2
	adds r2, #1
	ldrh r0, [r1]
	cmp r0, #0
	bne .L080B42C4
.L080B42CE:
	adds r0, r4, #0
	adds r0, #0x5a
	strb r2, [r0]
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	adds r1, r4, #0
	adds r1, #0x5b
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B42B4

	THUMB_FUNC_START func_080B42E8
func_080B42E8: @ 0x080B42E8
	push {lr}
	ldr r0, .L080B4304  @ gUnknown_08A39210
	bl FindProc
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B4300
	adds r0, r1, #0
	bl func_080B4F04
.L080B4300:
	pop {r0}
	bx r0
	.align 2, 0
.L080B4304: .4byte gUnknown_08A39210

	THUMB_FUNC_END func_080B42E8

	THUMB_FUNC_START func_080B4308
func_080B4308: @ 0x080B4308
	push {lr}
	ldr r0, .L080B4324  @ gUnknown_08A39210
	bl FindProc
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080B4320
	adds r0, r1, #0
	bl func_080B505C
.L080B4320:
	pop {r0}
	bx r0
	.align 2, 0
.L080B4324: .4byte gUnknown_08A39210

	THUMB_FUNC_END func_080B4308

	THUMB_FUNC_START func_080B4328
func_080B4328: @ 0x080B4328
	bx lr

	THUMB_FUNC_END func_080B4328

	THUMB_FUNC_START func_080B432C
func_080B432C: @ 0x080B432C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	bne .L080B4340
	adds r0, r1, #0
	movs r1, #0xd
	bl Proc_Goto
	b .L080B4346
.L080B4340:
	ldr r0, .L080B434C  @ 0x0000089A
	bl StartShopDialogue
.L080B4346:
	pop {r0}
	bx r0
	.align 2, 0
.L080B434C: .4byte 0x0000089A

	THUMB_FUNC_END func_080B432C

	THUMB_FUNC_START func_080B4350
func_080B4350: @ 0x080B4350
	push {r4, lr}
	adds r4, r0, #0
	bl GetDialoguePromptResult
	cmp r0, #1
	beq .L080B436E
	cmp r0, #1
	ble .L080B4364
	cmp r0, #2
	beq .L080B4378
.L080B4364:
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_Goto
	b .L080B43A0
.L080B436E:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	b .L080B43A0
.L080B4378:
	ldr r0, [r4, #0x2c]
	bl GetUnitItemCount
	cmp r0, #0
	bne .L080B4398
	ldr r0, .L080B4394  @ 0x000008AC
	adds r1, r4, #0
	bl StartShopDialogue
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b .L080B43A0
	.align 2, 0
.L080B4394: .4byte 0x000008AC
.L080B4398:
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
.L080B43A0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4350

	THUMB_FUNC_START func_080B43A8
func_080B43A8: @ 0x080B43A8
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B43B8  @ 0x000008A3
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B43B8: .4byte 0x000008A3

	THUMB_FUNC_END func_080B43A8

	THUMB_FUNC_START func_080B43BC
func_080B43BC: @ 0x080B43BC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	movs r1, #6
	bl DivRem
	adds r4, r0, #0
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #4
	bl EnableBgSync
	lsls r4, r4, #3
	ldr r0, .L080B4410  @ gShopItemTexts
	adds r4, r4, r0
	adds r0, r4, #0
	bl ClearText
	lsls r5, r5, #1
	adds r0, r6, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldrh r1, [r0]
	cmp r1, #0
	beq .L080B4408
	ldr r2, [r6, #0x2c]
	movs r3, #0x1f
	ands r3, r5
	lsls r3, r3, #6
	ldr r0, .L080B4414  @ gBg2Tm+0xE
	adds r3, r3, r0
	adds r0, r4, #0
	bl func_080B5164
.L080B4408:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B4410: .4byte gShopItemTexts
.L080B4414: .4byte gBg2Tm+0xE

	THUMB_FUNC_END func_080B43BC

	THUMB_FUNC_START func_080B4418
func_080B4418: @ 0x080B4418
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r0, r5, #0
	movs r1, #6
	bl DivRem
	adds r4, r0, #0
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #4
	bl EnableBgSync
	lsls r4, r4, #3
	ldr r0, .L080B446C  @ gShopItemTexts
	adds r4, r4, r0
	adds r0, r4, #0
	bl ClearText
	lsls r5, r5, #1
	adds r0, r6, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldrh r1, [r0]
	cmp r1, #0
	beq .L080B4464
	ldr r2, [r6, #0x2c]
	movs r3, #0x1f
	ands r3, r5
	lsls r3, r3, #6
	ldr r0, .L080B4470  @ gBg2Tm+0xE
	adds r3, r3, r0
	adds r0, r4, #0
	bl func_080B51C0
.L080B4464:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B446C: .4byte gShopItemTexts
.L080B4470: .4byte gBg2Tm+0xE

	THUMB_FUNC_END func_080B4418

	THUMB_FUNC_START func_080B4474
func_080B4474: @ 0x080B4474
	push {lr}
	sub sp, #0xc
	mov ip, r0
	adds r0, #0x5e
	ldrb r0, [r0]
	mov r1, ip
	adds r1, #0x5a
	ldrb r1, [r1]
	mov r2, ip
	adds r2, #0x5f
	ldrb r3, [r2]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, .L080B44A4  @ func_080B43BC
	str r2, [sp, #4]
	mov r2, ip
	str r2, [sp, #8]
	movs r2, #5
	bl func_080B55AC
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
.L080B44A4: .4byte func_080B43BC

	THUMB_FUNC_END func_080B4474

	THUMB_FUNC_START func_080B44A8
func_080B44A8: @ 0x080B44A8
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl func_080B5604
	bl func_080B5698
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	adds r6, r5, #0
	adds r6, #0x5c
	ldrb r4, [r6]
	bl func_080B568C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	eors r0, r4
	negs r1, r0
	orrs r1, r0
	lsrs r7, r1, #0x1f
	bl func_080B568C
	strb r0, [r6]
	bl func_080B56A8
	adds r4, r5, #0
	adds r4, #0x5d
	strb r0, [r4]
	ldrb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x5e
	strb r0, [r1]
	ldrb r0, [r4]
	adds r1, #1
	strb r0, [r1]
	ldrb r1, [r6]
	lsls r1, r1, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	movs r0, #0x38
	bl DisplayUiHand
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B4532
	cmp r7, #0
	beq .L080B4532
	ldrb r2, [r6]
	lsls r1, r2, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl ShowItemHelpBox
.L080B4532:
	bl func_080B5384
	bl func_080B56CC
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne .L080B4626
	adds r2, r5, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq .L080B4568
	ldr r0, .L080B4564  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B4626
	strb r3, [r2]
	bl MoveableHelpBox_OnEnd
	b .L080B4626
	.align 2, 0
.L080B4564: .4byte gKeySt
.L080B4568:
	ldr r6, .L080B45A0  @ gKeySt
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B45A4
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl ShowItemHelpBox
	b .L080B4626
	.align 2, 0
.L080B45A0: .4byte gKeySt
.L080B45A4:
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	lsls r2, r2, #1
	subs r1, #0x2c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl func_080B5220
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, [r6]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B4604
	bl GetGold
	cmp r4, r0
	ble .L080B45E8
	ldr r0, .L080B45E4  @ 0x000008B2
	adds r1, r5, #0
	bl StartShopDialogue
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b .L080B4626
	.align 2, 0
.L080B45E4: .4byte 0x000008B2
.L080B45E8:
	adds r0, r4, #0
	bl func_08008A18
	ldr r0, .L080B4600  @ 0x000008B5
	adds r1, r5, #0
	bl StartShopDialogue
	adds r0, r5, #0
	bl Proc_Break
	b .L080B4626
	.align 2, 0
.L080B4600: .4byte 0x000008B5
.L080B4604:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B4626
	ldr r0, .L080B462C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B461E
	movs r0, #0x6b
	bl m4aSongNumStart
.L080B461E:
	adds r0, r5, #0
	movs r1, #7
	bl Proc_Goto
.L080B4626:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B462C: .4byte gPlaySt

	THUMB_FUNC_END func_080B44A8

	THUMB_FUNC_START func_080B4630
func_080B4630: @ 0x080B4630
	push {r4, lr}
	adds r4, r0, #0
	bl GetDialoguePromptResult
	cmp r0, #1
	beq .L080B4644
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
.L080B4644:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4630

	THUMB_FUNC_START func_080B464C
func_080B464C: @ 0x080B464C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x5b
	ldrb r0, [r0]
	cmp r0, #4
	bls .L080B4688
	bl HasConvoyAccess
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B4670
	ldr r0, .L080B466C  @ 0x000008BE
	adds r1, r4, #0
	bl StartShopDialogue
	b .L080B46AA
	.align 2, 0
.L080B466C: .4byte 0x000008BE
.L080B4670:
	ldr r0, .L080B4684  @ 0x000008C1
	adds r1, r4, #0
	bl StartShopDialogue
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
	b .L080B46AA
	.align 2, 0
.L080B4684: .4byte 0x000008C1
.L080B4688:
	ldr r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	lsls r2, r2, #1
	subs r1, #0x2c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl UnitAddItem
	adds r0, r4, #0
	bl func_080B5440
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
.L080B46AA:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B464C

	THUMB_FUNC_START func_080B46B0
func_080B46B0: @ 0x080B46B0
	push {r4, lr}
	adds r4, r0, #0
	bl GetDialoguePromptResult
	cmp r0, #1
	beq .L080B46C4
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
.L080B46C4:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B46B0

	THUMB_FUNC_START func_080B46CC
func_080B46CC: @ 0x080B46CC
	push {r4, lr}
	adds r4, r0, #0
	bl HasConvoyAccess
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B46E8
	ldr r0, .L080B46E4  @ 0x000008C7
	adds r1, r4, #0
	bl StartShopDialogue
	b .L080B46F0
	.align 2, 0
.L080B46E4: .4byte 0x000008C7
.L080B46E8:
	ldr r0, .L080B46F8  @ 0x000008CA
	adds r1, r4, #0
	bl StartShopDialogue
.L080B46F0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B46F8: .4byte 0x000008CA

	THUMB_FUNC_END func_080B46CC

	THUMB_FUNC_START func_080B46FC
func_080B46FC: @ 0x080B46FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x5c
	ldrb r1, [r0]
	lsls r1, r1, #1
	subs r0, #0x2c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl AddItemToConvoy
	adds r0, r4, #0
	bl func_080B5440
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B46FC

	THUMB_FUNC_START func_080B471C
func_080B471C: @ 0x080B471C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B472C  @ 0x000008C4
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B472C: .4byte 0x000008C4

	THUMB_FUNC_END func_080B471C

	THUMB_FUNC_START func_080B4730
func_080B4730: @ 0x080B4730
	push {r4, lr}
	adds r4, r0, #0
	bl GetConvoyItemCount
	cmp r0, #0x63
	bgt .L080B4744
	adds r0, r4, #0
	movs r1, #0xa
	bl Proc_Goto
.L080B4744:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4730

	THUMB_FUNC_START func_080B474C
func_080B474C: @ 0x080B474C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B475C  @ 0x000008CD
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B475C: .4byte 0x000008CD

	THUMB_FUNC_END func_080B474C

	THUMB_FUNC_START func_080B4760
func_080B4760: @ 0x080B4760
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B4770  @ 0x000008A6
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B4770: .4byte 0x000008A6

	THUMB_FUNC_END func_080B4760

	THUMB_FUNC_START func_080B4774
func_080B4774: @ 0x080B4774
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B4784  @ 0x000008A9
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B4784: .4byte 0x000008A9

	THUMB_FUNC_END func_080B4774

	THUMB_FUNC_START func_080B4788
func_080B4788: @ 0x080B4788
	push {lr}
	sub sp, #0xc
	adds r1, r0, #0
	adds r1, #0x5c
	ldrb r3, [r1]
	subs r1, #1
	ldrb r1, [r1]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, .L080B47B0  @ func_080B4418
	str r2, [sp, #4]
	str r0, [sp, #8]
	adds r0, r3, #0
	movs r2, #5
	movs r3, #0
	bl func_080B55AC
	add sp, #0xc
	pop {r0}
	bx r0
	.align 2, 0
.L080B47B0: .4byte func_080B4418

	THUMB_FUNC_END func_080B4788

	THUMB_FUNC_START func_080B47B4
func_080B47B4: @ 0x080B47B4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl func_080B5604
	bl func_080B5698
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	adds r6, r5, #0
	adds r6, #0x5c
	ldrb r4, [r6]
	bl func_080B568C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	eors r0, r4
	negs r1, r0
	orrs r1, r0
	lsrs r7, r1, #0x1f
	bl func_080B568C
	strb r0, [r6]
	bl func_080B56A8
	adds r4, r5, #0
	adds r4, #0x5d
	strb r0, [r4]
	ldrb r1, [r6]
	lsls r1, r1, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	movs r0, #0x38
	bl DisplayUiHand
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B4830
	cmp r7, #0
	beq .L080B4830
	ldrb r2, [r6]
	lsls r1, r2, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	ldr r0, [r5, #0x2c]
	lsls r2, r2, #1
	adds r0, #0x1e
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl ShowItemHelpBox
.L080B4830:
	bl func_080B56CC
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne .L080B4926
	adds r2, r5, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq .L080B4864
	ldr r0, .L080B4860  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B4926
	strb r3, [r2]
	bl MoveableHelpBox_OnEnd
	b .L080B4926
	.align 2, 0
.L080B4860: .4byte gKeySt
.L080B4864:
	ldr r0, .L080B489C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B48A0
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	ldr r0, [r5, #0x2c]
	lsls r2, r2, #1
	adds r0, #0x1e
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl ShowItemHelpBox
	b .L080B4926
	.align 2, 0
.L080B489C: .4byte gKeySt
.L080B48A0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B4904
	ldr r1, [r5, #0x2c]
	adds r4, r5, #0
	adds r4, #0x5c
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_080B527C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B48D8
	ldr r0, .L080B48D4  @ 0x000008BB
	adds r1, r5, #0
	bl StartShopDialogue
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b .L080B4926
	.align 2, 0
.L080B48D4: .4byte 0x000008BB
.L080B48D8:
	ldr r1, [r5, #0x2c]
	ldrb r0, [r4]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_080B5268
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl func_08008A18
	ldr r0, .L080B4900  @ 0x000008B5
	adds r1, r5, #0
	bl StartShopDialogue
	adds r0, r5, #0
	bl Proc_Break
	b .L080B4926
	.align 2, 0
.L080B4900: .4byte 0x000008B5
.L080B4904:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B4926
	ldr r0, .L080B492C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B491E
	movs r0, #0x6b
	bl m4aSongNumStart
.L080B491E:
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
.L080B4926:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B492C: .4byte gPlaySt

	THUMB_FUNC_END func_080B47B4

	THUMB_FUNC_START func_080B4930
func_080B4930: @ 0x080B4930
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	bl GetDialoguePromptResult
	cmp r0, #1
	bne .L080B49A8
	movs r0, #0xb9
	movs r1, #8
	bl func_08014B88
	ldr r1, .L080B49A0  @ gAction
	movs r0, #0x17
	strb r0, [r1, #0x11]
	bl GetGold
	adds r4, r0, #0
	ldr r1, [r6, #0x2c]
	adds r5, r6, #0
	adds r5, #0x5c
	ldrb r0, [r5]
	lsls r0, r0, #1
	adds r1, #0x1e
	adds r1, r1, r0
	ldrh r0, [r1]
	bl func_080B5268
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r4, r4, r0
	adds r0, r4, #0
	bl SetGold
	ldr r0, [r6, #0x2c]
	ldrb r1, [r5]
	bl UnitRemoveItem
	adds r0, r6, #0
	bl func_080B42B4
	adds r0, r6, #0
	bl func_080B505C
	ldr r0, .L080B49A4  @ gBg0Tm+0x1B6
	bl DisplayGoldBoxText
	adds r0, r6, #0
	adds r0, #0x5b
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080B49B0
	adds r0, r6, #0
	movs r1, #7
	bl Proc_Goto
	b .L080B49B0
	.align 2, 0
.L080B49A0: .4byte gAction
.L080B49A4: .4byte gBg0Tm+0x1B6
.L080B49A8:
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
.L080B49B0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4930

	THUMB_FUNC_START func_080B49B8
func_080B49B8: @ 0x080B49B8
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B49C8  @ 0x000008AF
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B49C8: .4byte 0x000008AF

	THUMB_FUNC_END func_080B49B8

	THUMB_FUNC_START func_080B49CC
func_080B49CC: @ 0x080B49CC
	push {lr}
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x5c
	movs r0, #0
	strb r0, [r2]
	ldr r0, .L080B49E4  @ 0x0000089D
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B49E4: .4byte 0x0000089D

	THUMB_FUNC_END func_080B49CC

	THUMB_FUNC_START func_080B49E8
func_080B49E8: @ 0x080B49E8
	push {lr}
	adds r1, r0, #0
	movs r0, #0x8a
	lsls r0, r0, #4
	bl StartShopDialogue
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B49E8

	THUMB_FUNC_START func_080B49F8
func_080B49F8: @ 0x080B49F8
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	bne .L080B4A10
	ldr r0, .L080B4A0C  @ 0x00000898
	bl StartShopDialogue
	b .L080B4A16
	.align 2, 0
.L080B4A0C: .4byte 0x00000898
.L080B4A10:
	ldr r0, .L080B4A1C  @ 0x000008B8
	bl StartShopDialogue
.L080B4A16:
	pop {r0}
	bx r0
	.align 2, 0
.L080B4A1C: .4byte 0x000008B8

	THUMB_FUNC_END func_080B49F8

	THUMB_FUNC_START func_080B4A20
func_080B4A20: @ 0x080B4A20
	push {lr}
	ldr r0, .L080B4A34  @ gUnknown_08A394C0
	bl EndEachProc
	ldr r0, .L080B4A38  @ ProcScr_MoveUnit
	ldr r1, .L080B4A3C  @ MU_Show
	bl ForEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B4A34: .4byte gUnknown_08A394C0
.L080B4A38: .4byte ProcScr_MoveUnit
.L080B4A3C: .4byte MU_Show

	THUMB_FUNC_END func_080B4A20

	THUMB_FUNC_START func_080B4A40
func_080B4A40: @ 0x080B4A40
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B4A50  @ 0x00000896
	bl StartShopDialogue
	pop {r0}
	bx r0
	.align 2, 0
.L080B4A50: .4byte 0x00000896

	THUMB_FUNC_END func_080B4A40

	THUMB_FUNC_START func_080B4A54
func_080B4A54: @ 0x080B4A54
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl func_080B5604
	bl func_080B5698
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	adds r6, r5, #0
	adds r6, #0x5c
	ldrb r4, [r6]
	bl func_080B568C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	eors r0, r4
	negs r1, r0
	orrs r1, r0
	lsrs r7, r1, #0x1f
	bl func_080B568C
	strb r0, [r6]
	bl func_080B56A8
	adds r4, r5, #0
	adds r4, #0x5d
	strb r0, [r4]
	ldrb r0, [r6]
	adds r1, r5, #0
	adds r1, #0x5e
	strb r0, [r1]
	ldrb r0, [r4]
	adds r1, #1
	strb r0, [r1]
	ldrb r1, [r6]
	lsls r1, r1, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	movs r0, #0x38
	bl DisplayUiHand
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080B4ADE
	cmp r7, #0
	beq .L080B4ADE
	ldrb r2, [r6]
	lsls r1, r2, #4
	ldrb r0, [r4]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl ShowItemHelpBox
.L080B4ADE:
	bl func_080B5384
	bl func_080B56CC
	lsls r0, r0, #0x18
	asrs r3, r0, #0x18
	cmp r3, #0
	bne .L080B4B72
	adds r2, r5, #0
	adds r2, #0x62
	ldrb r0, [r2]
	cmp r0, #0
	beq .L080B4B14
	ldr r0, .L080B4B10  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x81
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B4B72
	strb r3, [r2]
	bl MoveableHelpBox_OnEnd
	b .L080B4B72
	.align 2, 0
.L080B4B10: .4byte gKeySt
.L080B4B14:
	ldr r0, .L080B4B4C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B4B50
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #4
	subs r0, #0x48
	subs r1, r1, r0
	lsls r2, r2, #1
	adds r0, r5, #0
	adds r0, #0x30
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x38
	bl ShowItemHelpBox
	b .L080B4B72
	.align 2, 0
.L080B4B4C: .4byte gKeySt
.L080B4B50:
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	beq .L080B4B72
	ldr r0, .L080B4B78  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B4B6A
	movs r0, #0x6b
	bl m4aSongNumStart
.L080B4B6A:
	adds r0, r5, #0
	movs r1, #0xc
	bl Proc_Goto
.L080B4B72:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B4B78: .4byte gPlaySt

	THUMB_FUNC_END func_080B4A54

	THUMB_FUNC_START ShopFadeIn
ShopFadeIn: @ 0x080B4B7C
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080B4BA4  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne .L080B4BA0
	ldr r0, .L080B4BA8  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080B4BA0
	ldr r0, .L080B4BAC  @ gUnknown_08A39198
	adds r1, r2, #0
	bl SpawnProcLocking
.L080B4BA0:
	pop {r0}
	bx r0
	.align 2, 0
.L080B4BA4: .4byte gBmSt
.L080B4BA8: .4byte gGmData
.L080B4BAC: .4byte gUnknown_08A39198

	THUMB_FUNC_END ShopFadeIn

	THUMB_FUNC_START ShopFadeOut
ShopFadeOut: @ 0x080B4BB0
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080B4BD8  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	bne .L080B4BE4
	ldr r0, .L080B4BDC  @ gGmData
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080B4BE4
	ldr r0, .L080B4BE0  @ gUnknown_08A391D0
	adds r1, r2, #0
	bl SpawnProcLocking
	b .L080B4BE8
	.align 2, 0
.L080B4BD8: .4byte gBmSt
.L080B4BDC: .4byte gGmData
.L080B4BE0: .4byte gUnknown_08A391D0
.L080B4BE4:
	bl ClearDialogueAndFaces
.L080B4BE8:
	pop {r0}
	bx r0

	THUMB_FUNC_END ShopFadeOut

	THUMB_FUNC_START ShopProc_Init
ShopProc_Init: @ 0x080B4BEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r0, #0x61
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080B4C0C
	movs r0, #0x36
	movs r1, #0
	bl StartBgm
	b .L080B4C14
.L080B4C0C:
	movs r0, #0x35
	movs r1, #0
	bl StartBgm
.L080B4C14:
	ldr r0, .L080B4DF8  @ ProcScr_MoveUnit
	ldr r1, .L080B4DFC  @ MU_Hide
	bl ForEachProc
	bl InitShopScreenGfx
	ldr r3, .L080B4E00  @ gDispIo
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	strb r0, [r3, #0xc]
	ldrb r1, [r3, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl InitFaces
	adds r0, r6, #0
	adds r0, #0x5c
	movs r4, #0
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	subs r0, #2
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	movs r0, #0x90
	lsls r0, r0, #2
	movs r1, #3
	bl UnpackUiVArrowGfx
	adds r0, r6, #0
	bl ShopProc_GetPortraitIndex
	movs r1, #1
	str r1, [sp]
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl StartDialogueFace
	ldr r0, .L080B4E04  @ gUnknown_089AD934
	ldr r5, .L080B4E08  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L080B4E0C  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r5, #0
	bl TmApplyTsa_thm
	str r4, [sp]
	movs r0, #6
	movs r1, #8
	movs r2, #0x14
	movs r3, #0xc
	bl DrawUiFrame2
	movs r0, #2
	bl EnableBgSync
	adds r0, r6, #0
	bl StartUiGoldBox
	ldr r5, .L080B4E10  @ gShopItemTexts
	movs r4, #5
.L080B4CC6:
	adds r0, r5, #0
	movs r1, #0x14
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L080B4CC6
	adds r0, r6, #0
	bl ShopProc_DisplayItems
	ldr r0, .L080B4E00  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, ip
	strb r0, [r3, #1]
	movs r5, #0x34
	add r5, ip
	mov r9, r5
	ldrb r4, [r5]
	movs r6, #1
	orrs r4, r6
	movs r5, #2
	orrs r4, r5
	movs r0, #4
	orrs r4, r0
	movs r3, #8
	orrs r4, r3
	movs r0, #0x10
	orrs r4, r0
	movs r1, #0x35
	add r1, ip
	mov sl, r1
	ldrb r2, [r1]
	orrs r2, r6
	orrs r2, r5
	movs r1, #5
	negs r1, r1
	mov r8, r1
	ands r2, r1
	orrs r2, r3
	orrs r2, r0
	mov r7, ip
	adds r7, #0x36
	ldrb r1, [r7]
	orrs r1, r6
	orrs r1, r5
	mov r5, r8
	ands r1, r5
	orrs r1, r3
	orrs r1, r0
	mov r0, ip
	adds r0, #0x2d
	movs r6, #0
	movs r3, #0x38
	mov r8, r3
	mov r5, r8
	strb r5, [r0]
	mov r3, ip
	adds r3, #0x31
	movs r0, #0x48
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2c
	movs r5, #0xf0
	strb r5, [r0]
	subs r3, #1
	movs r0, #0x98
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2f
	strb r6, [r0]
	adds r3, #3
	movs r0, #8
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2e
	strb r5, [r0]
	adds r0, #4
	mov r3, r8
	strb r3, [r0]
	movs r0, #0x21
	negs r0, r0
	ands r4, r0
	mov r5, r9
	strb r4, [r5]
	movs r3, #0x20
	orrs r2, r3
	mov r5, sl
	strb r2, [r5]
	ands r1, r0
	strb r1, [r7]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetA
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r0, .L080B4E14  @ gUnknown_08B1754C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080B4E18  @ gUnknown_08B12DB4
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080B4E1C  @ gBg3Tm
	ldr r1, .L080B4E20  @ gUnknown_08A295D4
	movs r2, #0xe0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B4DF8: .4byte ProcScr_MoveUnit
.L080B4DFC: .4byte MU_Hide
.L080B4E00: .4byte gDispIo
.L080B4E04: .4byte gUnknown_089AD934
.L080B4E08: .4byte gBuf
.L080B4E0C: .4byte gBg1Tm
.L080B4E10: .4byte gShopItemTexts
.L080B4E14: .4byte gUnknown_08B1754C
.L080B4E18: .4byte gUnknown_08B12DB4
.L080B4E1C: .4byte gBg3Tm
.L080B4E20: .4byte gUnknown_08A295D4

	THUMB_FUNC_END ShopProc_Init

	THUMB_FUNC_START StartUiGoldBox
StartUiGoldBox: @ 0x080B4E24
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080B4E70  @ gUnknown_089AD9F8
	ldr r1, .L080B4E74  @ 0x06014C00
	bl Decompress
	ldr r0, .L080B4E78  @ gUnknown_08A394C0
	adds r1, r4, #0
	bl SpawnProc
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x64
	movs r0, #0xac
	strh r0, [r1]
	adds r1, #2
	movs r0, #0x2d
	strh r0, [r1]
	adds r1, #2
	ldr r0, .L080B4E7C  @ 0x00004260
	strh r0, [r1]
	ldr r0, .L080B4E80  @ gUiFramePaletteA
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080B4E84  @ gBg0Tm+0x1B8
	adds r0, r4, #0
	bl InitGoldBoxText
	subs r4, #2
	adds r0, r4, #0
	bl DisplayGoldBoxText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B4E70: .4byte gUnknown_089AD9F8
.L080B4E74: .4byte 0x06014C00
.L080B4E78: .4byte gUnknown_08A394C0
.L080B4E7C: .4byte 0x00004260
.L080B4E80: .4byte gUiFramePaletteA
.L080B4E84: .4byte gBg0Tm+0x1B8

	THUMB_FUNC_END StartUiGoldBox

	THUMB_FUNC_START InitGoldBoxText
InitGoldBoxText: @ 0x080B4E88
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r0, .L080B4EB0  @ gGoldBoxText
	movs r1, #1
	bl InitText
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl PutSpecialChar
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B4EB0: .4byte gGoldBoxText

	THUMB_FUNC_END InitGoldBoxText

	THUMB_FUNC_START func_080B4EB4
func_080B4EB4: @ 0x080B4EB4
	push {lr}
	adds r2, r0, #0
	cmp r1, #0
	ble .L080B4ECE
	movs r3, #0
.L080B4EBE:
	strh r3, [r2]
	adds r0, r2, #0
	adds r0, #0x40
	strh r3, [r0]
	subs r2, #2
	subs r1, #1
	cmp r1, #0
	bgt .L080B4EBE
.L080B4ECE:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B4EB4

	THUMB_FUNC_START DisplayGoldBoxText
DisplayGoldBoxText: @ 0x080B4ED4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	adds r0, r4, #0
	movs r1, #6
	bl func_080B4EB4
	bl GetGold
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END DisplayGoldBoxText

	THUMB_FUNC_START func_080B4F04
func_080B4F04: @ 0x080B4F04
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x60
	movs r0, #0
	strb r0, [r1]
	ldr r0, .L080B4F80  @ gUnknown_08A39478
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x54]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	adds r0, r5, #0
	adds r0, #0x5f
	ldrb r4, [r0]
	adds r0, r4, #5
	cmp r4, r0
	bge .L080B4F5C
.L080B4F30:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	lsls r0, r0, #3
	ldr r1, .L080B4F84  @ gShopItemTexts
	adds r0, r0, r1
	lsls r1, r4, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #6
	ldr r2, .L080B4F88  @ gBg2Tm+0xE
	adds r1, r1, r2
	bl PutBlankText
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x5f
	ldrb r0, [r0]
	adds r0, #5
	cmp r4, r0
	blt .L080B4F30
.L080B4F5C:
	adds r0, r5, #0
	adds r0, #0x5f
	ldrb r2, [r0]
	lsls r2, r2, #0x14
	ldr r0, .L080B4F8C  @ 0xFFB80000
	adds r2, r2, r0
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B4F80: .4byte gUnknown_08A39478
.L080B4F84: .4byte gShopItemTexts
.L080B4F88: .4byte gBg2Tm+0xE
.L080B4F8C: .4byte 0xFFB80000

	THUMB_FUNC_END func_080B4F04

	THUMB_FUNC_START ShopProc_DisplayItems
ShopProc_DisplayItems: @ 0x080B4F90
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	adds r0, r6, #0
	adds r0, #0x5f
	ldrb r4, [r0]
	adds r0, r4, #5
	cmp r4, r0
	bge .L080B4FCC
.L080B4FAA:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, .L080B4FD8  @ gShopItemTexts
	adds r0, r0, r1
	bl ClearText
	adds r4, #1
	adds r0, r6, #0
	adds r0, #0x5f
	ldrb r0, [r0]
	adds r0, #5
	cmp r4, r0
	blt .L080B4FAA
.L080B4FCC:
	adds r0, r6, #0
	adds r0, #0x5f
	ldrb r4, [r0]
	adds r7, r0, #0
	b .L080B4FF6
	.align 2, 0
.L080B4FD8: .4byte gShopItemTexts
.L080B4FDC:
	lsls r0, r1, #3
	ldr r1, .L080B5034  @ gShopItemTexts
	adds r0, r0, r1
	ldr r2, [r6, #0x2c]
	movs r1, #0x1f
	ands r3, r1
	lsls r3, r3, #6
	ldr r1, .L080B5038  @ gBg2Tm+0xE
	adds r3, r3, r1
	adds r1, r5, #0
	bl func_080B5164
	adds r4, #1
.L080B4FF6:
	ldrb r0, [r7]
	adds r0, #5
	cmp r4, r0
	bge .L080B5016
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	lsls r3, r4, #1
	adds r0, r6, #0
	adds r0, #0x30
	adds r0, r0, r3
	ldrh r5, [r0]
	cmp r5, #0
	bne .L080B4FDC
.L080B5016:
	ldrb r2, [r7]
	lsls r2, r2, #0x14
	ldr r0, .L080B503C  @ 0xFFB80000
	adds r2, r2, r0
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5034: .4byte gShopItemTexts
.L080B5038: .4byte gBg2Tm+0xE
.L080B503C: .4byte 0xFFB80000

	THUMB_FUNC_END ShopProc_DisplayItems

	THUMB_FUNC_START func_080B5040
func_080B5040: @ 0x080B5040
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	bl func_080B4474
	ldr r0, [r4, #0x54]
	bl ShopProc_DisplayItems
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5040

	THUMB_FUNC_START func_080B505C
func_080B505C: @ 0x080B505C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #1
	strb r0, [r1]
	ldr r0, .L080B50B8  @ gUnknown_08A39488
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x54]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r4, #0
.L080B507E:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	lsls r0, r0, #3
	ldr r1, .L080B50BC  @ gShopItemTexts
	adds r0, r0, r1
	lsls r1, r4, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #6
	ldr r2, .L080B50C0  @ gBg2Tm+0xE
	adds r1, r1, r2
	bl PutBlankText
	adds r4, #1
	cmp r4, #4
	ble .L080B507E
	ldr r2, .L080B50C4  @ 0x0000FFB8
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B50B8: .4byte gUnknown_08A39488
.L080B50BC: .4byte gShopItemTexts
.L080B50C0: .4byte gBg2Tm+0xE
.L080B50C4: .4byte 0x0000FFB8

	THUMB_FUNC_END func_080B505C

	THUMB_FUNC_START func_080B50C8
func_080B50C8: @ 0x080B50C8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r4, #0
	ldr r5, .L080B50F8  @ gShopItemTexts
.L080B50DA:
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	lsls r0, r1, #3
	adds r0, r0, r5
	bl ClearText
	adds r4, #1
	cmp r4, #4
	ble .L080B50DA
	movs r4, #0
	b .L080B5116
	.align 2, 0
.L080B50F8: .4byte gShopItemTexts
.L080B50FC:
	lsls r0, r1, #3
	ldr r1, .L080B5140  @ gShopItemTexts
	adds r0, r0, r1
	movs r1, #0x1f
	ands r3, r1
	lsls r3, r3, #6
	ldr r1, .L080B5144  @ gBg2Tm+0xE
	adds r3, r3, r1
	adds r1, r2, #0
	adds r2, r5, #0
	bl func_080B51C0
	adds r4, #1
.L080B5116:
	cmp r4, #4
	bgt .L080B5134
	adds r0, r4, #0
	movs r1, #6
	bl DivRem
	adds r1, r0, #0
	ldr r5, [r6, #0x2c]
	lsls r3, r4, #1
	adds r0, r5, #0
	adds r0, #0x1e
	adds r0, r0, r3
	ldrh r2, [r0]
	cmp r2, #0
	bne .L080B50FC
.L080B5134:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5140: .4byte gShopItemTexts
.L080B5144: .4byte gBg2Tm+0xE

	THUMB_FUNC_END func_080B50C8

	THUMB_FUNC_START func_080B5148
func_080B5148: @ 0x080B5148
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	bl func_080B4788
	ldr r0, [r4, #0x54]
	bl func_080B50C8
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5148

	THUMB_FUNC_START func_080B5164
func_080B5164: @ 0x080B5164
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r5, r1, #0
	adds r4, r2, #0
	adds r6, r3, #0
	adds r0, r4, #0
	bl func_080B5220
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r4, #0
	bne .L080B5184
	movs r0, #1
	b .L080B5190
.L080B5184:
	adds r0, r4, #0
	adds r1, r5, #0
	bl IsItemDisplayUsable
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
.L080B5190:
	lsls r2, r0, #0x18
	asrs r2, r2, #0x18
	mov r0, r8
	adds r1, r5, #0
	adds r3, r6, #0
	bl PutItemMenuLine
	adds r4, r6, #0
	adds r4, #0x22
	bl GetGold
	movs r1, #1
	cmp r0, r7
	blt .L080B51AE
	movs r1, #2
.L080B51AE:
	adds r0, r4, #0
	adds r2, r7, #0
	bl PutNumber
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5164

	THUMB_FUNC_START func_080B51C0
func_080B51C0: @ 0x080B51C0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r0, r2, #0
	adds r4, r3, #0
	bl IsItemDisplayUsable
	adds r2, r0, #0
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r0, r6, #0
	adds r1, r5, #0
	adds r3, r4, #0
	bl PutItemMenuLine
	adds r0, r5, #0
	bl func_080B527C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B5202
	adds r4, #0x22
	adds r0, r5, #0
	bl func_080B5268
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	b .L080B5214
.L080B5202:
	ldr r0, .L080B521C  @ 0x00000537
	bl GetMsg
	adds r3, r0, #0
	adds r0, r6, #0
	movs r1, #0x5c
	movs r2, #2
	bl Text_InsertDrawString
.L080B5214:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B521C: .4byte 0x00000537

	THUMB_FUNC_END func_080B51C0

	THUMB_FUNC_START func_080B5220
func_080B5220: @ 0x080B5220
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, r1, #0
	bl GetItemCost
	adds r4, r0, #0
	ldr r0, .L080B5254  @ gBmSt
	ldrb r1, [r0, #4]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080B5240
	lsrs r0, r4, #0x1f
	adds r0, r4, r0
	asrs r0, r0, #1
	adds r4, r4, r0
.L080B5240:
	adds r0, r5, #0
	movs r1, #0x73
	bl UnitHasItem
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B5258
	lsls r0, r4, #0x10
	b .L080B525E
	.align 2, 0
.L080B5254: .4byte gBmSt
.L080B5258:
	lsrs r0, r4, #0x1f
	adds r0, r4, r0
	lsls r0, r0, #0xf
.L080B525E:
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B5220

	THUMB_FUNC_START func_080B5268
func_080B5268: @ 0x080B5268
	push {lr}
	bl GetItemCost
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B5268

	THUMB_FUNC_START func_080B527C
func_080B527C: @ 0x080B527C
	push {r4, lr}
	adds r4, r0, #0
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	bne .L080B529C
	adds r0, r4, #0
	bl func_080B5268
	lsls r0, r0, #0x10
	cmp r0, #0
	beq .L080B529C
	movs r0, #1
	b .L080B529E
.L080B529C:
	movs r0, #0
.L080B529E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B527C

	THUMB_FUNC_START GoldBox_OnLoop
GoldBox_OnLoop: @ 0x080B52A4
	push {r4, lr}
	adds r3, r0, #0
	adds r0, #0x64
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r1, r3, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r1, [r1, r2]
	ldr r2, .L080B52C8  @ gUnknown_08A39498
	adds r3, #0x68
	movs r4, #0
	ldrsh r3, [r3, r4]
	bl PutOamHiRam
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B52C8: .4byte gUnknown_08A39498

	THUMB_FUNC_END GoldBox_OnLoop

	THUMB_FUNC_START InitShopScreenGfx
InitShopScreenGfx: @ 0x080B52CC
	push {lr}
	ldr r2, .L080B5364  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080B5368  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B536C  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B5370  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B5374  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	bl ResetText
	bl LoadUiFrameGraphics
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	movs r1, #1
	negs r1, r1
	movs r0, #0
	bl LoadHelpBoxGfx
	pop {r0}
	bx r0
	.align 2, 0
.L080B5364: .4byte gDispIo
.L080B5368: .4byte gBg0Tm
.L080B536C: .4byte gBg1Tm
.L080B5370: .4byte gBg2Tm
.L080B5374: .4byte gBg3Tm

	THUMB_FUNC_END InitShopScreenGfx

	THUMB_FUNC_START func_080B5378
func_080B5378: @ 0x080B5378
	push {lr}
	bl func_080B5384
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5378

	THUMB_FUNC_START func_080B5384
func_080B5384: @ 0x080B5384
	push {lr}
	bl func_080B56F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B539E
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x40
	movs r3, #1
	bl DisplayUiVArrow
.L080B539E:
	bl func_080B570C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B53B6
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x98
	movs r3, #0
	bl DisplayUiVArrow
.L080B53B6:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5384

	THUMB_FUNC_START UnpackUiVArrowGfx
UnpackUiVArrowGfx: @ 0x080B53BC
	push {r4, lr}
	adds r4, r1, #0
	ldr r2, .L080B53E8  @ gUnknown_08A1C704
	ldr r1, .L080B53EC  @ 0x000003FF
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, .L080B53F0  @ 0x06010000
	adds r1, r1, r0
	adds r0, r2, #0
	bl Decompress
	ldr r0, .L080B53F4  @ gUnknown_08A1A084
	adds r4, #0x10
	lsls r4, r4, #5
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B53E8: .4byte gUnknown_08A1C704
.L080B53EC: .4byte 0x000003FF
.L080B53F0: .4byte 0x06010000
.L080B53F4: .4byte gUnknown_08A1A084

	THUMB_FUNC_END UnpackUiVArrowGfx

	THUMB_FUNC_START DisplayUiVArrow
DisplayUiVArrow: @ 0x080B53F8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	adds r4, r3, #0
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	bl GetGameTime
	movs r1, #0x28
	bl DivRem
	movs r1, #8
	bl Div
	lsls r0, r0, #1
	movs r1, #0
	cmp r4, #0
	bne .L080B5422
	movs r1, #0x80
	lsls r1, r1, #6
.L080B5422:
	orrs r1, r6
	ldr r3, .L080B543C  @ Sprite_16x8
	adds r0, r5, r0
	str r0, [sp]
	movs r0, #2
	adds r2, r7, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B543C: .4byte Sprite_16x8

	THUMB_FUNC_END DisplayUiVArrow

	THUMB_FUNC_START func_080B5440
func_080B5440: @ 0x080B5440
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0xb9
	movs r1, #8
	bl func_08014B88
	ldr r1, .L080B5490  @ gAction
	movs r0, #0x17
	strb r0, [r1, #0x11]
	bl GetGold
	adds r4, r0, #0
	ldr r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	lsls r2, r2, #1
	subs r1, #0x2c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl func_080B5220
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	subs r4, r4, r0
	adds r0, r4, #0
	bl SetGold
	adds r0, r5, #0
	bl func_080B42B4
	adds r0, r5, #0
	bl ShopProc_DisplayItems
	ldr r0, .L080B5494  @ gBg0Tm+0x1B6
	bl DisplayGoldBoxText
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5490: .4byte gAction
.L080B5494: .4byte gBg0Tm+0x1B6

	THUMB_FUNC_END func_080B5440

	THUMB_FUNC_START func_080B5498
func_080B5498: @ 0x080B5498
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r7, r2, #0
	cmp r4, #0
	bge .L080B54AA
	movs r4, #0
.L080B54AA:
	cmp r4, r5
	blt .L080B54B0
	subs r4, r5, #1
.L080B54B0:
	mov ip, r4
	ldr r0, .L080B54D8  @ gKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B54E0
	cmp r4, #0
	bne .L080B54DC
	cmp r2, #0
	beq .L080B5504
	ldrh r1, [r3, #8]
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B5504
	subs r4, r5, #1
	b .L080B5504
	.align 2, 0
.L080B54D8: .4byte gKeySt
.L080B54DC:
	subs r4, #1
	b .L080B5504
.L080B54E0:
	movs r2, #0x80
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B5504
	subs r0, r5, #1
	cmp r4, r0
	bne .L080B5502
	cmp r7, #0
	beq .L080B5504
	ldrh r1, [r3, #8]
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B5504
	movs r4, #0
	b .L080B5504
.L080B5502:
	adds r4, #1
.L080B5504:
	cmp ip, r4
	beq .L080B551A
	ldr r0, .L080B5524  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B551A
	movs r0, #0x66
	bl m4aSongNumStart
.L080B551A:
	adds r0, r4, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B5524: .4byte gPlaySt

	THUMB_FUNC_END func_080B5498

	THUMB_FUNC_START func_080B5528
func_080B5528: @ 0x080B5528
	ldr r1, .L080B5530  @ gUnknown_0203EFB4
	str r0, [r1]
	bx lr
	.align 2, 0
.L080B5530: .4byte gUnknown_0203EFB4

	THUMB_FUNC_END func_080B5528

	THUMB_FUNC_START func_080B5534
func_080B5534: @ 0x080B5534
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080B555C  @ gUnknown_0203EFB4
	ldr r1, [r0]
	str r4, [r0]
	cmp r4, r1
	beq .L080B5572
	cmp r2, r5
	bgt .L080B5572
	cmp r4, r1
	bge .L080B5560
	cmp r3, #0
	beq .L080B5572
	subs r0, r4, r3
	cmp r0, #0
	bgt .L080B5572
	movs r0, #1
	negs r0, r0
	b .L080B5574
	.align 2, 0
.L080B555C: .4byte gUnknown_0203EFB4
.L080B5560:
	adds r0, r2, r3
	cmp r0, r5
	beq .L080B5572
	subs r1, r4, r3
	subs r0, r2, #1
	cmp r1, r0
	blt .L080B5572
	movs r0, #1
	b .L080B5574
.L080B5572:
	movs r0, #0
.L080B5574:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B5534

	THUMB_FUNC_START func_080B557C
func_080B557C: @ 0x080B557C
	push {lr}
	subs r3, r0, r1
	cmp r3, #0
	blt .L080B558C
	cmp r3, r2
	blt .L080B5592
	subs r3, r1, r0
	b .L080B5596
.L080B558C:
	subs r3, r1, r0
	cmp r3, r2
	bge .L080B5596
.L080B5592:
	adds r0, r1, #0
	b .L080B55A8
.L080B5596:
	cmp r3, #0
	bgt .L080B55A4
	adds r1, r0, #0
	cmp r3, #0
	bge .L080B55A6
	subs r1, r0, r2
	b .L080B55A6
.L080B55A4:
	adds r1, r0, r2
.L080B55A6:
	adds r0, r1, #0
.L080B55A8:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B557C

	THUMB_FUNC_START func_080B55AC
func_080B55AC: @ 0x080B55AC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	adds r1, r2, #0
	adds r4, r3, #0
	ldr r7, [sp, #0x1c]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r5, #0
	str r1, [sp]
	bl func_080B5528
	ldr r0, .L080B5600  @ gUnknown_08A394D8
	ldr r0, [r0]
	strh r5, [r0]
	strh r6, [r0, #2]
	ldr r1, [sp]
	strh r1, [r0, #4]
	strh r4, [r0, #6]
	movs r1, #0x10
	strh r1, [r0, #8]
	movs r1, #4
	strh r1, [r0, #0xa]
	str r7, [r0, #0x14]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x18]
	ldr r2, [sp, #0x18]
	negs r1, r2
	str r1, [r0, #0x10]
	lsls r4, r4, #4
	strh r4, [r0, #0xc]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5600: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B55AC

	THUMB_FUNC_START func_080B5604
func_080B5604: @ 0x080B5604
	push {r4, lr}
	ldr r4, .L080B5638  @ gUnknown_08A394D8
	ldr r1, [r4]
	ldrh r0, [r1]
	ldrh r1, [r1, #2]
	movs r2, #0
	bl func_080B5498
	ldr r3, [r4]
	strh r0, [r3]
	ldrh r0, [r3]
	ldrh r1, [r3, #2]
	ldrh r2, [r3, #4]
	ldrh r3, [r3, #6]
	bl func_080B5534
	adds r1, r0, #0
	cmp r1, #0
	beq .L080B566C
	cmp r1, #0
	bgt .L080B563C
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq .L080B565A
	b .L080B566C
	.align 2, 0
.L080B5638: .4byte gUnknown_08A394D8
.L080B563C:
	cmp r1, #1
	bne .L080B566C
	ldr r3, [r4]
	ldrh r0, [r3, #6]
	adds r0, #1
	strh r0, [r3, #6]
	ldr r0, [r3, #0x18]
	ldrh r1, [r3, #6]
	ldrh r2, [r3, #4]
	adds r1, r1, r2
	subs r1, #1
	ldr r2, [r3, #0x14]
	bl _call_via_r2
	b .L080B566C
.L080B565A:
	ldr r2, [r4]
	ldrh r0, [r2, #6]
	subs r0, #1
	strh r0, [r2, #6]
	ldr r0, [r2, #0x18]
	ldrh r1, [r2, #6]
	ldr r2, [r2, #0x14]
	bl _call_via_r2
.L080B566C:
	ldr r4, .L080B5688  @ gUnknown_08A394D8
	ldr r2, [r4]
	ldrh r0, [r2, #0xc]
	ldrh r3, [r2, #6]
	ldrh r1, [r2, #8]
	muls r1, r3, r1
	ldrh r2, [r2, #0xa]
	bl func_080B557C
	ldr r1, [r4]
	strh r0, [r1, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5688: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B5604

	THUMB_FUNC_START func_080B568C
func_080B568C: @ 0x080B568C
	ldr r0, .L080B5694  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r0, [r0]
	bx lr
	.align 2, 0
.L080B5694: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B568C

	THUMB_FUNC_START func_080B5698
func_080B5698: @ 0x080B5698
	ldr r0, .L080B56A4  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r1, [r0, #0xc]
	ldr r0, [r0, #0x10]
	adds r0, r0, r1
	bx lr
	.align 2, 0
.L080B56A4: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B5698

	THUMB_FUNC_START func_080B56A8
func_080B56A8: @ 0x080B56A8
	ldr r0, .L080B56B0  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	bx lr
	.align 2, 0
.L080B56B0: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B56A8

	THUMB_FUNC_START func_080B56B4
func_080B56B4: @ 0x080B56B4
	ldr r1, .L080B56BC  @ gUnknown_08A394D8
	ldr r1, [r1]
	strh r0, [r1, #8]
	bx lr
	.align 2, 0
.L080B56BC: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B56B4

	THUMB_FUNC_START func_080B56C0
func_080B56C0: @ 0x080B56C0
	ldr r1, .L080B56C8  @ gUnknown_08A394D8
	ldr r1, [r1]
	strh r0, [r1, #0xa]
	bx lr
	.align 2, 0
.L080B56C8: .4byte gUnknown_08A394D8

	THUMB_FUNC_END func_080B56C0

	THUMB_FUNC_START func_080B56CC
func_080B56CC: @ 0x080B56CC
	push {lr}
	ldr r0, .L080B56E4  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r2, [r0, #0xc]
	ldrh r1, [r0, #6]
	ldrh r0, [r0, #8]
	muls r0, r1, r0
	cmp r2, r0
	bne .L080B56E8
	movs r0, #0
	b .L080B56EA
	.align 2, 0
.L080B56E4: .4byte gUnknown_08A394D8
.L080B56E8:
	movs r0, #1
.L080B56EA:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B56CC

	THUMB_FUNC_START func_080B56F0
func_080B56F0: @ 0x080B56F0
	push {lr}
	ldr r0, .L080B5700  @ gUnknown_08A394D8
	ldr r0, [r0]
	ldrh r0, [r0, #6]
	cmp r0, #0
	bne .L080B5704
	movs r0, #0
	b .L080B5706
	.align 2, 0
.L080B5700: .4byte gUnknown_08A394D8
.L080B5704:
	movs r0, #1
.L080B5706:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B56F0

	THUMB_FUNC_START func_080B570C
func_080B570C: @ 0x080B570C
	push {lr}
	ldr r0, .L080B5724  @ gUnknown_08A394D8
	ldr r1, [r0]
	ldrh r0, [r1, #6]
	ldrh r2, [r1, #4]
	adds r0, r0, r2
	ldrh r1, [r1, #2]
	cmp r0, r1
	blt .L080B5728
	movs r0, #0
	b .L080B572A
	.align 2, 0
.L080B5724: .4byte gUnknown_08A394D8
.L080B5728:
	movs r0, #1
.L080B572A:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B570C

	THUMB_FUNC_START func_080B5730
func_080B5730: @ 0x080B5730
	push {lr}
	ldr r2, .L080B5758  @ gMPlayTable
	ldr r0, .L080B575C  @ gSongTable
	movs r1, #0xe2
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldr r1, .L080B5760  @ 0x8000FFFF
	ands r0, r1
	cmp r0, #0
	beq .L080B5764
	movs r0, #1
	b .L080B5766
	.align 2, 0
.L080B5758: .4byte gMPlayTable
.L080B575C: .4byte gSongTable
.L080B5760: .4byte 0x8000FFFF
.L080B5764:
	movs r0, #0
.L080B5766:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B5730

	THUMB_FUNC_START func_080B576C
func_080B576C: @ 0x080B576C
	push {lr}
	ldr r0, .L080B5784  @ gActiveUnit
	ldr r0, [r0]
	bl PrepareArena
	ldr r0, .L080B5788  @ gUnknown_08A394DC
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B5784: .4byte gActiveUnit
.L080B5788: .4byte gUnknown_08A394DC

	THUMB_FUNC_END func_080B576C

	THUMB_FUNC_START func_080B578C
func_080B578C: @ 0x080B578C
	push {lr}
	ldr r0, .L080B579C  @ gUnknown_08A3963C
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B579C: .4byte gUnknown_08A3963C

	THUMB_FUNC_END func_080B578C

	THUMB_FUNC_START func_080B57A0
func_080B57A0: @ 0x080B57A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, .L080B5948  @ ProcScr_MoveUnit
	ldr r1, .L080B594C  @ MU_Hide
	bl ForEachProc
	bl InitShopScreenGfx
	ldr r7, .L080B5950  @ gDispIo
	ldrb r2, [r7, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r7, #0xc]
	ldrb r2, [r7, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	mov r8, r2
	mov r3, r8
	orrs r0, r3
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	strb r1, [r7, #0x14]
	ldrb r0, [r7, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r7, #0x18]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl InitFaces
	movs r0, #1
	str r0, [sp]
	movs r0, #0x67
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl StartDialogueFace
	ldr r0, .L080B5954  @ gUnknown_089AD934
	ldr r5, .L080B5958  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r4, .L080B595C  @ gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	adds r1, r5, #0
	bl TmApplyTsa_thm
	movs r5, #0x80
	lsls r5, r5, #2
	adds r4, r4, r5
	adds r0, r4, #0
	movs r1, #0x1e
	movs r2, #0xc
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	bl EnableBgSync
	adds r0, r6, #0
	bl StartUiGoldBox
	ldrb r0, [r7, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	movs r0, #0x34
	adds r0, r0, r7
	mov r9, r0
	ldrb r4, [r0]
	movs r5, #1
	orrs r4, r5
	mov r1, r8
	orrs r4, r1
	movs r0, #4
	orrs r4, r0
	movs r3, #8
	orrs r4, r3
	movs r0, #0x10
	orrs r4, r0
	movs r2, #0x35
	adds r2, r2, r7
	mov sl, r2
	ldrb r2, [r2]
	orrs r2, r5
	orrs r2, r1
	subs r6, #0x25
	ands r2, r6
	orrs r2, r3
	orrs r2, r0
	movs r1, #0x36
	adds r1, r1, r7
	mov ip, r1
	ldrb r1, [r1]
	orrs r1, r5
	mov r5, r8
	orrs r1, r5
	ands r1, r6
	orrs r1, r3
	orrs r1, r0
	adds r3, r7, #0
	adds r3, #0x2d
	movs r6, #0
	movs r0, #0x58
	strb r0, [r3]
	adds r3, #4
	movs r0, #0x48
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x2c
	movs r5, #0xf0
	strb r5, [r0]
	subs r3, #1
	movs r0, #0x98
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x2f
	strb r6, [r0]
	adds r3, #3
	movs r0, #8
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x2e
	strb r5, [r0]
	subs r3, #1
	movs r0, #0x38
	strb r0, [r3]
	subs r0, #0x59
	ands r4, r0
	mov r3, r9
	strb r4, [r3]
	movs r5, #0x20
	orrs r2, r5
	mov r3, sl
	strb r2, [r3]
	ands r1, r0
	mov r5, ip
	strb r1, [r5]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetA
	str r6, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r4, .L080B5960  @ gUnknown_089A8F94
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r6, #0xc0
	lsls r6, r6, #0x13
	adds r1, r1, r6
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080B5964  @ gBg3Tm
	ldr r1, .L080B5968  @ gUnknown_089ABB70
	movs r2, #0xc0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	ldr r0, .L080B596C  @ gUnknown_089AC024
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #8
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5948: .4byte ProcScr_MoveUnit
.L080B594C: .4byte MU_Hide
.L080B5950: .4byte gDispIo
.L080B5954: .4byte gUnknown_089AD934
.L080B5958: .4byte gBuf
.L080B595C: .4byte gBg1Tm
.L080B5960: .4byte gUnknown_089A8F94
.L080B5964: .4byte gBg3Tm
.L080B5968: .4byte gUnknown_089ABB70
.L080B596C: .4byte gUnknown_089AC024

	THUMB_FUNC_END func_080B57A0

	THUMB_FUNC_START func_080B5970
func_080B5970: @ 0x080B5970
	push {lr}
	ldr r0, .L080B598C  @ gArenaSt
	ldr r0, [r0]
	ldr r1, .L080B5990  @ gBattleUnitA
	bl UpdateUnitFromBattle
	ldr r0, .L080B5994  @ gActiveUnit
	ldr r0, [r0]
	bl MU_Create
	bl MU_SetDefaultFacing_Auto
	pop {r0}
	bx r0
	.align 2, 0
.L080B598C: .4byte gArenaSt
.L080B5990: .4byte gBattleUnitA
.L080B5994: .4byte gActiveUnit

	THUMB_FUNC_END func_080B5970

	THUMB_FUNC_START func_080B5998
func_080B5998: @ 0x080B5998
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080B59B8  @ gArenaSt
	ldr r0, [r0]
	ldr r0, [r0, #0xc]
	lsrs r0, r0, #0x11
	movs r1, #7
	ands r0, r1
	cmp r0, #4
	bhi .L080B59BC
	movs r0, #0x8d
	lsls r0, r0, #4
	adds r1, r2, #0
	bl func_080B5C04
	b .L080B59C4
	.align 2, 0
.L080B59B8: .4byte gArenaSt
.L080B59BC:
	ldr r0, .L080B59C8  @ 0x000008D1
	adds r1, r2, #0
	bl func_080B5C04
.L080B59C4:
	pop {r0}
	bx r0
	.align 2, 0
.L080B59C8: .4byte 0x000008D1

	THUMB_FUNC_END func_080B5998

	THUMB_FUNC_START func_080B59CC
func_080B59CC: @ 0x080B59CC
	push {r4, lr}
	adds r4, r0, #0
	bl func_08031ECC
	bl func_08008A18
	ldr r0, .L080B59E8  @ 0x000008D2
	adds r1, r4, #0
	bl func_080B5C04
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B59E8: .4byte 0x000008D2

	THUMB_FUNC_END func_080B59CC

	THUMB_FUNC_START func_080B59EC
func_080B59EC: @ 0x080B59EC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl GetDialoguePromptResult
	cmp r0, #1
	beq .L080B5A10
	ldr r0, .L080B5A0C  @ 0x000008D4
	adds r1, r5, #0
	bl func_080B5C04
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b .L080B5A2E
	.align 2, 0
.L080B5A0C: .4byte 0x000008D4
.L080B5A10:
	bl func_08031ECC
	adds r4, r0, #0
	bl GetGold
	cmp r4, r0
	ble .L080B5A2E
	ldr r0, .L080B5A34  @ 0x000008DA
	adds r1, r5, #0
	bl func_080B5C04
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
.L080B5A2E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5A34: .4byte 0x000008DA

	THUMB_FUNC_END func_080B59EC

	THUMB_FUNC_START func_080B5A38
func_080B5A38: @ 0x080B5A38
	push {r4, r5, lr}
	adds r5, r0, #0
	bl GetGold
	adds r4, r0, #0
	bl func_08031ECC
	subs r4, r4, r0
	adds r0, r4, #0
	bl SetGold
	ldr r0, .L080B5A74  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B5A60
	movs r0, #0xb9
	bl m4aSongNumStart
.L080B5A60:
	ldr r0, .L080B5A78  @ gBg0Tm+0x1B6
	bl DisplayGoldBoxText
	adds r0, r5, #0
	bl func_080B5C48
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5A74: .4byte gPlaySt
.L080B5A78: .4byte gBg0Tm+0x1B6

	THUMB_FUNC_END func_080B5A38

	THUMB_FUNC_START func_080B5A7C
func_080B5A7C: @ 0x080B5A7C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B5A8C  @ 0x000008D5
	bl func_080B5C04
	pop {r0}
	bx r0
	.align 2, 0
.L080B5A8C: .4byte 0x000008D5

	THUMB_FUNC_END func_080B5A7C

	THUMB_FUNC_START func_080B5A90
func_080B5A90: @ 0x080B5A90
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B5AA0  @ 0x000008D3
	bl func_080B5C04
	pop {r0}
	bx r0
	.align 2, 0
.L080B5AA0: .4byte 0x000008D3

	THUMB_FUNC_END func_080B5A90

	THUMB_FUNC_START func_080B5AA4
func_080B5AA4: @ 0x080B5AA4
	push {lr}
	movs r0, #1
	negs r0, r0
	bl FadeBgmOut
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5AA4

	THUMB_FUNC_START func_080B5AB4
func_080B5AB4: @ 0x080B5AB4
	push {r4, r5, r6, lr}
	movs r1, #7
	bl Proc_SetMark
	bl ClearDialogueAndFaces
	ldr r0, .L080B5AF4  @ gUnknown_08A394C0
	bl EndEachProc
	ldr r5, .L080B5AF8  @ gAction
	movs r6, #0
	movs r0, #0x19
	strb r0, [r5, #0x11]
	ldr r4, .L080B5AFC  @ gActiveUnit
	ldr r0, [r4]
	ldr r1, [r0, #0xc]
	movs r2, #0x40
	orrs r1, r2
	str r1, [r0, #0xc]
	bl BWL_AddBattle
	bl MU_EndAll
	strb r6, [r5, #0x15]
	ldr r0, [r4]
	bl BattleGenerateArena
	bl BeginBattleAnimations
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5AF4: .4byte gUnknown_08A394C0
.L080B5AF8: .4byte gAction
.L080B5AFC: .4byte gActiveUnit

	THUMB_FUNC_END func_080B5AB4

	THUMB_FUNC_START func_080B5B00
func_080B5B00: @ 0x080B5B00
	push {lr}
	bl func_08014944
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5B00

	THUMB_FUNC_START func_080B5B0C
func_080B5B0C: @ 0x080B5B0C
	push {lr}
	bl func_080B57A0
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5B0C

	THUMB_FUNC_START func_080B5B18
func_080B5B18: @ 0x080B5B18
	push {r4, r5, lr}
	adds r5, r0, #0
	bl GetGold
	adds r4, r0, #0
	bl func_08031ED8
	cmp r0, #2
	beq .L080B5B5C
	cmp r0, #2
	bgt .L080B5B34
	cmp r0, #1
	beq .L080B5B3E
	b .L080B5B90
.L080B5B34:
	cmp r0, #3
	beq .L080B5B6C
	cmp r0, #4
	beq .L080B5B88
	b .L080B5B90
.L080B5B3E:
	bl func_08031ECC
	lsls r0, r0, #1
	bl func_08008A18
	ldr r0, .L080B5B58  @ 0x000008D6
	adds r1, r5, #0
	bl func_080B5C04
	bl func_08031ECC
	lsls r0, r0, #1
	b .L080B5B78
	.align 2, 0
.L080B5B58: .4byte 0x000008D6
.L080B5B5C:
	ldr r0, .L080B5B68  @ 0x000008D7
	adds r1, r5, #0
	bl func_080B5C04
	b .L080B5B90
	.align 2, 0
.L080B5B68: .4byte 0x000008D7
.L080B5B6C:
	ldr r0, .L080B5B84  @ 0x000008D9
	adds r1, r5, #0
	bl func_080B5C04
	bl func_08031ECC
.L080B5B78:
	adds r4, r4, r0
	adds r0, r4, #0
	bl SetGold
	b .L080B5B90
	.align 2, 0
.L080B5B84: .4byte 0x000008D9
.L080B5B88:
	ldr r0, .L080B5B98  @ 0x000008D8
	adds r1, r5, #0
	bl func_080B5C04
.L080B5B90:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5B98: .4byte 0x000008D8

	THUMB_FUNC_END func_080B5B18

	THUMB_FUNC_START func_080B5B9C
func_080B5B9C: @ 0x080B5B9C
	push {r4, lr}
	adds r4, r0, #0
	bl func_08031ED8
	cmp r0, #2
	beq .L080B5BD6
	cmp r0, #2
	bgt .L080B5BB2
	cmp r0, #1
	beq .L080B5BB6
	b .L080B5BD6
.L080B5BB2:
	cmp r0, #3
	bne .L080B5BD6
.L080B5BB6:
	ldr r0, .L080B5BDC  @ gBg0Tm+0x1B6
	bl DisplayGoldBoxText
	ldr r0, .L080B5BE0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B5BCE
	movs r0, #0xb9
	bl m4aSongNumStart
.L080B5BCE:
	adds r0, r4, #0
	movs r1, #0x3c
	bl StartBlockingTimer
.L080B5BD6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5BDC: .4byte gBg0Tm+0x1B6
.L080B5BE0: .4byte gPlaySt

	THUMB_FUNC_END func_080B5B9C

	THUMB_FUNC_START func_080B5BE4
func_080B5BE4: @ 0x080B5BE4
	push {lr}
	ldr r0, .L080B5BF8  @ gUnknown_08A394C0
	bl EndEachProc
	ldr r0, .L080B5BFC  @ ProcScr_MoveUnit
	ldr r1, .L080B5C00  @ MU_Show
	bl ForEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B5BF8: .4byte gUnknown_08A394C0
.L080B5BFC: .4byte ProcScr_MoveUnit
.L080B5C00: .4byte MU_Show

	THUMB_FUNC_END func_080B5BE4

	THUMB_FUNC_START func_080B5C04
func_080B5C04: @ 0x080B5C04
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl SetInitTalkTextFont
	bl Dialogue_ClearLines
	adds r0, r4, #0
	bl GetMsg
	adds r2, r0, #0
	movs r0, #8
	movs r1, #2
	adds r3, r5, #0
	bl StartTalkExt
	movs r0, #0
	bl Dialogue_SetDefaultTextColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #1
	bl SetActiveTalkFace
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5C04

	THUMB_FUNC_START func_080B5C48
func_080B5C48: @ 0x080B5C48
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	movs r1, #9
	movs r2, #0x10
	movs r3, #6
	bl DrawUiFrame2
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r4, .L080B5CD4  @ gBg0Tm+0x290
	ldr r0, .L080B5CD8  @ gMid_Lv
	ldr r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl SomeDrawTextInlineAutoWidth
	adds r0, r4, #0
	adds r0, #8
	ldr r5, .L080B5CDC  @ gArenaSt
	ldr r1, [r5, #4]
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl PutNumber
	adds r6, r4, #0
	adds r6, #0x80
	ldr r0, [r5, #4]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	adds r0, r6, #0
	movs r1, #0
	bl SomeDrawTextInlineAutoWidth
	subs r6, #0x72
	ldr r0, [r5, #4]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	adds r0, r6, #0
	movs r1, #0
	bl SomeDrawTextInlineAutoWidth
	adds r4, #0x8e
	ldrh r0, [r5, #0x1c]
	bl GetItemName
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl SomeDrawTextInlineAutoWidth
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5CD4: .4byte gBg0Tm+0x290
.L080B5CD8: .4byte gMid_Lv
.L080B5CDC: .4byte gArenaSt

	THUMB_FUNC_END func_080B5C48

	THUMB_FUNC_START func_080B5CE0
func_080B5CE0: @ 0x080B5CE0
	push {r4, lr}
	adds r4, r0, #0
	bl func_08031ED8
	cmp r0, #1
	bne .L080B5D08
	ldr r0, .L080B5D04  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne .L080B5D22
	movs r0, #0x3a
	movs r1, #0
	bl StartBgmCore
	b .L080B5D22
	.align 2, 0
.L080B5D04: .4byte gPlaySt
.L080B5D08:
	ldr r0, .L080B5D28  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	cmp r0, #0
	bne .L080B5D1C
	movs r0, #0x38
	movs r1, #0
	bl StartBgmCore
.L080B5D1C:
	adds r0, r4, #0
	bl Proc_End
.L080B5D22:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B5D28: .4byte gPlaySt

	THUMB_FUNC_END func_080B5CE0

	THUMB_FUNC_START func_080B5D2C
func_080B5D2C: @ 0x080B5D2C
	push {lr}
	movs r0, #0x38
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5D2C

	THUMB_FUNC_START func_080B5D3C
func_080B5D3C: @ 0x080B5D3C
	push {lr}
	bl CallSuspendPromptEvent
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B5D3C

	THUMB_FUNC_START func_080B5D48
func_080B5D48: @ 0x080B5D48
	push {lr}
	bl GetDialoguePromptResult
	cmp r0, #1
	bne .L080B5D56
	movs r0, #1
	b .L080B5D58
.L080B5D56:
	movs r0, #0
.L080B5D58:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B5D48

	THUMB_FUNC_START SuspendCommand
SuspendCommand: @ 0x080B5D5C
	push {lr}
	ldr r1, .L080B5D70  @ gAction
	movs r0, #0
	strb r0, [r1, #0x16]
	movs r0, #3
	bl SaveSuspendedGame
	pop {r0}
	bx r0
	.align 2, 0
.L080B5D70: .4byte gAction

	THUMB_FUNC_END SuspendCommand

	THUMB_FUNC_START func_080B5D74
func_080B5D74: @ 0x080B5D74
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	bl GetGameTotalTurnCount2
	mov r9, r0
	movs r1, #0
	add r0, sp, #0xc
.L080B5D8A:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge .L080B5D8A
	bl GetNextChapterWinDataEntryIndex
	mov r8, r0
	movs r5, #0
	cmp r5, r8
	bge .L080B5E42
	ldr r6, .L080B5E68  @ gChapterDataTable
	movs r7, #0x94
	movs r0, #0x2d
	adds r0, r0, r6
	mov sl, r0
.L080B5DA8:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B5E3C
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x39
	adds r0, r0, r1
	ldrb r1, [r0]
	ldr r0, [sp]
	adds r0, r0, r1
	str r0, [sp]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x35
	adds r0, r0, r1
	ldrb r1, [r0]
	ldr r0, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #4]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x31
	adds r0, r0, r1
	ldrb r1, [r0]
	ldr r0, [sp, #8]
	adds r0, r0, r1
	str r0, [sp, #8]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	add r0, sl
	ldrb r1, [r0]
	ldr r0, [sp, #0xc]
	adds r0, r0, r1
	str r0, [sp, #0xc]
.L080B5E3C:
	adds r5, #1
	cmp r5, r8
	blt .L080B5DA8
.L080B5E42:
	movs r5, #0
	mov r1, sp
.L080B5E46:
	ldr r0, [r1]
	cmp r9, r0
	bgt .L080B5E54
	adds r1, #4
	adds r5, #1
	cmp r5, #3
	ble .L080B5E46
.L080B5E54:
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B5E68: .4byte gChapterDataTable

	THUMB_FUNC_END func_080B5D74

	THUMB_FUNC_START func_080B5E6C
func_080B5E6C: @ 0x080B5E6C
	push {lr}
	sub sp, #4
	ldr r1, .L080B5EA0  @ gUnknown_08205F1C
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl func_080B622C
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
.L080B5E84:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	bge .L080B5E98
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls .L080B5E84
.L080B5E98:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
.L080B5EA0: .4byte gUnknown_08205F1C

	THUMB_FUNC_END func_080B5E6C

	THUMB_FUNC_START func_080B5EA4
func_080B5EA4: @ 0x080B5EA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	bl BWL_GetTotalExpGained
	mov r9, r0
	movs r1, #0
	add r0, sp, #0xc
.L080B5EBA:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge .L080B5EBA
	bl GetNextChapterWinDataEntryIndex
	mov r8, r0
	movs r5, #0
	cmp r5, r8
	bge .L080B5F72
	ldr r6, .L080B5F98  @ gChapterDataTable
	movs r7, #0x94
	movs r0, #0x3e
	adds r0, r0, r6
	mov sl, r0
.L080B5ED8:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B5F6C
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x56
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, [sp]
	adds r0, r0, r1
	str r0, [sp]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x4e
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #4]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x46
	adds r0, r0, r1
	ldrh r1, [r0]
	ldr r0, [sp, #8]
	adds r0, r0, r1
	str r0, [sp, #8]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r7, r1
	adds r0, r0, r1
	add r0, sl
	ldrh r1, [r0]
	ldr r0, [sp, #0xc]
	adds r0, r0, r1
	str r0, [sp, #0xc]
.L080B5F6C:
	adds r5, #1
	cmp r5, r8
	blt .L080B5ED8
.L080B5F72:
	movs r5, #0
	mov r1, sp
.L080B5F76:
	ldr r0, [r1]
	cmp r9, r0
	blt .L080B5F84
	adds r1, #4
	adds r5, #1
	cmp r5, #3
	ble .L080B5F76
.L080B5F84:
	adds r0, r5, #0
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B5F98: .4byte gChapterDataTable

	THUMB_FUNC_END func_080B5EA4

	THUMB_FUNC_START func_080B5F9C
func_080B5F9C: @ 0x080B5F9C
	push {lr}
	sub sp, #4
	ldr r1, .L080B5FCC  @ gUnknown_08205F20
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl func_080B6264
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
.L080B5FB4:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	blt .L080B5FC4
	adds r1, #1
	cmp r1, #3
	ble .L080B5FB4
.L080B5FC4:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
.L080B5FCC: .4byte gUnknown_08205F20

	THUMB_FUNC_END func_080B5F9C

	THUMB_FUNC_START func_080B5FD0
func_080B5FD0: @ 0x080B5FD0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	bl GetTotalTeamGoldValue
	mov r8, r0
	movs r6, #0
	bl GetNextChapterWinDataEntryIndex
	adds r7, r0, #0
	movs r5, #0
	cmp r6, r7
	bge .L080B6028
	ldr r0, .L080B603C  @ gUnknown_088B08F0
	mov r9, r0
.L080B5FF0:
	adds r0, r5, #0
	bl GetChapterWinDataEntry
	adds r4, r0, #0
	ldr r0, [r4]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl DoesThisChapterCount
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B6022
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	ldr r1, [r4]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r2, #0x94
	muls r1, r2, r1
	adds r0, r0, r1
	add r0, r9
	ldr r0, [r0]
	adds r6, r6, r0
.L080B6022:
	adds r5, #1
	cmp r5, r7
	blt .L080B5FF0
.L080B6028:
	movs r0, #0x64
	mov r1, r8
	muls r1, r0, r1
	lsls r0, r6, #2
	adds r2, r0, r6
	lsls r0, r2, #4
	cmp r1, r0
	bcc .L080B6040
	movs r0, #4
	b .L080B6064
	.align 2, 0
.L080B603C: .4byte gUnknown_088B08F0
.L080B6040:
	lsls r0, r6, #4
	subs r0, r0, r6
	lsls r0, r0, #2
	cmp r1, r0
	bcc .L080B604E
	movs r0, #3
	b .L080B6064
.L080B604E:
	lsls r0, r2, #3
	cmp r1, r0
	bcc .L080B6058
	movs r0, #2
	b .L080B6064
.L080B6058:
	lsls r0, r2, #2
	cmp r1, r0
	bcs .L080B6062
	movs r0, #0
	b .L080B6064
.L080B6062:
	movs r0, #1
.L080B6064:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B5FD0

	THUMB_FUNC_START GetOverallRank
GetOverallRank: @ 0x080B6070
	push {r4, r5, r6, lr}
	ldr r5, [sp, #0x10]
	ldr r4, .L080B60C0  @ gUnknown_08A3CB04
	adds r0, r0, r4
	ldrb r6, [r0]
	adds r0, r4, #5
	adds r1, r1, r0
	ldrb r0, [r1]
	adds r1, r4, #0
	adds r1, #0xa
	adds r2, r2, r1
	adds r0, r6, r0
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	adds r1, #5
	adds r3, r3, r1
	lsrs r0, r0, #0x10
	ldrb r3, [r3]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	adds r4, #0x14
	adds r5, r5, r4
	lsrs r0, r0, #0x10
	ldrb r5, [r5]
	adds r0, r0, r5
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	ldr r1, .L080B60C4  @ gUnknown_08A3CB1E
.L080B60AC:
	ldrh r2, [r1]
	cmp r6, r2
	bcc .L080B60BA
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble .L080B60AC
.L080B60BA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080B60C0: .4byte gUnknown_08A3CB04
.L080B60C4: .4byte gUnknown_08A3CB1E

	THUMB_FUNC_END GetOverallRank

	THUMB_FUNC_START func_080B60C8
func_080B60C8: @ 0x080B60C8
	push {r4, lr}
	ldr r3, .L080B60FC  @ gUnknown_08A3CB2A
	adds r0, r0, r3
	ldrb r4, [r0]
	adds r0, r3, #5
	adds r1, r1, r0
	ldrb r0, [r1]
	adds r3, #0xa
	adds r2, r2, r3
	adds r0, r4, r0
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r0, #0
	ldr r1, .L080B6100  @ gUnknown_08A3CB3A
.L080B60E8:
	ldrh r2, [r1]
	cmp r4, r2
	bcc .L080B60F6
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble .L080B60E8
.L080B60F6:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B60FC: .4byte gUnknown_08A3CB2A
.L080B6100: .4byte gUnknown_08A3CB3A

	THUMB_FUNC_END func_080B60C8

	THUMB_FUNC_START func_080B6104
func_080B6104: @ 0x080B6104
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	bl func_080B5D74
	mov r8, r0
	bl func_080B5E6C
	adds r6, r0, #0
	bl func_080B5FD0
	adds r5, r0, #0
	bl func_080B5EA4
	adds r4, r0, #0
	bl func_080B5F9C
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl GetOverallRank
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6104

	THUMB_FUNC_START GetChapterTacticsRank
GetChapterTacticsRank: @ 0x080B6144
	push {r4, r5, lr}
	sub sp, #0x10
	ldr r0, .L080B61BC  @ gPlaySt
	ldrh r5, [r0, #0x10]
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	movs r0, #0x94
	muls r1, r0, r1
	ldr r0, .L080B61C0  @ gChapterDataTable
	adds r4, r1, r0
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x39
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x35
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #4]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x31
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #8]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x2d
	adds r1, r1, r0
	ldrb r0, [r1]
	str r0, [sp, #0xc]
	movs r2, #0
	mov r1, sp
.L080B61A4:
	ldr r0, [r1]
	cmp r5, r0
	bgt .L080B61B2
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble .L080B61A4
.L080B61B2:
	adds r0, r2, #0
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080B61BC: .4byte gPlaySt
.L080B61C0: .4byte gChapterDataTable

	THUMB_FUNC_END GetChapterTacticsRank

	THUMB_FUNC_START GetChapterSurvivalRank
GetChapterSurvivalRank: @ 0x080B61C4
	push {lr}
	sub sp, #4
	ldr r1, .L080B61F8  @ gUnknown_08205F24
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl GetChapterDeathCount
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
.L080B61DC:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	bge .L080B61F0
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls .L080B61DC
.L080B61F0:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
.L080B61F8: .4byte gUnknown_08205F24

	THUMB_FUNC_END GetChapterSurvivalRank

	THUMB_FUNC_START func_080B61FC
func_080B61FC: @ 0x080B61FC
	push {lr}
	ldr r2, .L080B6224  @ gUnknown_08A3CB46
	adds r0, r0, r2
	ldrb r3, [r0]
	adds r2, #5
	adds r1, r1, r2
	ldrb r0, [r1]
	adds r3, r3, r0
	movs r0, #0
	ldr r1, .L080B6228  @ gUnknown_08A3CB50
.L080B6210:
	ldrh r2, [r1]
	cmp r3, r2
	bcc .L080B621E
	adds r1, #2
	adds r0, #1
	cmp r0, #4
	ble .L080B6210
.L080B621E:
	pop {r1}
	bx r1
	.align 2, 0
.L080B6224: .4byte gUnknown_08A3CB46
.L080B6228: .4byte gUnknown_08A3CB50

	THUMB_FUNC_END func_080B61FC

	THUMB_FUNC_START func_080B622C
func_080B622C: @ 0x080B622C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
.L080B6232:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L080B6250
	ldr r0, [r1]
	cmp r0, #0
	beq .L080B6250
	ldr r0, [r1, #0xc]
	ldr r1, .L080B6260  @ 0x00010004
	ands r0, r1
	cmp r0, #4
	bne .L080B6250
	adds r5, #1
.L080B6250:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080B6232
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080B6260: .4byte 0x00010004

	THUMB_FUNC_END func_080B622C

	THUMB_FUNC_START func_080B6264
func_080B6264: @ 0x080B6264
	push {r4, lr}
	bl BWL_GetTotalBattles
	adds r4, r0, #0
	bl BWL_GetTotalWins
	movs r1, #0x64
	muls r0, r1, r0
	adds r1, r4, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6264

	THUMB_FUNC_START GetChapterDeathCount
GetChapterDeathCount: @ 0x080B6284
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
.L080B628A:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq .L080B62BE
	ldr r2, [r0]
	cmp r2, #0
	beq .L080B62BE
	ldr r0, [r0, #0xc]
	ldr r1, .L080B62D0  @ 0x00010004
	ands r0, r1
	cmp r0, #4
	bne .L080B62BE
	ldrb r0, [r2, #4]
	bl BWL_GetEntry
	ldrb r1, [r0, #5]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	ldr r0, .L080B62D4  @ gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bne .L080B62BE
	adds r5, #1
.L080B62BE:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080B628A
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080B62D0: .4byte 0x00010004
.L080B62D4: .4byte gPlaySt

	THUMB_FUNC_END GetChapterDeathCount

	THUMB_FUNC_START func_080B62D8
func_080B62D8: @ 0x080B62D8
	bx lr

	THUMB_FUNC_END func_080B62D8

	THUMB_FUNC_START GetChapterFundsRank
GetChapterFundsRank: @ 0x080B62DC
	push {r4, r5, r6, lr}
	bl GetTotalTeamGoldValue
	ldr r1, .L080B6324  @ gPlaySt
	ldr r5, [r1, #0x30]
	subs r5, r0, r5
	str r0, [r1, #0x30]
	bl GetNextChapterWinDataEntryIndex
	subs r0, #1
	bl GetChapterWinDataEntry
	adds r6, r0, #0
	ldr r4, .L080B6328  @ gChapterDataTable
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	ldr r1, [r6]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r2, #0x94
	muls r1, r2, r1
	adds r0, r0, r1
	adds r4, #0x60
	adds r0, r0, r4
	ldr r1, [r0]
	movs r0, #0x64
	muls r5, r0, r5
	lsls r0, r1, #2
	adds r2, r0, r1
	lsls r0, r2, #4
	cmp r5, r0
	blt .L080B632C
	movs r0, #4
	b .L080B6350
	.align 2, 0
.L080B6324: .4byte gPlaySt
.L080B6328: .4byte gChapterDataTable
.L080B632C:
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	cmp r5, r0
	blt .L080B633A
	movs r0, #3
	b .L080B6350
.L080B633A:
	lsls r0, r2, #3
	cmp r5, r0
	blt .L080B6344
	movs r0, #2
	b .L080B6350
.L080B6344:
	lsls r0, r2, #2
	cmp r5, r0
	bge .L080B634E
	movs r0, #0
	b .L080B6350
.L080B634E:
	movs r0, #1
.L080B6350:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetChapterFundsRank

	THUMB_FUNC_START GetChapterWinPerc
GetChapterWinPerc: @ 0x080B6358
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	bl BWL_GetTotalBattles
	adds r4, r0, #0
	bl BWL_GetTotalWins
	adds r5, r0, #0
	ldr r7, .L080B638C  @ 0x000FFFFF
	cmp r4, r7
	ble .L080B6374
	adds r4, r7, #0
.L080B6374:
	cmp r5, r7
	ble .L080B637A
	adds r5, r7, #0
.L080B637A:
	ldr r6, .L080B6390  @ gPlaySt
	ldr r0, [r6, #0x34]
	mov r8, r0
	lsls r0, r0, #0xc
	lsrs r2, r0, #0xc
	cmp r4, r2
	bne .L080B6394
	movs r0, #0x28
	b .L080B63DC
	.align 2, 0
.L080B638C: .4byte 0x000FFFFF
.L080B6390: .4byte gPlaySt
.L080B6394:
	ldrh r1, [r6, #0x36]
	lsrs r1, r1, #4
	movs r3, #0x38
	adds r3, r3, r6
	mov r9, r3
	ldrb r0, [r3]
	lsls r0, r0, #0xc
	orrs r0, r1
	subs r0, r5, r0
	movs r1, #0x64
	muls r0, r1, r0
	subs r1, r4, r2
	bl __divsi3
	adds r3, r0, #0
	cmp r3, #0x64
	ble .L080B63B8
	movs r3, #0x64
.L080B63B8:
	ands r4, r7
	ldr r0, .L080B63E8  @ 0xFFF00000
	mov r1, r8
	ands r0, r1
	orrs r0, r4
	str r0, [r6, #0x34]
	ldr r1, .L080B63EC  @ 0x00000FFF
	ands r1, r5
	lsls r1, r1, #4
	ldrh r2, [r6, #0x36]
	movs r0, #0xf
	ands r0, r2
	orrs r0, r1
	strh r0, [r6, #0x36]
	lsrs r0, r5, #0xc
	mov r1, r9
	strb r0, [r1]
	adds r0, r3, #0
.L080B63DC:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B63E8: .4byte 0xFFF00000
.L080B63EC: .4byte 0x00000FFF

	THUMB_FUNC_END GetChapterWinPerc

	THUMB_FUNC_START GetChapterCombatRank
GetChapterCombatRank: @ 0x080B63F0
	push {lr}
	sub sp, #4
	ldr r1, .L080B6420  @ gUnknown_08205F20
	mov r0, sp
	movs r2, #4
	bl memcpy
	bl GetChapterWinPerc
	adds r2, r0, #0
	movs r1, #0
.L080B6406:
	mov r3, sp
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r2, r0
	blt .L080B6416
	adds r1, #1
	cmp r1, #3
	ble .L080B6406
.L080B6416:
	adds r0, r1, #0
	add sp, #4
	pop {r1}
	bx r1
	.align 2, 0
.L080B6420: .4byte gUnknown_08205F20

	THUMB_FUNC_END GetChapterCombatRank

	THUMB_FUNC_START GetChapterExpRank
GetChapterExpRank: @ 0x080B6424
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	movs r1, #0
	add r0, sp, #0xc
.L080B642C:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge .L080B642C
	bl BWL_GetTotalExpGained
	adds r1, r0, #0
	ldr r4, .L080B64F4  @ 0x000FFFFF
	cmp r1, r4
	ble .L080B6442
	adds r1, r4, #0
.L080B6442:
	ldr r3, .L080B64F8  @ gPlaySt
	ldr r2, [r3, #0x38]
	lsls r0, r2, #4
	lsrs r0, r0, #0xc
	subs r7, r1, r0
	ands r1, r4
	lsls r1, r1, #8
	ldr r0, .L080B64FC  @ 0xF00000FF
	ands r0, r2
	orrs r0, r1
	str r0, [r3, #0x38]
	bl GetNextChapterWinDataEntryIndex
	subs r0, #1
	bl GetChapterWinDataEntry
	adds r5, r0, #0
	bl GetRankingRefId
	ldr r6, .L080B6500  @ gChapterDataTable
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	movs r4, #0x94
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x56
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x4e
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #4]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x46
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #8]
	bl GetRankingRefId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x17
	ldr r1, [r5]
	lsls r1, r1, #0x19
	lsrs r1, r1, #0x19
	muls r1, r4, r1
	adds r0, r0, r1
	adds r1, r6, #0
	adds r1, #0x3e
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [sp, #0xc]
	movs r2, #0
	mov r1, sp
.L080B64DC:
	ldr r0, [r1]
	cmp r7, r0
	blt .L080B64EA
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble .L080B64DC
.L080B64EA:
	adds r0, r2, #0
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B64F4: .4byte 0x000FFFFF
.L080B64F8: .4byte gPlaySt
.L080B64FC: .4byte 0xF00000FF
.L080B6500: .4byte gChapterDataTable

	THUMB_FUNC_END GetChapterExpRank

	THUMB_FUNC_START ComputeChapterRankings
ComputeChapterRankings: @ 0x080B6504
	push {r4, r5, r6, lr}
	sub sp, #4
	bl GetNextChapterWinDataEntryIndex
	cmp r0, #0
	ble .L080B65CE
	ldr r6, .L080B65D8  @ gPlaySt
	ldrb r0, [r6, #0x1b]
	cmp r0, #3
	bgt .L080B6586
	cmp r0, #1
	blt .L080B6586
	bl GetChapterTacticsRank
	adds r5, r6, #0
	adds r5, #0x3e
	movs r4, #7
	ands r0, r4
	lsls r0, r0, #2
	ldrb r2, [r5]
	movs r1, #0x1d
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r5]
	bl GetChapterSurvivalRank
	lsls r0, r0, #5
	ldrb r2, [r5]
	movs r1, #0x1f
	ands r1, r2
	orrs r1, r0
	strb r1, [r5]
	bl GetChapterFundsRank
	movs r1, #7
	ands r1, r0
	lsls r1, r1, #0xf
	ldr r0, [r6, #0x3c]
	ldr r2, .L080B65DC  @ 0xFFFC7FFF
	ands r0, r2
	orrs r0, r1
	str r0, [r6, #0x3c]
	bl GetChapterCombatRank
	movs r1, #7
	ands r0, r1
	lsls r0, r0, #6
	ldrh r2, [r6, #0x3c]
	ldr r1, .L080B65E0  @ 0xFFFFFE3F
	ands r1, r2
	orrs r1, r0
	strh r1, [r6, #0x3c]
	bl GetChapterExpRank
	adds r3, r6, #0
	adds r3, #0x3d
	ands r0, r4
	lsls r0, r0, #1
	ldrb r2, [r3]
	movs r1, #0xf
	negs r1, r1
	ands r1, r2
	orrs r1, r0
	strb r1, [r3]
.L080B6586:
	ldr r5, .L080B65D8  @ gPlaySt
	adds r0, r5, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	lsls r0, r1, #0x1b
	lsrs r0, r0, #0x1d
	lsrs r1, r1, #5
	ldr r2, [r5, #0x3c]
	lsls r2, r2, #0xe
	lsrs r2, r2, #0x1d
	adds r3, r5, #0
	adds r3, #0x3d
	ldrb r3, [r3]
	lsls r3, r3, #0x1c
	lsrs r3, r3, #0x1d
	ldrh r4, [r5, #0x3c]
	lsls r4, r4, #0x17
	lsrs r4, r4, #0x1d
	str r4, [sp]
	bl GetOverallRank
	ldrh r2, [r5, #0x2c]
	lsls r1, r2, #0x13
	lsrs r1, r1, #0x17
	adds r1, r1, r0
	cmp r1, #0xff
	ble .L080B65BE
	movs r1, #0xff
.L080B65BE:
	ldr r3, .L080B65E4  @ 0x000001FF
	adds r0, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	ldr r0, .L080B65E8  @ 0xFFFFE00F
	ands r0, r2
	orrs r0, r1
	strh r0, [r5, #0x2c]
.L080B65CE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B65D8: .4byte gPlaySt
.L080B65DC: .4byte 0xFFFC7FFF
.L080B65E0: .4byte 0xFFFFFE3F
.L080B65E4: .4byte 0x000001FF
.L080B65E8: .4byte 0xFFFFE00F

	THUMB_FUNC_END ComputeChapterRankings

	THUMB_FUNC_START func_080B65EC
func_080B65EC: @ 0x080B65EC
	ldr r0, .L080B65F0  @ gUnknown_08A3CCEC
	bx lr
	.align 2, 0
.L080B65F0: .4byte gUnknown_08A3CCEC

	THUMB_FUNC_END func_080B65EC

	THUMB_FUNC_START func_080B65F4
func_080B65F4: @ 0x080B65F4
	bx lr

	THUMB_FUNC_END func_080B65F4

	THUMB_FUNC_START func_080B65F8
func_080B65F8: @ 0x080B65F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r9, r0
	adds r7, r1, #0
	mov r8, r2
	mov sl, r3
	ldr r0, [sp, #0x20]
	bl func_080B65EC
	adds r6, r0, #0
	movs r5, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r4, r7, r0
.L080B661A:
	ldr r0, [r6]
	lsls r1, r5, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #4
	adds r4, r4, r2
	adds r5, #1
	cmp r5, #9
	ble .L080B661A
	ldr r1, [r6, #4]
	mov r3, r8
	lsls r2, r3, #0xc
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	adds r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r0, r9
	bl TmApplyTsa_thm
	ldr r0, [r6, #8]
	mov r2, r8
	lsls r1, r2, #5
	mov r3, sl
	lsls r2, r3, #5
	bl ApplyPaletteExt
	ldr r0, [sp, #0x20]
	cmp r0, #0x7f
	bgt .L080B6666
	movs r0, #0
	ldr r1, [sp, #0x20]
	bl func_080A4064
.L080B6666:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B65F8

	THUMB_FUNC_START func_080B6674
func_080B6674: @ 0x080B6674
	push {r4, r5, r6, r7, lr}
	adds r5, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	movs r6, #0
	bl GetMsg
	adds r1, r5, #0
	bl func_080AEABC
	adds r5, r0, #0
	movs r0, #1
	adds r1, r5, #0
	bl func_080AEADC
	adds r5, r0, #0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r4
	cmp r0, #0
	beq .L080B66B8
	ldr r0, .L080B66B4  @ 0x00007FFF
	ands r4, r0
	adds r0, r4, #0
	bl func_080BBA28
	b .L080B6700
	.align 2, 0
.L080B66B4: .4byte 0x00007FFF
.L080B66B8:
	ldr r0, .L080B66D0  @ 0x00007FFF
	ands r4, r0
	adds r0, r4, #0
	bl GetChapterInfo
	adds r0, #0x70
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	b .L080B66E8
	.align 2, 0
.L080B66D0: .4byte 0x00007FFF
.L080B66D4:
	cmp r2, #0x21
	bne .L080B66E6
	movs r0, #1
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne .L080B66E6
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
.L080B66E6:
	adds r1, #1
.L080B66E8:
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne .L080B66D4
	adds r0, r4, #0
	bl GetChapterInfo
	adds r0, #0x70
	ldrh r0, [r0]
	bl GetMsg
.L080B6700:
	adds r1, r5, #0
	bl func_080AEABC
	adds r5, r0, #0
	adds r0, r7, #0
	bl GetMsg
	adds r0, r0, r6
	adds r1, r5, #0
	bl func_080AEABC
	adds r5, r0, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6674

	THUMB_FUNC_START func_080B6720
func_080B6720: @ 0x080B6720
	push {lr}
	adds r2, r0, #0
	ldr r1, .L080B6728  @ gUnknown_08A3D1B0
	b .L080B6738
	.align 2, 0
.L080B6728: .4byte gUnknown_08A3D1B0
.L080B672C:
	ldrb r0, [r1]
	cmp r0, r2
	bne .L080B6736
	ldr r0, [r1, #4]
	b .L080B6740
.L080B6736:
	adds r1, #8
.L080B6738:
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080B672C
	movs r0, #0
.L080B6740:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6720

	THUMB_FUNC_START func_080B6744
func_080B6744: @ 0x080B6744
	push {lr}
	adds r2, r0, #0
	ldr r1, .L080B674C  @ gUnknown_08A3D2C0
	b .L080B675C
	.align 2, 0
.L080B674C: .4byte gUnknown_08A3D2C0
.L080B6750:
	ldrb r0, [r1]
	cmp r0, r2
	bne .L080B675A
	ldrb r0, [r1, #1]
	b .L080B6764
.L080B675A:
	adds r1, #4
.L080B675C:
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080B6750
	movs r0, #0
.L080B6764:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6744

	THUMB_FUNC_START func_080B6768
func_080B6768: @ 0x080B6768
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, .L080B67AC  @ gUnknown_08A3CD64
	ldr r6, [r0]
	adds r0, r4, #0
	bl func_080B6744
	adds r5, r0, #0
	cmp r5, #4
	bne .L080B6786
	movs r0, #0x7d
	bl CheckPermanentFlag
	movs r4, #0x80
	lsls r4, r4, #1
.L080B6786:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl BWL_GetEntry
	ldrb r1, [r0, #5]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	ldrb r0, [r0, #0xe]
	lsrs r0, r0, #7
	lsls r0, r0, #0xf
	orrs r1, r0
	cmp r5, #2
	beq .L080B67C0
	cmp r5, #2
	bgt .L080B67B0
	cmp r5, #0
	beq .L080B67B6
	b .L080B67D8
	.align 2, 0
.L080B67AC: .4byte gUnknown_08A3CD64
.L080B67B0:
	cmp r5, #5
	beq .L080B67D4
	b .L080B67D8
.L080B67B6:
	ldr r0, .L080B67BC  @ 0x000007D1
	movs r2, #0x22
	b .L080B67C4
	.align 2, 0
.L080B67BC: .4byte 0x000007D1
.L080B67C0:
	ldr r0, .L080B67CC  @ 0x000007D3
	ldr r2, .L080B67D0  @ 0x000007D4
.L080B67C4:
	adds r3, r6, #0
	bl func_080B6674
	b .L080B67D8
	.align 2, 0
.L080B67CC: .4byte 0x000007D3
.L080B67D0: .4byte 0x000007D4
.L080B67D4:
	movs r0, #0
	b .L080B67DC
.L080B67D8:
	ldr r0, .L080B67E4  @ gUnknown_08A3CD64
	ldr r0, [r0]
.L080B67DC:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080B67E4: .4byte gUnknown_08A3CD64

	THUMB_FUNC_END func_080B6768

	THUMB_FUNC_START func_080B67E8
func_080B67E8: @ 0x080B67E8
	push {lr}
	ldr r0, .L080B6800  @ gUnknown_08A3F750
	ldr r1, .L080B6804  @ 0x06004C00
	bl Decompress
	ldr r0, .L080B6808  @ gUnknown_08B12DB4
	ldr r1, .L080B680C  @ 0x06008000
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
.L080B6800: .4byte gUnknown_08A3F750
.L080B6804: .4byte 0x06004C00
.L080B6808: .4byte gUnknown_08B12DB4
.L080B680C: .4byte 0x06008000

	THUMB_FUNC_END func_080B67E8

	THUMB_FUNC_START func_080B6810
func_080B6810: @ 0x080B6810
	push {r4, r5, lr}
	ldr r0, .L080B687C  @ gUnknown_08A3F710
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L080B6880  @ gUnknown_08B1754C
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r4, .L080B6884  @ gBg3Tm
	movs r0, #3
	bl GetBgChrOffset
	movs r1, #0x80
	lsls r1, r1, #8
	subs r1, r1, r0
	lsls r1, r1, #0xf
	lsrs r1, r1, #0x14
	movs r0, #0xe0
	lsls r0, r0, #8
	adds r1, r1, r0
	movs r2, #0
	ldr r3, .L080B6888  @ 0x0000027F
.L080B6846:
	adds r0, r2, r1
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, r3
	ble .L080B6846
	ldr r4, .L080B688C  @ gBg2Tm
	ldr r1, .L080B6890  @ gUnknown_08A3FFEC
	ldr r5, .L080B6894  @ 0x0000C260
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_thm
	movs r0, #0x90
	lsls r0, r0, #3
	adds r4, r4, r0
	ldr r1, .L080B6898  @ gUnknown_08A40068
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_thm
	movs r0, #0xc
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B687C: .4byte gUnknown_08A3F710
.L080B6880: .4byte gUnknown_08B1754C
.L080B6884: .4byte gBg3Tm
.L080B6888: .4byte 0x0000027F
.L080B688C: .4byte gBg2Tm
.L080B6890: .4byte gUnknown_08A3FFEC
.L080B6894: .4byte 0x0000C260
.L080B6898: .4byte gUnknown_08A40068

	THUMB_FUNC_END func_080B6810

	THUMB_FUNC_START func_080B689C
func_080B689C: @ 0x080B689C
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov r9, r1
	ldr r0, .L080B6918  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r5, .L080B691C  @ gUnknown_08A3D348
	ldr r0, [r5, #8]
	str r6, [sp]
	movs r1, #2
	add r1, r9
	mov r8, r1
	str r1, [sp, #4]
	movs r4, #0x1e
	str r4, [sp, #8]
	movs r1, #0x10
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #1
	movs r3, #2
	bl func_080AC844
	ldr r0, [r5, #4]
	str r6, [sp]
	mov r1, r8
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0x12
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl func_080AC844
	ldr r0, [r5]
	str r6, [sp]
	mov r1, r9
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0x14
	str r1, [sp, #0xc]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl func_080AC844
	movs r0, #7
	bl EnableBgSync
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B6918: .4byte gBg1Tm
.L080B691C: .4byte gUnknown_08A3D348

	THUMB_FUNC_END func_080B689C

	THUMB_FUNC_START func_080B6920
func_080B6920: @ 0x080B6920
	push {r4, r5, r6, r7, lr}
	bl ResetText
	ldr r7, .L080B6968  @ gUnknown_08A3D358
	movs r6, #0x38
	movs r5, #0x28
	movs r4, #1
.L080B692E:
	ldr r0, [r7]
	adds r0, r0, r5
	movs r1, #0xf
	bl InitText
	ldr r0, [r7]
	adds r0, r0, r6
	movs r1, #0xa
	bl InitText
	adds r6, #8
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge .L080B692E
	movs r4, #0
	ldr r5, .L080B6968  @ gUnknown_08A3D358
.L080B6950:
	lsls r1, r4, #3
	ldr r0, [r5]
	adds r0, r0, r1
	movs r1, #0x1a
	bl InitText
	adds r4, #1
	cmp r4, #4
	ble .L080B6950
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B6968: .4byte gUnknown_08A3D358

	THUMB_FUNC_END func_080B6920

	THUMB_FUNC_START func_080B696C
func_080B696C: @ 0x080B696C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	bl SetupBackgrounds
	bl InitFaces
	bl func_080B67E8
	bl SetBlendNone
	movs r1, #0
	strh r1, [r4, #0x2e]
	mov r0, sp
	strh r1, [r0]
	adds r1, r4, #0
	adds r1, #0x40
	ldr r2, .L080B69A8  @ 0x01000010
	bl CpuSet
	ldr r0, .L080B69AC  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #1
	blt .L080B69C2
	cmp r0, #2
	ble .L080B69B0
	cmp r0, #3
	beq .L080B69BC
	b .L080B69C2
	.align 2, 0
.L080B69A8: .4byte 0x01000010
.L080B69AC: .4byte gPlaySt
.L080B69B0:
	ldr r0, .L080B69B8  @ gUnknown_08A3D1A8
	ldr r0, [r0]
	b .L080B69C0
	.align 2, 0
.L080B69B8: .4byte gUnknown_08A3D1A8
.L080B69BC:
	ldr r0, .L080B69D0  @ gUnknown_08A3D1A8
	ldr r0, [r0, #4]
.L080B69C0:
	str r0, [r4, #0x30]
.L080B69C2:
	ldr r0, [r4, #0x30]
	str r0, [r4, #0x34]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B69D0: .4byte gUnknown_08A3D1A8

	THUMB_FUNC_END func_080B696C

	THUMB_FUNC_START func_080B69D4
func_080B69D4: @ 0x080B69D4
	push {lr}
	ldr r0, .L080B6A04  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B6A08  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B6A0C  @ gBg2Tm
	movs r1, #0
	bl TmFill
	bl ClearDialogueAndFaces
	bl func_080B744C
	bl func_080B6810
	movs r0, #7
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L080B6A04: .4byte gBg0Tm
.L080B6A08: .4byte gBg1Tm
.L080B6A0C: .4byte gBg2Tm

	THUMB_FUNC_END func_080B69D4

	THUMB_FUNC_START func_080B6A10
func_080B6A10: @ 0x080B6A10
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
.L080B6A16:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L080B6A3E
	ldr r0, [r2]
	cmp r0, #0
	beq .L080B6A3E
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne .L080B6A3E
	ldr r0, [r2, #0xc]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	bne .L080B6A44
	adds r0, r2, #0
	b .L080B6A46
.L080B6A3E:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080B6A16
.L080B6A44:
	movs r0, #0
.L080B6A46:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6A10

	THUMB_FUNC_START func_080B6A4C
func_080B6A4C: @ 0x080B6A4C
	push {r4, r5, lr}
	adds r5, r0, #0
	cmp r5, #0
	bne .L080B6A64
	b .L080B6A78
.L080B6A56:
	adds r0, r5, #0
	adds r1, r4, #0
	bl GetUnitSupportPid
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b .L080B6A7A
.L080B6A64:
	movs r4, #0
.L080B6A66:
	adds r0, r5, #0
	adds r1, r4, #0
	bl GetUnitSupportLevel
	cmp r0, #3
	beq .L080B6A56
	adds r4, #1
	cmp r4, #6
	ble .L080B6A66
.L080B6A78:
	movs r0, #0
.L080B6A7A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6A4C

	THUMB_FUNC_START func_080B6A80
func_080B6A80: @ 0x080B6A80
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	ldr r1, [r0]
	ldrb r6, [r1, #4]
	bl func_080B6A4C
	adds r5, r0, #0
	cmp r5, #0
	beq .L080B6AD8
	adds r0, r6, #0
	bl GetUnitByPid
	ldr r0, [r0, #0xc]
	movs r7, #4
	ands r0, r7
	cmp r0, #0
	bne .L080B6AD8
	adds r0, r5, #0
	bl GetUnitByPid
	ldr r0, [r0, #0xc]
	ands r0, r7
	cmp r0, #0
	beq .L080B6AD2
	b .L080B6AD8
.L080B6AB4:
	movs r0, #1
	b .L080B6ADA
.L080B6AB8:
	ldrb r0, [r4, #1]
	adds r1, r0, #0
	cmp r1, r6
	bne .L080B6AC6
	ldrb r0, [r4, #2]
	cmp r0, r5
	beq .L080B6AB4
.L080B6AC6:
	cmp r1, r5
	bne .L080B6AD0
	ldrb r0, [r4, #2]
	cmp r0, r6
	beq .L080B6AB4
.L080B6AD0:
	adds r4, #8
.L080B6AD2:
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne .L080B6AB8
.L080B6AD8:
	movs r0, #0
.L080B6ADA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B6A80

	THUMB_FUNC_START func_080B6AE0
func_080B6AE0: @ 0x080B6AE0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x3c]
	str r0, [r4, #0x38]
.L080B6AEA:
	ldr r3, [r4, #0x30]
	ldrb r0, [r3]
	cmp r0, #0
	bne .L080B6AFC
	adds r0, r4, #0
	movs r1, #0x64
	bl Proc_Goto
	b .L080B6BD2
.L080B6AFC:
	ldrb r2, [r3, #1]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r0, r0, r4
	movs r6, #0x1f
	adds r1, r6, #0
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	movs r5, #1
	ands r0, r5
	cmp r0, #0
	bne .L080B6BCA
	ldrb r2, [r3, #2]
	lsls r0, r2, #0x18
	cmp r0, #0
	beq .L080B6B32
	lsrs r0, r0, #0x1d
	lsls r0, r0, #2
	adds r0, r0, r4
	adds r1, r6, #0
	ands r1, r2
	ldr r0, [r0, #0x40]
	lsrs r0, r1
	ands r0, r5
	cmp r0, #0
	bne .L080B6BCA
.L080B6B32:
	ldrb r0, [r3, #1]
	bl func_080B6A10
	adds r1, r0, #0
	str r1, [r4, #0x38]
	cmp r1, #0
	beq .L080B6BCA
	ldr r0, [r4, #0x30]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #1
	beq .L080B6B50
	cmp r2, #2
	beq .L080B6B60
	b .L080B6B92
.L080B6B50:
	ldr r0, [r4, #0x34]
	bl func_080B6A80
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B6BCA
	ldr r3, [r4, #0x30]
	b .L080B6B92
.L080B6B60:
	ldrb r0, [r3, #2]
	bl func_080B6A10
	str r0, [r4, #0x3c]
	cmp r0, #0
	beq .L080B6BCA
	ldr r0, [r4, #0x38]
	bl func_080B6A4C
	ldr r1, [r4, #0x30]
	ldrb r2, [r1, #2]
	cmp r0, r2
	bne .L080B6BCA
	ldr r0, [r4, #0x38]
	ldr r0, [r0, #0xc]
	movs r2, #4
	ands r0, r2
	cmp r0, #0
	bne .L080B6BCA
	ldr r0, [r4, #0x3c]
	ldr r0, [r0, #0xc]
	ands r0, r2
	adds r3, r1, #0
	cmp r0, #0
	bne .L080B6BCA
.L080B6B92:
	ldrb r1, [r3, #1]
	lsrs r2, r1, #5
	lsls r2, r2, #2
	adds r2, r2, r4
	movs r6, #0x1f
	adds r0, r6, #0
	ands r0, r1
	movs r5, #1
	adds r1, r5, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	ldrb r1, [r3, #2]
	lsls r2, r1, #0x18
	cmp r2, #0
	beq .L080B6BD2
	lsrs r2, r2, #0x1d
	lsls r2, r2, #2
	adds r2, r2, r4
	adds r0, r6, #0
	ands r0, r1
	adds r1, r5, #0
	lsls r1, r0
	ldr r0, [r2, #0x40]
	orrs r0, r1
	str r0, [r2, #0x40]
	b .L080B6BD2
.L080B6BCA:
	ldr r0, [r4, #0x30]
	adds r0, #8
	str r0, [r4, #0x30]
	b .L080B6AEA
.L080B6BD2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B6AE0

	THUMB_FUNC_START func_080B6BD8
func_080B6BD8: @ 0x080B6BD8
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	ldrb r1, [r0]
	cmp r1, #1
	beq .L080B6BEA
	cmp r1, #2
	beq .L080B6BF4
	b .L080B6BFC
.L080B6BEA:
	ldr r1, [r3, #0x38]
	adds r2, r3, #0
	bl func_080B6F14
	b .L080B6BFC
.L080B6BF4:
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl func_080B72A4
.L080B6BFC:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B6BD8

	THUMB_FUNC_START func_080B6C00
func_080B6C00: @ 0x080B6C00
	push {lr}
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	ldr r1, [r3, #0x38]
	ldr r2, [r3, #0x3c]
	bl func_080B742C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B6C00

	THUMB_FUNC_START func_080B6C14
func_080B6C14: @ 0x080B6C14
	push {lr}
	sub sp, #4
	movs r0, #0
	bl SetupBackgrounds
	bl ClearDialogueAndFaces
	bl func_080B744C
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r2, .L080B6C70  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080B6C70: .4byte gDispIo

	THUMB_FUNC_END func_080B6C14

	THUMB_FUNC_START func_080B6C74
func_080B6C74: @ 0x080B6C74
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x30]
	adds r1, r0, #0
	adds r1, #8
	str r1, [r2, #0x30]
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne .L080B6C8E
	adds r0, r2, #0
	movs r1, #0x64
	bl Proc_Goto
.L080B6C8E:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B6C74

	THUMB_FUNC_START func_080B6C94
func_080B6C94: @ 0x080B6C94
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B6CA4  @ gUnknown_08A3D35C
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080B6CA4: .4byte gUnknown_08A3D35C

	THUMB_FUNC_END func_080B6C94

	THUMB_FUNC_START func_080B6CA8
func_080B6CA8: @ 0x080B6CA8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #0
	mov r8, r0
.L080B6CB4:
	mov r0, r8
	lsls r1, r0, #2
	adds r0, r7, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	beq .L080B6D0C
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl BWL_GetEntry
	adds r3, r0, #0
	mov r0, r8
	lsls r4, r0, #1
	adds r0, r7, #0
	adds r0, #0x3c
	adds r1, r0, r4
	ldrh r0, [r3, #0xc]
	lsls r0, r0, #0x12
	lsrs r0, r0, #0x14
	ldr r5, .L080B6D20  @ 0x000003E7
	cmp r0, r5
	ble .L080B6CE6
	adds r0, r5, #0
.L080B6CE6:
	strh r0, [r1]
	adds r0, r7, #0
	adds r0, #0x40
	adds r6, r0, r4
	ldrb r2, [r3, #0xb]
	ldrb r0, [r3, #0xc]
	movs r1, #3
	ands r0, r1
	lsls r0, r0, #8
	orrs r0, r2
	cmp r0, r5
	ble .L080B6D00
	adds r0, r5, #0
.L080B6D00:
	strh r0, [r6]
	adds r0, r7, #0
	adds r0, #0x44
	adds r0, r0, r4
	ldrb r1, [r3]
	strh r1, [r0]
.L080B6D0C:
	movs r0, #1
	add r8, r0
	mov r0, r8
	cmp r0, #1
	ble .L080B6CB4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B6D20: .4byte 0x000003E7

	THUMB_FUNC_END func_080B6CA8

	THUMB_FUNC_START func_080B6D24
func_080B6D24: @ 0x080B6D24
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	bl func_080B6920
	adds r0, r7, #0
	bl func_080B6CA8
	ldr r5, .L080B6EA8  @ gUnknown_08A3D348
	ldr r0, [r5]
	movs r1, #0
	bl TmFill
	ldr r0, [r5, #4]
	movs r1, #0
	bl TmFill
	ldr r0, [r5, #8]
	movs r1, #0
	bl TmFill
	ldr r0, .L080B6EAC  @ gUnknown_08A40204
	ldr r4, .L080B6EB0  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, [r5, #8]
	ldr r6, .L080B6EB4  @ 0x0000C260
	adds r1, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L080B6EB8  @ gUnknown_08A400E4
	adds r1, r4, #0
	bl Decompress
	ldr r0, [r5, #4]
	adds r1, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	bl func_080B6720
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x78
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r6, .L080B6EBC  @ gUnknown_08A3D358
	ldr r0, [r6]
	adds r0, #0x28
	ldr r1, [r5]
	adds r1, #0xc2
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	str r4, [sp, #4]
	bl PutDrawText
	ldr r0, .L080B6EC0  @ 0x0000051F
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	movs r0, #0xa4
	lsls r0, r0, #3
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x20
	bl PutDrawText
	ldr r0, .L080B6EC4  @ 0x00000521
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x40
	bl PutDrawText
	ldrh r0, [r7, #0x3c]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, #0x62
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r7, #0x3c]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	adds r4, r7, #0
	adds r4, #0x40
	ldrh r0, [r4]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, #0x6a
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	adds r4, #4
	ldrh r0, [r4]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, #0x72
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	ldr r2, .L080B6EC8  @ gCharacterData
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	subs r0, #1
	movs r1, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r1, [r0, #6]
	movs r2, #0xd0
	lsls r2, r2, #1
	ldr r0, .L080B6ECC  @ 0x00000502
	str r0, [sp]
	movs r0, #0
	movs r3, #0x38
	bl NewFace2
	ldr r0, [r7, #0x2c]
	ldr r0, [r0, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq .L080B6E92
	movs r0, #0x16
	bl ArchivePalette
	movs r3, #0x80
	lsls r3, r3, #0xf
	movs r0, #0xc0
	movs r1, #0xc0
	movs r2, #0xc0
	bl WriteFadedPaletteFromArchive
.L080B6E92:
	mov r0, r8
	str r0, [r7, #0x34]
	bl SetBlendNone
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B6EA8: .4byte gUnknown_08A3D348
.L080B6EAC: .4byte gUnknown_08A40204
.L080B6EB0: .4byte gBuf
.L080B6EB4: .4byte 0x0000C260
.L080B6EB8: .4byte gUnknown_08A400E4
.L080B6EBC: .4byte gUnknown_08A3D358
.L080B6EC0: .4byte 0x0000051F
.L080B6EC4: .4byte 0x00000521
.L080B6EC8: .4byte gCharacterData
.L080B6ECC: .4byte 0x00000502

	THUMB_FUNC_END func_080B6D24

	THUMB_FUNC_START func_080B6ED0
func_080B6ED0: @ 0x080B6ED0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r4, #0x1e
	ldr r0, .L080B6F0C  @ gUnknown_08A3D40C
	ldr r1, [r6, #0x34]
	adds r0, r1, r0
	ldrb r5, [r0]
	adds r1, #1
	str r1, [r6, #0x34]
	subs r4, r4, r5
	lsls r1, r4, #3
	adds r1, #0xb0
	ldr r0, .L080B6F10  @ 0x000001FF
	ands r1, r0
	movs r0, #0
	movs r2, #0x38
	bl func_08006618
	adds r0, r4, #0
	movs r1, #0
	bl func_080B689C
	cmp r5, #0x1e
	bne .L080B6F06
	adds r0, r6, #0
	bl Proc_Break
.L080B6F06:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B6F0C: .4byte gUnknown_08A3D40C
.L080B6F10: .4byte 0x000001FF

	THUMB_FUNC_END func_080B6ED0

	THUMB_FUNC_START func_080B6F14
func_080B6F14: @ 0x080B6F14
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, .L080B6F30  @ gUnknown_08A3D420
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	movs r1, #0
	str r1, [r0, #0x30]
	str r5, [r0, #0x38]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B6F30: .4byte gUnknown_08A3D420

	THUMB_FUNC_END func_080B6F14

	THUMB_FUNC_START func_080B6F34
func_080B6F34: @ 0x080B6F34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	bl func_080B6920
	adds r0, r7, #0
	bl func_080B6CA8
	ldr r5, .L080B71A0  @ gUnknown_08A3D348
	ldr r0, [r5]
	movs r1, #0
	bl TmFill
	ldr r0, [r5, #4]
	movs r1, #0
	bl TmFill
	ldr r0, [r5, #8]
	movs r1, #0
	bl TmFill
	ldr r0, .L080B71A4  @ gUnknown_08A40470
	ldr r4, .L080B71A8  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, [r5, #8]
	ldr r6, .L080B71AC  @ 0x0000C260
	adds r1, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, .L080B71B0  @ gUnknown_08A4034C
	adds r1, r4, #0
	bl Decompress
	ldr r0, [r5, #4]
	adds r1, r4, #0
	adds r2, r6, #0
	bl TmApplyTsa_thm
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	bl func_080B6720
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x78
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r6, .L080B71B4  @ gUnknown_08A3D358
	ldr r0, [r6]
	adds r0, #0x28
	ldr r1, [r5]
	adds r1, #0xc2
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	str r4, [sp, #4]
	bl PutDrawText
	ldr r3, .L080B71B8  @ 0x0000051F
	mov sl, r3
	mov r0, sl
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	movs r0, #0xa4
	lsls r0, r0, #3
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x20
	bl PutDrawText
	ldr r0, .L080B71BC  @ 0x00000521
	mov r9, r0
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x38
	ldr r1, [r5]
	adds r1, #0x62
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x40
	bl PutDrawText
	ldrh r0, [r7, #0x3c]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, #0x62
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r7, #0x3c]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	adds r4, r7, #0
	adds r4, #0x40
	ldrh r0, [r4]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, #0x6a
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	adds r4, #4
	ldrh r0, [r4]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, #0x72
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #2]
	bl func_080B6720
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x78
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r3, r0, #0
	ldr r0, [r6]
	adds r0, #0x30
	ldr r1, [r5]
	ldr r2, .L080B71C0  @ 0x0000045C
	adds r1, r1, r2
	mov r2, r8
	str r2, [sp]
	str r4, [sp, #4]
	movs r2, #0
	bl PutDrawText
	mov r0, sl
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	ldr r4, .L080B71C4  @ 0x00000442
	adds r1, r1, r4
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	movs r0, #0xa4
	lsls r0, r0, #3
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, r1, r4
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x20
	bl PutDrawText
	mov r0, r9
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, #0x40
	ldr r1, [r5]
	adds r1, r1, r4
	mov r3, r8
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0x40
	bl PutDrawText
	ldrh r0, [r7, #0x3e]
	bl func_080AEBEC
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r7, #0x3e]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	adds r4, r7, #0
	adds r4, #0x42
	ldrh r0, [r4]
	bl func_080AEBEC
	lsls r0, r0, #1
	ldr r1, .L080B71C8  @ 0x0000044A
	adds r0, r0, r1
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	adds r4, #4
	ldrh r0, [r4]
	bl func_080AEBEC
	lsls r0, r0, #1
	ldr r2, .L080B71CC  @ 0x00000452
	adds r0, r0, r2
	ldr r1, [r5]
	adds r1, r1, r0
	ldrh r2, [r4]
	adds r0, r1, #0
	movs r1, #2
	bl PutNumber
	mov r3, r8
	str r3, [r7, #0x34]
	bl SetBlendNone
	ldr r5, .L080B71D0  @ gCharacterData
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #1]
	subs r0, #1
	movs r4, #0x34
	muls r0, r4, r0
	adds r0, r0, r5
	ldrh r1, [r0, #6]
	movs r2, #0x98
	lsls r2, r2, #1
	ldr r0, .L080B71D4  @ 0x00000503
	str r0, [sp]
	movs r0, #0
	movs r3, #0x30
	bl NewFace2
	ldr r0, [r7, #0x38]
	ldrb r0, [r0, #2]
	subs r0, #1
	muls r0, r4, r0
	adds r0, r0, r5
	ldrh r1, [r0, #6]
	movs r2, #0xd0
	lsls r2, r2, #1
	ldr r0, .L080B71D8  @ 0x00000502
	str r0, [sp]
	movs r0, #1
	movs r3, #0x30
	bl NewFace2
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B71A0: .4byte gUnknown_08A3D348
.L080B71A4: .4byte gUnknown_08A40470
.L080B71A8: .4byte gBuf
.L080B71AC: .4byte 0x0000C260
.L080B71B0: .4byte gUnknown_08A4034C
.L080B71B4: .4byte gUnknown_08A3D358
.L080B71B8: .4byte 0x0000051F
.L080B71BC: .4byte 0x00000521
.L080B71C0: .4byte 0x0000045C
.L080B71C4: .4byte 0x00000442
.L080B71C8: .4byte 0x0000044A
.L080B71CC: .4byte 0x00000452
.L080B71D0: .4byte gCharacterData
.L080B71D4: .4byte 0x00000503
.L080B71D8: .4byte 0x00000502

	THUMB_FUNC_END func_080B6F34

	THUMB_FUNC_START func_080B71DC
func_080B71DC: @ 0x080B71DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r5, #0x1e
	ldr r0, .L080B7234  @ gUnknown_08A3D40C
	ldr r1, [r7, #0x34]
	adds r0, r1, r0
	ldrb r0, [r0]
	mov r8, r0
	adds r1, #1
	str r1, [r7, #0x34]
	subs r5, r5, r0
	lsls r4, r5, #3
	adds r1, r4, #0
	adds r1, #0x40
	ldr r6, .L080B7238  @ 0x000001FF
	ands r1, r6
	movs r0, #0
	movs r2, #0x30
	bl func_08006618
	adds r4, #0xb0
	ands r4, r6
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x30
	bl func_08006618
	adds r0, r5, #0
	movs r1, #0
	bl func_080B689C
	mov r0, r8
	cmp r0, #0x1e
	bne .L080B722A
	adds r0, r7, #0
	bl Proc_Break
.L080B722A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B7234: .4byte gUnknown_08A3D40C
.L080B7238: .4byte 0x000001FF

	THUMB_FUNC_END func_080B71DC

	THUMB_FUNC_START func_080B723C
func_080B723C: @ 0x080B723C
	push {r4, lr}
	sub sp, #4
	movs r4, #0
	str r4, [r0, #0x34]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B723C

	THUMB_FUNC_START func_080B7274
func_080B7274: @ 0x080B7274
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x34]
	asrs r4, r0, #2
	adds r0, #1
	str r0, [r5, #0x34]
	movs r1, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	cmp r4, #8
	bne .L080B729E
	adds r0, r5, #0
	bl Proc_Break
.L080B729E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B7274

	THUMB_FUNC_START func_080B72A4
func_080B72A4: @ 0x080B72A4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r1, r3, #0
	ldr r0, .L080B72C0  @ gUnknown_08A3D440
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x38]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B72C0: .4byte gUnknown_08A3D440

	THUMB_FUNC_END func_080B72A4

	THUMB_FUNC_START func_080B72C4
func_080B72C4: @ 0x080B72C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r4, .L080B7344  @ gUnknown_08A3D358
	ldr r0, [r4]
	str r0, [r6, #0x48]
	movs r1, #4
	str r1, [r6, #0x40]
	str r1, [r6, #0x3c]
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [r6, #0x48]
	movs r1, #0
	bl Text_SetColor
	movs r5, #0
	mov r8, r4
	movs r7, #0xc0
	lsls r7, r7, #1
.L080B72EE:
	lsls r4, r5, #3
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	bl ClearText
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r4
	ldr r1, .L080B7348  @ gBg0Tm+0x4
	adds r1, r7, r1
	bl PutText
	adds r7, #0x80
	adds r5, #1
	cmp r5, #4
	ble .L080B72EE
	movs r0, #1
	bl EnableBgSync
	ldr r2, [r6, #0x30]
	ldr r0, [r2, #0xc]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq .L080B7330
	ldr r0, [r2]
	ldrb r0, [r0, #4]
	bl func_080B6768
	str r0, [r6, #0x44]
	cmp r0, #0
	bne .L080B733A
.L080B7330:
	ldr r0, [r6, #0x2c]
	ldr r0, [r0, #4]
	bl GetMsg
	str r0, [r6, #0x44]
.L080B733A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B7344: .4byte gUnknown_08A3D358
.L080B7348: .4byte gBg0Tm+0x4

	THUMB_FUNC_END func_080B72C4

	THUMB_FUNC_START func_080B734C
func_080B734C: @ 0x080B734C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080B7378  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080B737C
	bl func_080A4CB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B737C
	adds r0, r4, #0
	bl Proc_Break
	ldr r0, [r4, #0x14]
	movs r1, #0x64
	bl Proc_Goto
	b .L080B7424
	.align 2, 0
.L080B7378: .4byte gKeySt
.L080B737C:
	ldr r0, [r4, #0x3c]
	cmp r0, #0
	beq .L080B7386
	subs r0, #1
	b .L080B7422
.L080B7386:
	movs r0, #0
	bl SetTextFont
	ldr r0, [r4, #0x44]
	ldrb r0, [r0]
	cmp r0, #7
	bhi .L080B7416
	lsls r0, r0, #2
	ldr r1, .L080B73A0  @ .L080B73A4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B73A0: .4byte .L080B73A4
.L080B73A4: @ jump table
	.4byte .L080B73C4 @ case 0
	.4byte .L080B73CC @ case 1
	.4byte .L080B7416 @ case 2
	.4byte .L080B7416 @ case 3
	.4byte .L080B73EE @ case 4
	.4byte .L080B73F8 @ case 5
	.4byte .L080B7402 @ case 6
	.4byte .L080B740C @ case 7
.L080B73C4:
	adds r0, r4, #0
	bl Proc_Break
	b .L080B7420
.L080B73CC:
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
	ldr r0, [r4, #0x48]
	adds r0, #8
	str r0, [r4, #0x48]
	ldr r1, [r4, #0x3c]
	adds r1, #0x10
	str r1, [r4, #0x3c]
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [r4, #0x48]
	movs r1, #0
	bl Text_SetColor
	b .L080B7420
.L080B73EE:
	movs r0, #8
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b .L080B741E
.L080B73F8:
	movs r0, #0x10
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b .L080B741E
.L080B7402:
	movs r0, #0x20
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b .L080B741E
.L080B740C:
	movs r0, #0x40
	str r0, [r4, #0x3c]
	ldr r0, [r4, #0x44]
	adds r0, #1
	b .L080B741E
.L080B7416:
	ldr r0, [r4, #0x48]
	ldr r1, [r4, #0x44]
	bl Text_DrawCharacter
.L080B741E:
	str r0, [r4, #0x44]
.L080B7420:
	ldr r0, [r4, #0x40]
.L080B7422:
	str r0, [r4, #0x3c]
.L080B7424:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B734C

	THUMB_FUNC_START func_080B742C
func_080B742C: @ 0x080B742C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, .L080B7448  @ gUnknown_08A3D478
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B7448: .4byte gUnknown_08A3D478

	THUMB_FUNC_END func_080B742C

	THUMB_FUNC_START func_080B744C
func_080B744C: @ 0x080B744C
	push {lr}
	ldr r0, .L080B7458  @ gUnknown_08A3D478
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B7458: .4byte gUnknown_08A3D478

	THUMB_FUNC_END func_080B744C

	THUMB_FUNC_START func_080B745C
func_080B745C: @ 0x080B745C
	push {r4, lr}
	ldr r0, .L080B7494  @ gUnknown_08A405B4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B7498  @ gUnknown_08A405D4
	ldr r1, .L080B749C  @ 0x06001000
	bl Decompress
	ldr r0, .L080B74A0  @ gUnknown_08A409D0
	ldr r4, .L080B74A4  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080B74A8  @ gBg2Tm
	ldr r2, .L080B74AC  @ 0x0000E080
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B7494: .4byte gUnknown_08A405B4
.L080B7498: .4byte gUnknown_08A405D4
.L080B749C: .4byte 0x06001000
.L080B74A0: .4byte gUnknown_08A409D0
.L080B74A4: .4byte gBuf
.L080B74A8: .4byte gBg2Tm
.L080B74AC: .4byte 0x0000E080

	THUMB_FUNC_END func_080B745C

	THUMB_FUNC_START func_080B74B0
func_080B74B0: @ 0x080B74B0
	push {lr}
	adds r2, r0, #0
	adds r2, #0x4c
	movs r1, #0
	strh r1, [r2]
	str r1, [r0, #0x58]
	movs r0, #0
	bl SetupBackgrounds
	bl func_080B745C
	movs r0, #0x56
	movs r1, #7
	movs r2, #0
	bl StartBgmFadeIn
	bl SetBlendNone
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B74B0

	THUMB_FUNC_START func_080B74D8
func_080B74D8: @ 0x080B74D8
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x58]
	adds r0, #1
	str r0, [r2, #0x58]
	ldr r0, .L080B74FC  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq .L080B74F6
	adds r0, r2, #0
	bl Proc_Break
.L080B74F6:
	pop {r0}
	bx r0
	.align 2, 0
.L080B74FC: .4byte gKeySt

	THUMB_FUNC_END func_080B74D8

	THUMB_FUNC_START func_080B7500
func_080B7500: @ 0x080B7500
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	adds r5, #0x4c
	strh r4, [r5]
	bl func_080B745C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B7500

	THUMB_FUNC_START func_080B7540
func_080B7540: @ 0x080B7540
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r4, [r5]
	adds r0, r4, #1
	strh r0, [r5]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x12
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	cmp r4, #0x10
	bne .L080B756E
	adds r0, r6, #0
	bl Proc_Break
	movs r0, #0
	strh r0, [r5]
.L080B756E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B7540

	THUMB_FUNC_START func_080B7574
func_080B7574: @ 0x080B7574
	push {lr}
	sub sp, #4
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	add sp, #4
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B7574

	THUMB_FUNC_START func_080B7598
func_080B7598: @ 0x080B7598
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B75A8  @ gUnknown_08A3D498
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080B75A8: .4byte gUnknown_08A3D498

	THUMB_FUNC_END func_080B7598

	THUMB_FUNC_START func_080B75AC
func_080B75AC: @ 0x080B75AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, .L080B75FC  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, .L080B7600  @ gUnknown_08A09A5C
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B7604  @ gUnknown_08A07DD8
	ldr r1, .L080B7608  @ 0x06004000
	bl Decompress
	ldr r0, .L080B760C  @ gBg2Tm
	ldr r1, .L080B7610  @ gUnknown_085A647C
	movs r2, #0xa4
	lsls r2, r2, #7
	bl TmApplyTsa_thm
	movs r0, #4
	bl EnableBgSync
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B75FC: .4byte gDispIo
.L080B7600: .4byte gUnknown_08A09A5C
.L080B7604: .4byte gUnknown_08A07DD8
.L080B7608: .4byte 0x06004000
.L080B760C: .4byte gBg2Tm
.L080B7610: .4byte gUnknown_085A647C

	THUMB_FUNC_END func_080B75AC

	THUMB_FUNC_START func_080B7614
func_080B7614: @ 0x080B7614
	push {lr}
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r1, #0
	ldrsh r2, [r0, r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	cmp r0, #0
	bge .L080B762C
	adds r0, #7
.L080B762C:
	lsls r0, r0, #0xd
	lsrs r1, r0, #0x10
	adds r0, r2, #0
	cmp r0, #0
	bge .L080B7638
	adds r0, #3
.L080B7638:
	lsls r2, r0, #0xe
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B7614

	THUMB_FUNC_START func_080B7648
func_080B7648: @ 0x080B7648
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	adds r4, r0, #0
	movs r1, #0
	str r1, [r4, #0x30]
	movs r0, #0x20
	str r0, [r4, #0x34]
	adds r0, r4, #0
	adds r0, #0x39
	strb r1, [r0]
	str r1, [r4, #0x2c]
	bl GetNextChapterWinDataEntryIndex
	adds r4, #0x38
	strb r0, [r4]
	ldr r5, .L080B76FC  @ gDispIo
	ldrb r1, [r5, #1]
	movs r4, #2
	negs r4, r4
	adds r0, r4, #0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	mov sl, r1
	ands r0, r1
	subs r1, #2
	mov r9, r1
	ands r0, r1
	subs r1, #4
	mov r8, r1
	ands r0, r1
	movs r6, #0x11
	negs r6, r6
	ands r0, r6
	strb r0, [r5, #1]
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	bl SetupBackgrounds
	ldrb r0, [r5, #1]
	ands r4, r0
	mov r0, sl
	ands r4, r0
	mov r1, r9
	ands r4, r1
	mov r0, r8
	ands r4, r0
	ands r4, r6
	strb r4, [r5, #1]
	bl SetBlendNone
	bl ResetText
	ldrb r1, [r5, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	ldr r0, .L080B7700  @ gUnknown_08A40AD4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L080B7704  @ gBg3Tm
	ldr r1, .L080B7708  @ gUnknown_08A40B14
	movs r2, #0xe0
	lsls r2, r2, #8
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B76FC: .4byte gDispIo
.L080B7700: .4byte gUnknown_08A40AD4
.L080B7704: .4byte gBg3Tm
.L080B7708: .4byte gUnknown_08A40B14

	THUMB_FUNC_END func_080B7648

	THUMB_FUNC_START func_080B770C
func_080B770C: @ 0x080B770C
	push {r4, r5, r6, lr}
	ldr r2, .L080B77EC  @ 0x0000FF78
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, .L080B77F0  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x34
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r2]
	adds r2, #2
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	strb r0, [r2]
	movs r4, #0
	ldr r6, .L080B77F4  @ gUnknown_08A3D674
	movs r5, #0x48
.L080B7782:
	lsls r1, r4, #3
	ldr r0, [r6]
	adds r0, r0, r1
	movs r1, #5
	bl InitText
	ldr r0, [r6]
	adds r0, r0, r5
	movs r1, #0xd
	bl InitText
	adds r5, #8
	adds r4, #1
	cmp r4, #8
	ble .L080B7782
	ldr r5, .L080B77F4  @ gUnknown_08A3D674
	ldr r0, [r5]
	adds r0, #0x90
	movs r1, #4
	bl InitText
	ldr r0, [r5]
	adds r0, #0x98
	movs r1, #2
	bl InitText
	ldr r4, [r5]
	adds r4, #0x90
	ldr r0, .L080B77F8  @ 0x0000015D
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r0, [r5]
	adds r0, #0x98
	movs r1, #3
	bl Text_SetColor
	ldr r4, [r5]
	adds r4, #0x98
	ldr r0, .L080B77FC  @ 0x00000157
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B77EC: .4byte 0x0000FF78
.L080B77F0: .4byte gDispIo
.L080B77F4: .4byte gUnknown_08A3D674
.L080B77F8: .4byte 0x0000015D
.L080B77FC: .4byte 0x00000157

	THUMB_FUNC_END func_080B770C

	THUMB_FUNC_START func_080B7800
func_080B7800: @ 0x080B7800
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #8]
	adds r4, r1, #0
	movs r0, #0
	str r0, [sp, #0x10]
	adds r0, r4, #0
	movs r1, #9
	bl __modsi3
	str r0, [sp, #0xc]
	lsls r7, r4, #1
	movs r0, #0x1f
	ands r7, r0
	lsls r6, r7, #5
	lsls r0, r7, #6
	ldr r1, .L080B78B8  @ gBg1Tm
	mov r9, r1
	add r0, r9
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #2
	bl EnableBgSync
	ldr r3, .L080B78BC  @ gUnknown_08A3D674
	mov r8, r3
	ldr r0, [sp, #0xc]
	lsls r4, r0, #3
	ldr r0, [r3]
	adds r0, r0, r4
	bl ClearText
	adds r5, r4, #0
	adds r5, #0x48
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r5
	bl ClearText
	movs r0, #1
	negs r0, r0
	ldr r3, [sp, #8]
	cmp r3, r0
	bne .L080B78C4
	bl GetGameTotalTurnCount
	adds r4, r0, #0
	ldr r0, .L080B78C0  @ 0x0000015F
	bl GetMsg
	adds r2, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r5
	adds r1, r6, #0
	adds r1, #0xc
	lsls r1, r1, #1
	add r1, r9
	ldr r3, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	adds r0, r6, #0
	adds r0, #0x17
	lsls r0, r0, #1
	add r0, r9
	movs r1, #2
	adds r2, r4, #0
	bl PutNumber
	mov r1, r8
	ldr r0, [r1]
	adds r0, #0x90
	adds r1, r6, #0
	adds r1, #0x18
	lsls r1, r1, #1
	add r1, r9
	bl PutText
	movs r0, #0
	b .L080B7B18
	.align 2, 0
.L080B78B8: .4byte gBg1Tm
.L080B78BC: .4byte gUnknown_08A3D674
.L080B78C0: .4byte 0x0000015F
.L080B78C4:
	ldr r3, [sp, #8]
	cmp r3, #0
	bne .L080B78CC
	b .L080B7B16
.L080B78CC:
	ldr r0, [r3]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	mov sl, r0
	bl GetChapterInfo
	adds r0, #0x80
	ldrb r0, [r0]
	lsrs r0, r0, #1
	mov r9, r0
	mov r0, sl
	cmp r0, #0x23
	bls .L080B78E8
	b .L080B7A40
.L080B78E8:
	lsls r0, r0, #2
	ldr r1, .L080B78F4  @ .L080B78F8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080B78F4: .4byte .L080B78F8
.L080B78F8: @ jump table
	.4byte .L080B7988 @ case 0
	.4byte .L080B7A40 @ case 1
	.4byte .L080B7A40 @ case 2
	.4byte .L080B7A40 @ case 3
	.4byte .L080B7A40 @ case 4
	.4byte .L080B79CC @ case 5
	.4byte .L080B7A40 @ case 6
	.4byte .L080B7A40 @ case 7
	.4byte .L080B7A40 @ case 8
	.4byte .L080B7A40 @ case 9
	.4byte .L080B7A40 @ case 10
	.4byte .L080B7A40 @ case 11
	.4byte .L080B7A40 @ case 12
	.4byte .L080B7A40 @ case 13
	.4byte .L080B7A40 @ case 14
	.4byte .L080B7A40 @ case 15
	.4byte .L080B7A40 @ case 16
	.4byte .L080B7A40 @ case 17
	.4byte .L080B7A40 @ case 18
	.4byte .L080B7A40 @ case 19
	.4byte .L080B7A40 @ case 20
	.4byte .L080B798E @ case 21
	.4byte .L080B798E @ case 22
	.4byte .L080B7A40 @ case 23
	.4byte .L080B7A40 @ case 24
	.4byte .L080B7A40 @ case 25
	.4byte .L080B7A40 @ case 26
	.4byte .L080B7A40 @ case 27
	.4byte .L080B7A40 @ case 28
	.4byte .L080B7A40 @ case 29
	.4byte .L080B7A40 @ case 30
	.4byte .L080B7A40 @ case 31
	.4byte .L080B7A40 @ case 32
	.4byte .L080B7A40 @ case 33
	.4byte .L080B798E @ case 34
	.4byte .L080B798E @ case 35
.L080B7988:
	movs r0, #0xad
	lsls r0, r0, #1
	b .L080B7990
.L080B798E:
	ldr r0, .L080B79C0  @ 0x00000159
.L080B7990:
	bl GetMsg
	adds r3, r0, #0
	ldr r0, .L080B79C4  @ gUnknown_08A3D674
	ldr r1, [sp, #0xc]
	lsls r5, r1, #3
	ldr r0, [r0]
	adds r0, r0, r5
	lsls r4, r7, #5
	adds r1, r4, #3
	lsls r1, r1, #1
	ldr r2, .L080B79C8  @ gBg1Tm
	adds r1, r1, r2
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	mov r8, r4
	adds r6, r5, #0
	b .L080B7A84
	.align 2, 0
.L080B79C0: .4byte 0x00000159
.L080B79C4: .4byte gUnknown_08A3D674
.L080B79C8: .4byte gBg1Tm
.L080B79CC:
	ldr r3, .L080B7A38  @ gUnknown_08A3D674
	mov r8, r3
	ldr r0, [r3]
	adds r0, #0x98
	lsls r6, r7, #5
	adds r1, r6, #3
	lsls r1, r1, #1
	ldr r5, .L080B7A3C  @ gBg1Tm
	adds r1, r1, r5
	bl PutText
	mov r0, r9
	bl func_080AEBEC
	adds r0, #1
	adds r0, #3
	adds r0, r6, r0
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r1, #2
	mov r2, r9
	bl PutNumber
	mov r0, r9
	bl func_080AEBEC
	adds r4, r0, #0
	adds r4, #2
	adds r4, #3
	adds r4, r6, r4
	lsls r4, r4, #1
	adds r4, r4, r5
	movs r0, #0xac
	lsls r0, r0, #1
	bl GetMsg
	adds r2, r0, #0
	ldr r0, [sp, #0xc]
	lsls r5, r0, #3
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r5
	movs r1, #0
	str r1, [sp]
	str r2, [sp, #4]
	adds r1, r4, #0
	movs r2, #2
	movs r3, #0
	bl PutDrawText
	mov r8, r6
	adds r6, r5, #0
	b .L080B7A84
	.align 2, 0
.L080B7A38: .4byte gUnknown_08A3D674
.L080B7A3C: .4byte gBg1Tm
.L080B7A40:
	ldr r0, .L080B7AAC  @ 0x00000157
	bl GetMsg
	adds r3, r0, #0
	ldr r0, .L080B7AB0  @ gUnknown_08A3D674
	ldr r1, [sp, #0xc]
	lsls r6, r1, #3
	ldr r0, [r0]
	adds r0, r0, r6
	lsls r4, r7, #5
	adds r1, r4, #3
	lsls r1, r1, #1
	ldr r5, .L080B7AB4  @ gBg1Tm
	adds r1, r1, r5
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	mov r0, r9
	bl func_080AEBEC
	adds r0, #1
	adds r0, #3
	adds r0, r4, r0
	lsls r0, r0, #1
	adds r0, r0, r5
	movs r1, #2
	mov r2, r9
	bl PutNumber
	mov r8, r4
.L080B7A84:
	mov r3, sl
	cmp r3, #0x15
	blt .L080B7AB8
	cmp r3, #0x16
	ble .L080B7A96
	cmp r3, #0x23
	bgt .L080B7AB8
	cmp r3, #0x22
	blt .L080B7AB8
.L080B7A96:
	ldr r1, [sp, #8]
	ldm r1!, {r0}
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x17
	ldr r0, [r1]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x17
	adds r7, r7, r0
	movs r3, #1
	str r3, [sp, #0x10]
	b .L080B7AC0
	.align 2, 0
.L080B7AAC: .4byte 0x00000157
.L080B7AB0: .4byte gUnknown_08A3D674
.L080B7AB4: .4byte gBg1Tm
.L080B7AB8:
	ldr r1, [sp, #8]
	ldr r0, [r1]
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x17
.L080B7AC0:
	mov r0, sl
	bl GetChapterInfo
	adds r0, #0x70
	ldrh r0, [r0]
	bl GetMsg
	adds r3, r0, #0
	ldr r5, .L080B7B28  @ gUnknown_08A3D674
	adds r1, r6, #0
	adds r1, #0x48
	ldr r0, [r5]
	adds r0, r0, r1
	mov r1, r8
	adds r1, #5
	adds r1, #3
	lsls r1, r1, #1
	ldr r4, .L080B7B2C  @ gBg1Tm
	adds r1, r1, r4
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
	mov r0, r8
	adds r0, #0x14
	adds r0, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #2
	adds r2, r7, #0
	bl PutNumber
	ldr r0, [r5]
	adds r0, #0x90
	mov r1, r8
	adds r1, #0x15
	adds r1, #3
	lsls r1, r1, #1
	adds r1, r1, r4
	bl PutText
.L080B7B16:
	ldr r0, [sp, #0x10]
.L080B7B18:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B7B28: .4byte gUnknown_08A3D674
.L080B7B2C: .4byte gBg1Tm

	THUMB_FUNC_END func_080B7800

	THUMB_FUNC_START func_080B7B30
func_080B7B30: @ 0x080B7B30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	asrs r5, r0, #6
	adds r2, r5, #0
	subs r2, #0x88
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	movs r0, #0xf
	ands r0, r5
	cmp r0, #0
	bne .L080B7BB2
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r1, [r0]
	adds r2, r5, #0
	adds r5, r0, #0
	cmp r2, #0
	bge .L080B7B60
	adds r2, #0xf
.L080B7B60:
	asrs r0, r2, #4
	cmp r1, r0
	bne .L080B7BB2
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r2, [r0]
	ldr r0, [r4, #0x2c]
	cmp r0, r2
	blt .L080B7B96
	subs r0, r0, r2
	cmp r0, #1
	bne .L080B7B82
	movs r0, #1
	negs r0, r0
	bl func_080B7800
	b .L080B7BA6
.L080B7B82:
	cmp r0, #2
	ble .L080B7B8E
	adds r0, r4, #0
	bl Proc_Break
	b .L080B7BA6
.L080B7B8E:
	movs r0, #0
	bl func_080B7800
	b .L080B7BA6
.L080B7B96:
	bl GetChapterWinDataEntry
	ldrb r1, [r5]
	bl func_080B7800
	ldr r1, [r4, #0x2c]
	adds r1, r1, r0
	str r1, [r4, #0x2c]
.L080B7BA6:
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
.L080B7BB2:
	ldr r0, .L080B7BD4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	ldr r1, [r4, #0x34]
	cmp r0, #0
	beq .L080B7BC8
	ldr r0, [r4, #0x30]
	adds r0, r0, r1
	str r0, [r4, #0x30]
.L080B7BC8:
	ldr r0, [r4, #0x30]
	adds r0, r0, r1
	str r0, [r4, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B7BD4: .4byte gKeySt

	THUMB_FUNC_END func_080B7B30

	THUMB_FUNC_START func_080B7BD8
func_080B7BD8: @ 0x080B7BD8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	ldr r3, .L080B7DC8  @ gUnknown_08A3D540
	ldr r0, .L080B7DCC  @ 0x00009480
	str r0, [sp]
	movs r0, #2
	movs r1, #0x18
	movs r2, #0x14
	bl PutSpriteExt
	ldr r3, .L080B7DD0  @ gUnknown_08A3D5B4
	movs r0, #0xc9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x80
	bl PutSpriteExt
	ldr r0, .L080B7DD4  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne .L080B7C16
	b .L080B7E00
.L080B7C16:
	ldr r3, .L080B7DD8  @ gUnknown_08A3D560
	ldr r4, .L080B7DDC  @ 0x00008480
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x38
	bl PutSpriteExt
	ldr r3, .L080B7DE0  @ gUnknown_08A3D56E
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x38
	bl PutSpriteExt
	ldr r3, .L080B7DE4  @ gUnknown_08A3D58A
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x58
	bl PutSpriteExt
	ldr r3, .L080B7DE8  @ gUnknown_08A3D5A6
	movs r0, #0xe9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x58
	bl PutSpriteExt
	movs r7, #0
	ldr r0, [sp, #4]
	adds r0, #0x4c
	mov sl, r0
	ldr r1, .L080B7DEC  @ gSinLut
	mov r9, r1
	mov r8, sl
.L080B7C62:
	mov r2, r8
	ldrh r0, [r2]
	cmp r0, #0x10
	bls .L080B7D10
	ldr r4, .L080B7DF0  @ gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r9
	movs r4, #0
	ldrsh r0, [r2, r4]
	negs r0, r0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r4, r8
	ldrh r1, [r4]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, .L080B7DF0  @ gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r2, r7, #1
	lsls r2, r2, #5
	movs r4, #0x98
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, .L080B7DF4  @ gUnknown_08A3D624
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0x90
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl PutSpriteExt
.L080B7D10:
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #2
	ble .L080B7C62
	lsls r0, r7, #1
	add sl, r0
	mov r1, sl
	ldrh r0, [r1]
	cmp r0, #0x10
	bhi .L080B7D28
	b .L080B7FD2
.L080B7D28:
	ldr r4, .L080B7DEC  @ gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r2, r7, #1
	lsls r2, r2, #5
	movs r4, #0x98
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, .L080B7DF8  @ gUnknown_08A3D63C
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r0, .L080B7DFC  @ 0x0000F480
	str r0, [sp]
	movs r0, #2
	bl PutSpriteExt
	b .L080B7FD2
	.align 2, 0
.L080B7DC8: .4byte gUnknown_08A3D540
.L080B7DCC: .4byte 0x00009480
.L080B7DD0: .4byte gUnknown_08A3D5B4
.L080B7DD4: .4byte gPlaySt
.L080B7DD8: .4byte gUnknown_08A3D560
.L080B7DDC: .4byte 0x00008480
.L080B7DE0: .4byte gUnknown_08A3D56E
.L080B7DE4: .4byte gUnknown_08A3D58A
.L080B7DE8: .4byte gUnknown_08A3D5A6
.L080B7DEC: .4byte gSinLut
.L080B7DF0: .4byte gSinLut+0x80
.L080B7DF4: .4byte gUnknown_08A3D624
.L080B7DF8: .4byte gUnknown_08A3D63C
.L080B7DFC: .4byte 0x0000F480
.L080B7E00:
	ldr r3, .L080B7FE4  @ gUnknown_08A3D560
	ldr r4, .L080B7FE8  @ 0x00008480
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x30
	bl PutSpriteExt
	ldr r3, .L080B7FEC  @ gUnknown_08A3D56E
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x30
	bl PutSpriteExt
	ldr r3, .L080B7FF0  @ gUnknown_08A3D598
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x48
	bl PutSpriteExt
	ldr r3, .L080B7FF4  @ gUnknown_08A3D57C
	str r4, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x48
	bl PutSpriteExt
	ldr r3, .L080B7FF8  @ gUnknown_08A3D58A
	str r4, [sp]
	movs r0, #2
	movs r1, #0x10
	movs r2, #0x60
	bl PutSpriteExt
	ldr r3, .L080B7FFC  @ gUnknown_08A3D5A6
	movs r0, #0xe9
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #2
	movs r1, #0x80
	movs r2, #0x60
	bl PutSpriteExt
	movs r7, #0
	ldr r0, [sp, #4]
	adds r0, #0x4c
	mov sl, r0
	ldr r1, .L080B8000  @ gSinLut
	mov r9, r1
	mov r8, sl
.L080B7E68:
	mov r2, r8
	ldrh r0, [r2]
	cmp r0, #0x10
	bls .L080B7F1A
	ldr r4, .L080B8004  @ gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r9
	movs r4, #0
	ldrsh r0, [r2, r4]
	negs r0, r0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r4, r8
	ldrh r1, [r4]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, .L080B8004  @ gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r0, r7, #1
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r4, #0x94
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, .L080B8008  @ gUnknown_08A3D624
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	movs r4, #0x90
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #2
	bl PutSpriteExt
.L080B7F1A:
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #4
	ble .L080B7E68
	lsls r0, r7, #1
	add sl, r0
	mov r1, sl
	ldrh r0, [r1]
	cmp r0, #0x10
	bls .L080B7FD2
	ldr r4, .L080B8000  @ gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov r9, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r2, sl
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r0, #1
	ands r0, r7
	lsls r1, r0, #3
	subs r1, r1, r0
	lsls r1, r1, #4
	lsls r0, r7, #9
	adds r0, #0x50
	adds r1, r1, r0
	asrs r0, r7, #1
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #3
	movs r4, #0x94
	lsls r4, r4, #1
	adds r2, r2, r4
	ldr r3, .L080B800C  @ gUnknown_08A3D63C
	ldr r0, [sp, #4]
	adds r0, #0x40
	adds r0, r0, r7
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r0, .L080B8010  @ 0x0000F480
	str r0, [sp]
	movs r0, #2
	bl PutSpriteExt
.L080B7FD2:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B7FE4: .4byte gUnknown_08A3D560
.L080B7FE8: .4byte 0x00008480
.L080B7FEC: .4byte gUnknown_08A3D56E
.L080B7FF0: .4byte gUnknown_08A3D598
.L080B7FF4: .4byte gUnknown_08A3D57C
.L080B7FF8: .4byte gUnknown_08A3D58A
.L080B7FFC: .4byte gUnknown_08A3D5A6
.L080B8000: .4byte gSinLut
.L080B8004: .4byte gSinLut+0x80
.L080B8008: .4byte gUnknown_08A3D624
.L080B800C: .4byte gUnknown_08A3D63C
.L080B8010: .4byte 0x0000F480

	THUMB_FUNC_END func_080B7BD8

	THUMB_FUNC_START func_080B8014
func_080B8014: @ 0x080B8014
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r6, .L080B8134  @ gBg2Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r5, .L080B8138  @ gBg3Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r2, .L080B813C  @ gDispIo
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r3, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r3
	movs r4, #1
	orrs r0, r4
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	movs r3, #2
	orrs r1, r3
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	ldrb r0, [r2, #1]
	orrs r0, r4
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #1
	movs r1, #6
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	ldr r4, .L080B8140  @ gUnknown_08A21658
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080B8144  @ gUnknown_08A25DCC
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	bl ApplyPaletteExt
	ldr r1, .L080B8148  @ gUnknown_08A25ECC
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r5, #0
	bl TmApplyTsa_thm
	ldr r4, .L080B814C  @ gUnknown_08A26380
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080B8150  @ 0x06004C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080B8154  @ gUnknown_08A268F8
	ldr r4, .L080B8158  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080B815C  @ gUnknown_08A268D8
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r2, .L080B8160  @ 0x00007260
	adds r0, r6, #0
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #0xc
	bl EnableBgSync
	ldr r0, .L080B8164  @ gUnknown_02000000
	bl func_080AB760
	movs r0, #0x46
	movs r1, #0
	bl StartBgm
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8134: .4byte gBg2Tm
.L080B8138: .4byte gBg3Tm
.L080B813C: .4byte gDispIo
.L080B8140: .4byte gUnknown_08A21658
.L080B8144: .4byte gUnknown_08A25DCC
.L080B8148: .4byte gUnknown_08A25ECC
.L080B814C: .4byte gUnknown_08A26380
.L080B8150: .4byte 0x06004C00
.L080B8154: .4byte gUnknown_08A268F8
.L080B8158: .4byte gBuf
.L080B815C: .4byte gUnknown_08A268D8
.L080B8160: .4byte 0x00007260
.L080B8164: .4byte gUnknown_02000000

	THUMB_FUNC_END func_080B8014

	THUMB_FUNC_START func_080B8168
func_080B8168: @ 0x080B8168
	push {lr}
	bl func_080AB77C
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B8168

	THUMB_FUNC_START func_080B8174
func_080B8174: @ 0x080B8174
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B8184  @ gUnknown_08A3D678
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080B8184: .4byte gUnknown_08A3D678

	THUMB_FUNC_END func_080B8174

	THUMB_FUNC_START nullsub_6
nullsub_6: @ 0x080B8188
	bx lr

	THUMB_FUNC_END nullsub_6

	THUMB_FUNC_START nullsub_7
nullsub_7: @ 0x080B818C
	bx lr

	THUMB_FUNC_END nullsub_7

	THUMB_FUNC_START func_080B8190
func_080B8190: @ 0x080B8190
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	adds r4, r1, #0
	lsls r2, r2, #0x18
	lsrs r3, r2, #0x18
	movs r0, #0x1f
	mov r8, r0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov ip, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov r9, r7
	movs r6, #0xf
.L080B81B2:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r0, r8
	ands r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, ip
	ands r0, r7
	adds r1, r1, r0
	mov r0, r9
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, r9
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r5, #2
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge .L080B81B2
	bl EnablePalSync
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B8190

	THUMB_FUNC_START nullsub_5
nullsub_5: @ 0x080B81FC
	bx lr

	THUMB_FUNC_END nullsub_5

	THUMB_FUNC_START func_080B8200
func_080B8200: @ 0x080B8200
	push {lr}
	movs r0, #4
	bl FadeBgmOut
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B8200

	THUMB_FUNC_START func_080B820C
func_080B820C: @ 0x080B820C
	push {r4, lr}
	movs r2, #0
	ldr r1, .L080B8238  @ 0x0000FFFF
	adds r4, r1, #0
	adds r1, r0, #0
	adds r1, #0x2c
	movs r3, #1
.L080B821A:
	str r2, [r1, #4]
	strb r2, [r1, #0xa]
	strh r2, [r1, #2]
	strh r2, [r1]
	ldrh r0, [r1, #8]
	orrs r0, r4
	strh r0, [r1, #8]
	adds r1, #0xc
	subs r3, #1
	cmp r3, #0
	bge .L080B821A
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8238: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080B820C

	THUMB_FUNC_START func_080B823C
func_080B823C: @ 0x080B823C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	movs r0, #0
	strh r0, [r5, #0x2a]
	ldr r0, .L080B8268  @ gUnknown_08A3D6E0
	adds r1, r5, #0
	bl SpawnProc
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8268: .4byte gUnknown_08A3D6E0

	THUMB_FUNC_END func_080B823C

	THUMB_FUNC_START func_080B826C
func_080B826C: @ 0x080B826C
	push {lr}
	adds r3, r0, #0
	adds r2, r3, #0
	subs r2, #0x30
	adds r0, r2, #0
	cmp r2, #0
	bge .L080B827E
	adds r0, r3, #0
	subs r0, #0x29
.L080B827E:
	asrs r3, r0, #3
	lsls r0, r3, #3
	subs r0, r0, r2
	str r0, [r1]
	adds r0, r3, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B826C

	THUMB_FUNC_START func_080B828C
func_080B828C: @ 0x080B828C
	push {lr}
	ldr r0, .L080B82A4  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	movs r1, #1
	cmp r0, #0
	beq .L080B829E
	movs r1, #2
.L080B829E:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0
.L080B82A4: .4byte gGmData

	THUMB_FUNC_END func_080B828C

	THUMB_FUNC_START func_080B82A8
func_080B82A8: @ 0x080B82A8
	push {lr}
	ldr r0, .L080B82C4  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	movs r1, #0xc0
	lsls r1, r1, #5
	cmp r0, #0
	beq .L080B82BE
	movs r1, #0xa0
	lsls r1, r1, #7
.L080B82BE:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0
.L080B82C4: .4byte gGmData

	THUMB_FUNC_END func_080B82A8

	THUMB_FUNC_START func_080B82C8
func_080B82C8: @ 0x080B82C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	mov sl, r1
	adds r0, r2, #0
	adds r6, r3, #0
	ldr r1, [sp, #0x24]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r9, r1
	mov r1, sp
	bl func_080B826C
	mov r8, r0
	adds r4, r6, #0
	cmp r6, #0
	bge .L080B82F4
	adds r4, r6, #7
.L080B82F4:
	asrs r4, r4, #3
	lsls r5, r4, #3
	subs r5, r5, r6
	adds r0, r7, #0
	bl GetBgTilemap
	lsls r4, r4, #6
	adds r0, r0, r4
	mov r2, r8
	lsls r1, r2, #1
	adds r0, r0, r1
	mov r3, sl
	lsrs r1, r3, #5
	movs r2, #0x80
	lsls r2, r2, #7
	adds r1, r1, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r3, r9
	lsls r2, r3, #0x18
	asrs r2, r2, #0x18
	bl func_08006738
	movs r0, #1
	lsls r0, r7
	bl EnableBgSync
	lsls r0, r7, #0x10
	lsrs r0, r0, #0x10
	ldr r1, [sp]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r2, r5, #0
	bl SetBgOffset
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B82C8

	THUMB_FUNC_START func_080B8350
func_080B8350: @ 0x080B8350
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x31
	ldrb r1, [r4]
	lsrs r1, r1, #1
	movs r2, #0x10
	subs r2, r2, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	adds r1, r7, #0
	adds r1, #0x30
	ldrb r0, [r1]
	ldrb r2, [r4]
	adds r0, r0, r2
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B83D2
	movs r6, #0
	mov r8, r1
	movs r0, #1
	negs r0, r0
	mov r9, r0
	movs r4, #0
	movs r5, #0
.L080B8392:
	ldr r1, [r7, #0x2c]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r4
	ldr r0, [r0]
	cmp r0, #0
	beq .L080B83C4
	adds r0, r1, r4
	adds r0, #0x36
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r9
	bne .L080B83C4
	adds r0, r6, #0
	bl EndFaceById
	ldr r0, [r7, #0x2c]
	adds r0, r0, r4
	adds r0, #0x36
	strb r5, [r0]
	ldr r0, [r7, #0x2c]
	adds r0, #0x30
	adds r0, r0, r4
	str r5, [r0]
.L080B83C4:
	adds r4, #0xc
	adds r6, #1
	cmp r6, #1
	ble .L080B8392
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
.L080B83D2:
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0x20
	bne .L080B842A
	movs r2, #0x30
	adds r2, r2, r7
	mov r8, r2
	movs r5, #0
	movs r6, #1
.L080B83E6:
	ldr r1, [r7, #0x2c]
	adds r0, r1, #0
	adds r0, #0x30
	adds r0, r0, r5
	ldr r4, [r0]
	cmp r4, #0
	beq .L080B841C
	adds r0, r1, r5
	adds r0, #0x36
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne .L080B841C
	adds r0, r4, #0
	bl GetFaceDisp
	ldr r1, .L080B8438  @ 0xFFFFFBFF
	ands r1, r0
	adds r0, r4, #0
	bl SetFaceDisp
	ldr r0, [r7, #0x2c]
	adds r0, r0, r5
	adds r0, #0x36
	movs r1, #0
	strb r1, [r0]
.L080B841C:
	adds r5, #0xc
	subs r6, #1
	cmp r6, #0
	bge .L080B83E6
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
.L080B842A:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8438: .4byte 0xFFFFFBFF

	THUMB_FUNC_END func_080B8350

	THUMB_FUNC_START func_080B843C
func_080B843C: @ 0x080B843C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	ldr r0, [r0, #0x2c]
	str r0, [sp, #8]
	bl func_080B828C
	mov sl, r0
	ldr r0, [sp, #8]
	adds r0, #0x2e
	mov r9, r0
	ldr r1, [sp, #8]
	adds r1, #0x2c
	str r1, [sp, #0xc]
	movs r2, #0
	str r2, [sp, #0x10]
	movs r3, #1
	str r3, [sp, #4]
.L080B8466:
	movs r7, #0
	ldr r0, [sp, #8]
	adds r0, #0x30
	ldr r1, [sp, #0x10]
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, #0
	bne .L080B8478
	b .L080B8602
.L080B8478:
	adds r6, r0, #0
	ldr r2, [sp, #0xc]
	movs r3, #0
	ldrsh r4, [r2, r3]
	mov r5, r9
	ldrh r2, [r5]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq .L080B850C
	movs r1, #0xff
	ands r1, r2
	cmp r1, #0xf
	bhi .L080B850C
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r3, #0
	ands r0, r2
	cmp r0, #0
	beq .L080B84BA
	movs r0, #0x10
	subs r0, r0, r1
	lsls r1, r0, #5
	muls r0, r1, r0
	cmp r0, #0
	bge .L080B84B2
	adds r0, #0xff
.L080B84B2:
	asrs r0, r0, #8
	adds r0, r4, r0
	strh r0, [r6, #0x34]
	movs r7, #1
.L080B84BA:
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B84E2
	movs r0, #0xff
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge .L080B84DA
	adds r0, #0xff
.L080B84DA:
	asrs r0, r0, #8
	subs r0, r4, r0
	strh r0, [r6, #0x34]
	movs r7, #1
.L080B84E2:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	movs r3, #0xff
	ands r0, r3
	cmp r0, #0xf
	bls .L080B850C
	movs r7, #2
	adds r0, r6, #0
	bl GetFaceDisp
	ldr r1, .L080B85AC  @ 0xFFFFBFFF
	ands r1, r0
	adds r0, r6, #0
	bl SetFaceDisp
	ldrh r0, [r5]
	ldr r2, .L080B85B0  @ 0x0000F7FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r5]
.L080B850C:
	ldrh r1, [r5]
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B85A2
	movs r0, #0xff
	mov r8, r0
	ands r0, r1
	cmp r0, #0xf
	bhi .L080B85A2
	cmp r0, #0
	bne .L080B853A
	adds r0, r6, #0
	bl GetFaceDisp
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r1, r0
	adds r0, r6, #0
	bl SetFaceDisp
.L080B853A:
	ldrh r1, [r5]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B8566
	adds r2, r4, #0
	subs r2, #0x20
	mov r0, r8
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge .L080B855E
	adds r0, #0xff
.L080B855E:
	asrs r0, r0, #8
	adds r0, r2, r0
	strh r0, [r6, #0x34]
	movs r7, #1
.L080B8566:
	ldrh r1, [r5]
	movs r3, #0x80
	lsls r3, r3, #2
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B8592
	adds r2, r4, #0
	adds r2, #0x20
	movs r0, #0xff
	ands r0, r1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r0, r1, #5
	muls r0, r1, r0
	cmp r0, #0
	bge .L080B858A
	adds r0, #0xff
.L080B858A:
	asrs r0, r0, #8
	subs r0, r2, r0
	strh r0, [r6, #0x34]
	movs r7, #1
.L080B8592:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	movs r1, #0xff
	ands r0, r1
	cmp r0, #0xf
	bls .L080B85A2
	movs r7, #2
.L080B85A2:
	cmp r7, #1
	beq .L080B85B4
	cmp r7, #2
	beq .L080B85EC
	b .L080B8602
	.align 2, 0
.L080B85AC: .4byte 0xFFFFBFFF
.L080B85B0: .4byte 0x0000F7FF
.L080B85B4:
	mov r0, sl
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	bl func_080B828C
	adds r4, r0, #0
	bl func_080B82A8
	adds r1, r0, #0
	movs r3, #0x34
	ldrsh r2, [r6, r3]
	ldrh r0, [r5]
	lsrs r0, r0, #0xa
	ands r0, r7
	str r0, [sp]
	adds r0, r4, #0
	movs r3, #0x1c
	bl func_080B82C8
	mov r0, sl
	lsls r7, r0
	adds r0, r7, #0
	bl EnableBgSync
	b .L080B8602
.L080B85EC:
	mov r0, sl
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	mov r1, sl
	lsls r0, r1
	bl EnableBgSync
.L080B8602:
	movs r2, #0xc
	add r9, r2
	ldr r3, [sp, #0xc]
	adds r3, #0xc
	str r3, [sp, #0xc]
	ldr r0, [sp, #0x10]
	adds r0, #0xc
	str r0, [sp, #0x10]
	ldr r1, [sp, #4]
	subs r1, #1
	str r1, [sp, #4]
	cmp r1, #0
	blt .L080B861E
	b .L080B8466
.L080B861E:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B843C

	THUMB_FUNC_START func_080B8630
func_080B8630: @ 0x080B8630
	push {r4, lr}
	sub sp, #0x38
	adds r4, r0, #0
	ldr r1, .L080B8678  @ gUnknown_08205F28
	mov r0, sp
	movs r2, #0x37
	bl memcpy
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2a]
	add r0, sp
	ldrb r0, [r0]
	cmp r0, #0xff
	bne .L080B8654
	movs r0, #0
	strh r0, [r4, #0x2a]
.L080B8654:
	adds r0, r4, #0
	bl func_080B843C
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B866E
	adds r0, r4, #0
	bl func_080B8350
.L080B866E:
	add sp, #0x38
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8678: .4byte gUnknown_08205F28

	THUMB_FUNC_END func_080B8630

	THUMB_FUNC_START nullsub_57
nullsub_57: @ 0x080B867C
	bx lr

	THUMB_FUNC_END nullsub_57

	THUMB_FUNC_START func_080B8680
func_080B8680: @ 0x080B8680
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080B8690  @ gUnknown_08A3D700
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080B8690: .4byte gUnknown_08A3D700

	THUMB_FUNC_END func_080B8680

	THUMB_FUNC_START func_080B8694
func_080B8694: @ 0x080B8694
	push {lr}
	ldr r0, .L080B86A0  @ gUnknown_08A3D700
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080B86A0: .4byte gUnknown_08A3D700

	THUMB_FUNC_END func_080B8694

	THUMB_FUNC_START func_080B86A4
func_080B86A4: @ 0x080B86A4
	push {r4, lr}
	ldr r4, .L080B86BC  @ gUnknown_08A3D700
	adds r0, r4, #0
	bl FindProc
	adds r0, r4, #0
	bl FindProc
	cmp r0, #0
	bne .L080B86C0
	movs r0, #0x10
	b .L080B86C6
	.align 2, 0
.L080B86BC: .4byte gUnknown_08A3D700
.L080B86C0:
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #1
.L080B86C6:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B86A4

	THUMB_FUNC_START func_080B86CC
func_080B86CC: @ 0x080B86CC
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	adds r6, r1, #0
	lsls r2, r2, #0x10
	lsrs r4, r2, #0x10
	ldr r0, .L080B8728  @ gUnknown_08A3D700
	bl FindProc
	mov r9, r0
	mov r1, r8
	lsls r0, r1, #1
	add r0, r8
	lsls r0, r0, #2
	adds r0, #0x2c
	mov r2, r9
	ldr r1, [r2, #0x2c]
	adds r5, r1, r0
	ldr r0, .L080B872C  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B8730
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	b .L080B874E
	.align 2, 0
.L080B8728: .4byte gUnknown_08A3D700
.L080B872C: .4byte gGmData
.L080B8730:
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
.L080B874E:
	bl func_080B828C
	adds r7, r0, #0
	bl func_080B82A8
	adds r1, r0, #0
	ldr r0, [r5, #4]
	cmp r0, #0
	bne .L080B8834
	strh r6, [r5, #8]
	movs r0, #0xff
	ands r0, r4
	strh r0, [r5]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r4
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r0, r2
	strh r0, [r5, #2]
	lsrs r0, r1, #5
	adds r1, r6, #0
	bl func_080066FC
	movs r0, #4
	adds r1, r6, #0
	bl func_0800671C
	adds r0, r7, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #0
	ldrsh r2, [r5, r0]
	movs r0, #0x80
	lsls r0, r0, #3
	ands r0, r4
	ldr r1, .L080B87D8  @ 0x00004482
	cmp r0, #0
	beq .L080B87A4
	adds r1, #1
.L080B87A4:
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r4
	cmp r0, #0
	beq .L080B87B4
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
.L080B87B4:
	str r1, [sp]
	mov r0, r8
	adds r1, r6, #0
	movs r3, #0x1c
	bl NewFace2
	adds r2, r0, #0
	str r2, [r5, #4]
	movs r1, #0xc0
	lsls r1, r1, #7
	adds r0, r4, #0
	ands r0, r1
	cmp r0, r1
	bne .L080B87DC
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #6
	b .L080B8806
	.align 2, 0
.L080B87D8: .4byte 0x00004482
.L080B87DC:
	movs r0, #0x80
	lsls r0, r0, #7
	ands r0, r4
	cmp r0, #0
	beq .L080B87EE
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #5
	b .L080B8806
.L080B87EE:
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r4
	cmp r0, #0
	beq .L080B8800
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #4
	b .L080B8806
.L080B8800:
	adds r1, r2, #0
	adds r1, #0x41
	movs r0, #3
.L080B8806:
	strb r0, [r1]
	mov r0, r8
	movs r1, #5
	bl SetFaceBlinkControlById
	movs r0, #1
	strb r0, [r5, #0xa]
	mov r1, r9
	adds r1, #0x30
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0x20
	bne .L080B8834
	movs r0, #0
	strb r0, [r1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
.L080B8834:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B86CC

	THUMB_FUNC_START func_080B8844
func_080B8844: @ 0x080B8844
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	ldr r0, .L080B8894  @ gUnknown_08A3D700
	bl FindProc
	adds r6, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, #0x2c
	ldr r1, [r6, #0x2c]
	adds r4, r1, r0
	ldr r0, .L080B8898  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq .L080B889C
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	b .L080B88BA
	.align 2, 0
.L080B8894: .4byte gUnknown_08A3D700
.L080B8898: .4byte gGmData
.L080B889C:
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
.L080B88BA:
	bl func_080B828C
	adds r5, r0, #0
	bl func_080B82A8
	adds r2, r0, #0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq .L080B894E
	ldrh r1, [r4, #2]
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r1
	cmp r0, #0
	bne .L080B894E
	lsrs r0, r2, #5
	movs r2, #8
	ldrsh r1, [r4, r2]
	bl func_080066FC
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r0, #4
	bl func_0800671C
	adds r0, r5, #0
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrh r0, [r4, #2]
	ldr r1, .L080B8910  @ 0xFFFFFF00
	ands r1, r0
	movs r2, #0xc0
	lsls r2, r2, #2
	ands r2, r7
	cmp r2, #0
	beq .L080B8918
	ldr r0, .L080B8914  @ 0x0000FCFF
	ands r1, r0
	orrs r1, r2
	b .L080B891C
	.align 2, 0
.L080B8910: .4byte 0xFFFFFF00
.L080B8914: .4byte 0x0000FCFF
.L080B8918:
	ldr r0, .L080B8958  @ 0x0000FCFF
	ands r1, r0
.L080B891C:
	movs r0, #0xff
	lsls r0, r0, #8
	ands r1, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r1, r2
	strh r0, [r4, #2]
	movs r0, #0xff
	strb r0, [r4, #0xa]
	adds r1, r6, #0
	adds r1, #0x30
	movs r0, #0xfe
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080B894E
	movs r0, #0x20
	strb r0, [r1]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
.L080B894E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8958: .4byte 0x0000FCFF

	THUMB_FUNC_END func_080B8844

	THUMB_FUNC_START func_080B895C
func_080B895C: @ 0x080B895C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	ldr r0, .L080B8A10  @ gUnknown_08A3D700
	bl FindProc
	adds r7, r0, #0
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0x2c
	mov r9, r0
	movs r1, #1
	mov r8, r1
.L080B8994:
	ldr r0, [r7, #0x2c]
	mov r2, r9
	adds r5, r0, r2
	ldr r4, [r5, #4]
	cmp r4, #0
	beq .L080B89F0
	ldrh r1, [r5, #2]
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	bne .L080B89F0
	adds r0, r4, #0
	bl GetFaceDisp
	movs r1, #0x80
	lsls r1, r1, #7
	orrs r1, r0
	adds r0, r4, #0
	bl SetFaceDisp
	ldrh r0, [r5, #2]
	ldr r2, .L080B8A14  @ 0xFFFFFF00
	adds r1, r2, #0
	ands r0, r1
	adds r0, r0, r6
	strh r0, [r5, #2]
	movs r0, #0xff
	strb r0, [r5, #0xa]
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0xfe
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080B89F0
	movs r0, #0x20
	strb r0, [r1]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
.L080B89F0:
	movs r0, #0xc
	add r9, r0
	movs r1, #1
	negs r1, r1
	add r8, r1
	mov r2, r8
	cmp r2, #0
	bge .L080B8994
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8A10: .4byte gUnknown_08A3D700
.L080B8A14: .4byte 0xFFFFFF00

	THUMB_FUNC_END func_080B895C

	THUMB_FUNC_START GM_OnEnd
GM_OnEnd: @ 0x080B8A18
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	bl Proc_End
	ldr r0, [r4, #0x44]
	bl Proc_End
	ldr r0, [r4, #0x48]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankB
	bl func_080C1D70
	movs r0, #0
	bl SetOnHBlankA
	bl EndTalk
	bl Dialogue_ClearLines
	bl ResetUnitSprites
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	bl func_080BF15C
	bl func_080C3E94
	ldr r2, .L080B8A78  @ gGmData
	ldrb r1, [r2]
	movs r0, #0x41
	negs r0, r0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	subs r1, #0x81
	ands r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8A78: .4byte gGmData

	THUMB_FUNC_END GM_OnEnd

	THUMB_FUNC_START func_080B8A7C
func_080B8A7C: @ 0x080B8A7C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r7, r0, #0
	adds r0, #0x40
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r3, r7, #0
	adds r3, #0x29
	ldrb r0, [r3]
	movs r1, #2
	orrs r0, r1
	strb r0, [r3]
	ldr r0, .L080B8B00  @ gGmData
	mov r8, r0
	strb r2, [r0, #1]
	ldr r0, [r7, #0x54]
	mov r4, sp
	adds r4, #0xa
	movs r1, #0
	add r2, sp, #8
	adds r3, r4, #0
	bl func_080BE0A4
	add r0, sp, #8
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r5, sp, #0xc
	mov r6, sp
	adds r6, #0xe
	adds r2, r5, #0
	adds r3, r6, #0
	bl GetGmCameraCenteredPosition
	mov r3, r8
	movs r4, #2
	ldrsh r0, [r3, r4]
	movs r2, #4
	ldrsh r1, [r3, r2]
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	movs r4, #2
	str r4, [sp]
	bl func_080C0834
	asrs r0, r0, #2
	cmp r0, #1
	bgt .L080B8B04
	ldrh r0, [r5]
	mov r1, r8
	strh r0, [r1, #2]
	ldrh r0, [r6]
	strh r0, [r1, #4]
	adds r0, r7, #0
	movs r1, #7
	bl Proc_Goto
	b .L080B8B2E
	.align 2, 0
.L080B8B00: .4byte gGmData
.L080B8B04:
	cmp r0, #0xf
	bgt .L080B8B0C
	movs r0, #0x10
	b .L080B8B12
.L080B8B0C:
	cmp r0, #0x4b
	ble .L080B8B12
	movs r0, #0x4b
.L080B8B12:
	movs r1, #1
	negs r1, r1
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	adds r0, r1, #0
	bl StartGmScroll
.L080B8B2E:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B8A7C

	THUMB_FUNC_START func_080B8B3C
func_080B8B3C: @ 0x080B8B3C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080BF490
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B8B58
	adds r1, r4, #0
	adds r1, #0x41
	movs r0, #0x14
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080B8B58:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B8B3C

	THUMB_FUNC_START func_080B8B60
func_080B8B60: @ 0x080B8B60
	push {r4, lr}
	adds r3, r0, #0
	ldr r4, .L080B8B90  @ gGmData
	lsls r0, r3, #2
	adds r0, r0, r4
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080B8B9C
	movs r2, #4
	adds r1, r4, #0
	adds r1, #0x10
.L080B8B7C:
	movs r4, #0x12
	ldrsh r0, [r1, r4]
	cmp r0, #0
	beq .L080B8B94
	ldrb r0, [r1, #0x11]
	cmp r0, r3
	bne .L080B8B94
	movs r0, #1
	b .L080B8B9E
	.align 2, 0
.L080B8B90: .4byte gGmData
.L080B8B94:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	ble .L080B8B7C
.L080B8B9C:
	movs r0, #0
.L080B8B9E:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B8B60

	THUMB_FUNC_START func_080B8BA4
func_080B8BA4: @ 0x080B8BA4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r6, r0, #0
	ldr r0, [r6, #0x54]
	movs r1, #0
	bl func_080BE12C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B8BBE
	b .L080B8D50
.L080B8BBE:
	adds r5, r6, #0
	adds r5, #0x40
	movs r4, #0
	ldrsb r4, [r5, r4]
	bl func_080BD29C
	subs r0, #1
	mov r8, r5
	cmp r4, r0
	blt .L080B8BD4
	b .L080B8CEC
.L080B8BD4:
	bl func_080BD29C
	movs r1, #0
	ldrsb r1, [r5, r1]
	subs r0, r0, r1
	cmp r0, #2
	beq .L080B8BFA
	adds r0, r1, #1
	bl func_080BD28C
	bl func_080BCA1C
	cmp r0, #0
	blt .L080B8C40
	adds r0, r6, #0
	movs r1, #0x11
	bl Proc_Goto
	b .L080B8D50
.L080B8BFA:
	adds r0, r1, #1
	bl func_080BD28C
	ldr r1, .L080B8CB8  @ gGmData
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B8C40
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, #1
	bl func_080BD28C
	lsls r0, r0, #5
	ldr r1, .L080B8CBC  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq .L080B8C40
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, #1
	bl func_080BD28C
	adds r1, r6, #0
	adds r1, #0x3e
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #0xe
	bl Proc_Goto
.L080B8C40:
	adds r0, r6, #0
	adds r0, #0x41
	ldrb r2, [r0]
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r7, r0, #0
	cmp r1, #0
	bgt .L080B8CC0
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	bl func_080BD28C
	adds r5, r0, #0
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r0, #1
	bl func_080BD28C
	adds r4, r0, #0
	ldr r0, [r6, #0x54]
	movs r1, #0
	movs r2, #1
	bl MapMU_80BE108
	mov r0, sp
	movs r2, #0
	strb r2, [r0]
	strh r5, [r0, #6]
	strh r4, [r0, #8]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #0xc]
	mov r1, sp
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	lsrs r0, r0, #0x1f
	strb r0, [r1, #1]
	mov r0, sp
	strh r2, [r0, #0xa]
	movs r0, #1
	strb r0, [r1, #2]
	movs r0, #0xff
	strb r0, [r1, #3]
	movs r0, #4
	strb r0, [r1, #4]
	ldr r0, [r6, #0x54]
	bl func_080BDEB4
	movs r0, #8
	strb r0, [r7]
	mov r1, r8
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b .L080B8D50
	.align 2, 0
.L080B8CB8: .4byte gGmData
.L080B8CBC: .4byte gUnknown_082060B0
.L080B8CC0:
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B8CE0
	ldr r0, .L080B8CE8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B8CE0
	subs r0, r2, #2
	strb r0, [r7]
.L080B8CE0:
	ldrb r0, [r7]
	subs r0, #1
	strb r0, [r7]
	b .L080B8D50
	.align 2, 0
.L080B8CE8: .4byte gKeySt
.L080B8CEC:
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	ldrsb r0, [r5, r0]
	bl func_080BD28C
	ldr r4, .L080B8D28  @ gGmData
	strb r0, [r4, #0x11]
	ldr r0, [r6, #0x54]
	movs r1, #0
	movs r2, #0
	bl MapMU_80BE108
	ldrb r2, [r4, #0x11]
	lsls r0, r2, #5
	ldr r1, .L080B8D2C  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	bne .L080B8D30
	adds r0, r6, #0
	movs r1, #0xe
	bl Proc_Goto
	b .L080B8D50
	.align 2, 0
.L080B8D28: .4byte gGmData
.L080B8D2C: .4byte gUnknown_082060B0
.L080B8D30:
	adds r0, r2, #0
	bl func_080B8B60
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B8D46
	adds r0, r6, #0
	movs r1, #0x10
	bl Proc_Goto
	b .L080B8D50
.L080B8D46:
	movs r0, #1
	strb r0, [r4, #1]
	adds r0, r6, #0
	bl Proc_Break
.L080B8D50:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B8BA4

	THUMB_FUNC_START InitGraphicsForWorldMap
InitGraphicsForWorldMap: @ 0x080B8D5C
	push {r4, lr}
	movs r0, #0
	bl SetupBackgrounds
	ldr r4, .L080B8DF8  @ gDispIo
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	ldr r0, .L080B8DFC  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B8E00  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B8E04  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B8E08  @ gBg3Tm
	movs r1, #0
	bl TmFill
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r0, [r4, #0x10]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #6
	bl GetSaveTargetAddress
	bl LoadLegacyUiFrameGraphics
	bl ResetText
	bl InitFaces
	ldr r0, .L080B8E0C  @ gUnknown_08A3D728
	bl SetFaceConfig
	bl ResetUnitSprites
	bl MU_Init
	bl ApplyUnitSpritePalettes
	ldr r1, .L080B8E10  @ gBmSt
	movs r0, #0
	strh r0, [r1, #0xc]
	strh r0, [r1, #0xe]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8DF8: .4byte gDispIo
.L080B8DFC: .4byte gBg0Tm
.L080B8E00: .4byte gBg1Tm
.L080B8E04: .4byte gBg2Tm
.L080B8E08: .4byte gBg3Tm
.L080B8E0C: .4byte gUnknown_08A3D728
.L080B8E10: .4byte gBmSt

	THUMB_FUNC_END InitGraphicsForWorldMap

	THUMB_FUNC_START LoadGMObjGraphics
LoadGMObjGraphics: @ 0x080B8E14
	push {r4, lr}
	ldr r0, .L080B8E48  @ gUnknown_08A97A40
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, .L080B8E4C  @ gUnknown_08A96308
	ldr r1, .L080B8E50  @ 0x06011000
	bl Decompress
	ldr r0, .L080B8E54  @ gUnknown_08A97410
	ldr r4, .L080B8E58  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r1, .L080B8E5C  @ 0x06010280
	adds r0, r4, #0
	movs r2, #0xc
	movs r3, #4
	bl CopyTileGfxForObj
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8E48: .4byte gUnknown_08A97A40
.L080B8E4C: .4byte gUnknown_08A96308
.L080B8E50: .4byte 0x06011000
.L080B8E54: .4byte gUnknown_08A97410
.L080B8E58: .4byte gBuf
.L080B8E5C: .4byte 0x06010280

	THUMB_FUNC_END LoadGMObjGraphics

	THUMB_FUNC_START GMProc_80B8E60
GMProc_80B8E60: @ 0x080B8E60
	push {r4, r5, lr}
	sub sp, #4
	movs r5, #0
	strh r5, [r0, #0x3a]
	bl SetBlendNone
	ldr r0, .L080B8F74  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B8F78  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B8F7C  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080B8F80  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	ldr r4, .L080B8F84  @ gUnknown_0859ED70
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r1, #0xd8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B8F88  @ gUnknown_08AA11D0
	ldr r4, .L080B8F8C  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r1, .L080B8F90  @ 0x06015300
	adds r0, r4, #0
	movs r2, #8
	movs r3, #2
	bl CopyTileGfxForObj
	bl LoadGMObjGraphics
	ldr r0, .L080B8F94  @ gUnknown_08A97FA4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080B8F98  @ gUnknown_08A97ED8
	ldr r1, .L080B8F9C  @ 0x06005000
	bl Decompress
	bl LoadUiFrameGraphics
	bl ResetText
	bl ResetTextFont
	ldr r4, .L080B8FA0  @ gDispIo
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #0x36
	adds r0, r0, r4
	mov ip, r0
	ldrb r1, [r0]
	movs r0, #1
	orrs r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	movs r0, #8
	orrs r1, r0
	movs r0, #0x10
	orrs r1, r0
	adds r3, r4, #0
	adds r3, #0x34
	ldrb r0, [r3]
	movs r2, #0x20
	orrs r0, r2
	strb r0, [r3]
	adds r3, #1
	ldrb r0, [r3]
	orrs r0, r2
	strb r0, [r3]
	orrs r1, r2
	mov r0, ip
	strb r1, [r0]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl func_080AE168
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	bl func_080C1D00
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B8F74: .4byte gBg0Tm
.L080B8F78: .4byte gBg1Tm
.L080B8F7C: .4byte gBg2Tm
.L080B8F80: .4byte gBg3Tm
.L080B8F84: .4byte gUnknown_0859ED70
.L080B8F88: .4byte gUnknown_08AA11D0
.L080B8F8C: .4byte gBuf
.L080B8F90: .4byte 0x06015300
.L080B8F94: .4byte gUnknown_08A97FA4
.L080B8F98: .4byte gUnknown_08A97ED8
.L080B8F9C: .4byte 0x06005000
.L080B8FA0: .4byte gDispIo

	THUMB_FUNC_END GMProc_80B8E60

	THUMB_FUNC_START GMProc_DeployAllBlueUnits
GMProc_DeployAllBlueUnits: @ 0x080B8FA4
	push {r4, lr}
	movs r4, #1
.L080B8FA8:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq .L080B8FC4
	ldr r0, [r2]
	cmp r0, #0
	beq .L080B8FC4
	ldr r0, [r2, #0xc]
	movs r1, #9
	negs r1, r1
	ands r0, r1
	str r0, [r2, #0xc]
.L080B8FC4:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080B8FA8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END GMProc_DeployAllBlueUnits

	THUMB_FUNC_START nullsub_22
nullsub_22: @ 0x080B8FD0
	bx lr

	THUMB_FUNC_END nullsub_22

	THUMB_FUNC_START GM_80B8FD4
GM_80B8FD4: @ 0x080B8FD4
	ldr r2, .L080B8FE8  @ gGmData
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
.L080B8FE8: .4byte gGmData

	THUMB_FUNC_END GM_80B8FD4

	THUMB_FUNC_START func_080B8FEC
func_080B8FEC: @ 0x080B8FEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080B9010  @ gGmData
	bl func_080BD014
	adds r1, r0, #0
	cmp r1, #0
	blt .L080B9014
	ldr r0, [r4, #0x48]
	adds r0, #0x33
	strb r1, [r0]
	ldr r1, [r4, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
	b .L080B9022
	.align 2, 0
.L080B9010: .4byte gGmData
.L080B9014:
	ldr r0, [r4, #0x48]
	adds r0, #0x32
	ldrb r2, [r0]
	movs r1, #3
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
.L080B9022:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B8FEC

	THUMB_FUNC_START func_080B9028
func_080B9028: @ 0x080B9028
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	movs r6, #0
	add r0, sp, #4
	mov r8, r0
	ldr r4, .L080B906C  @ gGmData
	ldr r1, .L080B9070  @ gUnknown_082060B0
	mov r9, r1
	mov r7, sp
	adds r7, #6
.L080B9044:
	movs r3, #0x12
	ldrsh r0, [r4, r3]
	cmp r0, #0
	beq .L080B90B6
	ldrb r1, [r4, #0x10]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B9074
	ldr r0, [r5, #0x54]
	movs r1, #0x12
	ldrsh r2, [r4, r1]
	ldrb r1, [r4, #0x11]
	str r1, [sp]
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl GmMu_SetUnitClass
	b .L080B9088
	.align 2, 0
.L080B906C: .4byte gGmData
.L080B9070: .4byte gUnknown_082060B0
.L080B9074:
	ldr r0, [r5, #0x54]
	movs r3, #0x12
	ldrsh r2, [r4, r3]
	ldrb r1, [r4, #0x11]
	str r1, [sp]
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl GmMu_SetUnitChar
.L080B9088:
	ldrb r0, [r4, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x18]
	mov r1, r8
	strh r0, [r1]
	ldrb r0, [r4, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x1a]
	strh r0, [r7]
	ldr r0, [r5, #0x54]
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #0
	ldrsh r3, [r7, r1]
	adds r1, r6, #0
	bl GmMu_SetPosition
	ldr r0, [r5, #0x54]
	adds r1, r6, #0
	bl GmMu_ShowUnit
.L080B90B6:
	adds r4, #4
	adds r6, #1
	cmp r6, #6
	ble .L080B9044
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9028

	THUMB_FUNC_START func_080B90CC
func_080B90CC: @ 0x080B90CC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, .L080B9110  @ gGmData
	ldrb r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080B9102
	movs r5, #4
	adds r4, r2, #0
	adds r4, #0x20
.L080B90E2:
	ldr r0, [r6, #0x54]
	adds r1, r5, #0
	bl GmMu_RemoveUnit
	movs r0, #0
	strh r0, [r4, #2]
	ldrb r1, [r4]
	movs r0, #0xfd
	ands r0, r1
	movs r1, #0xfe
	ands r0, r1
	strb r0, [r4]
	adds r4, #4
	adds r5, #1
	cmp r5, #6
	ble .L080B90E2
.L080B9102:
	adds r0, r6, #0
	bl func_080B9028
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9110: .4byte gGmData

	THUMB_FUNC_END func_080B90CC

	THUMB_FUNC_START func_080B9114
func_080B9114: @ 0x080B9114
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, .L080B9140  @ gGmData
	movs r6, #2
	adds r3, r0, #0
	adds r3, #0x30
	movs r5, #2
.L080B9124:
	ldrb r1, [r3]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B9144
	ldr r0, [r4, #0x48]
	adds r0, #0x33
	strb r2, [r0]
	ldr r1, [r4, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	b .L080B914C
	.align 2, 0
.L080B9140: .4byte gGmData
.L080B9144:
	adds r3, #4
	adds r2, #1
	cmp r2, #0x1c
	ble .L080B9124
.L080B914C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9114

	THUMB_FUNC_START GMProc_80B9154
GMProc_80B9154: @ 0x080B9154
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl InitGraphicsForWorldMap
	adds r0, r5, #0
	bl GMProc_80B8E60
	adds r0, r5, #0
	bl GMProc_DeployAllBlueUnits
	movs r0, #5
	bl StartGmScreen
	str r0, [r5, #0x44]
	str r0, [sp]
	movs r0, #5
	movs r1, #0
	movs r2, #3
	movs r3, #0xa
	bl StartGmNodeIconDisplay
	str r0, [r5, #0x48]
	ldr r0, [r5, #0x44]
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0xc
	bl StartGmUnitContainer
	str r0, [r5, #0x4c]
	movs r1, #0x96
	lsls r1, r1, #5
	ldr r3, [r5, #0x44]
	movs r0, #5
	movs r2, #4
	bl StartGmapCursor
	str r0, [r5, #0x50]
	adds r0, r5, #0
	bl StartGmMu
	str r0, [r5, #0x54]
	ldr r4, .L080B9210  @ gGmData
	adds r0, r4, #0
	bl RefreshGmNodeLinks
	adds r0, r5, #0
	bl func_080C368C
	adds r0, r5, #0
	bl func_080B8FEC
	adds r0, r5, #0
	bl func_080B90CC
	ldrb r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B91D2
	adds r0, r5, #0
	bl func_080B9114
.L080B91D2:
	ldr r0, [r5, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #3
	orrs r0, r2
	strb r0, [r1]
	ldr r0, .L080B9214  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080B91FE
	bl ResetGmStoryNode
	ldr r0, [r5, #0x48]
	adds r0, #0x32
	ldrb r2, [r0]
	movs r1, #3
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
.L080B91FE:
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9210: .4byte gGmData
.L080B9214: .4byte gPlaySt

	THUMB_FUNC_END GMProc_80B9154

	THUMB_FUNC_START func_080B9218
func_080B9218: @ 0x080B9218
	push {r4, r5, r6, lr}
	sub sp, #8
	mov r2, sp
	ldr r1, .L080B9260  @ gGmData
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	mov r4, sp
	adds r4, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r4]
	add r2, sp, #4
	ldrh r0, [r1, #2]
	strh r0, [r2]
	mov r3, sp
	adds r3, #6
	ldrh r0, [r1, #4]
	strh r0, [r3]
	mov r0, sp
	ldrh r5, [r0]
	ldrh r0, [r2]
	subs r0, r5, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r6, r1, #0
	cmp r0, #0x1f
	bgt .L080B9268
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	ble .L080B9264
	adds r0, r5, #0
	subs r0, #0x20
	b .L080B9282
	.align 2, 0
.L080B9260: .4byte gGmData
.L080B9264:
	movs r0, #0
	b .L080B9282
.L080B9268:
	cmp r0, #0xd0
	ble .L080B9284
	lsls r1, r5, #0x10
	ldr r0, .L080B927C  @ 0x01BF0000
	cmp r1, r0
	bgt .L080B9280
	adds r0, r5, #0
	subs r0, #0xd0
	b .L080B9282
	.align 2, 0
.L080B927C: .4byte 0x01BF0000
.L080B9280:
	movs r0, #0xf0
.L080B9282:
	strh r0, [r2]
.L080B9284:
	ldrh r4, [r4]
	ldrh r0, [r3]
	subs r0, r4, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	bgt .L080B92A4
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	ble .L080B92A0
	adds r0, r4, #0
	subs r0, #0x20
	b .L080B92BE
.L080B92A0:
	movs r0, #0
	b .L080B92BE
.L080B92A4:
	cmp r0, #0x80
	ble .L080B92C0
	lsls r1, r4, #0x10
	ldr r0, .L080B92B8  @ 0x011F0000
	cmp r1, r0
	bgt .L080B92BC
	adds r0, r4, #0
	subs r0, #0x80
	b .L080B92BE
	.align 2, 0
.L080B92B8: .4byte 0x011F0000
.L080B92BC:
	movs r0, #0xa0
.L080B92BE:
	strh r0, [r3]
.L080B92C0:
	ldrh r0, [r2]
	strh r0, [r6, #2]
	ldrh r0, [r3]
	strh r0, [r6, #4]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9218

	THUMB_FUNC_START func_080B92D0
func_080B92D0: @ 0x080B92D0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r7, .L080B930C  @ gGmData
	ldrb r0, [r7, #0x11]
	cmp r0, r4
	bne .L080B9356
	lsls r0, r4, #2
	adds r0, r0, r7
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080B9344
	lsls r0, r4, #5
	ldr r1, .L080B9310  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq .L080B9344
	adds r0, r4, #0
	bl func_080BCA1C
	cmp r0, #0
	blt .L080B9314
	adds r0, r5, #0
	movs r1, #0x10
	b .L080B934E
	.align 2, 0
.L080B930C: .4byte gGmData
.L080B9310: .4byte gUnknown_082060B0
.L080B9314:
	adds r0, r7, #0
	bl func_080BD014
	adds r3, r0, #0
	ldr r2, .L080B9340  @ gPlaySt
	ldrb r1, [r2, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne .L080B9338
	adds r0, r2, #0
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	cmp r0, #0
	blt .L080B9338
	cmp r3, #2
	beq .L080B93D6
.L080B9338:
	adds r0, r5, #0
	movs r1, #0x12
	b .L080B934E
	.align 2, 0
.L080B9340: .4byte gPlaySt
.L080B9344:
	adds r0, r5, #0
	adds r0, #0x3e
	strb r4, [r0]
	adds r0, r5, #0
	movs r1, #0xe
.L080B934E:
	bl Proc_Goto
.L080B9352:
	movs r0, #1
	b .L080B93D8
.L080B9356:
	movs r0, #0x11
	ldrsb r0, [r7, r0]
	lsls r1, r4, #0x18
	asrs r6, r1, #0x18
	adds r1, r6, #0
	movs r2, #0
	bl func_080BCCFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B938A
	bl func_080BD29C
	adds r1, r0, #0
	cmp r1, #2
	bne .L080B9384
	lsls r0, r4, #2
	adds r0, r0, r7
	adds r0, #0x30
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	bne .L080B9344
.L080B9384:
	adds r0, r5, #0
	movs r1, #6
	b .L080B934E
.L080B938A:
	movs r0, #0x11
	ldrsb r0, [r7, r0]
	adds r1, r6, #0
	movs r2, #1
	bl func_080BCCFC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B93D6
	bl func_080BD29C
	adds r2, r0, #0
	cmp r2, #2
	bne .L080B93CC
	lsls r0, r4, #5
	ldr r1, .L080B93C8  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq .L080B93C0
	lsls r0, r4, #2
	adds r0, r0, r7
	adds r0, #0x30
	ldrb r0, [r0]
	ands r2, r0
	cmp r2, #0
	bne .L080B9344
.L080B93C0:
	adds r0, r5, #0
	movs r1, #6
	b .L080B934E
	.align 2, 0
.L080B93C8: .4byte gUnknown_082060B0
.L080B93CC:
	adds r0, r5, #0
	movs r1, #6
	bl Proc_Goto
	b .L080B9352
.L080B93D6:
	movs r0, #0
.L080B93D8:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B92D0

	THUMB_FUNC_START func_080B93E0
func_080B93E0: @ 0x080B93E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, .L080B9408  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B940C
	movs r0, #2
	mov r8, r0
	adds r1, r7, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	adds r6, r1, #0
	b .L080B9414
	.align 2, 0
.L080B9408: .4byte gKeySt
.L080B940C:
	movs r2, #4
	mov r8, r2
	adds r6, r7, #0
	adds r6, #0x2a
.L080B9414:
	adds r5, r6, #0
	ldrb r1, [r5]
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	ble .L080B9426
	subs r0, r1, #1
	strb r0, [r5]
	b .L080B954A
.L080B9426:
	bl func_080BF294
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B9432
	b .L080B954A
.L080B9432:
	ldr r0, .L080B944C  @ gKeySt
	ldr r3, [r0]
	ldrh r2, [r3, #4]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080B9450
	movs r3, #0xf0
	ands r3, r2
	movs r0, #0xa
	strb r0, [r5]
	b .L080B946E
	.align 2, 0
.L080B944C: .4byte gKeySt
.L080B9450:
	ldrh r0, [r3, #8]
	movs r4, #0xf0
	adds r1, r4, #0
	ands r1, r0
	cmp r1, #0
	beq .L080B9468
	movs r0, #0xa
	strb r0, [r5]
	ldrh r0, [r3, #8]
	adds r3, r4, #0
	ands r3, r0
	b .L080B946E
.L080B9468:
	adds r3, r4, #0
	ands r3, r2
	strb r1, [r6]
.L080B946E:
	cmp r3, #0
	beq .L080B954A
	ldr r2, .L080B94A8  @ gGmData
	ldr r0, [r2, #8]
	asrs r0, r0, #8
	cmp r0, #0
	bge .L080B947E
	adds r0, #0xf
.L080B947E:
	lsls r0, r0, #0xc
	lsrs r1, r0, #0x10
	ldr r0, [r2, #0xc]
	asrs r0, r0, #8
	cmp r0, #0
	bge .L080B948C
	adds r0, #0xf
.L080B948C:
	lsls r0, r0, #0xc
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	adds r4, r6, #0
	movs r0, #0x10
	ands r0, r3
	cmp r0, #0
	beq .L080B94AC
	lsls r0, r2, #0x10
	movs r2, #0x80
	lsls r2, r2, #9
	b .L080B94B8
	.align 2, 0
.L080B94A8: .4byte gGmData
.L080B94AC:
	movs r0, #0x20
	ands r0, r3
	cmp r0, #0
	beq .L080B94BC
	lsls r0, r2, #0x10
	ldr r2, .L080B94CC  @ 0xFFFF0000
.L080B94B8:
	adds r0, r0, r2
	lsrs r2, r0, #0x10
.L080B94BC:
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq .L080B94D0
	lsls r0, r4, #0x10
	movs r3, #0x80
	lsls r3, r3, #9
	b .L080B94DC
	.align 2, 0
.L080B94CC: .4byte 0xFFFF0000
.L080B94D0:
	movs r0, #0x40
	ands r3, r0
	cmp r3, #0
	beq .L080B94E0
	lsls r0, r4, #0x10
	ldr r3, .L080B94EC  @ 0xFFFF0000
.L080B94DC:
	adds r0, r0, r3
	lsrs r4, r0, #0x10
.L080B94E0:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bgt .L080B94F0
	movs r2, #1
	b .L080B94F6
	.align 2, 0
.L080B94EC: .4byte 0xFFFF0000
.L080B94F0:
	cmp r0, #0x1c
	ble .L080B94F6
	movs r2, #0x1c
.L080B94F6:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bgt .L080B9502
	movs r4, #1
	b .L080B9508
.L080B9502:
	cmp r0, #0x12
	ble .L080B9508
	movs r4, #0x12
.L080B9508:
	lsls r0, r2, #0x10
	asrs r5, r0, #0x10
	lsls r4, r4, #0x10
	cmp r1, r0
	bne .L080B9518
	lsls r0, r6, #0x10
	cmp r0, r4
	beq .L080B954A
.L080B9518:
	ldr r0, .L080B9558  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B952A
	movs r0, #0x65
	bl m4aSongNumStart
.L080B952A:
	lsls r0, r5, #4
	adds r0, #8
	lsls r0, r0, #0x10
	asrs r1, r4, #0xc
	adds r1, #8
	lsls r1, r1, #0x10
	lsrs r0, r0, #0x10
	orrs r0, r1
	str r0, [sp, #4]
	str r7, [sp]
	movs r0, #0
	add r1, sp, #4
	mov r2, r8
	movs r3, #0
	bl func_080BF210
.L080B954A:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9558: .4byte gPlaySt

	THUMB_FUNC_END func_080B93E0

	THUMB_FUNC_START func_080B955C
func_080B955C: @ 0x080B955C
	push {r4, r5, r6, lr}
	adds r4, r1, #0
	movs r5, #0
	b .L080B9566
.L080B9564:
	adds r5, #1
.L080B9566:
	cmp r5, #0x1c
	bgt .L080B9574
	adds r0, r5, #0
	bl func_080BBA4C
	cmp r0, r4
	bne .L080B9564
.L080B9574:
	movs r4, #1
	ldr r6, .L080B959C  @ gGmData
.L080B9578:
	adds r0, r5, r4
	cmp r0, #0x1c
	ble .L080B9580
	subs r0, #0x1d
.L080B9580:
	bl func_080BBA4C
	adds r2, r0, #0
	lsls r0, r2, #2
	adds r0, r0, r6
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B95A0
	adds r0, r2, #0
	b .L080B95AA
	.align 2, 0
.L080B959C: .4byte gGmData
.L080B95A0:
	adds r4, #1
	cmp r4, #0x1c
	ble .L080B9578
	movs r0, #1
	negs r0, r0
.L080B95AA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080B955C

	THUMB_FUNC_START func_080B95B0
func_080B95B0: @ 0x080B95B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r0, .L080B9614  @ gGmData
	ldr r1, [r0, #8]
	asrs r1, r1, #8
	mov r8, r1
	ldr r0, [r0, #0xc]
	asrs r7, r0, #8
	movs r5, #0xf0
	lsls r5, r5, #7
	movs r6, #0
	movs r4, #0
.L080B95CC:
	ldr r1, .L080B9614  @ gGmData
	lsls r0, r4, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B9600
	lsls r1, r4, #5
	ldr r0, .L080B9618  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r0, #0x18
	ldrsh r2, [r1, r0]
	movs r0, #0x1a
	ldrsh r3, [r1, r0]
	movs r0, #5
	str r0, [sp]
	mov r0, r8
	adds r1, r7, #0
	bl func_080C0834
	cmp r0, r5
	bge .L080B9600
	adds r6, r4, #0
	adds r5, r0, #0
.L080B9600:
	adds r4, #1
	cmp r4, #0x1c
	ble .L080B95CC
	adds r0, r6, #0
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080B9614: .4byte gGmData
.L080B9618: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080B95B0

	THUMB_FUNC_START func_080B961C
func_080B961C: @ 0x080B961C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r8, r0
	add r2, sp, #8
	lsls r1, r1, #5
	ldr r0, .L080B96D0  @ gUnknown_082060B0
	adds r1, r1, r0
	ldrh r0, [r1, #0x18]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1, #0x1a]
	strh r0, [r2]
	ldr r7, .L080B96D4  @ gGmData
	add r0, sp, #8
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #8
	str r0, [r7, #8]
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #8
	str r0, [r7, #0xc]
	add r0, sp, #8
	movs r4, #0
	ldrsh r0, [r0, r4]
	movs r3, #0
	ldrsh r1, [r2, r3]
	add r5, sp, #0xc
	mov r6, sp
	adds r6, #0xe
	adds r2, r5, #0
	adds r3, r6, #0
	bl GetGmCameraCenteredPosition
	add r2, sp, #0x10
	ldrh r0, [r7, #2]
	strh r0, [r2]
	mov r1, sp
	adds r1, #0x12
	ldrh r0, [r7, #4]
	strh r0, [r1]
	movs r4, #0
	ldrsh r0, [r2, r4]
	movs r2, #0
	ldrsh r1, [r1, r2]
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	movs r4, #4
	str r4, [sp]
	bl func_080C0834
	cmp r0, #0
	bge .L080B9692
	ldr r1, .L080B96D8  @ 0x000001FF
	adds r0, r0, r1
.L080B9692:
	asrs r0, r0, #9
	adds r0, #6
	cmp r0, #0xa
	ble .L080B969C
	movs r0, #0xa
.L080B969C:
	movs r1, #1
	negs r1, r1
	movs r3, #0
	ldrsh r2, [r5, r3]
	movs r4, #0
	ldrsh r3, [r6, r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r4, #0
	str r4, [sp, #4]
	adds r0, r1, #0
	bl StartGmScroll
	strb r4, [r7, #1]
	mov r0, r8
	movs r1, #8
	bl Proc_Goto
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B96D0: .4byte gUnknown_082060B0
.L080B96D4: .4byte gGmData
.L080B96D8: .4byte 0x000001FF

	THUMB_FUNC_END func_080B961C

	THUMB_FUNC_START func_080B96DC
func_080B96DC: @ 0x080B96DC
	push {r4, lr}
	adds r4, r0, #0
	bl FindGmScrollManage
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B96F0
	adds r0, r4, #0
	bl Proc_Break
.L080B96F0:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B96DC

	THUMB_FUNC_START func_080B96F8
func_080B96F8: @ 0x080B96F8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, .L080B9728  @ gGmData
	ldr r5, [r2, #8]
	ldr r6, [r2, #0xc]
	ldr r0, .L080B972C  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r3, #4
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B9736
	ldrb r1, [r2]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080B9730
	movs r0, #5
	negs r0, r0
	ands r0, r1
	b .L080B9734
	.align 2, 0
.L080B9728: .4byte gGmData
.L080B972C: .4byte gKeySt
.L080B9730:
	movs r0, #4
	orrs r0, r1
.L080B9734:
	strb r0, [r2]
.L080B9736:
	ldr r0, [r4, #0x48]
	asrs r1, r5, #8
	asrs r2, r6, #8
	movs r3, #0
	str r3, [sp]
	bl func_080BB628
	adds r1, r0, #0
	cmp r1, #0
	blt .L080B9798
	ldr r0, .L080B9778  @ gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq .L080B9780
	adds r0, r4, #0
	bl func_080B92D0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080B97BC
	ldr r0, .L080B977C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080B97EA
	movs r0, #0x6a
	bl m4aSongNumStart
	b .L080B97EA
	.align 2, 0
.L080B9778: .4byte gKeySt
.L080B977C: .4byte gPlaySt
.L080B9780:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080B97BC
	adds r0, r4, #0
	bl func_080B955C
	adds r1, r0, #0
	cmp r1, #0
	blt .L080B97BC
	b .L080B97AE
.L080B9798:
	ldr r0, .L080B97B8  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080B97BC
	bl func_080B95B0
	adds r1, r0, #0
.L080B97AE:
	adds r0, r4, #0
	bl func_080B961C
	b .L080B97EA
	.align 2, 0
.L080B97B8: .4byte gKeySt
.L080B97BC:
	ldr r0, .L080B97D4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080B97D8
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b .L080B97EA
	.align 2, 0
.L080B97D4: .4byte gKeySt
.L080B97D8:
	adds r0, r4, #0
	bl func_080B93E0
	ldr r0, .L080B97F4  @ gGmData
	str r5, [r0, #8]
	str r6, [r0, #0xc]
	adds r0, r4, #0
	bl func_080B9218
.L080B97EA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B97F4: .4byte gGmData

	THUMB_FUNC_END func_080B96F8

	THUMB_FUNC_START func_080B97F8
func_080B97F8: @ 0x080B97F8
	ldr r1, .L080B9800  @ gGmData
	movs r0, #1
	strb r0, [r1, #1]
	bx lr
	.align 2, 0
.L080B9800: .4byte gGmData

	THUMB_FUNC_END func_080B97F8

	THUMB_FUNC_START func_080B9804
func_080B9804: @ 0x080B9804
	push {lr}
	bl func_080B96F8
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9804

	THUMB_FUNC_START func_080B9810
func_080B9810: @ 0x080B9810
	push {lr}
	bl func_080C1D70
	movs r0, #8
	bl EndEachMarkedProc
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9810

	THUMB_FUNC_START func_080B9820
func_080B9820: @ 0x080B9820
	push {lr}
	bl func_08092194
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9820

	THUMB_FUNC_START func_080B982C
func_080B982C: @ 0x080B982C
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, .L080B9878  @ gDispIo
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9878: .4byte gDispIo

	THUMB_FUNC_END func_080B982C

	THUMB_FUNC_START func_080B987C
func_080B987C: @ 0x080B987C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl LockEachMarkedProc
	ldr r0, .L080B9898  @ gUnknown_08B12D1C
	adds r1, r4, #0
	bl SpawnProcLocking
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B9898: .4byte gUnknown_08B12D1C

	THUMB_FUNC_END func_080B987C

	THUMB_FUNC_START func_080B989C
func_080B989C: @ 0x080B989C
	push {lr}
	movs r0, #8
	bl ReleaseEachMarkedProc
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B989C

	THUMB_FUNC_START func_080B98A8
func_080B98A8: @ 0x080B98A8
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, .L080B98F4  @ gDispIo
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B98F4: .4byte gDispIo

	THUMB_FUNC_END func_080B98A8

	THUMB_FUNC_START func_080B98F8
func_080B98F8: @ 0x080B98F8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl LockEachMarkedProc
	ldr r0, .L080B9914  @ gUnknown_08A2EE00
	adds r1, r4, #0
	bl SpawnProcLocking
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B9914: .4byte gUnknown_08A2EE00

	THUMB_FUNC_END func_080B98F8

	THUMB_FUNC_START func_080B9918
func_080B9918: @ 0x080B9918
	push {lr}
	movs r0, #8
	bl ReleaseEachMarkedProc
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9918

	THUMB_FUNC_START func_080B9924
func_080B9924: @ 0x080B9924
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, .L080B9970  @ gDispIo
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9970: .4byte gDispIo

	THUMB_FUNC_END func_080B9924

	THUMB_FUNC_START func_080B9974
func_080B9974: @ 0x080B9974
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl LockEachMarkedProc
	ldr r0, .L080B9990  @ gUnknown_08A3E8B8
	adds r1, r4, #0
	bl SpawnProcLocking
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080B9990: .4byte gUnknown_08A3E8B8

	THUMB_FUNC_END func_080B9974

	THUMB_FUNC_START func_080B9994
func_080B9994: @ 0x080B9994
	push {lr}
	movs r0, #8
	bl ReleaseEachMarkedProc
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9994

	THUMB_FUNC_START func_080B99A0
func_080B99A0: @ 0x080B99A0
	push {r4, lr}
	ldr r3, [r0, #0x44]
	movs r1, #0x2a
	adds r1, r1, r3
	mov ip, r1
	ldrb r1, [r1]
	movs r4, #1
	orrs r1, r4
	movs r2, #6
	orrs r1, r2
	mov r2, ip
	strb r1, [r2]
	ldr r2, [r3, #0x4c]
	adds r2, #0x31
	ldrb r3, [r2]
	movs r1, #3
	orrs r1, r3
	strb r1, [r2]
	ldr r0, [r0, #0x4c]
	movs r1, #1
	negs r1, r1
	bl MapUnitC_MarkSomething
	ldr r2, .L080B99EC  @ gDispIo
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B99EC: .4byte gDispIo

	THUMB_FUNC_END func_080B99A0

	THUMB_FUNC_START func_080B99F0
func_080B99F0: @ 0x080B99F0
	ldr r2, .L080B9A0C  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080B9A0C: .4byte gDispIo

	THUMB_FUNC_END func_080B99F0

	THUMB_FUNC_START WorldMap_HideEverything
WorldMap_HideEverything: @ 0x080B9A10
	ldr r2, .L080B9A30  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080B9A30: .4byte gDispIo

	THUMB_FUNC_END WorldMap_HideEverything

	THUMB_FUNC_START func_080B9A34
func_080B9A34: @ 0x080B9A34
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x2c]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080B9A52
	movs r0, #0x45
	negs r0, r0
	ands r1, r0
	str r1, [r2, #0x2c]
	movs r0, #4
	movs r1, #0
	bl NewFadeIn
.L080B9A52:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9A34

	THUMB_FUNC_START func_080B9A58
func_080B9A58: @ 0x080B9A58
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x54]
	movs r1, #0
	movs r2, #0
	bl MapMU_80BE108
	ldr r4, .L080B9A8C  @ gGmData
	ldrb r0, [r4, #0x11]
	bl WMLocation_GetChapterId
	ldr r1, .L080B9A90  @ gPlaySt
	movs r2, #0
	strb r0, [r1, #0xe]
	strb r2, [r4, #1]
	ldrb r0, [r4, #0x11]
	bl func_080BCA1C
	adds r1, r0, #0
	movs r0, #0
	adds r2, r5, #0
	bl func_080C07D4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9A8C: .4byte gGmData
.L080B9A90: .4byte gPlaySt

	THUMB_FUNC_END func_080B9A58

	THUMB_FUNC_START func_080B9A94
func_080B9A94: @ 0x080B9A94
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C081C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B9AA8
	adds r0, r4, #0
	bl Proc_Break
.L080B9AA8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9A94

	THUMB_FUNC_START func_080B9AB0
func_080B9AB0: @ 0x080B9AB0
	push {lr}
	movs r0, #4
	bl FadeBgmOut
	ldr r2, .L080B9AE8  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl func_080B895C
	bl func_080C3660
	bl func_080B8694
	pop {r0}
	bx r0
	.align 2, 0
.L080B9AE8: .4byte gDispIo

	THUMB_FUNC_END func_080B9AB0

	THUMB_FUNC_START func_080B9AEC
func_080B9AEC: @ 0x080B9AEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r4, #4
	ldr r6, .L080B9B34  @ gGmData
	movs r0, #0xcc
	adds r0, r0, r6
	mov r8, r0
	adds r5, r6, #0
	adds r5, #0x10
.L080B9B02:
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq .L080B9B20
	ldrb r0, [r6, #0x11]
	ldrb r1, [r5, #0x11]
	cmp r0, r1
	bne .L080B9B20
	subs r0, r4, #4
	mov r1, r8
	strb r0, [r1]
	ldr r0, [r7, #0x54]
	adds r1, r4, #0
	bl GmMu_RemoveUnit
.L080B9B20:
	adds r5, #4
	adds r4, #1
	cmp r4, #6
	ble .L080B9B02
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9B34: .4byte gGmData

	THUMB_FUNC_END func_080B9AEC

	THUMB_FUNC_START WorldMap_InitChapterTransition
WorldMap_InitChapterTransition: @ 0x080B9B38
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	movs r1, #0
	movs r2, #0
	bl MapMU_80BE108
	ldr r5, .L080B9B70  @ gGmData
	ldrb r2, [r5, #0x11]
	lsls r0, r2, #5
	ldr r1, .L080B9B74  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	beq .L080B9B7C
	adds r0, r4, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	bl WMLocation_GetChapterId
	ldr r1, .L080B9B78  @ gPlaySt
	strb r0, [r1, #0xe]
	ldrb r1, [r5]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r5]
	b .L080B9B86
	.align 2, 0
.L080B9B70: .4byte gGmData
.L080B9B74: .4byte gUnknown_082060B0
.L080B9B78: .4byte gPlaySt
.L080B9B7C:
	adds r0, r2, #0
	bl WMLocation_GetChapterId
	ldr r1, .L080B9B9C  @ gPlaySt
	strb r0, [r1, #0xe]
.L080B9B86:
	adds r0, r4, #0
	bl GM_CallChapterWMIntroEvent
	ldr r1, .L080B9BA0  @ gGmData
	movs r0, #0
	strb r0, [r1, #1]
	bl func_080C1AB0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9B9C: .4byte gPlaySt
.L080B9BA0: .4byte gGmData

	THUMB_FUNC_END WorldMap_InitChapterTransition

	THUMB_FUNC_START func_080B9BA4
func_080B9BA4: @ 0x080B9BA4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	bl EventEngineExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B9CA4
	ldr r0, [r6, #0x44]
	ldr r0, [r0, #0x4c]
	bl GMapRoute_80BC2DC
	ldr r0, .L080B9C04  @ gGmData
	ldrb r1, [r0]
	movs r0, #0x80
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne .L080B9C08
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	b .L080B9C26
	.align 2, 0
.L080B9C04: .4byte gGmData
.L080B9C08:
	ldr r2, .L080B9C68  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
.L080B9C26:
	bl func_080B895C
	bl func_080C3660
	bl func_080B8694
	bl func_080C0200
	bl func_080C2460
	bl func_080C1F5C
	ldr r5, .L080B9C6C  @ gGmData
	ldrb r1, [r5]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq .L080B9C70
	movs r0, #1
	bl FadeBgmOut
	movs r0, #1
	bl SoundStuff_80023E0
	ldrb r0, [r5, #0x11]
	adds r2, r6, #0
	adds r2, #0x3e
	strb r0, [r2]
	adds r0, r6, #0
	movs r1, #0xf
	bl Proc_Goto
	b .L080B9CA4
	.align 2, 0
.L080B9C68: .4byte gDispIo
.L080B9C6C: .4byte gGmData
.L080B9C70:
	ldrb r1, [r5, #0x11]
	lsls r1, r1, #5
	ldr r0, .L080B9CAC  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r2, #0x18
	ldrsh r0, [r1, r2]
	movs r2, #0x1a
	ldrsh r1, [r1, r2]
	lsls r2, r0, #8
	str r2, [r5, #8]
	lsls r2, r1, #8
	str r2, [r5, #0xc]
	mov r4, sp
	adds r4, #6
	add r2, sp, #4
	adds r3, r4, #0
	bl GetGmCameraCenteredPosition
	add r0, sp, #4
	ldrh r0, [r0]
	strh r0, [r5, #2]
	ldrh r0, [r4]
	strh r0, [r5, #4]
	adds r0, r6, #0
	bl Proc_Break
.L080B9CA4:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9CAC: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080B9BA4

	THUMB_FUNC_START WorldMap_WaitForChapterIntroEvents
WorldMap_WaitForChapterIntroEvents: @ 0x080B9CB0
	push {r4, lr}
	adds r4, r0, #0
	bl EventEngineExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B9CFA
	ldr r2, .L080B9D00  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl func_080B895C
	bl func_080C3660
	bl func_080B8694
	bl func_080C0200
	bl func_080C2460
	bl func_080C1F5C
	adds r0, r4, #0
	bl Proc_Break
.L080B9CFA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9D00: .4byte gDispIo

	THUMB_FUNC_END WorldMap_WaitForChapterIntroEvents

	THUMB_FUNC_START func_080B9D04
func_080B9D04: @ 0x080B9D04
	ldr r0, .L080B9D10  @ gGmData
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080B9D10: .4byte gGmData

	THUMB_FUNC_END func_080B9D04

	THUMB_FUNC_START func_080B9D14
func_080B9D14: @ 0x080B9D14
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	ldr r3, .L080B9D2C  @ gGmData
	ldrb r1, [r3]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080B9D30
	movs r4, #1
	b .L080B9D96
	.align 2, 0
.L080B9D2C: .4byte gGmData
.L080B9D30:
	ldr r0, .L080B9D44  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080B9D60
	movs r2, #4
	adds r1, r3, #0
	adds r1, #0x10
	b .L080B9D50
	.align 2, 0
.L080B9D44: .4byte gPlaySt
.L080B9D48:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	bgt .L080B9D58
.L080B9D50:
	movs r3, #0x12
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq .L080B9D48
.L080B9D58:
	cmp r2, #7
	bne .L080B9D92
	movs r4, #1
	b .L080B9D96
.L080B9D60:
	ldrb r0, [r3, #0x11]
	lsls r0, r0, #5
	ldr r1, .L080B9D78  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #3
	bne .L080B9D92
	movs r2, #4
	adds r1, r3, #0
	adds r1, #0x10
	b .L080B9D84
	.align 2, 0
.L080B9D78: .4byte gUnknown_082060B0
.L080B9D7C:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	bgt .L080B9D8C
.L080B9D84:
	movs r3, #0x12
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq .L080B9D7C
.L080B9D8C:
	cmp r2, #7
	bne .L080B9D92
	movs r4, #1
.L080B9D92:
	cmp r4, #0
	beq .L080B9DAC
.L080B9D96:
	movs r0, #0
	mov r1, sp
	bl func_080C1A74
	ldr r0, [sp]
	cmp r0, #0
	ble .L080B9DAC
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
.L080B9DAC:
	bl func_080C1AF8
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9D14

	THUMB_FUNC_START func_080B9DB8
func_080B9DB8: @ 0x080B9DB8
	push {lr}
	bl func_080C1ADC
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9DB8

	THUMB_FUNC_START func_080B9DC4
func_080B9DC4: @ 0x080B9DC4
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C1BE0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B9DD8
	adds r0, r4, #0
	bl Proc_Break
.L080B9DD8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9DC4

	THUMB_FUNC_START func_080B9DE0
func_080B9DE0: @ 0x080B9DE0
	push {r4, lr}
	sub sp, #4
	ldr r0, [r0, #0x54]
	mov r4, sp
	adds r4, #2
	movs r1, #0
	mov r2, sp
	adds r3, r4, #0
	bl func_080BE3A0
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	bl func_080C168C
	mov r3, sp
	ldr r1, .L080B9E38  @ gGmData
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #5
	ldr r2, .L080B9E3C  @ gUnknown_082060B0
	adds r0, r0, r2
	ldrh r0, [r0, #0x18]
	strh r0, [r3]
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #5
	adds r0, r0, r2
	ldrh r0, [r0, #0x1a]
	strh r0, [r4]
	mov r0, sp
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #8
	str r0, [r1, #8]
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #8
	str r0, [r1, #0xc]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9E38: .4byte gGmData
.L080B9E3C: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080B9DE0

	THUMB_FUNC_START func_080B9E40
func_080B9E40: @ 0x080B9E40
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C16DC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080B9E5A
	ldr r1, .L080B9E60  @ gGmData
	movs r0, #1
	strb r0, [r1, #1]
	adds r0, r4, #0
	bl Proc_Break
.L080B9E5A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080B9E60: .4byte gGmData

	THUMB_FUNC_END func_080B9E40

	THUMB_FUNC_START func_080B9E64
func_080B9E64: @ 0x080B9E64
	push {lr}
	sub sp, #4
	bl func_080B895C
	bl func_080C3660
	bl func_080B8694
	mov r2, sp
	ldr r1, .L080B9EA0  @ gGmData
	ldrh r0, [r1, #2]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1, #4]
	strh r0, [r2]
	mov r0, sp
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r0, #0x78
	lsls r0, r0, #8
	str r0, [r1, #8]
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, #0x50
	lsls r0, r0, #8
	str r0, [r1, #0xc]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080B9EA0: .4byte gGmData

	THUMB_FUNC_END func_080B9E64

	THUMB_FUNC_START func_080B9EA4
func_080B9EA4: @ 0x080B9EA4
	push {lr}
	sub sp, #4
	ldr r2, .L080B9F04  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	bl FadeBgmOut
	movs r0, #1
	bl SoundStuff_80023E0
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080B9F04: .4byte gDispIo

	THUMB_FUNC_END func_080B9EA4

	THUMB_FUNC_START DoNothing
DoNothing: @ 0x080B9F08
	push {lr}
	bl nullsub_22
	pop {r0}
	bx r0

	THUMB_FUNC_END DoNothing

	THUMB_FUNC_START func_080B9F14
func_080B9F14: @ 0x080B9F14
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl func_080C400C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9F14

	THUMB_FUNC_START func_080B9F24
func_080B9F24: @ 0x080B9F24
	push {lr}
	adds r1, r0, #0
	movs r0, #1
	bl func_080C400C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9F24

	THUMB_FUNC_START func_080B9F34
func_080B9F34: @ 0x080B9F34
	push {lr}
	adds r1, r0, #0
	movs r0, #2
	bl func_080C400C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9F34

	THUMB_FUNC_START func_080B9F44
func_080B9F44: @ 0x080B9F44
	push {lr}
	adds r1, r0, #0
	movs r0, #3
	bl func_080C400C
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9F44

	THUMB_FUNC_START func_080B9F54
func_080B9F54: @ 0x080B9F54
	push {r4, lr}
	ldr r4, .L080B9F68  @ gPlaySt
	ldrb r1, [r4, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080B9F6C
	movs r4, #8
	b .L080B9FAA
	.align 2, 0
.L080B9F68: .4byte gPlaySt
.L080B9F6C:
	ldr r0, .L080B9F90  @ gGmData
	bl func_080BD014
	cmp r0, #0
	blt .L080B9FA8
	ldrb r1, [r4, #0x1b]
	cmp r1, #1
	blt .L080B9F84
	cmp r1, #2
	ble .L080B9F84
	cmp r1, #3
	beq .L080B9F98
.L080B9F84:
	ldr r1, .L080B9F94  @ gUnknown_08A3DD88
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r4, [r0]
	b .L080B9FAA
	.align 2, 0
.L080B9F90: .4byte gGmData
.L080B9F94: .4byte gUnknown_08A3DD88
.L080B9F98:
	ldr r1, .L080B9FA4  @ gUnknown_08A3DD88
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r4, [r0, #2]
	b .L080B9FAA
	.align 2, 0
.L080B9FA4: .4byte gUnknown_08A3DD88
.L080B9FA8:
	movs r4, #4
.L080B9FAA:
	bl GetCurrentBgmSong
	cmp r0, r4
	beq .L080B9FB8
	adds r0, r4, #0
	bl OverrideBgm
.L080B9FB8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080B9F54

	THUMB_FUNC_START func_080B9FC0
func_080B9FC0: @ 0x080B9FC0
	push {lr}
	ldr r0, .L080B9FD0  @ gUnknown_08A3D748
	bl FindProc
	bl func_080B9F54
	pop {r0}
	bx r0
	.align 2, 0
.L080B9FD0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080B9FC0

	THUMB_FUNC_START func_080B9FD4
func_080B9FD4: @ 0x080B9FD4
	push {lr}
	ldr r0, .L080BA000  @ gGmData
	bl func_080BD014
	cmp r0, #0
	bge .L080B9FE2
	movs r0, #0
.L080B9FE2:
	bl WMLocation_GetChapterId
	ldr r2, .L080BA004  @ gPlaySt
	strb r0, [r2, #0xe]
	adds r2, #0x4a
	ldrb r1, [r2]
	movs r0, #0xf
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
.L080BA000: .4byte gGmData
.L080BA004: .4byte gPlaySt

	THUMB_FUNC_END func_080B9FD4

	THUMB_FUNC_START func_080BA008
func_080BA008: @ 0x080BA008
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080BA020  @ gUnknown_08A3D748
	bl FindProc
	str r4, [r0, #0x2c]
	movs r1, #0
	bl Proc_Goto
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA020: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BA008

	THUMB_FUNC_START GM_End
GM_End: @ 0x080BA024
	push {lr}
	ldr r0, .L080BA04C  @ gUnknown_08A20DA4
	bl FindProc
	bl Proc_End
	ldr r0, .L080BA050  @ gUnknown_08A3D748
	bl FindProc
	bl Proc_End
	bl ClearDialogueAndFaces
	bl EndEachSpriteAnimProc
	movs r0, #0
	bl SetupBackgrounds
	pop {r0}
	bx r0
	.align 2, 0
.L080BA04C: .4byte gUnknown_08A20DA4
.L080BA050: .4byte gUnknown_08A3D748

	THUMB_FUNC_END GM_End

	THUMB_FUNC_START func_080BA054
func_080BA054: @ 0x080BA054
	push {lr}
	ldr r0, .L080BA068  @ gUnknown_08A3D748
	bl FindProc
	cmp r0, #0
	beq .L080BA062
	movs r0, #1
.L080BA062:
	pop {r1}
	bx r1
	.align 2, 0
.L080BA068: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BA054

	THUMB_FUNC_START func_080BA06C
func_080BA06C: @ 0x080BA06C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	cmp r0, #0
	ble .L080BA07C
	subs r0, #1
	str r0, [r4, #0x2c]
	b .L080BA0AE
.L080BA07C:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #6
	beq .L080BA08C
	cmp r0, #7
	beq .L080BA09C
	b .L080BA0A8
.L080BA08C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x40]
	ldr r2, [r4, #0x44]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl func_080B86CC
	b .L080BA0A8
.L080BA09C:
	ldr r0, [r4, #0x34]
	ldr r1, [r4, #0x44]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl func_080B8844
.L080BA0A8:
	adds r0, r4, #0
	bl Proc_Break
.L080BA0AE:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BA06C

	THUMB_FUNC_START func_080BA0B4
func_080BA0B4: @ 0x080BA0B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L080BA0F8  @ gUnknown_08A3D748
	bl FindProc
	adds r1, r0, #0
	ldr r0, .L080BA0FC  @ gUnknown_08A3DD08
	bl SpawnProc
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r4, [r1]
	str r6, [r0, #0x34]
	mov r1, r8
	str r1, [r0, #0x40]
	str r7, [r0, #0x38]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x3c]
	ldr r1, [sp, #0x20]
	str r1, [r0, #0x44]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA0F8: .4byte gUnknown_08A3D748
.L080BA0FC: .4byte gUnknown_08A3DD08

	THUMB_FUNC_END func_080BA0B4

	THUMB_FUNC_START func_080BA100
func_080BA100: @ 0x080BA100
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x30]
	lsls r0, r0, #5
	ldr r1, .L080BA194  @ gPal+2
	adds r5, r0, r1
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r1, #0x1f
	mov r9, r1
	movs r1, #0x20
	subs r3, r1, r0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov r8, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov ip, r7
	movs r0, #0xe
	mov sl, r0
.L080BA136:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r7, r9
	ands r1, r7
	mov r0, r8
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, r8
	ands r0, r7
	adds r1, r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, ip
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r4, #2
	adds r5, #2
	movs r7, #1
	negs r7, r7
	add sl, r7
	mov r0, sl
	cmp r0, #0
	bge .L080BA136
	bl EnablePalSync
	ldr r0, [r6, #0x2c]
	cmp r0, #0x20
	bne .L080BA184
	adds r0, r6, #0
	bl Proc_Break
.L080BA184:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA194: .4byte gPal+2

	THUMB_FUNC_END func_080BA100

	THUMB_FUNC_START func_080BA198
func_080BA198: @ 0x080BA198
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, .L080BA1E4  @ gUnknown_08A3D748
	bl FindProc
	adds r1, r0, #0
	ldr r0, .L080BA1E8  @ gUnknown_08A3DD20
	bl SpawnProc
	adds r5, r0, #0
	movs r0, #0x1f
	ands r4, r0
	str r4, [r5, #0x30]
	movs r0, #0
	str r0, [r5, #0x2c]
	ldr r0, .L080BA1EC  @ unit_icon_pal_player
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, .L080BA1F0  @ gPal
	lsls r4, r4, #5
	adds r4, r4, r0
	adds r4, #2
	adds r5, #0x34
	movs r1, #0xe
.L080BA1CE:
	ldrh r0, [r4]
	strh r0, [r5]
	adds r4, #2
	adds r5, #2
	subs r1, #1
	cmp r1, #0
	bge .L080BA1CE
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA1E4: .4byte gUnknown_08A3D748
.L080BA1E8: .4byte gUnknown_08A3DD20
.L080BA1EC: .4byte unit_icon_pal_player
.L080BA1F0: .4byte gPal

	THUMB_FUNC_END func_080BA198

	THUMB_FUNC_START func_080BA1F4
func_080BA1F4: @ 0x080BA1F4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	ldr r0, [r6, #0x30]
	lsls r0, r0, #5
	ldr r1, .L080BA284  @ gPal+2
	adds r5, r0, r1
	adds r4, r6, #0
	adds r4, #0x34
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	movs r1, #0x1f
	mov r9, r1
	adds r3, r0, #0
	movs r2, #0xf8
	lsls r2, r2, #2
	mov r8, r2
	movs r7, #0xf8
	lsls r7, r7, #7
	mov ip, r7
	movs r0, #0xe
	mov sl, r0
.L080BA228:
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	adds r1, r0, #0
	muls r1, r3, r1
	asrs r1, r1, #5
	mov r7, r9
	ands r1, r7
	mov r0, r8
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r7, r8
	ands r0, r7
	adds r1, r1, r0
	mov r0, ip
	ands r0, r2
	muls r0, r3, r0
	asrs r0, r0, #5
	mov r2, ip
	ands r0, r2
	adds r1, r1, r0
	strh r1, [r5]
	adds r4, #2
	adds r5, #2
	movs r7, #1
	negs r7, r7
	add sl, r7
	mov r0, sl
	cmp r0, #0
	bge .L080BA228
	bl EnablePalSync
	ldr r0, [r6, #0x2c]
	cmp r0, #0x20
	bne .L080BA276
	adds r0, r6, #0
	bl Proc_Break
.L080BA276:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA284: .4byte gPal+2

	THUMB_FUNC_END func_080BA1F4

	THUMB_FUNC_START func_080BA288
func_080BA288: @ 0x080BA288
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, .L080BA2D4  @ gUnknown_08A3D748
	bl FindProc
	adds r1, r0, #0
	ldr r0, .L080BA2D8  @ gUnknown_08A3DD38
	bl SpawnProc
	adds r5, r0, #0
	movs r0, #0x1f
	ands r4, r0
	str r4, [r5, #0x30]
	movs r0, #0
	str r0, [r5, #0x2c]
	ldr r0, .L080BA2DC  @ unit_icon_pal_player
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, .L080BA2E0  @ gPal
	lsls r4, r4, #5
	adds r4, r4, r0
	adds r4, #2
	adds r5, #0x34
	movs r1, #0xe
.L080BA2BE:
	ldrh r0, [r4]
	strh r0, [r5]
	adds r4, #2
	adds r5, #2
	subs r1, #1
	cmp r1, #0
	bge .L080BA2BE
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA2D4: .4byte gUnknown_08A3D748
.L080BA2D8: .4byte gUnknown_08A3DD38
.L080BA2DC: .4byte unit_icon_pal_player
.L080BA2E0: .4byte gPal

	THUMB_FUNC_END func_080BA288

	THUMB_FUNC_START GM_Start
GM_Start: @ 0x080BA2E4
	push {lr}
	ldr r0, .L080BA310  @ gUnknown_08A3D748
	movs r1, #3
	bl SpawnProc
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldr r0, .L080BA314  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r2, #4
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BA318
	str r2, [r3, #0x2c]
	b .L080BA330
	.align 2, 0
.L080BA310: .4byte gUnknown_08A3D748
.L080BA314: .4byte gPlaySt
.L080BA318:
	ldr r0, .L080BA328  @ gGmData
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BA32C
	movs r0, #0xc
	b .L080BA32E
	.align 2, 0
.L080BA328: .4byte gGmData
.L080BA32C:
	movs r0, #0x10
.L080BA32E:
	str r0, [r3, #0x2c]
.L080BA330:
	pop {r0}
	bx r0

	THUMB_FUNC_END GM_Start

	THUMB_FUNC_START GM_SetupChapterStuff
GM_SetupChapterStuff: @ 0x080BA334
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r0, #4
	bl FadeBgmOut
	ldr r2, .L080BA360  @ gGmData
	ldrb r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080BA356
	ldr r6, .L080BA364  @ gPlaySt
	ldrb r1, [r6, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080BA368
.L080BA356:
	ldr r0, [r5, #0x2c]
	bl func_080BA008
	b .L080BA3BC
	.align 2, 0
.L080BA360: .4byte gGmData
.L080BA364: .4byte gPlaySt
.L080BA368:
	ldrb r0, [r2, #0x11]
	adds r1, r2, #0
	adds r1, #0xc8
	strb r0, [r1]
	bl GetWmNodeNext
	cmp r0, #0
	blt .L080BA3BC
	bl WMLocation_GetChapterId
	adds r4, r0, #0
	strb r4, [r6, #0xe]
	ldr r6, .L080BA3D0  @ gUnknown_088B39EC
	bl GetChapterInfo
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	cmp r0, #0
	beq .L080BA3C8
	bl ResetGmStoryNode
	ldr r1, [r5, #0x48]
	adds r1, #0x32
	ldrb r2, [r1]
	movs r0, #3
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl GetChapterInfo
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	movs r1, #0
	bl CallEvent
.L080BA3BC:
	adds r0, r5, #0
	bl func_080B8680
	movs r0, #0
	bl StartGMapMuEntry
.L080BA3C8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA3D0: .4byte gUnknown_088B39EC

	THUMB_FUNC_END GM_SetupChapterStuff

	THUMB_FUNC_START GM_CallChapterWMIntroEvent
GM_CallChapterWMIntroEvent: @ 0x080BA3D4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, .L080BA41C  @ gUnknown_088B3AD8
	ldr r4, .L080BA420  @ gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	cmp r0, #0
	beq .L080BA416
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x75
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r0, [r0]
	movs r1, #0
	bl CallEvent
	adds r0, r5, #0
	bl func_080B8680
	movs r0, #0
	bl StartGMapMuEntry
.L080BA416:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA41C: .4byte gUnknown_088B3AD8
.L080BA420: .4byte gPlaySt

	THUMB_FUNC_END GM_CallChapterWMIntroEvent

	THUMB_FUNC_START func_080BA424
func_080BA424: @ 0x080BA424
	push {r4, lr}
	bl func_08002AC8
	ldr r4, .L080BA454  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x4c]
	bl GMapRoute_80BC2DC
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #3
	orrs r0, r2
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA454: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BA424

	THUMB_FUNC_START func_080BA458
func_080BA458: @ 0x080BA458
	push {r4, r5, r6, lr}
	ldr r4, .L080BA48C  @ gBg3Tm
	movs r3, #0
	movs r1, #0
	movs r2, #0x90
	lsls r2, r2, #8
	adds r6, r2, #0
.L080BA466:
	adds r5, r1, #1
	movs r2, #0x1f
.L080BA46A:
	adds r1, r3, #0
	orrs r1, r6
	strh r1, [r4]
	adds r1, r3, #1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bge .L080BA46A
	adds r1, r5, #0
	cmp r1, #0x1f
	ble .L080BA466
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080BA48C: .4byte gBg3Tm

	THUMB_FUNC_END func_080BA458

	THUMB_FUNC_START func_080BA490
func_080BA490: @ 0x080BA490
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, .L080BA4CC  @ 0x06008000
	movs r5, #0
	movs r4, #0x1f
.L080BA49A:
	ldr r0, [r7, #0x3c]
	adds r0, r0, r5
	adds r1, r6, #0
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r6, r0
	movs r0, #0xf0
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge .L080BA49A
	bl func_080BA458
	movs r0, #8
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA4CC: .4byte 0x06008000

	THUMB_FUNC_END func_080BA490

	THUMB_FUNC_START func_080BA4D0
func_080BA4D0: @ 0x080BA4D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	ldr r1, [r0, #0x40]
	str r1, [sp]
	ldr r3, [r0, #0x44]
	adds r5, r0, #0
	adds r5, #0x2e
	movs r2, #0
	ldrsb r2, [r5, r2]
	lsls r2, r2, #5
	adds r4, r0, #0
	adds r4, #0x2d
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r2, r2, r0
	adds r3, r3, r2
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BA588
	movs r1, #0
	str r5, [sp, #4]
	mov sl, r4
	movs r2, #0x1f
	mov r9, r2
.L080BA512:
	adds r5, r3, #0
	ldr r2, [sp, #4]
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r0, r1, r0
	mov r2, r9
	ands r0, r2
	movs r6, #0
	movs r2, #0x20
	adds r2, r2, r5
	mov r8, r2
	adds r1, #1
	mov ip, r1
	lsls r0, r0, #6
	ldr r1, [sp]
	adds r7, r0, r1
.L080BA532:
	lsls r1, r6, #1
	mov r2, sl
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r4, r1, r0
	mov r0, r9
	ands r4, r0
	lsls r3, r4, #1
	adds r3, r3, r7
	ldrh r0, [r3]
	ldr r1, .L080BA584  @ 0x00000FFF
	ands r1, r0
	ldrb r2, [r5]
	movs r0, #0xf0
	ands r0, r2
	adds r0, #0x90
	lsls r0, r0, #8
	orrs r1, r0
	strh r1, [r3]
	adds r5, #1
	adds r2, r4, #1
	mov r1, r9
	ands r2, r1
	lsls r2, r2, #1
	adds r2, r2, r7
	ldrh r0, [r2]
	ldr r1, .L080BA584  @ 0x00000FFF
	ands r1, r0
	ldrb r0, [r5]
	adds r0, #9
	lsls r0, r0, #0xc
	orrs r1, r0
	strh r1, [r2]
	adds r6, #1
	cmp r6, #0xf
	ble .L080BA532
	mov r3, r8
	mov r1, ip
	cmp r1, #0x15
	ble .L080BA512
	b .L080BA602
	.align 2, 0
.L080BA584: .4byte 0x00000FFF
.L080BA588:
	movs r1, #0
	str r5, [sp, #4]
	mov sl, r4
	movs r2, #0x1f
	mov r9, r2
.L080BA592:
	adds r5, r3, #0
	ldr r2, [sp, #4]
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r0, r1, r0
	mov r2, r9
	ands r0, r2
	movs r6, #0
	movs r2, #0x20
	adds r2, r2, r5
	mov r8, r2
	adds r1, #1
	mov ip, r1
	lsls r0, r0, #6
	ldr r1, [sp]
	adds r7, r0, r1
.L080BA5B2:
	lsls r1, r6, #1
	mov r2, sl
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r4, r1, r0
	mov r0, r9
	ands r4, r0
	lsls r2, r4, #1
	adds r2, r2, r7
	ldrh r0, [r2]
	ldr r1, .L080BA618  @ 0x00000FFF
	ands r1, r0
	ldrb r0, [r5]
	adds r0, #9
	lsls r0, r0, #0xc
	orrs r1, r0
	strh r1, [r2]
	adds r2, r4, #1
	mov r1, r9
	ands r2, r1
	lsls r2, r2, #1
	adds r2, r2, r7
	ldrh r0, [r2]
	ldr r1, .L080BA618  @ 0x00000FFF
	ands r1, r0
	ldrb r3, [r5]
	movs r0, #0xf0
	ands r0, r3
	adds r0, #0x90
	lsls r0, r0, #8
	orrs r1, r0
	strh r1, [r2]
	adds r5, #1
	adds r6, #1
	cmp r6, #0xf
	ble .L080BA5B2
	mov r3, r8
	mov r1, ip
	cmp r1, #0x15
	ble .L080BA592
.L080BA602:
	movs r0, #8
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA618: .4byte 0x00000FFF

	THUMB_FUNC_END func_080BA4D0

	THUMB_FUNC_START GMapScreenVSync_OnInit
GMapScreenVSync_OnInit: @ 0x080BA61C
	movs r1, #0
	strh r1, [r0, #0x38]
	adds r0, #0x40
	strh r1, [r0]
	bx lr

	THUMB_FUNC_END GMapScreenVSync_OnInit

	THUMB_FUNC_START GMapScreenVSync_OnUpdate
GMapScreenVSync_OnUpdate: @ 0x080BA628
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	movs r1, #0x38
	ldrsh r0, [r6, r1]
	cmp r0, #0
	beq .L080BA6C8
	movs r2, #0
	cmp r2, r0
	bge .L080BA6C4
.L080BA642:
	lsls r1, r2, #3
	ldr r0, [r6, #0x3c]
	adds r4, r0, r1
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #3
	mov r9, r0
	ldrb r0, [r4, #2]
	movs r1, #0x1f
	ands r1, r0
	movs r0, #4
	ldrsb r0, [r4, r0]
	lsls r0, r0, #5
	mov r8, r0
	movs r3, #0
	movs r0, #5
	ldrsb r0, [r4, r0]
	adds r2, #1
	mov sl, r2
	cmp r3, r0
	bge .L080BA6BA
	lsls r0, r1, #5
	ldr r1, .L080BA6D8  @ 0x06008000
	adds r7, r0, r1
.L080BA672:
	movs r2, #3
	ldrsb r2, [r4, r2]
	lsls r0, r3, #0x18
	asrs r5, r0, #0x18
	adds r2, r2, r5
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	ldrsb r1, [r4, r1]
	adds r1, r1, r5
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #7
	ldr r1, [r6, #0x2c]
	adds r1, r1, r0
	mov r3, r9
	lsls r0, r3, #2
	adds r0, r1, r0
	lsls r2, r2, #0xa
	adds r1, r2, r7
	mov r2, r8
	cmp r2, #0
	bge .L080BA6A2
	adds r2, #3
.L080BA6A2:
	lsls r2, r2, #9
	lsrs r2, r2, #0xb
	bl CpuFastSet
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #5
	ldrsb r1, [r4, r1]
	cmp r0, r1
	blt .L080BA672
.L080BA6BA:
	mov r2, sl
	movs r1, #0x38
	ldrsh r0, [r6, r1]
	cmp r2, r0
	blt .L080BA642
.L080BA6C4:
	movs r0, #0
	strh r0, [r6, #0x38]
.L080BA6C8:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA6D8: .4byte 0x06008000

	THUMB_FUNC_END GMapScreenVSync_OnUpdate

	THUMB_FUNC_START func_080BA6DC
func_080BA6DC: @ 0x080BA6DC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r1, #0x38
	ldrsh r0, [r4, r1]
	cmp r0, #7
	bgt .L080BA70E
	adds r1, r0, #0
	lsls r1, r1, #3
	ldr r0, [r4, #0x3c]
	adds r0, r0, r1
	strb r5, [r0]
	strb r2, [r0, #1]
	strb r3, [r0, #2]
	ldr r1, [sp, #0xc]
	strb r1, [r0, #3]
	ldr r1, [sp, #0x10]
	strb r1, [r0, #4]
	ldr r1, [sp, #0x14]
	strb r1, [r0, #5]
	ldrh r0, [r4, #0x38]
	adds r0, #1
	strh r0, [r4, #0x38]
	movs r0, #0
	b .L080BA710
.L080BA70E:
	movs r0, #1
.L080BA710:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BA6DC

	THUMB_FUNC_START StartGMapScreenVSync
StartGMapScreenVSync: @ 0x080BA718
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, .L080BA74C  @ gUnknown_08A3DDF4
	movs r1, #0
	bl SpawnProc
	adds r2, r0, #0
	cmp r2, #0
	beq .L080BA750
	str r4, [r2, #0x2c]
	str r5, [r2, #0x30]
	str r6, [r2, #0x34]
	movs r0, #0
	strh r0, [r2, #0x38]
	str r7, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x40
	strh r0, [r1]
	ldr r0, [sp, #0x14]
	str r0, [r2, #0x44]
	adds r0, r2, #0
	b .L080BA752
	.align 2, 0
.L080BA74C: .4byte gUnknown_08A3DDF4
.L080BA750:
	movs r0, #0
.L080BA752:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END StartGMapScreenVSync

	THUMB_FUNC_START GMapScreen_OnEnd
GMapScreen_OnEnd: @ 0x080BA758
	push {lr}
	ldr r0, [r0, #0x48]
	bl Proc_End
	pop {r0}
	bx r0

	THUMB_FUNC_END GMapScreen_OnEnd

	THUMB_FUNC_START GMapScreen_Init
GMapScreen_Init: @ 0x080BA764
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
	movs r4, #0
	strh r0, [r6, #0x36]
	strh r0, [r6, #0x34]
	strh r0, [r6, #0x3a]
	strh r0, [r6, #0x38]
	ldr r0, .L080BA7FC  @ gUnknown_08A83364
	str r0, [r6, #0x3c]
	movs r0, #3
	bl GetBgTilemap
	str r0, [r6, #0x40]
	ldr r0, .L080BA800  @ gUnknown_08A96064
	ldr r5, .L080BA804  @ gUnknown_020087A0
	adds r1, r5, #0
	bl Decompress
	str r5, [r6, #0x44]
	adds r0, r6, #0
	adds r0, #0x2c
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #3
	strb r4, [r0]
	subs r0, #1
	strb r4, [r0]
	ldr r0, .L080BA808  @ gUnknown_08A95FE4
	movs r1, #0x90
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r0, .L080BA80C  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	ldr r0, [r6, #0x3c]
	ldr r1, [r6, #0x40]
	ldr r2, [r6, #0x44]
	ldr r3, .L080BA810  @ gUnknown_03001DA8
	ldr r4, .L080BA814  @ gUnknown_03001DE8
	str r4, [sp]
	bl StartGMapScreenVSync
	str r0, [r6, #0x48]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BA7FC: .4byte gUnknown_08A83364
.L080BA800: .4byte gUnknown_08A96064
.L080BA804: .4byte gUnknown_020087A0
.L080BA808: .4byte gUnknown_08A95FE4
.L080BA80C: .4byte gBg3Tm
.L080BA810: .4byte gUnknown_03001DA8
.L080BA814: .4byte gUnknown_03001DE8

	THUMB_FUNC_END GMapScreen_Init

	THUMB_FUNC_START func_080BA818
func_080BA818: @ 0x080BA818
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	mov r8, r1
	adds r6, r2, #0
	mov r0, r8
	movs r1, #0x3c
	bl __modsi3
	adds r7, r0, #0
	adds r0, r6, #0
	movs r1, #0x28
	bl __modsi3
	mov r9, r0
	adds r0, r7, #0
	adds r0, #0x20
	cmp r0, #0x20
	ble .L080BA878
	movs r5, #0x20
	subs r4, r5, r7
	str r6, [sp]
	str r4, [sp, #4]
	movs r0, #0x16
	str r0, [sp, #8]
	mov r0, sl
	adds r1, r7, #0
	mov r2, r9
	mov r3, r8
	bl func_080BA6DC
	adds r1, r7, r4
	mov r0, r8
	adds r3, r0, r4
	str r6, [sp]
	subs r5, r5, r4
	str r5, [sp, #4]
	movs r0, #0x16
	str r0, [sp, #8]
	mov r0, sl
	mov r2, r9
	bl func_080BA6DC
	b .L080BA88E
.L080BA878:
	str r6, [sp]
	movs r0, #0x20
	str r0, [sp, #4]
	movs r0, #0x16
	str r0, [sp, #8]
	mov r0, sl
	adds r1, r7, #0
	mov r2, r9
	mov r3, r8
	bl func_080BA6DC
.L080BA88E:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BA818

	THUMB_FUNC_START func_080BA8A0
func_080BA8A0: @ 0x080BA8A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r7, r0, #0
	adds r5, r7, #0
	adds r5, #0x2b
	adds r4, r7, #0
	adds r4, #0x2d
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r1, r0
	beq .L080BA9A6
	adds r0, r7, #0
	bl func_080BA4D0
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r0, #0
	ldrsb r0, [r5, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt .L080BA8DC
	cmp r1, #1
	bgt .L080BA8E2
	b .L080BA90A
.L080BA8DC:
	subs r0, r0, r2
	cmp r0, #1
	ble .L080BA90A
.L080BA8E2:
	ldr r0, [r7, #0x48]
	adds r4, r7, #0
	adds r4, #0x2d
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r5, r7, #0
	adds r5, #0x2e
	movs r2, #0
	ldrsb r2, [r5, r2]
	bl func_080BA818
	ldrb r0, [r4]
	adds r1, r7, #0
	adds r1, #0x2b
	strb r0, [r1]
	ldrb r1, [r5]
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	b .L080BAAEE
.L080BA90A:
	adds r2, r7, #0
	adds r2, #0x2d
	adds r0, r7, #0
	adds r0, #0x2b
	movs r3, #0
	ldrsb r3, [r2, r3]
	movs r1, #0
	ldrsb r1, [r0, r1]
	mov sl, r0
	mov r8, r2
	cmp r3, r1
	ble .L080BA938
	adds r0, r3, #0
	adds r0, #0x1e
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x3c
	bl __modsi3
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	b .L080BA944
.L080BA938:
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r4, r6, #0
.L080BA944:
	adds r0, r7, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x18
	asrs r0, r0, #8
	lsrs r5, r0, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, #0
	adds r0, #0x15
	cmp r0, #0x27
	bgt .L080BA96A
	movs r2, #0x15
	mov r9, r2
	b .L080BA974
.L080BA96A:
	movs r0, #0x28
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
.L080BA974:
	ldr r0, [r7, #0x48]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	lsls r3, r4, #0x10
	asrs r3, r3, #0x10
	adds r4, r7, #0
	adds r4, #0x2e
	ldrb r4, [r4]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	str r4, [sp]
	movs r4, #1
	str r4, [sp, #4]
	mov r5, r9
	lsls r4, r5, #0x10
	asrs r4, r4, #0x10
	str r4, [sp, #8]
	bl func_080BA6DC
	mov r1, r8
	ldrb r0, [r1]
	mov r2, sl
	strb r0, [r2]
.L080BA9A6:
	adds r2, r7, #0
	adds r2, #0x2c
	adds r0, r7, #0
	adds r0, #0x2e
	movs r3, #0
	ldrsb r3, [r2, r3]
	movs r1, #0
	ldrsb r1, [r0, r1]
	str r0, [sp, #0x10]
	str r2, [sp, #0xc]
	cmp r3, r1
	bne .L080BA9C0
	b .L080BAAEE
.L080BA9C0:
	adds r0, r7, #0
	bl func_080BA4D0
	ldr r3, [sp, #0x10]
	movs r2, #0
	ldrsb r2, [r3, r2]
	ldr r4, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt .L080BA9DE
	cmp r1, #1
	bgt .L080BA9E4
	b .L080BAA08
.L080BA9DE:
	subs r0, r0, r2
	cmp r0, #1
	ble .L080BAA08
.L080BA9E4:
	ldr r0, [r7, #0x48]
	adds r4, r7, #0
	adds r4, #0x2d
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r5, [sp, #0x10]
	movs r2, #0
	ldrsb r2, [r5, r2]
	bl func_080BA818
	ldrb r1, [r4]
	adds r0, r7, #0
	adds r0, #0x2b
	strb r1, [r0]
	ldrb r0, [r5]
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	b .L080BAAEE
.L080BAA08:
	ldr r2, [sp, #0x10]
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldr r3, [sp, #0xc]
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r1, r0
	ble .L080BAA30
	adds r0, r1, #0
	adds r0, #0x14
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	mov r9, r4
	asrs r0, r0, #0x10
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	b .L080BAA3C
.L080BAA30:
	ldr r5, [sp, #0x10]
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r9, r5
.L080BAA3C:
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	cmp r1, #0
	bge .L080BAA4C
	adds r0, #0x1f
.L080BAA4C:
	asrs r0, r0, #5
	lsls r0, r0, #5
	subs r0, r1, r0
	lsls r0, r0, #0x18
	asrs r0, r0, #8
	lsrs r4, r0, #0x10
	adds r0, r1, #0
	movs r1, #0x3c
	bl __modsi3
	lsls r0, r0, #0x18
	asrs r0, r0, #8
	lsrs r6, r0, #0x10
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	mov sl, r0
	cmp r0, #0
	bgt .L080BAA92
	ldr r0, [r7, #0x48]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	mov r4, r9
	lsls r3, r4, #0x10
	asrs r3, r3, #0x10
	str r3, [sp]
	movs r3, #0x1f
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	mov r3, sl
	bl func_080BA6DC
	b .L080BAAE6
.L080BAA92:
	movs r4, #0x20
	mov r0, sl
	subs r4, r4, r0
	ldr r0, [r7, #0x48]
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	lsls r5, r5, #0x10
	mov r8, r5
	mov r1, r8
	asrs r1, r1, #0x10
	mov r8, r1
	mov r2, r9
	lsls r5, r2, #0x10
	asrs r5, r5, #0x10
	str r5, [sp]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	str r4, [sp, #4]
	movs r3, #1
	mov r9, r3
	str r3, [sp, #8]
	adds r1, r6, #0
	mov r2, r8
	mov r3, sl
	bl func_080BA6DC
	movs r1, #0x1f
	subs r1, r1, r4
	ldr r0, [r7, #0x48]
	adds r6, r6, r4
	add r4, sl
	str r5, [sp]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	mov r5, r9
	str r5, [sp, #8]
	adds r1, r6, #0
	mov r2, r8
	adds r3, r4, #0
	bl func_080BA6DC
.L080BAAE6:
	ldr r1, [sp, #0x10]
	ldrb r0, [r1]
	ldr r2, [sp, #0xc]
	strb r0, [r2]
.L080BAAEE:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BA8A0

	THUMB_FUNC_START func_080BAB00
func_080BAB00: @ 0x080BAB00
	ldr r1, .L080BAB08  @ gUnknown_03001E30
	movs r0, #0
	strb r0, [r1]
	bx lr
	.align 2, 0
.L080BAB08: .4byte gUnknown_03001E30

	THUMB_FUNC_END func_080BAB00

	THUMB_FUNC_START func_080BAB0C
func_080BAB0C: @ 0x080BAB0C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BABE6
	ldr r0, .L080BAB34  @ gGmData
	ldrh r1, [r0, #2]
	strh r1, [r4, #0x34]
	ldrh r0, [r0, #4]
	strh r0, [r4, #0x36]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0
	bge .L080BAB38
	movs r0, #0
	b .L080BAB3E
	.align 2, 0
.L080BAB34: .4byte gGmData
.L080BAB38:
	cmp r1, #0xf0
	ble .L080BAB40
	movs r0, #0xf0
.L080BAB3E:
	strh r0, [r4, #0x34]
.L080BAB40:
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge .L080BAB4C
	movs r0, #0
	strh r0, [r4, #0x36]
.L080BAB4C:
	movs r1, #0x34
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge .L080BAB56
	adds r0, #7
.L080BAB56:
	asrs r0, r0, #3
	adds r7, r4, #0
	adds r7, #0x2d
	strb r0, [r7]
	movs r1, #0x36
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge .L080BAB68
	adds r0, #7
.L080BAB68:
	asrs r0, r0, #3
	adds r6, r4, #0
	adds r6, #0x2e
	strb r0, [r6]
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r1, [r5]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080BAB92
	ldr r0, .L080BABEC  @ gUnknown_08A95FE4
	movs r1, #0x90
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	ldrb r1, [r5]
	movs r0, #0xfb
	ands r0, r1
	strb r0, [r5]
.L080BAB92:
	ldrb r1, [r5]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BABB2
	ldr r0, [r4, #0x48]
	movs r1, #0
	ldrsb r1, [r7, r1]
	movs r2, #0
	ldrsb r2, [r6, r2]
	bl func_080BA818
	ldrb r1, [r5]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r5]
.L080BABB2:
	ldrb r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BABCE
	bl func_080BA458
	adds r0, r4, #0
	bl func_080BA4D0
	ldrb r1, [r5]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r5]
.L080BABCE:
	adds r0, r4, #0
	bl func_080BA8A0
	ldrh r1, [r4, #0x34]
	ldrh r2, [r4, #0x36]
	movs r0, #3
	bl SetBgOffset
	ldrh r0, [r4, #0x34]
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x36]
	strh r0, [r4, #0x3a]
.L080BABE6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BABEC: .4byte gUnknown_08A95FE4

	THUMB_FUNC_END func_080BAB0C

	THUMB_FUNC_START StartGmScreen
StartGmScreen: @ 0x080BABF0
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, .L080BAC14  @ gUnknown_08A3DE84
	bl SpawnProc
	adds r4, r0, #0
	ldr r1, .L080BAC18  @ gUnknown_03005324
	movs r2, #0xa0
	lsls r2, r2, #7
	movs r3, #0xe
	bl StartGMapRoute
	str r0, [r4, #0x4c]
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080BAC14: .4byte gUnknown_08A3DE84
.L080BAC18: .4byte gUnknown_03005324

.equ gMMSDataTable, unit_icon_move_table

	THUMB_FUNC_END StartGmScreen

	THUMB_FUNC_START GetGmMovingUnitSpriteImg
GetGmMovingUnitSpriteImg: @ 0x080BAC1C
	lsls r0, r0, #0x10
	ldr r1, .L080BAC2C  @ gMMSDataTable
	lsrs r0, r0, #0xd
	subs r0, #8
	adds r0, r0, r1
	ldr r0, [r0]
	bx lr
	.align 2, 0
.L080BAC2C: .4byte gMMSDataTable

	THUMB_FUNC_END GetGmMovingUnitSpriteImg

	THUMB_FUNC_START GetGmMovingUnitSpriteApData
GetGmMovingUnitSpriteApData: @ 0x080BAC30
	lsls r0, r0, #0x10
	ldr r1, .L080BAC40  @ gMMSDataTable
	lsrs r0, r0, #0xd
	adds r1, r1, r0
	subs r1, #4
	ldr r0, [r1]
	bx lr
	.align 2, 0
.L080BAC40: .4byte gMMSDataTable

	THUMB_FUNC_END GetGmMovingUnitSpriteApData

	THUMB_FUNC_START GetGmMovingUnitSpriteImgBuffer
GetGmMovingUnitSpriteImgBuffer: @ 0x080BAC44
	adds r1, r0, #0
	lsls r0, r1, #4
	adds r0, r0, r1
	lsls r0, r0, #9
	ldr r1, .L080BAC54  @ gUnknown_0200AF00
	adds r0, r0, r1
	bx lr
	.align 2, 0
.L080BAC54: .4byte gUnknown_0200AF00

	THUMB_FUNC_END GetGmMovingUnitSpriteImgBuffer

	THUMB_FUNC_START GmUnit_OnEnd
GmUnit_OnEnd: @ 0x080BAC58
	push {lr}
	ldr r0, [r0, #0x40]
	bl EndSpriteAnim
	pop {r0}
	bx r0

	THUMB_FUNC_END GmUnit_OnEnd

	THUMB_FUNC_START GmUnit_OnInit
GmUnit_OnInit: @ 0x080BAC64
	movs r2, #0
	strh r2, [r0, #0x2a]
	adds r3, r0, #0
	adds r3, #0x37
	movs r1, #4
	strb r1, [r3]
	strh r2, [r0, #0x3e]
	strh r2, [r0, #0x3c]
	bx lr

	THUMB_FUNC_END GmUnit_OnInit

	THUMB_FUNC_START GmUnit_OnLoop
GmUnit_OnLoop: @ 0x080BAC78
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldrh r1, [r7, #0x2a]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080BAC90
	b .L080BADC2
.L080BAC90:
	ldr r0, .L080BACAC  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080BACB0
	mov r4, sp
	adds r4, #0xa
	add r0, sp, #8
	adds r1, r4, #0
	bl GetWMDisplayPosition
	b .L080BACC0
	.align 2, 0
.L080BACAC: .4byte gGmData
.L080BACB0:
	add r1, sp, #8
	ldr r2, [r7, #0x14]
	ldrh r0, [r2, #0x34]
	strh r0, [r1]
	adds r1, #2
	ldrh r0, [r2, #0x36]
	strh r0, [r1]
	adds r4, r1, #0
.L080BACC0:
	add r1, sp, #8
	ldrh r0, [r7, #0x3c]
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldrh r0, [r7, #0x3e]
	ldrh r1, [r4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xdf
	bhi .L080BADC2
	lsls r0, r3, #0x10
	asrs r2, r0, #0x10
	movs r3, #0x80
	lsls r3, r3, #0xd
	adds r0, r0, r3
	ldr r1, .L080BAD6C  @ 0x010F0000
	cmp r0, r1
	bhi .L080BADC2
	ldr r0, .L080BAD70  @ 0x000001FF
	mov r8, r0
	mov r1, r8
	ands r1, r2
	mov r8, r1
	mov r3, r8
	movs r2, #0xff
	mov r9, r2
	mov r0, r9
	ands r0, r4
	mov r9, r0
	adds r0, r7, #0
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #4
	bne .L080BAD7C
	ldr r6, .L080BAD74  @ gUnknown_08205F7C
	adds r5, r7, #0
	adds r5, #0x34
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	ldr r1, [r7, #0x30]
	lsls r1, r1, #5
	ldr r2, .L080BAD78  @ 0x06010000
	adds r1, r1, r2
	bl func_080270DC
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r0, [r0]
	movs r1, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	ldr r4, [r7, #0x30]
	movs r0, #0
	ldrsb r0, [r5, r0]
	adds r0, r0, r6
	adds r4, r4, r1
	ldrb r0, [r0]
	adds r4, r4, r0
	ldrh r0, [r7, #0x2e]
	adds r4, r4, r0
	ldrh r0, [r7, #0x38]
	ldrh r1, [r7, #0x2c]
	mov r2, r8
	mov r3, r9
	str r4, [sp]
	ldrh r5, [r7, #0x2a]
	movs r4, #2
	ands r4, r5
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r4, [sp, #4]
	bl func_08027F28
	b .L080BADC2
	.align 2, 0
.L080BAD6C: .4byte 0x010F0000
.L080BAD70: .4byte 0x000001FF
.L080BAD74: .4byte gUnknown_08205F7C
.L080BAD78: .4byte 0x06010000
.L080BAD7C:
	ldrh r2, [r7, #0x2a]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080BAD9A
	movs r4, #0x80
	lsls r4, r4, #3
	adds r1, r4, #0
	mov r4, r9
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
.L080BAD9A:
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq .L080BADB2
	ldr r0, [r7, #0x40]
	adds r0, #0x20
	movs r1, #1
	strb r1, [r0]
	ldrh r1, [r7, #0x2a]
	ldr r0, .L080BADD0  @ 0x0000FFFB
	ands r0, r1
	strh r0, [r7, #0x2a]
.L080BADB2:
	ldr r0, [r7, #0x40]
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	mov r3, r9
	lsls r2, r3, #0x10
	asrs r2, r2, #0x10
	bl DisplaySpriteAnim
.L080BADC2:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BADD0: .4byte 0x0000FFFB

	THUMB_FUNC_END GmUnit_OnLoop

	THUMB_FUNC_START GetGmFactionPaletteId
GetGmFactionPaletteId: @ 0x080BADD4
	push {lr}
	cmp r0, #1
	beq .L080BADE6
	cmp r0, #1
	ble .L080BADE2
	cmp r0, #2
	beq .L080BADEA
.L080BADE2:
	movs r0, #0xc
	b .L080BADEC
.L080BADE6:
	movs r0, #0xd
	b .L080BADEC
.L080BADEA:
	movs r0, #0xe
.L080BADEC:
	pop {r1}
	bx r1

	THUMB_FUNC_END GetGmFactionPaletteId

	THUMB_FUNC_START StartGmUnit
StartGmUnit: @ 0x080BADF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r9, r0
	adds r4, r2, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	movs r7, #0
	ldr r0, [r0, #0x34]
	cmp r0, #0
	beq .L080BAE1E
	mov r1, r9
	adds r1, #0x34
.L080BAE10:
	adds r1, #4
	adds r7, #1
	cmp r7, #6
	bgt .L080BAE1E
	ldr r0, [r1]
	cmp r0, #0
	bne .L080BAE10
.L080BAE1E:
	cmp r7, #7
	bne .L080BAE28
	movs r0, #1
	negs r0, r0
	b .L080BAEFA
.L080BAE28:
	mov r0, r9
	ldr r1, [r0, #0x14]
	ldr r0, .L080BAE40  @ gUnknown_08A3DECC
	bl SpawnProc
	adds r5, r0, #0
	cmp r5, #0
	bne .L080BAE44
	movs r0, #2
	negs r0, r0
	b .L080BAEFA
	.align 2, 0
.L080BAE40: .4byte gUnknown_08A3DECC
.L080BAE44:
	movs r0, #0x80
	lsls r0, r0, #4
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	adds r0, #0x35
	strb r4, [r0]
	ldrb r0, [r0]
	bl GetGmFactionPaletteId
	movs r1, #0x36
	adds r1, r1, r5
	mov sl, r1
	strb r0, [r1]
	adds r4, r5, #0
	adds r4, #0x34
	strb r7, [r4]
	mov r0, r8
	strh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	mov r0, r8
	bl GetUnitSpriteByJid
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r2, .L080BAEEC  @ gUnknown_08205F7C
	adds r2, r1, r2
	ldrb r2, [r2]
	bl SMS_SomethingGmapUnit
	movs r0, #8
	strh r0, [r5, #0x2c]
	mov r0, r8
	bl GetGmMovingUnitSpriteApData
	movs r1, #8
	bl StartSpriteAnim
	adds r6, r0, #0
	cmp r6, #0
	beq .L080BAEF0
	adds r0, r5, #0
	adds r0, #0x37
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r6, #0
	bl SetSpriteAnimId
	mov r0, r8
	bl GetGmMovingUnitSpriteImg
	adds r4, r0, #0
	adds r0, r7, #0
	bl GetGmMovingUnitSpriteImgBuffer
	adds r1, r0, #0
	adds r0, r4, #0
	bl Decompress
	adds r0, r7, #0
	bl GetGmMovingUnitSpriteImgBuffer
	str r0, [r6, #0x24]
	mov r1, r9
	ldr r0, [r1, #0x2c]
	str r0, [r5, #0x30]
	lsls r3, r7, #2
	ldr r1, [r1, #0x2c]
	adds r1, r1, r3
	mov r0, sl
	ldrb r2, [r0]
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r1, r1, r0
	ldrh r0, [r5, #0x2e]
	adds r1, r1, r0
	strh r1, [r6, #0x22]
	str r6, [r5, #0x40]
	mov r0, r9
	adds r0, #0x34
	adds r0, r0, r3
	str r5, [r0]
	adds r0, r7, #0
	b .L080BAEFA
	.align 2, 0
.L080BAEEC: .4byte gUnknown_08205F7C
.L080BAEF0:
	ldr r0, .L080BAF08  @ gUnknown_08A3DECC
	bl Proc_End
	movs r0, #3
	negs r0, r0
.L080BAEFA:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080BAF08: .4byte gUnknown_08A3DECC

	THUMB_FUNC_END StartGmUnit

	THUMB_FUNC_START MapUnitC_DeleteGmapUnit
MapUnitC_DeleteGmapUnit: @ 0x080BAF0C
	push {r4, r5, r6, lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r6, r0, r1
	ldr r5, [r6]
	cmp r5, #0
	beq .L080BAF2C
	ldr r0, [r5, #0x40]
	bl EndSpriteAnim
	movs r4, #0
	str r4, [r5, #0x40]
	adds r0, r5, #0
	bl Proc_End
	str r4, [r6]
.L080BAF2C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END MapUnitC_DeleteGmapUnit

	THUMB_FUNC_START GmUnitCnt_SetPosition
GmUnitCnt_SetPosition: @ 0x080BAF34
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	strh r2, [r0, #0x3c]
	strh r3, [r0, #0x3e]
	bx lr

	THUMB_FUNC_END GmUnitCnt_SetPosition

	THUMB_FUNC_START func_080BAF44
func_080BAF44: @ 0x080BAF44
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldrh r0, [r1, #0x3c]
	strh r0, [r2]
	ldrh r0, [r1, #0x3e]
	strh r0, [r3]
	bx lr

	THUMB_FUNC_END func_080BAF44

	THUMB_FUNC_START func_080BAF58
func_080BAF58: @ 0x080BAF58
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldrh r0, [r1, #0x3c]
	adds r0, r0, r2
	strh r0, [r1, #0x3c]
	ldrh r0, [r1, #0x3e]
	adds r0, r0, r3
	strh r0, [r1, #0x3e]
	bx lr

	THUMB_FUNC_END func_080BAF58

	THUMB_FUNC_START func_080BAF70
func_080BAF70: @ 0x080BAF70
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x37
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr

	THUMB_FUNC_END func_080BAF70

	THUMB_FUNC_START MapUnitC_SetAnim
MapUnitC_SetAnim: @ 0x080BAF84
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x37
	strb r2, [r1]
	ldr r0, [r0, #0x40]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl SetSpriteAnimId
	pop {r0}
	bx r0

	THUMB_FUNC_END MapUnitC_SetAnim

	THUMB_FUNC_START GmUnitCnt_SetDisplayed
GmUnitCnt_SetDisplayed: @ 0x080BAFA4
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r3, [r0]
	lsls r2, r2, #0x18
	cmp r2, #0
	beq .L080BAFBC
	ldrh r1, [r3, #0x2a]
	movs r0, #1
	orrs r0, r1
	b .L080BAFC2
.L080BAFBC:
	ldrh r1, [r3, #0x2a]
	ldr r0, .L080BAFC8  @ 0x0000FFFE
	ands r0, r1
.L080BAFC2:
	strh r0, [r3, #0x2a]
	pop {r0}
	bx r0
	.align 2, 0
.L080BAFC8: .4byte 0x0000FFFE

	THUMB_FUNC_END GmUnitCnt_SetDisplayed

	THUMB_FUNC_START func_080BAFCC
func_080BAFCC: @ 0x080BAFCC
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r1, [r0, #0x2a]
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr

	THUMB_FUNC_END func_080BAFCC

	THUMB_FUNC_START func_080BAFE0
func_080BAFE0: @ 0x080BAFE0
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r3, [r0]
	lsls r2, r2, #0x18
	cmp r2, #0
	beq .L080BAFF8
	ldrh r1, [r3, #0x2a]
	movs r0, #2
	orrs r0, r1
	b .L080BAFFE
.L080BAFF8:
	ldrh r1, [r3, #0x2a]
	ldr r0, .L080BB004  @ 0x0000FFFD
	ands r0, r1
.L080BAFFE:
	strh r0, [r3, #0x2a]
	pop {r0}
	bx r0
	.align 2, 0
.L080BB004: .4byte 0x0000FFFD

	THUMB_FUNC_END func_080BAFE0

	THUMB_FUNC_START func_080BB008
func_080BB008: @ 0x080BB008
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0, #0x40]
	ldrh r0, [r0, #0x1e]
	bx lr

	THUMB_FUNC_END func_080BB008

	THUMB_FUNC_START MapUnitC_SetTCSOAMIndex
MapUnitC_SetTCSOAMIndex: @ 0x080BB018
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #0x40]
	strh r2, [r0, #0x1e]
	strh r2, [r1, #0x2c]
	bx lr

	THUMB_FUNC_END MapUnitC_SetTCSOAMIndex

	THUMB_FUNC_START func_080BB028
func_080BB028: @ 0x080BB028
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x35
	ldrb r0, [r0]
	bx lr

	THUMB_FUNC_END func_080BB028

	THUMB_FUNC_START MapUnitC_SetAllegienceColorIndex
MapUnitC_SetAllegienceColorIndex: @ 0x080BB038
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r5, r1, #2
	adds r0, #0x34
	adds r0, r0, r5
	ldr r4, [r0]
	cmp r2, #0
	blt .L080BB04E
	adds r0, r4, #0
	adds r0, #0x35
	strb r2, [r0]
.L080BB04E:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetGmFactionPaletteId
	adds r1, r4, #0
	adds r1, #0x36
	strb r0, [r1]
	ldr r3, [r4, #0x40]
	ldr r2, [r6, #0x2c]
	adds r2, r2, r5
	movs r1, #0xf
	ands r1, r0
	lsls r1, r1, #0xc
	adds r2, r2, r1
	ldrh r4, [r4, #0x2e]
	adds r2, r2, r4
	strh r2, [r3, #0x22]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END MapUnitC_SetAllegienceColorIndex

	THUMB_FUNC_START func_080BB078
func_080BB078: @ 0x080BB078
	push {r4, r5, lr}
	lsls r1, r1, #2
	adds r3, r0, #0
	adds r3, #0x34
	adds r3, r3, r1
	ldr r4, [r3]
	adds r3, r4, #0
	adds r3, #0x36
	strb r2, [r3]
	ldr r5, [r4, #0x40]
	ldr r3, [r0, #0x2c]
	adds r3, r3, r1
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r3, r3, r0
	ldrh r4, [r4, #0x2e]
	adds r3, r3, r4
	strh r3, [r5, #0x22]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BB078

	THUMB_FUNC_START MapUnitC_MarkSomething
MapUnitC_MarkSomething: @ 0x080BB0A4
	push {r4, r5, lr}
	cmp r1, #0
	blt .L080BB0BC
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r2, [r0]
	ldrh r1, [r2, #0x2a]
	movs r0, #4
	orrs r0, r1
	strh r0, [r2, #0x2a]
	b .L080BB0D8
.L080BB0BC:
	movs r4, #4
	adds r1, r0, #0
	adds r1, #0x34
	movs r3, #6
.L080BB0C4:
	ldr r2, [r1]
	cmp r2, #0
	beq .L080BB0D0
	ldrh r0, [r2, #0x2a]
	orrs r0, r4
	strh r0, [r2, #0x2a]
.L080BB0D0:
	adds r1, #4
	subs r3, #1
	cmp r3, #0
	bge .L080BB0C4
.L080BB0D8:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END MapUnitC_MarkSomething

	THUMB_FUNC_START func_080BB0E0
func_080BB0E0: @ 0x080BB0E0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r7, r1, #0
	adds r4, r2, #0
	lsls r0, r7, #2
	mov r9, r0
	mov r0, r8
	adds r0, #0x34
	add r0, r9
	ldr r5, [r0]
	ldr r0, [r5, #0x40]
	cmp r0, #0
	beq .L080BB104
	bl EndSpriteAnim
.L080BB104:
	adds r2, r4, #0
	cmp r2, #0
	bne .L080BB10C
	ldrh r2, [r5, #0x38]
.L080BB10C:
	ldrh r1, [r5, #0x3a]
	cmp r2, r1
	beq .L080BB17A
	strh r2, [r5, #0x3a]
	lsls r0, r2, #0x10
	lsrs r4, r0, #0x10
	adds r0, r4, #0
	bl GetGmMovingUnitSpriteApData
	movs r1, #8
	bl StartSpriteAnim
	adds r6, r0, #0
	cmp r6, #0
	bne .L080BB12E
	movs r0, #0
	b .L080BB17C
.L080BB12E:
	adds r0, r5, #0
	adds r0, #0x37
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r6, #0
	bl SetSpriteAnimId
	adds r0, r4, #0
	bl GetGmMovingUnitSpriteImg
	adds r4, r0, #0
	adds r0, r7, #0
	bl GetGmMovingUnitSpriteImgBuffer
	adds r1, r0, #0
	adds r0, r4, #0
	bl Decompress
	adds r0, r7, #0
	bl GetGmMovingUnitSpriteImgBuffer
	str r0, [r6, #0x24]
	mov r1, r8
	ldr r0, [r1, #0x2c]
	str r0, [r5, #0x30]
	ldr r1, [r1, #0x2c]
	add r1, r9
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r2, [r0]
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r1, r1, r0
	ldrh r0, [r5, #0x2e]
	adds r1, r1, r0
	strh r1, [r6, #0x22]
	str r6, [r5, #0x40]
.L080BB17A:
	movs r0, #1
.L080BB17C:
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BB0E0

	THUMB_FUNC_START func_080BB188
func_080BB188: @ 0x080BB188
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r0, [r0, #0x38]
	bx lr

	THUMB_FUNC_END func_080BB188

	THUMB_FUNC_START func_080BB194
func_080BB194: @ 0x080BB194
	lsls r1, r1, #2
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	ldrh r0, [r0, #0x3a]
	bx lr

	THUMB_FUNC_END func_080BB194

	THUMB_FUNC_START GmUnitContainer_OnEnd
GmUnitContainer_OnEnd: @ 0x080BB1A0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r4, #0x34
	adds r6, r4, #0
	movs r7, #0
	movs r5, #6
.L080BB1AC:
	cmp r6, #0
	beq .L080BB1B8
	ldr r0, [r4]
	bl Proc_End
	str r7, [r4]
.L080BB1B8:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge .L080BB1AC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmUnitContainer_OnEnd

	THUMB_FUNC_START GmUnitContainer_OnInit
GmUnitContainer_OnInit: @ 0x080BB1C8
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	movs r0, #0
	str r0, [sp]
	adds r1, #0x34
	ldr r2, .L080BB1E4  @ 0x05000007
	mov r0, sp
	bl CpuSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080BB1E4: .4byte 0x05000007

	THUMB_FUNC_END GmUnitContainer_OnInit

	THUMB_FUNC_START StartGmUnitContainer
StartGmUnitContainer: @ 0x080BB1E8
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, .L080BB208  @ gUnknown_08A3DEFC
	adds r1, r3, #0
	bl SpawnProc
	str r4, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080BB208: .4byte gUnknown_08A3DEFC

	THUMB_FUNC_END StartGmUnitContainer

	THUMB_FUNC_START GmUnitFade_OnEnd
GmUnitFade_OnEnd: @ 0x080BB20C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	b .L080BB250
.L080BB214:
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x30
	cmp r0, #0
	bge .L080BB238
	ldr r0, .L080BB260  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x4c]
	adds r1, r4, r6
	ldrb r1, [r1]
	movs r2, #0
	bl GmUnitCnt_SetDisplayed
.L080BB238:
	ldr r0, .L080BB260  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x4c]
	adds r1, r4, r6
	ldrb r1, [r1]
	movs r2, #1
	negs r2, r2
	bl MapUnitC_SetAllegienceColorIndex
	adds r6, #1
	adds r0, r5, #0
.L080BB250:
	adds r0, #0x37
	ldrb r0, [r0]
	cmp r6, r0
	blt .L080BB214
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BB260: .4byte gUnknown_08A3D748

	THUMB_FUNC_END GmUnitFade_OnEnd

	THUMB_FUNC_START GmUnitFade_OnInit
GmUnitFade_OnInit: @ 0x080BB264
	movs r1, #0
	strh r1, [r0, #0x2e]
	bx lr

	THUMB_FUNC_END GmUnitFade_OnInit

	THUMB_FUNC_START func_080BB26C
func_080BB26C: @ 0x080BB26C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r4, r2, #0
	adds r5, r3, #0
	cmp r0, #0
	blt .L080BB2B0
	ldr r2, .L080BB2AC  @ gPal
	lsls r0, r0, #4
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r1, r3
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r3, #0x1f
	ands r3, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r1
	lsrs r0, r0, #5
	mov r8, r0
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r1, r0
	lsrs r1, r1, #0xa
	mov r9, r1
	b .L080BB2B8
	.align 2, 0
.L080BB2AC: .4byte gPal
.L080BB2B0:
	movs r0, #0
	mov r9, r0
	mov r8, r0
	movs r3, #0
.L080BB2B8:
	cmp r4, #0
	blt .L080BB2E8
	ldr r2, .L080BB2E4  @ gPal
	lsls r0, r4, #4
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r5, r4
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r0]
	movs r2, #0x1f
	ands r2, r1
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r0, r1
	lsrs r4, r0, #5
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r1, r0
	lsrs r7, r1, #0xa
	b .L080BB2EE
	.align 2, 0
.L080BB2E4: .4byte gPal
.L080BB2E8:
	movs r7, #0
	movs r4, #0
	movs r2, #0
.L080BB2EE:
	movs r5, #0x80
	lsls r5, r5, #5
	subs r0, r2, r3
	ldr r2, [sp, #0x20]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r5, #0
	str r3, [sp]
	bl DivArm
	adds r6, r0, #0
	ldr r3, [sp]
	adds r6, r3, r6
	mov r3, r8
	subs r0, r4, r3
	ldr r4, [sp, #0x20]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r5, #0
	bl DivArm
	adds r4, r0, #0
	add r4, r8
	mov r1, r9
	subs r0, r7, r1
	ldr r2, [sp, #0x20]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r5, #0
	bl DivArm
	add r0, r9
	lsls r0, r0, #0xa
	lsls r4, r4, #5
	adds r0, r0, r4
	adds r0, r0, r6
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BB26C

	THUMB_FUNC_START GmUnitFade_OnLoop
GmUnitFade_OnLoop: @ 0x080BB348
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	ldr r6, .L080BB398  @ gPal+0x340
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bcs .L080BB39C
	ldrh r0, [r5, #0x2e]
	ldrh r1, [r5, #0x2c]
	movs r2, #0
	bl Spline_800B7E0
	mov r8, r0
	movs r4, #0
	adds r7, r5, #0
	adds r7, #0x29
	adds r5, #0x2a
.L080BB378:
	movs r0, #0
	ldrsb r0, [r7, r0]
	movs r2, #0
	ldrsb r2, [r5, r2]
	mov r1, r8
	str r1, [sp]
	adds r1, r4, #0
	adds r3, r4, #0
	bl func_080BB26C
	strh r0, [r6]
	adds r6, #2
	adds r4, #1
	cmp r4, #0xf
	ble .L080BB378
	b .L080BB3D4
	.align 2, 0
.L080BB398: .4byte gPal+0x340
.L080BB39C:
	adds r1, r5, #0
	adds r1, #0x2a
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L080BB3C0
	lsls r0, r0, #5
	ldr r2, .L080BB3BC  @ 0xFFFFFEC0
	adds r1, r6, r2
	adds r0, r0, r1
	adds r1, r6, #0
	movs r2, #0x10
	bl CpuSet
	b .L080BB3CE
	.align 2, 0
.L080BB3BC: .4byte 0xFFFFFEC0
.L080BB3C0:
	add r0, sp, #4
	movs r1, #0
	strh r1, [r0]
	ldr r2, .L080BB3E4  @ 0x01000010
	adds r1, r6, #0
	bl CpuSet
.L080BB3CE:
	adds r0, r5, #0
	bl Proc_Break
.L080BB3D4:
	bl EnablePalSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BB3E4: .4byte 0x01000010

	THUMB_FUNC_END GmUnitFade_OnLoop

	THUMB_FUNC_START StartGmUnitFade
StartGmUnitFade: @ 0x080BB3E8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	beq .L080BB40C
	ldr r0, .L080BB408  @ gUnknown_08A3DF2C
	bl SpawnProcLocking
	b .L080BB414
	.align 2, 0
.L080BB408: .4byte gUnknown_08A3DF2C
.L080BB40C:
	ldr r0, .L080BB43C  @ gUnknown_08A3DF2C
	movs r1, #3
	bl SpawnProc
.L080BB414:
	adds r4, r0, #0
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	strh r7, [r4, #0x2c]
	cmp r5, #0
	blt .L080BB444
	lsls r0, r5, #5
	ldr r1, .L080BB440  @ gPal+0x200
	adds r0, r0, r1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r1, r1, r2
	movs r2, #0x10
	bl CpuSet
	b .L080BB454
	.align 2, 0
.L080BB43C: .4byte gUnknown_08A3DF2C
.L080BB440: .4byte gPal+0x200
.L080BB444:
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r1, .L080BB474  @ gPal+0x340
	ldr r2, .L080BB478  @ 0x01000010
	mov r0, sp
	bl CpuSet
.L080BB454:
	bl EnablePalSync
	adds r0, r4, #0
	adds r0, #0x30
	mov r1, r8
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x37
	movs r0, #1
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080BB474: .4byte gPal+0x340
.L080BB478: .4byte 0x01000010

	THUMB_FUNC_END StartGmUnitFade

	THUMB_FUNC_START EndGmUnitFade
EndGmUnitFade: @ 0x080BB47C
	push {lr}
	ldr r0, .L080BB488  @ gUnknown_08A3DF2C
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080BB488: .4byte gUnknown_08A3DF2C

	THUMB_FUNC_END EndGmUnitFade

	THUMB_FUNC_START FindGmUnitFade
FindGmUnitFade: @ 0x080BB48C
	push {lr}
	ldr r0, .L080BB498  @ gUnknown_08A3DF2C
	bl FindProc
	pop {r1}
	bx r1
	.align 2, 0
.L080BB498: .4byte gUnknown_08A3DF2C

	THUMB_FUNC_END FindGmUnitFade

	THUMB_FUNC_START func_080BB49C
func_080BB49C: @ 0x080BB49C
	push {r4, lr}
	adds r4, r0, #0
	bl FindGmUnitFade
	cmp r0, #0
	beq .L080BB4BA
	adds r1, r0, #0
	adds r1, #0x37
	adds r0, #0x30
	ldrb r2, [r1]
	adds r0, r0, r2
	strb r4, [r0]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L080BB4BA:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BB49C

	THUMB_FUNC_START func_080BB4C0
func_080BB4C0: @ 0x080BB4C0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	mov r8, r1
	adds r7, r2, #0
	ldr r0, .L080BB504  @ gUnknown_08A3D748
	bl FindProc
	ldr r6, [r0, #0x4c]
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r4, [r0]
	bl FindGmUnitFade
	cmp r0, #0
	bne .L080BB508
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetGmFactionPaletteId
	adds r2, r0, #0
	movs r1, #1
	negs r1, r1
	str r7, [sp]
	adds r0, r5, #0
	mov r3, r8
	bl StartGmUnitFade
	b .L080BB50E
	.align 2, 0
.L080BB504: .4byte gUnknown_08A3D748
.L080BB508:
	adds r0, r5, #0
	bl func_080BB49C
.L080BB50E:
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl func_080BB078
	ldr r0, .L080BB534  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x4c]
	adds r1, r5, #0
	movs r2, #1
	bl GmUnitCnt_SetDisplayed
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BB534: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BB4C0

	THUMB_FUNC_START func_080BB538
func_080BB538: @ 0x080BB538
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	mov r8, r1
	adds r7, r2, #0
	ldr r0, .L080BB57C  @ gUnknown_08A3D748
	bl FindProc
	ldr r6, [r0, #0x4c]
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r4, [r0]
	bl FindGmUnitFade
	cmp r0, #0
	bne .L080BB580
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetGmFactionPaletteId
	adds r1, r0, #0
	movs r2, #1
	negs r2, r2
	str r7, [sp]
	adds r0, r5, #0
	mov r3, r8
	bl StartGmUnitFade
	b .L080BB586
	.align 2, 0
.L080BB57C: .4byte gUnknown_08A3D748
.L080BB580:
	adds r0, r5, #0
	bl func_080BB49C
.L080BB586:
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xa
	bl func_080BB078
	ldr r0, .L080BB5AC  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x4c]
	adds r1, r5, #0
	movs r2, #1
	bl GmUnitCnt_SetDisplayed
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BB5AC: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BB538

	THUMB_FUNC_START WMLocation_GetChapterId
WMLocation_GetChapterId: @ 0x080BB5B0
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080BB5CC  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080BB5C0
	cmp r0, #3
	beq .L080BB5D4
.L080BB5C0:
	lsls r0, r1, #5
	ldr r1, .L080BB5D0  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #4]
	b .L080BB5DC
	.align 2, 0
.L080BB5CC: .4byte gPlaySt
.L080BB5D0: .4byte gUnknown_082060B0
.L080BB5D4:
	lsls r0, r1, #5
	ldr r1, .L080BB5E0  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #5]
.L080BB5DC:
	pop {r1}
	bx r1
	.align 2, 0
.L080BB5E0: .4byte gUnknown_082060B0

	THUMB_FUNC_END WMLocation_GetChapterId

	THUMB_FUNC_START GetWmNodeNext
GetWmNodeNext: @ 0x080BB5E4
	push {r4, lr}
	lsls r0, r0, #5
	ldr r1, .L080BB614  @ gUnknown_082060B0
	adds r4, r0, r1
	movs r1, #6
	ldrsh r0, [r4, r1]
	bl CheckFlag
	lsls r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #8
	cmp r0, #0
	beq .L080BB600
	adds r1, #2
.L080BB600:
	ldr r0, .L080BB618  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080BB60C
	cmp r0, #3
	beq .L080BB61C
.L080BB60C:
	movs r0, #0
	ldrsb r0, [r1, r0]
	b .L080BB620
	.align 2, 0
.L080BB614: .4byte gUnknown_082060B0
.L080BB618: .4byte gPlaySt
.L080BB61C:
	movs r0, #1
	ldrsb r0, [r1, r0]
.L080BB620:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetWmNodeNext

	THUMB_FUNC_START func_080BB628
func_080BB628: @ 0x080BB628
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp]
	str r2, [sp, #4]
	mov sl, r3
	movs r0, #0
	mov r9, r0
	ldr r1, .L080BB66C  @ gUnknown_082060B0
	mov ip, r1
.L080BB642:
	mov r2, r9
	lsls r0, r2, #2
	ldr r3, .L080BB670  @ gGmData
	adds r0, r0, r3
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BB6D8
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BB678
	mov r4, ip
	ldrb r0, [r4, #2]
	lsls r0, r0, #4
	ldr r6, .L080BB674  @ gUnknown_08205FA0
	adds r0, r0, r6
	b .L080BB682
	.align 2, 0
.L080BB66C: .4byte gUnknown_082060B0
.L080BB670: .4byte gGmData
.L080BB674: .4byte gUnknown_08205FA0
.L080BB678:
	mov r7, ip
	ldrb r0, [r7, #3]
	lsls r0, r0, #4
	ldr r1, .L080BB6D4  @ gUnknown_08205FA0
	adds r0, r0, r1
.L080BB682:
	mov r3, ip
	movs r4, #0x18
	ldrsh r2, [r3, r4]
	movs r6, #0xa
	ldrsb r6, [r0, r6]
	mov r8, r6
	movs r5, #8
	ldrsb r5, [r0, r5]
	subs r3, r2, r5
	mov r7, sl
	subs r3, r3, r7
	mov r4, ip
	movs r6, #0x1a
	ldrsh r1, [r4, r6]
	movs r6, #0xb
	ldrsb r6, [r0, r6]
	movs r4, #9
	ldrsb r4, [r0, r4]
	subs r0, r1, r4
	ldr r7, [sp, #0x2c]
	subs r0, r0, r7
	str r0, [sp, #8]
	add r2, r8
	subs r2, r2, r5
	add r2, sl
	adds r1, r1, r6
	subs r1, r1, r4
	adds r0, r1, r7
	ldr r1, [sp]
	cmp r1, r3
	blt .L080BB6D8
	cmp r1, r2
	bge .L080BB6D8
	ldr r2, [sp, #4]
	ldr r3, [sp, #8]
	cmp r2, r3
	blt .L080BB6D8
	cmp r2, r0
	bge .L080BB6D8
	mov r0, r9
	b .L080BB6EA
	.align 2, 0
.L080BB6D4: .4byte gUnknown_08205FA0
.L080BB6D8:
	movs r4, #0x20
	add ip, r4
	movs r6, #1
	add r9, r6
	mov r7, r9
	cmp r7, #0x1c
	ble .L080BB642
	movs r0, #1
	negs r0, r0
.L080BB6EA:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BB628

	THUMB_FUNC_START func_080BB6FC
func_080BB6FC: @ 0x080BB6FC
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080BB6FC

	THUMB_FUNC_START func_080BB708
func_080BB708: @ 0x080BB708
	adds r0, #0x32
	ldrb r2, [r0]
	movs r1, #2
	negs r1, r1
	ands r1, r2
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080BB708

	THUMB_FUNC_START GmNodeIconDisplay_OnEnd
GmNodeIconDisplay_OnEnd: @ 0x080BB718
	push {lr}
	ldr r0, [r0, #0x38]
	bl EndSpriteAnim
	pop {r0}
	bx r0

	THUMB_FUNC_END GmNodeIconDisplay_OnEnd

	THUMB_FUNC_START GmNodeIconDisplay_OnInit
GmNodeIconDisplay_OnInit: @ 0x080BB724
	push {lr}
	movs r1, #0
	movs r3, #0
	adds r2, r0, #0
	adds r2, #0x34
.L080BB72E:
	stm r2!, {r3}
	adds r1, #1
	cmp r1, #0
	beq .L080BB72E
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	pop {r0}
	bx r0

	THUMB_FUNC_END GmNodeIconDisplay_OnInit

	THUMB_FUNC_START GetGmIconScreenCoords
GetGmIconScreenCoords: @ 0x080BB744
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r3, #0
	ldr r5, [sp, #0x14]
	mov r4, sp
	ldrh r3, [r0, #0x34]
	strh r3, [r4]
	mov r3, sp
	adds r3, #2
	ldrh r4, [r0, #0x36]
	strh r4, [r3]
	mov r0, sp
	ldrh r0, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	subs r1, r1, r0
	strh r1, [r6]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	subs r2, r2, r4
	strh r2, [r5]
	adds r2, #0x20
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r2, #0xdf
	bhi .L080BB78C
	ldrh r0, [r6]
	adds r0, #0x20
	lsls r0, r0, #0x10
	ldr r1, .L080BB788  @ 0x012F0000
	cmp r0, r1
	bhi .L080BB78C
	movs r0, #1
	b .L080BB78E
	.align 2, 0
.L080BB788: .4byte 0x012F0000
.L080BB78C:
	movs r0, #0
.L080BB78E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetGmIconScreenCoords

	THUMB_FUNC_START GmNodeIconDisplay_OnLoop
GmNodeIconDisplay_OnLoop: @ 0x080BB798
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov r2, r8
	adds r2, #0x32
	ldrb r1, [r2]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080BB7B6
	b .L080BB988
.L080BB7B6:
	mov r1, r8
	ldr r0, [r1, #0x2c]
	lsrs r0, r0, #5
	mov sl, r0
	movs r7, #0
	str r2, [sp, #0xc]
	add r2, sp, #4
	mov r9, r2
.L080BB7C6:
	ldr r0, .L080BB7EC  @ gGmData
	lsls r1, r7, #2
	adds r1, r1, r0
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq .L080BB894
	lsls r1, r7, #5
	ldr r0, .L080BB7F0  @ gUnknown_082060B0
	adds r6, r1, r0
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq .L080BB7F4
	ldrb r0, [r6, #2]
	b .L080BB7F6
	.align 2, 0
.L080BB7EC: .4byte gGmData
.L080BB7F0: .4byte gUnknown_082060B0
.L080BB7F4:
	ldrb r0, [r6, #3]
.L080BB7F6:
	lsls r0, r0, #4
	ldr r1, .L080BB8D0  @ gUnknown_08205FA0
	adds r5, r0, r1
	movs r0, #8
	ldrsb r0, [r5, r0]
	ldrh r1, [r6, #0x18]
	subs r1, r1, r0
	movs r0, #9
	ldrsb r0, [r5, r0]
	ldrh r2, [r6, #0x1a]
	subs r2, r2, r0
	mov r3, r8
	ldr r0, [r3, #0x3c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r4, sp
	adds r4, #6
	str r4, [sp]
	add r3, sp, #4
	bl GetGmIconScreenCoords
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080BB894
	mov r1, r9
	ldrh r0, [r1]
	ldr r2, .L080BB8D4  @ 0x000001FF
	adds r1, r2, #0
	ands r0, r1
	mov r3, r9
	strh r0, [r3]
	ldrb r3, [r4]
	strh r3, [r4]
	adds r0, r7, #0
	cmp r7, #0
	bge .L080BB844
	adds r0, #0x1f
.L080BB844:
	asrs r0, r0, #5
	lsls r0, r0, #2
	mov r2, r8
	adds r2, #0x34
	adds r2, r2, r0
	movs r0, #0x1f
	ands r0, r7
	movs r1, #1
	lsls r1, r0
	ldr r0, [r2]
	ands r0, r1
	cmp r0, #0
	beq .L080BB868
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	orrs r3, r0
	strh r3, [r4]
.L080BB868:
	mov r2, r9
	movs r3, #0
	ldrsh r1, [r2, r3]
	movs r0, #0
	ldrsh r2, [r4, r0]
	ldr r3, [r5, #4]
	ldrh r4, [r5]
	add r4, sl
	mov r0, r8
	adds r0, #0x30
	ldrb r5, [r0]
	movs r0, #0xf
	ands r0, r5
	lsls r0, r0, #0xc
	adds r4, r4, r0
	movs r0, #0x80
	lsls r0, r0, #4
	adds r4, r4, r0
	str r4, [sp]
	movs r0, #0xc
	bl PutSpriteExt
.L080BB894:
	adds r7, #1
	cmp r7, #0x1c
	ble .L080BB7C6
	ldr r2, [sp, #0xc]
	ldrb r1, [r2]
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BB988
	mov r3, r8
	adds r3, #0x33
	ldrb r0, [r3]
	lsls r2, r0, #5
	ldr r1, .L080BB8D8  @ gUnknown_082060B0
	adds r6, r2, r1
	ldr r2, .L080BB8DC  @ gGmData
	lsls r0, r0, #2
	adds r0, r0, r2
	adds r0, #0x30
	ldrb r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	mov r9, r2
	adds r7, r3, #0
	cmp r0, #0
	beq .L080BB8E0
	ldrb r0, [r6, #2]
	b .L080BB8E2
	.align 2, 0
.L080BB8D0: .4byte gUnknown_08205FA0
.L080BB8D4: .4byte 0x000001FF
.L080BB8D8: .4byte gUnknown_082060B0
.L080BB8DC: .4byte gGmData
.L080BB8E0:
	ldrb r0, [r6, #3]
.L080BB8E2:
	lsls r0, r0, #4
	ldr r1, .L080BB998  @ gUnknown_08205FA0
	adds r5, r0, r1
	add r3, sp, #8
	mov r0, r8
	ldr r1, [r0, #0x3c]
	ldrh r0, [r1, #0x34]
	strh r0, [r3]
	mov r4, sp
	adds r4, #0xa
	ldrh r0, [r1, #0x36]
	strh r0, [r4]
	add r2, sp, #4
	movs r0, #8
	ldrsb r0, [r5, r0]
	ldrh r1, [r6, #0x18]
	subs r1, r1, r0
	movs r0, #0xc
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrh r1, [r3]
	subs r0, r0, r1
	strh r0, [r2]
	adds r2, #2
	movs r0, #9
	ldrsb r0, [r5, r0]
	ldrh r1, [r6, #0x1a]
	subs r1, r1, r0
	movs r0, #0xd
	ldrsb r0, [r5, r0]
	adds r0, r0, r1
	ldrh r1, [r4]
	subs r0, r0, r1
	strh r0, [r2]
	adds r0, #0x20
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xdf
	bhi .L080BB988
	add r0, sp, #4
	ldrh r0, [r0]
	adds r0, #0x20
	lsls r0, r0, #0x10
	ldr r1, .L080BB99C  @ 0x012F0000
	cmp r0, r1
	bhi .L080BB988
	ldrb r0, [r7]
	lsls r0, r0, #2
	add r0, r9
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	add r0, sp, #4
	ldrh r0, [r0]
	ldr r5, .L080BB9A0  @ 0x000001FF
	ands r5, r0
	ldrb r4, [r2]
	ldrb r3, [r7]
	lsrs r0, r3, #5
	lsls r0, r0, #2
	mov r2, r8
	adds r2, #0x34
	adds r2, r2, r0
	movs r0, #0x1f
	ands r3, r0
	movs r1, #1
	lsls r1, r3
	ldr r0, [r2]
	ands r0, r1
	cmp r0, #0
	beq .L080BB97A
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r1, #0
	orrs r4, r0
.L080BB97A:
	mov r2, r8
	ldr r0, [r2, #0x38]
	adds r1, r5, #0
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	bl DisplaySpriteAnim
.L080BB988:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BB998: .4byte gUnknown_08205FA0
.L080BB99C: .4byte 0x012F0000
.L080BB9A0: .4byte 0x000001FF

	THUMB_FUNC_END GmNodeIconDisplay_OnLoop

	THUMB_FUNC_START StartGmNodeIconDisplay
StartGmNodeIconDisplay: @ 0x080BB9A4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, .L080BBA20  @ gUnknown_08A3DF64
	adds r1, r4, #0
	bl SpawnProc
	adds r7, r0, #0
	str r5, [r7, #0x2c]
	adds r4, r7, #0
	adds r4, #0x30
	movs r2, #0
	strb r6, [r4]
	adds r0, #0x31
	mov r1, r8
	strb r1, [r0]
	ldr r0, [sp, #0x18]
	str r0, [r7, #0x3c]
	adds r3, r7, #0
	adds r3, #0x32
	ldrb r1, [r3]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x33
	strb r2, [r0]
	ldr r0, .L080BBA24  @ gUnknown_08A97AEC
	movs r1, #0xb
	bl StartSpriteAnim
	str r0, [r7, #0x38]
	movs r1, #1
	bl SetSpriteAnimId
	ldr r3, [r7, #0x38]
	ldr r1, [r7, #0x2c]
	movs r0, #0x80
	lsls r0, r0, #5
	adds r1, r1, r0
	lsrs r1, r1, #5
	ldrb r2, [r4]
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #0xc
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #4
	adds r1, r1, r0
	strh r1, [r3, #0x22]
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080BBA20: .4byte gUnknown_08A3DF64
.L080BBA24: .4byte gUnknown_08A97AEC

	THUMB_FUNC_END StartGmNodeIconDisplay

	THUMB_FUNC_START func_080BBA28
func_080BBA28: @ 0x080BBA28
	push {lr}
	cmp r0, #0x1c
	bls .L080BBA38
	ldr r0, .L080BBA34  @ 0x0000066D
	b .L080BBA40
	.align 2, 0
.L080BBA34: .4byte 0x0000066D
.L080BBA38:
	lsls r0, r0, #5
	ldr r1, .L080BBA48  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrh r0, [r0, #0x1c]
.L080BBA40:
	bl GetMsg
	pop {r1}
	bx r1
	.align 2, 0
.L080BBA48: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080BBA28

	THUMB_FUNC_START func_080BBA4C
func_080BBA4C: @ 0x080BBA4C
	push {lr}
	adds r3, r0, #0
	ldr r0, .L080BBA60  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080BBA5C
	cmp r0, #3
	beq .L080BBA64
.L080BBA5C:
	movs r2, #0
	b .L080BBA66
	.align 2, 0
.L080BBA60: .4byte gPlaySt
.L080BBA64:
	movs r2, #1
.L080BBA66:
	ldr r0, .L080BBA7C  @ gUnknown_08206450
	lsls r1, r2, #3
	subs r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r2
	adds r1, r3, r1
	adds r1, r1, r0
	ldrb r0, [r1]
	pop {r1}
	bx r1
	.align 2, 0
.L080BBA7C: .4byte gUnknown_08206450

	THUMB_FUNC_END func_080BBA4C

	THUMB_FUNC_START nullsub_59
nullsub_59: @ 0x080BBA80
	bx lr

	THUMB_FUNC_END nullsub_59

	THUMB_FUNC_START GmCursor_OnInit
GmCursor_OnInit: @ 0x080BBA84
	push {lr}
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	str r0, [r3, #0x3c]
	str r0, [r3, #0x38]
	str r0, [r3, #0x44]
	str r0, [r3, #0x40]
	adds r1, #0x15
	movs r2, #0
	movs r0, #0xc0
	lsls r0, r0, #2
	strh r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	subs r1, #0x13
	movs r0, #4
	strb r0, [r1]
	ldr r0, .L080BBACC  @ gPal
	ldr r1, .L080BBAD0  @ gUnknown_08A97ACC
	ldrh r1, [r1]
	movs r2, #0xa7
	lsls r2, r2, #2
	adds r0, r0, r2
	strh r1, [r0]
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
.L080BBACC: .4byte gPal
.L080BBAD0: .4byte gUnknown_08A97ACC

	THUMB_FUNC_END GmCursor_OnInit

	THUMB_FUNC_START GmCursor_OnUpdate
GmCursor_OnUpdate: @ 0x080BBAD4
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, .L080BBBB4  @ gGmData
	ldrb r1, [r0, #1]
	adds r2, r6, #0
	adds r2, #0x32
	strb r1, [r2]
	ldr r7, [r0, #8]
	str r7, [r6, #0x38]
	ldr r0, [r0, #0xc]
	mov ip, r0
	str r0, [r6, #0x3c]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	ble .L080BBBAA
	ldr r5, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	ldr r0, .L080BBBB8  @ gUnknown_08206498
	adds r4, r4, r0
	add r2, sp, #4
	ldr r1, [r6, #0x4c]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	mov r3, sp
	adds r3, #6
	ldrh r0, [r1, #0x36]
	strh r0, [r3]
	asrs r1, r7, #8
	adds r0, r2, #0
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	movs r0, #8
	ldrsb r0, [r4, r0]
	subs r1, r1, r0
	mov r7, ip
	asrs r2, r7, #8
	movs r7, #0
	ldrsh r0, [r3, r7]
	subs r2, r2, r0
	movs r0, #9
	ldrsb r0, [r4, r0]
	subs r2, r2, r0
	ldr r3, [r4, #4]
	lsrs r5, r5, #5
	ldrh r4, [r4]
	adds r5, r5, r4
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r4, [r0]
	movs r0, #0xf
	ands r0, r4
	lsls r0, r0, #0xc
	adds r5, r5, r0
	movs r0, #0x80
	lsls r0, r0, #4
	adds r5, r5, r0
	str r5, [sp]
	movs r0, #4
	bl PutSprite
	adds r4, r6, #0
	adds r4, #0x35
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	bne .L080BBBA2
	adds r1, r6, #0
	adds r1, #0x34
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xf
	bls .L080BBB86
	strb r2, [r1]
.L080BBB86:
	ldr r2, .L080BBBBC  @ gPal
	ldrb r0, [r1]
	lsls r0, r0, #1
	ldr r1, .L080BBBC0  @ gUnknown_08A97ACC
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r1, #0xa7
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	movs r0, #4
	strb r0, [r4]
.L080BBBA2:
	ldr r0, [r6, #0x38]
	str r0, [r6, #0x40]
	ldr r0, [r6, #0x3c]
	str r0, [r6, #0x44]
.L080BBBAA:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BBBB4: .4byte gGmData
.L080BBBB8: .4byte gUnknown_08206498
.L080BBBBC: .4byte gPal
.L080BBBC0: .4byte gUnknown_08A97ACC

	THUMB_FUNC_END GmCursor_OnUpdate

	THUMB_FUNC_START StartGmapCursor
StartGmapCursor: @ 0x080BBBC4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, .L080BBBF0  @ gUnknown_08A3DF94
	adds r1, r4, #0
	bl SpawnProc
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r6, [r1]
	mov r1, r8
	str r1, [r0, #0x4c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080BBBF0: .4byte gUnknown_08A3DF94

	THUMB_FUNC_END StartGmapCursor

	THUMB_FUNC_START func_080BBBF4
func_080BBBF4: @ 0x080BBBF4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	mov ip, r2
	lsls r3, r3, #0x10
	lsrs r7, r3, #0x10
	b .L080BBC44
.L080BBC06:
	ldrb r0, [r4, #1]
	mov r1, ip
	muls r1, r0, r1
	adds r0, r1, #0
	ldrb r1, [r4]
	adds r0, r0, r1
	lsls r0, r0, #1
	mov r1, r8
	adds r3, r1, r0
	ldrb r5, [r4, #2]
	ldrb r6, [r4, #3]
	adds r2, r4, #4
	movs r0, #0
	cmp r0, r6
	bge .L080BBC42
.L080BBC24:
	adds r4, r0, #1
	cmp r5, #0
	beq .L080BBC3C
	adds r1, r5, #0
.L080BBC2C:
	ldrh r0, [r2]
	adds r0, r7, r0
	strh r0, [r3]
	adds r2, #2
	adds r3, #2
	subs r1, #1
	cmp r1, #0
	bne .L080BBC2C
.L080BBC3C:
	adds r0, r4, #0
	cmp r0, r6
	blt .L080BBC24
.L080BBC42:
	adds r4, r2, #0
.L080BBC44:
	ldrb r0, [r4]
	cmp r0, #0xff
	bne .L080BBC06
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BBBF4

	THUMB_FUNC_START func_080BBC54
func_080BBC54: @ 0x080BBC54
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, [r5, #0x2c]
	lsrs r1, r1, #5
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0xc
	orrs r1, r0
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r1, .L080BBC80  @ gUnknown_02019D00
	ldr r2, .L080BBC84  @ 0x01000960
	mov r0, sp
	bl CpuSet
	movs r4, #0
	b .L080BBCA6
	.align 2, 0
.L080BBC80: .4byte gUnknown_02019D00
.L080BBC84: .4byte 0x01000960
.L080BBC88:
	adds r0, r1, r4
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, .L080BBCC0  @ gUnknown_08206674
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r1, .L080BBCC4  @ gUnknown_02019D00
	movs r2, #0x3c
	adds r3, r6, #0
	bl func_080BBBF4
	adds r4, #1
.L080BBCA6:
	ldr r1, [r5, #0x40]
	adds r0, r1, #0
	adds r0, #0x20
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r4, r0
	blt .L080BBC88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BBCC0: .4byte gUnknown_08206674
.L080BBCC4: .4byte gUnknown_02019D00

	THUMB_FUNC_END func_080BBC54

	THUMB_FUNC_START func_080BBCC8
func_080BBCC8: @ 0x080BBCC8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	cmp r4, #0x12
	bgt .L080BBCE6
	adds r0, r4, #0
	adds r0, #0x15
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	b .L080BBCE8
.L080BBCE6:
	movs r0, #0x28
.L080BBCE8:
	mov r9, r0
	movs r0, #0x1f
	adds r7, r5, #0
	ands r7, r0
	movs r0, #0x20
	subs r0, r0, r7
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	adds r0, r2, #0
	bl GetBgTilemap
	mov sl, r0
	lsls r0, r4, #4
	subs r0, r0, r4
	lsls r0, r0, #2
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, .L080BBD44  @ gUnknown_02019D00
	adds r6, r0, r1
	mov r1, r8
	cmp r1, #0x1e
	bls .L080BBD48
	lsls r0, r4, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcs .L080BBD8E
.L080BBD1E:
	movs r0, #0x1f
	ands r0, r5
	lsls r0, r0, #5
	adds r0, r0, r7
	lsls r0, r0, #1
	mov r3, sl
	adds r4, r3, r0
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #0x1f
	bl CpuSet
	adds r6, #0x78
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcc .L080BBD1E
	b .L080BBD8E
	.align 2, 0
.L080BBD44: .4byte gUnknown_02019D00
.L080BBD48:
	lsls r0, r4, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcs .L080BBD8E
	mov r1, r8
	movs r0, #0x1f
	subs r1, r0, r1
	str r1, [sp]
.L080BBD58:
	adds r0, r5, #0
	movs r3, #0x1f
	ands r0, r3
	lsls r0, r0, #6
	mov r1, sl
	adds r4, r1, r0
	lsls r1, r7, #1
	adds r1, r4, r1
	adds r0, r6, #0
	mov r2, r8
	bl CpuSet
	mov r3, r8
	lsls r0, r3, #1
	adds r0, r6, r0
	adds r1, r4, #0
	ldr r2, [sp]
	ldr r3, .L080BBDA0  @ 0x001FFFFF
	ands r2, r3
	bl CpuSet
	adds r6, #0x78
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, r9
	bcc .L080BBD58
.L080BBD8E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BBDA0: .4byte 0x001FFFFF

	THUMB_FUNC_END func_080BBCC8

	THUMB_FUNC_START func_080BBDA4
func_080BBDA4: @ 0x080BBDA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	mov r8, r1
	adds r4, r2, #0
	mov r9, r3
	ldr r0, [sp, #0x20]
	bl GetBgTilemap
	mov ip, r0
	cmp r6, r4
	beq .L080BBE16
	cmp r6, r4
	ble .L080BBDD4
	adds r0, r6, #0
	adds r0, #0x1e
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	mov r2, r8
	lsls r0, r2, #0x10
	b .L080BBDDC
.L080BBDD4:
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	mov r3, r8
	lsls r0, r3, #0x10
.L080BBDDC:
	lsrs r2, r0, #0x10
	movs r7, #0x1f
	ands r7, r1
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, .L080BBE2C  @ gUnknown_02019D00
	adds r5, r0, r1
	movs r1, #0
	movs r0, #0x1f
	mov sl, r0
.L080BBDF6:
	adds r0, r2, r1
	mov r3, sl
	ands r0, r3
	lsls r0, r0, #5
	adds r0, r0, r7
	lsls r0, r0, #1
	mov r3, ip
	adds r4, r3, r0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r5, #0x78
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0x14
	bls .L080BBDF6
.L080BBE16:
	cmp r8, r9
	beq .L080BBEA0
	cmp r8, r9
	ble .L080BBE30
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	mov r0, r8
	adds r0, #0x14
	lsls r0, r0, #0x10
	b .L080BBE38
	.align 2, 0
.L080BBE2C: .4byte gUnknown_02019D00
.L080BBE30:
	lsls r0, r6, #0x10
	lsrs r1, r0, #0x10
	mov r2, r8
	lsls r0, r2, #0x10
.L080BBE38:
	lsrs r2, r0, #0x10
	movs r3, #0x1f
	mov r8, r3
	adds r7, r1, #0
	ands r7, r3
	adds r3, r2, #0
	mov r0, r8
	ands r3, r0
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #2
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, .L080BBE78  @ gUnknown_02019D00
	adds r5, r0, r1
	movs r0, #0x20
	subs r0, r0, r7
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0x1e
	bls .L080BBE7C
	lsls r0, r3, #5
	adds r0, r0, r7
	lsls r0, r0, #1
	mov r1, ip
	adds r4, r1, r0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0x1f
	bl CpuSet
	b .L080BBEA0
	.align 2, 0
.L080BBE78: .4byte gUnknown_02019D00
.L080BBE7C:
	lsls r0, r3, #6
	mov r2, ip
	adds r4, r2, r0
	lsls r1, r7, #1
	adds r1, r4, r1
	adds r0, r5, #0
	adds r2, r6, #0
	bl CpuSet
	lsls r0, r6, #1
	adds r0, r5, r0
	mov r3, r8
	subs r2, r3, r6
	ldr r1, .L080BBEB0  @ 0x001FFFFF
	ands r2, r1
	adds r1, r4, #0
	bl CpuSet
.L080BBEA0:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BBEB0: .4byte 0x001FFFFF

	THUMB_FUNC_END func_080BBDA4

	THUMB_FUNC_START nullsub_38
nullsub_38: @ 0x080BBEB4
	bx lr

	THUMB_FUNC_END nullsub_38

	THUMB_FUNC_START func_080BBEB8
func_080BBEB8: @ 0x080BBEB8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x31
	movs r1, #0
	movs r0, #4
	strb r0, [r5]
	adds r0, r4, #0
	adds r0, #0x32
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x33
	movs r0, #0xff
	strb r0, [r1]
	adds r1, #1
	movs r0, #2
	strb r0, [r1]
	adds r1, #1
	movs r0, #1
	strb r0, [r1]
	bl GetBgPriority
	adds r1, r4, #0
	adds r1, #0x3a
	strb r0, [r1]
	subs r1, #4
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x34]
	strb r0, [r1]
	adds r1, #1
	ldr r0, [r4, #0x14]
	ldrh r0, [r0, #0x36]
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x39
	movs r1, #0xfe
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	adds r0, r4, #0
	bl func_080BBC54
	ldrb r1, [r5]
	movs r0, #3
	orrs r0, r1
	strb r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BBEB8

	THUMB_FUNC_START func_080BBF1C
func_080BBF1C: @ 0x080BBF1C
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	cmp r2, #0
	ble .L080BBF50
	ldr r0, .L080BBF58  @ 0x0000F3FF
	mov ip, r0
	ldr r0, .L080BBF5C  @ 0xFFFFF3FF
	adds r6, r0, #0
	movs r7, #0xc0
	lsls r7, r7, #4
	adds r4, r2, #0
.L080BBF36:
	ldrh r2, [r3]
	mov r1, ip
	ands r1, r2
	adds r1, r5, r1
	ands r1, r6
	adds r0, r7, #0
	ands r0, r2
	orrs r1, r0
	strh r1, [r3]
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bne .L080BBF36
.L080BBF50:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BBF58: .4byte 0x0000F3FF
.L080BBF5C: .4byte 0xFFFFF3FF

	THUMB_FUNC_END func_080BBF1C

	THUMB_FUNC_START func_080BBF60
func_080BBF60: @ 0x080BBF60
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne .L080BBF7A
	b .L080BC0AA
.L080BBF7A:
	adds r6, r7, #0
	adds r6, #0x36
	ldrb r0, [r6]
	adds r5, r7, #0
	adds r5, #0x38
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x37
	ldrb r0, [r4]
	adds r3, r7, #0
	adds r3, #0x39
	strb r0, [r3]
	add r2, sp, #4
	ldr r1, [r7, #0x14]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1, #0x36]
	strh r0, [r2]
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	mov r8, r6
	mov ip, r5
	adds r6, r4, #0
	mov r9, r2
	cmp r0, #0
	bge .L080BBFB4
	adds r0, #7
.L080BBFB4:
	asrs r0, r0, #3
	mov r2, r8
	strb r0, [r2]
	mov r4, r9
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge .L080BBFC6
	adds r0, #7
.L080BBFC6:
	asrs r0, r0, #3
	strb r0, [r6]
	ldrh r0, [r7, #0x36]
	adds r5, r7, #0
	adds r5, #0x34
	ldrh r2, [r7, #0x38]
	cmp r0, r2
	beq .L080BC054
	mov r4, r8
	movs r2, #0
	ldrsb r2, [r4, r2]
	mov r1, ip
	movs r0, #0
	ldrsb r0, [r1, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt .L080BBFEE
	cmp r1, #1
	bgt .L080BC00E
	b .L080BBFF4
.L080BBFEE:
	subs r0, r0, r2
	cmp r0, #1
	bgt .L080BC00E
.L080BBFF4:
	movs r2, #0
	ldrsb r2, [r6, r2]
	movs r0, #0
	ldrsb r0, [r3, r0]
	subs r1, r2, r0
	cmp r1, #0
	blt .L080BC008
	cmp r1, #1
	bgt .L080BC00E
	b .L080BC02C
.L080BC008:
	subs r0, r0, r2
	cmp r0, #1
	ble .L080BC02C
.L080BC00E:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r7, #0
	adds r4, #0x34
	ldrb r2, [r4]
	bl func_080BBCC8
	ldrb r0, [r4]
	bl EnableBgSyncById
	adds r5, r4, #0
	b .L080BC054
.L080BC02C:
	mov r4, r8
	movs r0, #0
	ldrsb r0, [r4, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	mov r4, ip
	movs r2, #0
	ldrsb r2, [r4, r2]
	ldrb r3, [r3]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	adds r5, r7, #0
	adds r5, #0x34
	ldrb r4, [r5]
	str r4, [sp]
	bl func_080BBDA4
	ldrb r0, [r5]
	bl EnableBgSyncById
.L080BC054:
	adds r4, r7, #0
	adds r4, #0x31
	ldrb r1, [r4]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BC070
	adds r0, r7, #0
	bl func_080BBC54
	ldrb r1, [r4]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r4]
.L080BC070:
	ldrb r1, [r4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BC098
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	ldrb r2, [r5]
	bl func_080BBCC8
	ldrb r0, [r5]
	bl EnableBgSyncById
	ldrb r1, [r4]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r4]
.L080BC098:
	ldrb r0, [r5]
	add r1, sp, #4
	ldrh r2, [r1]
	ldr r1, .L080BC0B8  @ 0x000001FF
	ands r1, r2
	mov r3, r9
	ldrb r2, [r3]
	bl SetBgOffset
.L080BC0AA:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BC0B8: .4byte 0x000001FF

	THUMB_FUNC_END func_080BBF60

	THUMB_FUNC_START GMapRoute_StartTransition
GMapRoute_StartTransition: @ 0x080BC0BC
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x35
	ldrb r0, [r4]
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r0, [r4]
	bl EnableBgSyncById
	ldr r0, .L080BC0F0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080BC0E8
	movs r0, #0xc4
	lsls r0, r0, #2
	bl m4aSongNumStart
.L080BC0E8:
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080BC0F0: .4byte gPlaySt

	THUMB_FUNC_END GMapRoute_StartTransition

	THUMB_FUNC_START func_080BC0F4
func_080BC0F4: @ 0x080BC0F4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	ldr r2, .L080BC174  @ gDispIo+0x3C
	ldrh r0, [r2]
	ldr r1, .L080BC178  @ 0x0000FFC0
	ands r1, r0
	adds r5, r4, #0
	adds r5, #0x35
	movs r0, #1
	ldrb r3, [r5]
	lsls r0, r3
	orrs r1, r0
	ldr r0, .L080BC17C  @ 0x0000C0FF
	ands r1, r0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r3, #0
	orrs r1, r0
	strh r1, [r2]
	adds r0, r4, #0
	bl func_080BBC54
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x37
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r2, [r5]
	bl func_080BBCC8
	mov r2, sp
	ldr r1, [r4, #0x14]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	mov r0, sp
	adds r0, #2
	ldrh r3, [r1, #0x36]
	strh r3, [r0]
	ldrb r0, [r5]
	mov r1, sp
	ldrh r2, [r1]
	ldr r1, .L080BC180  @ 0x000001FF
	ands r1, r2
	movs r2, #0xff
	ands r2, r3
	bl SetBgOffset
	movs r0, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080BC174: .4byte gDispIo+0x3C
.L080BC178: .4byte 0x0000FFC0
.L080BC17C: .4byte 0x0000C0FF
.L080BC180: .4byte 0x000001FF

	THUMB_FUNC_END func_080BC0F4

	THUMB_FUNC_START GMapRoute_EnableBGSyncs
GMapRoute_EnableBGSyncs: @ 0x080BC184
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x35
	ldrb r5, [r6]
	movs r0, #3
	bl GetBgPriority
	adds r1, r0, #0
	adds r0, r5, #0
	bl SetBgPriority
	movs r1, #1
	adds r0, r1, #0
	ldrb r6, [r6]
	lsls r0, r6
	adds r4, #0x34
	ldrb r4, [r4]
	lsls r1, r4
	orrs r0, r1
	bl EnableBgSync
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END GMapRoute_EnableBGSyncs

	THUMB_FUNC_START GMapRoute_TransitionLoop
GMapRoute_TransitionLoop: @ 0x080BC1B8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x3e]
	adds r0, #1
	strh r0, [r6, #0x3e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x3c
	ldrsh r1, [r6, r2]
	cmp r0, r1
	bge .L080BC1F2
	movs r1, #0x3e
	ldrsh r0, [r6, r1]
	lsls r0, r0, #4
	movs r2, #0x3c
	ldrsh r1, [r6, r2]
	bl __divsi3
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080BC220
.L080BC1F2:
	adds r0, r6, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl GetBgTilemap
	adds r5, r0, #0
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r0, [r4]
	bl GetBgTilemap
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r5, #0
	bl CpuFastSet
	ldrb r0, [r4]
	bl EnableBgSyncById
	adds r0, r6, #0
	bl Proc_Break
.L080BC220:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END GMapRoute_TransitionLoop

	THUMB_FUNC_START GMapRoute_TransitionEnd
GMapRoute_TransitionEnd: @ 0x080BC228
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x35
	ldrb r0, [r4]
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrb r0, [r4]
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r0, [r4]
	adds r1, r5, #0
	adds r1, #0x3a
	ldrb r1, [r1]
	bl SetBgPriority
	adds r2, r5, #0
	adds r2, #0x34
	movs r1, #1
	adds r0, r1, #0
	ldrb r2, [r2]
	lsls r0, r2
	ldrb r4, [r4]
	lsls r1, r4
	orrs r0, r1
	bl EnableBgSync
	bl SetBlendNone
	ldr r2, .L080BC290  @ gDispIo+0x3C
	ldrh r1, [r2]
	ldr r0, .L080BC294  @ 0x0000FFC0
	ands r0, r1
	ldr r1, .L080BC298  @ 0x0000C0FF
	ands r0, r1
	strh r0, [r2]
	adds r2, r5, #0
	adds r2, #0x32
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080BC290: .4byte gDispIo+0x3C
.L080BC294: .4byte 0x0000FFC0
.L080BC298: .4byte 0x0000C0FF

	THUMB_FUNC_END GMapRoute_TransitionEnd

	THUMB_FUNC_START MapRoute_BeginRouteTransition
MapRoute_BeginRouteTransition: @ 0x080BC29C
	push {lr}
	adds r2, r0, #0
	cmp r1, #1
	bgt .L080BC2BC
	adds r3, r2, #0
	adds r3, #0x31
	ldrb r1, [r3]
	movs r0, #3
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x32
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	b .L080BC2D6
.L080BC2BC:
	movs r0, #0
	strh r1, [r2, #0x3c]
	strh r0, [r2, #0x3e]
	adds r3, r2, #0
	adds r3, #0x32
	ldrb r1, [r3]
	movs r0, #1
	orrs r0, r1
	strb r0, [r3]
	adds r0, r2, #0
	movs r1, #1
	bl Proc_Goto
.L080BC2D6:
	pop {r0}
	bx r0

	THUMB_FUNC_END MapRoute_BeginRouteTransition

	THUMB_FUNC_START GMapRoute_80BC2DC
GMapRoute_80BC2DC: @ 0x080BC2DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x32
	ldrb r1, [r7]
	movs r0, #1
	mov r8, r0
	ands r0, r1
	cmp r0, #0
	beq .L080BC38A
	mov r2, sp
	ldr r1, [r6, #0x14]
	ldrh r0, [r1, #0x34]
	strh r0, [r2]
	mov r4, sp
	adds r4, #2
	ldrh r0, [r1, #0x36]
	strh r0, [r4]
	adds r0, r6, #0
	bl func_080BBC54
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bge .L080BC318
	adds r0, #7
.L080BC318:
	asrs r0, r0, #3
	movs r2, #0
	ldrsh r1, [r4, r2]
	cmp r1, #0
	bge .L080BC324
	adds r1, #7
.L080BC324:
	asrs r1, r1, #3
	adds r4, r6, #0
	adds r4, #0x34
	ldrb r2, [r4]
	bl func_080BBCC8
	adds r5, r6, #0
	adds r5, #0x35
	ldrb r0, [r5]
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrb r0, [r5]
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	ldrb r0, [r5]
	adds r1, r6, #0
	adds r1, #0x3a
	ldrb r1, [r1]
	bl SetBgPriority
	mov r0, r8
	ldrb r4, [r4]
	lsls r0, r4
	mov r1, r8
	ldrb r5, [r5]
	lsls r1, r5
	orrs r0, r1
	bl EnableBgSync
	bl SetBlendNone
	ldr r2, .L080BC398  @ gDispIo+0x3C
	ldrh r1, [r2]
	ldr r0, .L080BC39C  @ 0x0000FFC0
	ands r0, r1
	ldr r1, .L080BC3A0  @ 0x0000C0FF
	ands r0, r1
	strh r0, [r2]
	ldrb r1, [r7]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r7]
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
.L080BC38A:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BC398: .4byte gDispIo+0x3C
.L080BC39C: .4byte 0x0000FFC0
.L080BC3A0: .4byte 0x0000C0FF

	THUMB_FUNC_END GMapRoute_80BC2DC

	THUMB_FUNC_START StartGMapRoute
StartGMapRoute: @ 0x080BC3A4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r0, .L080BC3D0  @ gUnknown_08A3DFC4
	adds r1, r4, #0
	bl SpawnProc
	str r5, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	strb r6, [r1]
	mov r1, r8
	str r1, [r0, #0x40]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080BC3D0: .4byte gUnknown_08A3DFC4

	THUMB_FUNC_END StartGMapRoute

	THUMB_FUNC_START func_080BC3D4
func_080BC3D4: @ 0x080BC3D4
	push {lr}
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	ldr r0, .L080BC3EC  @ gUnknown_08206674
	adds r1, r1, r0
	ldr r1, [r1, #8]
	cmp r1, #0
	bne .L080BC3F0
	movs r0, #0
	b .L080BC400
	.align 2, 0
.L080BC3EC: .4byte gUnknown_08206674
.L080BC3F0:
	movs r2, #0
	b .L080BC3F8
.L080BC3F4:
	adds r1, #8
	adds r2, #1
.L080BC3F8:
	ldr r0, [r1]
	cmp r0, #0
	bge .L080BC3F4
	adds r0, r2, #0
.L080BC400:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC3D4

	THUMB_FUNC_START func_080BC404
func_080BC404: @ 0x080BC404
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x34
	ldrb r0, [r4]
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #1
	ldrb r4, [r4]
	lsls r0, r4
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BC404

	THUMB_FUNC_START func_080BC428
func_080BC428: @ 0x080BC428
	push {r4, r5, r6, lr}
	movs r4, #0
	adds r1, r0, #0
	adds r1, #0x60
	ldrb r2, [r1]
	cmp r4, r2
	bge .L080BC44E
	adds r6, r0, #0
	adds r6, #0x34
	adds r5, r1, #0
.L080BC43C:
	ldm r6!, {r0}
	adds r0, #0x34
	movs r1, #0
	bl Text_SetCursor
	adds r4, #1
	ldrb r0, [r5]
	cmp r4, r0
	blt .L080BC43C
.L080BC44E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BC428

	THUMB_FUNC_START func_080BC454
func_080BC454: @ 0x080BC454
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L080BC47C  @ gGmData
	movs r0, #0
	strb r0, [r1, #1]
	ldr r0, .L080BC480  @ gUnknown_0201AFC0
	ldr r1, .L080BC484  @ 0x06001000
	movs r2, #0x80
	movs r3, #0
	bl InitTextFont
	ldr r0, .L080BC488  @ gUnknown_08A3E124
	ldr r1, .L080BC48C  @ gUnknown_08A3E148
	ldr r1, [r1]
	adds r2, r4, #0
	bl StartMenuAt
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080BC47C: .4byte gGmData
.L080BC480: .4byte gUnknown_0201AFC0
.L080BC484: .4byte 0x06001000
.L080BC488: .4byte gUnknown_08A3E124
.L080BC48C: .4byte gUnknown_08A3E148

	THUMB_FUNC_END func_080BC454

	THUMB_FUNC_START func_080BC490
func_080BC490: @ 0x080BC490
	push {lr}
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC490

	THUMB_FUNC_START func_080BC4A0
func_080BC4A0: @ 0x080BC4A0
	push {lr}
	bl ClearBg0Bg1
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC4A0

	THUMB_FUNC_START func_080BC4AC
func_080BC4AC: @ 0x080BC4AC
	push {lr}
	ldr r0, .L080BC4C0  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #3
	bl Proc_Goto
	movs r0, #0x1b
	pop {r1}
	bx r1
	.align 2, 0
.L080BC4C0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC4AC

	THUMB_FUNC_START func_080BC4C4
func_080BC4C4: @ 0x080BC4C4
	push {lr}
	ldr r0, .L080BC4D8  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #9
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC4D8: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC4C4

	THUMB_FUNC_START func_080BC4DC
func_080BC4DC: @ 0x080BC4DC
	push {lr}
	ldr r0, .L080BC4F0  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0xc
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC4F0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC4DC

	THUMB_FUNC_START func_080BC4F4
func_080BC4F4: @ 0x080BC4F4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r1, r6, #0
	adds r1, #0x63
	ldrb r2, [r1]
	movs r1, #8
	ands r1, r2
	cmp r1, #0
	bne .L080BC566
	bl func_080CF480
	lsls r0, r0, #0x18
	adds r4, r5, #0
	adds r4, #0x34
	cmp r0, #0
	bne .L080BC51E
	adds r0, r4, #0
	movs r1, #4
	bl Text_SetColor
.L080BC51E:
	adds r0, r5, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #2
	bne .L080BC530
	adds r0, r4, #0
	movs r1, #1
	bl Text_SetColor
.L080BC530:
	ldr r0, [r5, #0x30]
	ldrh r0, [r0, #4]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r6, #0
	adds r0, #0x64
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	bl GetBgTilemap
	adds r1, r0, #0
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	lsls r0, r0, #5
	movs r3, #0x2a
	ldrsh r2, [r5, r3]
	adds r0, r0, r2
	lsls r0, r0, #1
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
.L080BC566:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC4F4

	THUMB_FUNC_START func_080BC56C
func_080BC56C: @ 0x080BC56C
	push {lr}
	ldr r0, .L080BC580  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0xa
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC580: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC56C

	THUMB_FUNC_START func_080BC584
func_080BC584: @ 0x080BC584
	push {lr}
	ldr r0, .L080BC598  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0xb
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC598: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC584

	THUMB_FUNC_START func_080BC59C
func_080BC59C: @ 0x080BC59C
	push {lr}
	ldr r0, .L080BC5B0  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0xd
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC5B0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC59C

	THUMB_FUNC_START func_080BC5B4
func_080BC5B4: @ 0x080BC5B4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L080BC5E0  @ gGmData
	movs r0, #0
	strb r0, [r4, #1]
	ldr r0, .L080BC5E4  @ gUnknown_0201AFC0
	ldr r1, .L080BC5E8  @ 0x06001000
	movs r2, #0x80
	movs r3, #0
	bl InitTextFont
	ldr r0, [r4, #8]
	asrs r0, r0, #8
	movs r2, #2
	ldrsh r1, [r4, r2]
	subs r0, r0, r1
	cmp r0, #0x97
	bgt .L080BC5F4
	ldr r0, .L080BC5EC  @ gUnknown_08A3E200
	ldr r1, .L080BC5F0  @ gUnknown_08A3E224
	b .L080BC5F8
	.align 2, 0
.L080BC5E0: .4byte gGmData
.L080BC5E4: .4byte gUnknown_0201AFC0
.L080BC5E8: .4byte 0x06001000
.L080BC5EC: .4byte gUnknown_08A3E200
.L080BC5F0: .4byte gUnknown_08A3E224
.L080BC5F4:
	ldr r0, .L080BC618  @ gUnknown_08A3E200
	ldr r1, .L080BC61C  @ gUnknown_08A3E228
.L080BC5F8:
	ldr r1, [r1]
	adds r2, r5, #0
	bl StartMenuAt
	adds r3, r0, #0
	ldr r0, .L080BC620  @ gGmData
	adds r0, #0xcd
	adds r1, r3, #0
	adds r1, #0x60
	ldrb r2, [r0]
	ldrb r0, [r1]
	cmp r2, r0
	bcs .L080BC624
	adds r1, #1
	strb r2, [r1]
	b .L080BC62C
	.align 2, 0
.L080BC618: .4byte gUnknown_08A3E200
.L080BC61C: .4byte gUnknown_08A3E228
.L080BC620: .4byte gGmData
.L080BC624:
	subs r0, #1
	adds r2, r3, #0
	adds r2, #0x61
	strb r0, [r2]
.L080BC62C:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC5B4

	THUMB_FUNC_START func_080BC634
func_080BC634: @ 0x080BC634
	push {lr}
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC634

	THUMB_FUNC_START func_080BC644
func_080BC644: @ 0x080BC644
	push {lr}
	bl ClearBg0Bg1
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC644

	THUMB_FUNC_START func_080BC650
func_080BC650: @ 0x080BC650
	push {lr}
	ldr r0, .L080BC66C  @ gGmData
	adds r0, #0xcd
	movs r1, #0
	strb r1, [r0]
	ldr r0, .L080BC670  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #3
	bl Proc_Goto
	movs r0, #0x1b
	pop {r1}
	bx r1
	.align 2, 0
.L080BC66C: .4byte gGmData
.L080BC670: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC650

	THUMB_FUNC_START func_080BC674
func_080BC674: @ 0x080BC674
	push {lr}
	ldr r1, .L080BC69C  @ gGmData
	ldrb r2, [r1, #0x11]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080BC6A4
	lsls r0, r2, #5
	ldr r1, .L080BC6A0  @ gUnknown_082060B0
	adds r0, r0, r1
	ldr r0, [r0, #0xc]
	ldrh r0, [r0]
	cmp r0, #0
	beq .L080BC6A4
	movs r0, #1
	b .L080BC6A6
	.align 2, 0
.L080BC69C: .4byte gGmData
.L080BC6A0: .4byte gUnknown_082060B0
.L080BC6A4:
	movs r0, #3
.L080BC6A6:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC674

	THUMB_FUNC_START func_080BC6AC
func_080BC6AC: @ 0x080BC6AC
	push {lr}
	ldr r1, .L080BC6D4  @ gGmData
	ldrb r2, [r1, #0x11]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080BC6DC
	lsls r0, r2, #5
	ldr r1, .L080BC6D8  @ gUnknown_082060B0
	adds r0, r0, r1
	ldr r0, [r0, #0x10]
	ldrh r0, [r0]
	cmp r0, #0
	beq .L080BC6DC
	movs r0, #1
	b .L080BC6DE
	.align 2, 0
.L080BC6D4: .4byte gGmData
.L080BC6D8: .4byte gUnknown_082060B0
.L080BC6DC:
	movs r0, #3
.L080BC6DE:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC6AC

	THUMB_FUNC_START func_080BC6E4
func_080BC6E4: @ 0x080BC6E4
	push {lr}
	ldr r1, .L080BC718  @ gGmData
	ldrb r2, [r1, #0x11]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080BC724
	lsls r0, r2, #5
	ldr r1, .L080BC71C  @ gUnknown_082060B0
	adds r0, r0, r1
	ldr r0, [r0, #0x14]
	ldrh r0, [r0]
	cmp r0, #0
	beq .L080BC724
	ldr r0, .L080BC720  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080BC724
	movs r0, #1
	b .L080BC726
	.align 2, 0
.L080BC718: .4byte gGmData
.L080BC71C: .4byte gUnknown_082060B0
.L080BC720: .4byte gPlaySt
.L080BC724:
	movs r0, #3
.L080BC726:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC6E4

	THUMB_FUNC_START func_080BC72C
func_080BC72C: @ 0x080BC72C
	push {lr}
	ldr r1, .L080BC748  @ gGmData
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BC74C
	movs r0, #3
	b .L080BC74E
	.align 2, 0
.L080BC748: .4byte gGmData
.L080BC74C:
	movs r0, #1
.L080BC74E:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC72C

	THUMB_FUNC_START func_080BC754
func_080BC754: @ 0x080BC754
	push {lr}
	ldr r1, .L080BC770  @ gGmData
	ldrb r0, [r1, #0x11]
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080BC774
	movs r0, #3
	b .L080BC776
	.align 2, 0
.L080BC770: .4byte gGmData
.L080BC774:
	movs r0, #1
.L080BC776:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BC754

	THUMB_FUNC_START func_080BC77C
func_080BC77C: @ 0x080BC77C
	push {lr}
	ldr r1, .L080BC79C  @ gGmData
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, .L080BC7A0  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0x13
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC79C: .4byte gGmData
.L080BC7A0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC77C

	THUMB_FUNC_START func_080BC7A4
func_080BC7A4: @ 0x080BC7A4
	push {lr}
	ldr r1, .L080BC7C4  @ gGmData
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, .L080BC7C8  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0x14
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC7C4: .4byte gGmData
.L080BC7C8: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC7A4

	THUMB_FUNC_START func_080BC7CC
func_080BC7CC: @ 0x080BC7CC
	push {lr}
	ldr r1, .L080BC7EC  @ gGmData
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, .L080BC7F0  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0x15
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC7EC: .4byte gGmData
.L080BC7F0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC7CC

	THUMB_FUNC_START func_080BC7F4
func_080BC7F4: @ 0x080BC7F4
	push {lr}
	ldr r1, .L080BC814  @ gGmData
	adds r0, #0x61
	ldrb r0, [r0]
	adds r1, #0xcd
	strb r0, [r1]
	ldr r0, .L080BC818  @ gUnknown_08A3D748
	bl FindProc
	movs r1, #0x16
	bl Proc_Goto
	movs r0, #0x17
	pop {r1}
	bx r1
	.align 2, 0
.L080BC814: .4byte gGmData
.L080BC818: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BC7F4

	THUMB_FUNC_START GmDataInit
GmDataInit: @ 0x080BC81C
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r4, .L080BC890  @ gGmData
	ldr r2, .L080BC894  @ 0x05000035
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	adds r0, r4, #0
	adds r0, #0xa4
	bl GmPathsInit
	movs r5, #0
	movs r6, #0xfd
	adds r2, r4, #0
	adds r2, #0x10
	movs r3, #6
.L080BC842:
	strh r5, [r2, #2]
	ldrb r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	strb r0, [r2]
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge .L080BC842
	movs r3, #0
	movs r0, #1
	strh r0, [r4, #0x12]
	ldrb r1, [r4, #0x10]
	movs r0, #0xfd
	ands r0, r1
	strb r0, [r4, #0x10]
	strb r3, [r4, #0x11]
	adds r2, r4, #0
	adds r2, #0x30
	ldrb r1, [r2]
	movs r0, #2
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r4]
	movs r1, #4
	orrs r0, r1
	movs r1, #0x30
	orrs r0, r1
	strb r0, [r4]
	adds r0, r4, #0
	adds r0, #0xcd
	strb r3, [r0]
	adds r0, #1
	bl RandGetSt
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BC890: .4byte gGmData
.L080BC894: .4byte 0x05000035

	THUMB_FUNC_END GmDataInit

	THUMB_FUNC_START GmPathsInit
GmPathsInit: @ 0x080BC898
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	movs r4, #0xff
.L080BC8A0:
	adds r1, r3, r2
	ldrb r0, [r1]
	orrs r0, r4
	strb r0, [r1]
	adds r2, #1
	cmp r2, #0x1f
	bls .L080BC8A0
	adds r1, r3, #0
	adds r1, #0x20
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmPathsInit

	THUMB_FUNC_START AddGmPath
AddGmPath: @ 0x080BC8BC
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	adds r3, #0x20
	ldrb r0, [r3]
	cmp r0, #0x1f
	bls .L080BC8CE
	movs r0, #1
	b .L080BC8E4
.L080BC8CE:
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, r1, r0
	strb r2, [r0]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	adds r0, r4, #0
	bl RefreshGmNodeLinks
	movs r0, #0
.L080BC8E4:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END AddGmPath

	THUMB_FUNC_START RemoveGmPath
RemoveGmPath: @ 0x080BC8EC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	adds r1, #0x20
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble .L080BC966
	cmp r4, #0
	bge .L080BC914
	subs r0, r2, #1
	strb r0, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r0, r5, r0
	movs r1, #0xff
	strb r1, [r0]
	b .L080BC952
.L080BC914:
	movs r3, #0
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r3, r0
	bge .L080BC966
	adds r2, r1, #0
.L080BC920:
	adds r1, r5, r3
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, r4
	bne .L080BC95C
	adds r4, r2, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r0, #1
	adds r5, #0x20
	cmp r3, r0
	bge .L080BC94C
	adds r2, r1, #0
.L080BC93A:
	ldrb r0, [r2, #1]
	strb r0, [r2]
	adds r2, #1
	adds r3, #1
	movs r0, #0
	ldrsb r0, [r4, r0]
	subs r0, #1
	cmp r3, r0
	blt .L080BC93A
.L080BC94C:
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
.L080BC952:
	adds r0, r6, #0
	bl RefreshGmNodeLinks
	movs r0, #0
	b .L080BC968
.L080BC95C:
	adds r3, #1
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r3, r0
	blt .L080BC920
.L080BC966:
	movs r0, #1
.L080BC968:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END RemoveGmPath

	THUMB_FUNC_START RefreshGmNodeLinksExt
RefreshGmNodeLinksExt: @ 0x080BC970
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	mov r8, r1
	movs r0, #0
	str r0, [sp]
	ldr r2, .L080BCA04  @ 0x0500003A
	mov r0, sp
	bl CpuSet
	movs r2, #0
	adds r0, r4, #0
	adds r0, #0xa4
	adds r4, #0xc4
	movs r1, #0
	ldrsb r1, [r4, r1]
	cmp r2, r1
	bge .L080BC9F4
	mov r9, r0
	ldr r3, .L080BCA08  @ gUnknown_08206674
	mov sl, r3
	mov ip, r1
.L080BC9A4:
	adds r0, r0, r2
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r5, #0
	adds r7, r2, #1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, sl
	adds r6, r0, #4
	adds r4, r0, #5
.L080BC9BA:
	adds r0, r6, r5
	movs r2, #0
	ldrsb r2, [r0, r2]
	lsls r0, r2, #3
	mov r1, r8
	adds r3, r1, r0
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, r3, r0
	ldrb r1, [r4]
	strb r1, [r0, #1]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	cmp r2, #0
	bne .L080BC9E4
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, r3, r0
	ldrb r1, [r4]
	strb r1, [r0, #1]
.L080BC9E4:
	subs r4, #1
	adds r5, #1
	cmp r5, #1
	ble .L080BC9BA
	adds r2, r7, #0
	mov r0, r9
	cmp r2, ip
	blt .L080BC9A4
.L080BC9F4:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BCA04: .4byte 0x0500003A
.L080BCA08: .4byte gUnknown_08206674

	THUMB_FUNC_END RefreshGmNodeLinksExt

	THUMB_FUNC_START RefreshGmNodeLinks
RefreshGmNodeLinks: @ 0x080BCA0C
	push {lr}
	ldr r1, .L080BCA18  @ gUnknown_0201AFF0
	bl RefreshGmNodeLinksExt
	pop {r0}
	bx r0
	.align 2, 0
.L080BCA18: .4byte gUnknown_0201AFF0

	THUMB_FUNC_END RefreshGmNodeLinks

	THUMB_FUNC_START func_080BCA1C
func_080BCA1C: @ 0x080BCA1C
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #4
	ldr r0, .L080BCA3C  @ gGmData
	adds r1, r0, #0
	adds r1, #0x10
.L080BCA28:
	movs r4, #0x12
	ldrsh r0, [r1, r4]
	cmp r0, #0
	beq .L080BCA40
	ldrb r0, [r1, #0x11]
	cmp r3, r0
	bne .L080BCA40
	adds r0, r2, #0
	b .L080BCA4C
	.align 2, 0
.L080BCA3C: .4byte gGmData
.L080BCA40:
	adds r1, #4
	adds r2, #1
	cmp r2, #6
	ble .L080BCA28
	movs r0, #1
	negs r0, r0
.L080BCA4C:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BCA1C

	THUMB_FUNC_START func_080BCA54
func_080BCA54: @ 0x080BCA54
	push {r4, r5, lr}
	adds r2, r0, #0
	movs r0, #0
	strb r0, [r2]
	ldr r0, .L080BCA8C  @ gGmData
	adds r5, r2, #1
	adds r3, r0, #0
	adds r3, #0x10
	movs r4, #2
.L080BCA66:
	movs r1, #0x12
	ldrsh r0, [r3, r1]
	cmp r0, #0
	beq .L080BCA7C
	ldrb r0, [r2]
	adds r0, r5, r0
	ldrb r1, [r3, #0x11]
	strb r1, [r0]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
.L080BCA7C:
	adds r3, #4
	subs r4, #1
	cmp r4, #0
	bge .L080BCA66
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BCA8C: .4byte gGmData

	THUMB_FUNC_END func_080BCA54

	THUMB_FUNC_START func_080BCA90
func_080BCA90: @ 0x080BCA90
	push {r4, lr}
	adds r4, r1, #0
	movs r2, #0
	ldrb r3, [r0]
	cmp r2, r3
	bge .L080BCAB0
	adds r1, r0, #1
.L080BCA9E:
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, r4
	bne .L080BCAAA
	movs r0, #1
	b .L080BCAB2
.L080BCAAA:
	adds r2, #1
	cmp r2, r3
	blt .L080BCA9E
.L080BCAB0:
	movs r0, #0
.L080BCAB2:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BCA90

	THUMB_FUNC_START func_080BCAB8
func_080BCAB8: @ 0x080BCAB8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	str r1, [sp, #8]
	ldr r0, [sp, #0x3c]
	ldr r1, [sp, #0x40]
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r0, [r7, #0x20]
	cmp r8, r0
	bge .L080BCB98
	lsls r0, r3, #0x18
	asrs r1, r0, #0x15
	ldr r2, [sp, #8]
	adds r2, r2, r1
	mov sl, r2
	movs r3, #0
	mov r9, r3
	movs r1, #0
	ldrsb r1, [r2, r1]
	str r0, [sp, #0x18]
	cmp r9, r1
	bge .L080BCB98
	adds r0, r7, #0
	adds r0, #0x10
	add r0, r8
	str r0, [sp, #0x14]
	mov r4, sl
	adds r4, #1
.L080BCB08:
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r5, [sp, #0xc]
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq .L080BCB88
	movs r2, #0
	ldr r3, [sp, #0x10]
	lsls r0, r3, #0x18
	asrs r6, r0, #0x18
	cmp r1, r6
	bne .L080BCB24
	movs r2, #1
.L080BCB24:
	adds r5, r2, #0
	cmp r5, #0
	bne .L080BCB3A
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldr r0, .L080BCB6C  @ gUnknown_0201B100
	bl func_080BCA90
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080BCB88
.L080BCB3A:
	ldrb r0, [r4]
	ldr r1, [sp, #0x14]
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x10
	cmp r5, #0
	beq .L080BCB70
	ldr r0, [r7, #0x20]
	cmp r8, r0
	bge .L080BCB68
	movs r2, #1
	cmp r2, r8
	bgt .L080BCB64
	adds r3, r1, #0
.L080BCB56:
	adds r0, r7, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, r8
	ble .L080BCB56
.L080BCB64:
	mov r2, r8
	str r2, [r7, #0x20]
.L080BCB68:
	movs r0, #1
	b .L080BCB9A
	.align 2, 0
.L080BCB6C: .4byte gUnknown_0201B100
.L080BCB70:
	movs r3, #0
	ldrsb r3, [r4, r3]
	str r6, [sp]
	mov r0, r8
	adds r0, #1
	str r0, [sp, #4]
	adds r0, r7, #0
	ldr r1, [sp, #8]
	ldr r5, [sp, #0x18]
	asrs r2, r5, #0x18
	bl func_080BCAB8
.L080BCB88:
	adds r4, #1
	movs r0, #1
	add r9, r0
	mov r1, sl
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r9, r0
	blt .L080BCB08
.L080BCB98:
	movs r0, #0
.L080BCB9A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BCAB8

	THUMB_FUNC_START func_080BCBAC
func_080BCBAC: @ 0x080BCBAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r0, #0
	mov r8, r1
	ldr r0, [sp, #0x3c]
	ldr r7, [sp, #0x40]
	ldr r1, [sp, #0x44]
	mov r9, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x10]
	ldr r0, [r6, #0x20]
	cmp r7, r0
	blt .L080BCBDC
	b .L080BCCE8
.L080BCBDC:
	lsls r0, r3, #0x18
	asrs r1, r0, #0x15
	add r1, r8
	str r1, [sp, #0x18]
	movs r2, #0
	str r2, [sp, #0x14]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov sl, r0
	cmp r2, r1
	blt .L080BCBF6
	b .L080BCCE8
.L080BCBF6:
	ldr r5, [sp, #0x18]
	adds r5, #1
.L080BCBFA:
	ldrb r3, [r5]
	movs r1, #0
	ldrsb r1, [r5, r1]
	ldr r4, [sp, #0xc]
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq .L080BCCD4
	movs r2, #0
	ldr r4, [sp, #0x10]
	lsls r0, r4, #0x18
	asrs r4, r0, #0x18
	cmp r1, r4
	bne .L080BCC18
	movs r2, #1
.L080BCC18:
	adds r1, r6, #0
	adds r1, #0x10
	adds r0, r1, r7
	strb r3, [r0]
	adds r3, r1, #0
	mov r0, r9
	cmp r0, #0
	blt .L080BCC62
	cmp r2, #0
	beq .L080BCC76
	movs r2, #0
	ldr r0, [r6, #0x24]
	cmp r9, r0
	bge .L080BCC3C
	mov r1, r9
	str r1, [r6, #0x24]
	movs r2, #1
	b .L080BCC4C
.L080BCC3C:
	cmp r9, r0
	bne .L080BCC48
	ldr r0, [r6, #0x20]
	cmp r7, r0
	bge .L080BCC48
	movs r2, #1
.L080BCC48:
	cmp r2, #0
	beq .L080BCCB6
.L080BCC4C:
	movs r2, #1
	cmp r2, r7
	bgt .L080BCCB4
.L080BCC52:
	adds r0, r6, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, r7
	ble .L080BCC52
	b .L080BCCB4
.L080BCC62:
	cmp r2, #0
	bne .L080BCC98
	movs r1, #0
	ldrsb r1, [r5, r1]
	ldr r0, .L080BCC94  @ gUnknown_0201B100
	bl func_080BCA90
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080BCCBA
.L080BCC76:
	movs r3, #0
	ldrsb r3, [r5, r3]
	str r4, [sp]
	adds r0, r7, #1
	str r0, [sp, #4]
	mov r0, r9
	adds r0, #1
	str r0, [sp, #8]
	adds r0, r6, #0
	mov r1, r8
	mov r4, sl
	asrs r2, r4, #0x18
	bl func_080BCBAC
	b .L080BCCD4
	.align 2, 0
.L080BCC94: .4byte gUnknown_0201B100
.L080BCC98:
	ldr r0, [r6, #0x20]
	cmp r7, r0
	bge .L080BCCB6
	movs r2, #1
	cmp r2, r7
	bgt .L080BCCB4
	adds r3, r1, #0
.L080BCCA6:
	adds r0, r6, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, r7
	ble .L080BCCA6
.L080BCCB4:
	str r7, [r6, #0x20]
.L080BCCB6:
	movs r0, #1
	b .L080BCCEA
.L080BCCBA:
	movs r3, #0
	ldrsb r3, [r5, r3]
	str r4, [sp]
	adds r0, r7, #1
	str r0, [sp, #4]
	mov r0, r9
	str r0, [sp, #8]
	adds r0, r6, #0
	mov r1, r8
	mov r4, sl
	asrs r2, r4, #0x18
	bl func_080BCBAC
.L080BCCD4:
	adds r5, #1
	ldr r0, [sp, #0x14]
	adds r0, #1
	str r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	movs r0, #0
	ldrsb r0, [r1, r0]
	ldr r2, [sp, #0x14]
	cmp r2, r0
	blt .L080BCBFA
.L080BCCE8:
	movs r0, #0
.L080BCCEA:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BCBAC

	THUMB_FUNC_START func_080BCCFC
func_080BCCFC: @ 0x080BCCFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r4, r2, #0
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	str r7, [sp, #0x14]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r9, r1
	mov sl, r9
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, .L080BCD80  @ gUnknown_0201B100
	bl func_080BCA54
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	mov r8, r4
	cmp r4, #0
	beq .L080BCD32
	ldr r1, .L080BCD84  @ gUnknown_0201B0D8
	movs r0, #0x10
	str r0, [r1, #0x24]
.L080BCD32:
	ldr r6, .L080BCD84  @ gUnknown_0201B0D8
	movs r0, #0x10
	str r0, [r6, #0x20]
	movs r4, #0
	str r4, [sp, #0xc]
	ldr r5, .L080BCD88  @ 0x05000004
	add r0, sp, #0xc
	adds r1, r6, #0
	adds r2, r5, #0
	bl CpuSet
	str r4, [sp, #0x10]
	add r0, sp, #0x10
	adds r1, r6, #0
	adds r1, #0x10
	adds r2, r5, #0
	bl CpuSet
	strb r7, [r6]
	strb r7, [r6, #0x10]
	mov r0, r8
	cmp r0, #0
	beq .L080BCD90
	ldr r1, .L080BCD8C  @ gUnknown_0201AFF0
	movs r2, #1
	negs r2, r2
	lsls r3, r7, #0x18
	asrs r3, r3, #0x18
	mov r4, r9
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	movs r4, #1
	str r4, [sp, #4]
	str r2, [sp, #8]
	adds r0, r6, #0
	bl func_080BCBAC
	b .L080BCDAE
	.align 2, 0
.L080BCD80: .4byte gUnknown_0201B100
.L080BCD84: .4byte gUnknown_0201B0D8
.L080BCD88: .4byte 0x05000004
.L080BCD8C: .4byte gUnknown_0201AFF0
.L080BCD90:
	ldr r1, .L080BCDBC  @ gUnknown_0201AFF0
	movs r2, #1
	negs r2, r2
	ldr r0, [sp, #0x14]
	lsls r3, r0, #0x18
	asrs r3, r3, #0x18
	mov r4, sl
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	movs r4, #1
	str r4, [sp, #4]
	adds r0, r6, #0
	bl func_080BCAB8
.L080BCDAE:
	cmp r0, #0
	beq .L080BCDC0
	ldrb r0, [r6, #0x11]
	strb r0, [r6, #1]
	str r4, [r6, #0x20]
	movs r0, #1
	b .L080BCDCE
	.align 2, 0
.L080BCDBC: .4byte gUnknown_0201AFF0
.L080BCDC0:
	movs r1, #0
	ldr r0, .L080BCDE0  @ gUnknown_0201B0D8
	ldr r0, [r0, #0x20]
	cmp r0, #0xf
	bgt .L080BCDCC
	movs r1, #1
.L080BCDCC:
	adds r0, r1, #0
.L080BCDCE:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080BCDE0: .4byte gUnknown_0201B0D8

	THUMB_FUNC_END func_080BCCFC

	THUMB_FUNC_START func_080BCDE4
func_080BCDE4: @ 0x080BCDE4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	movs r1, #0
	ldr r3, .L080BCE04  @ gUnknown_08206674
.L080BCDEE:
	movs r0, #4
	ldrsb r0, [r3, r0]
	cmp r5, r0
	bne .L080BCE08
	movs r0, #5
	ldrsb r0, [r3, r0]
	cmp r4, r0
	bne .L080BCE08
	movs r0, #0
	b .L080BCE1A
	.align 2, 0
.L080BCE04: .4byte gUnknown_08206674
.L080BCE08:
	movs r0, #5
	ldrsb r0, [r3, r0]
	cmp r5, r0
	bne .L080BCE20
	movs r0, #4
	ldrsb r0, [r3, r0]
	cmp r4, r0
	bne .L080BCE20
	movs r0, #1
.L080BCE1A:
	str r0, [r2]
	adds r0, r1, #0
	b .L080BCE2C
.L080BCE20:
	adds r3, #0xc
	adds r1, #1
	cmp r1, #0x1f
	bls .L080BCDEE
	movs r0, #1
	negs r0, r0
.L080BCE2C:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BCDE4

	THUMB_FUNC_START func_080BCE34
func_080BCE34: @ 0x080BCE34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r3, #0
	ldr r5, [sp, #0x3c]
	ldr r3, [sp, #0x40]
	mov r9, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp, #4]
	mov r2, sp
	bl func_080BCDE4
	mov sl, r0
	cmp r0, #0
	bge .L080BCE5E
	movs r0, #0
	b .L080BCF9A
.L080BCE5E:
	movs r0, #0
	strh r0, [r6]
	mov r0, sl
	lsls r4, r0, #1
	adds r0, r4, r0
	lsls r0, r0, #2
	ldr r1, .L080BCF00  @ gUnknown_08206674
	adds r0, r0, r1
	mov r8, r0
	adds r0, #4
	ldr r1, [sp]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r0, #5
	ldr r0, .L080BCF04  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r2, #0x18
	ldrsh r0, [r1, r2]
	mov r3, r9
	lsls r0, r3
	str r0, [r5]
	movs r2, #0x1a
	ldrsh r0, [r1, r2]
	lsls r0, r3
	str r0, [r5, #4]
	adds r6, #2
	adds r5, #8
	mov r0, sl
	bl func_080BC3D4
	adds r3, r0, #0
	ldr r0, [sp]
	str r4, [sp, #0x10]
	cmp r0, #0
	bne .L080BCF08
	movs r7, #0
	adds r0, r3, #2
	str r0, [sp, #0xc]
	cmp r7, r3
	bge .L080BCF60
	mov r2, r8
	ldr r1, [sp, #4]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
.L080BCEBC:
	ldr r0, [r2, #8]
	lsls r4, r7, #3
	adds r0, r4, r0
	ldr r0, [r0]
	mov r1, r8
	muls r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #5
	str r2, [sp, #0x14]
	str r3, [sp, #0x18]
	bl DivArm
	strh r0, [r6]
	ldr r2, [sp, #0x14]
	ldr r0, [r2, #8]
	adds r4, r4, r0
	movs r1, #4
	ldrsh r0, [r4, r1]
	mov r1, r9
	lsls r0, r1
	str r0, [r5]
	movs r1, #6
	ldrsh r0, [r4, r1]
	mov r1, r9
	lsls r0, r1
	str r0, [r5, #4]
	adds r6, #2
	adds r5, #8
	adds r7, #1
	ldr r3, [sp, #0x18]
	cmp r7, r3
	blt .L080BCEBC
	b .L080BCF60
	.align 2, 0
.L080BCF00: .4byte gUnknown_08206674
.L080BCF04: .4byte gUnknown_082060B0
.L080BCF08:
	subs r7, r3, #1
	adds r3, #2
	str r3, [sp, #0xc]
	cmp r7, #0
	blt .L080BCF60
	ldr r2, [sp, #4]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	str r0, [sp, #8]
	mov r2, r8
.L080BCF1C:
	ldr r0, [r2, #8]
	lsls r4, r7, #3
	adds r0, r4, r0
	ldr r0, [r0]
	movs r3, #0x80
	lsls r3, r3, #5
	subs r0, r3, r0
	ldr r3, [sp, #8]
	adds r1, r3, #0
	muls r1, r0, r1
	mov r8, r1
	movs r0, #0x80
	lsls r0, r0, #5
	str r2, [sp, #0x14]
	bl DivArm
	strh r0, [r6]
	ldr r2, [sp, #0x14]
	ldr r0, [r2, #8]
	adds r4, r4, r0
	movs r1, #4
	ldrsh r0, [r4, r1]
	mov r3, r9
	lsls r0, r3
	str r0, [r5]
	movs r1, #6
	ldrsh r0, [r4, r1]
	lsls r0, r3
	str r0, [r5, #4]
	adds r6, #2
	adds r5, #8
	subs r7, #1
	cmp r7, #0
	bge .L080BCF1C
.L080BCF60:
	mov r2, sp
	ldrh r2, [r2, #4]
	strh r2, [r6]
	ldr r0, [sp, #0x10]
	add r0, sl
	lsls r0, r0, #2
	ldr r1, .L080BCFAC  @ gUnknown_08206674
	adds r0, r0, r1
	ldr r2, [sp]
	movs r1, #1
	subs r1, r1, r2
	adds r0, #4
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r0, #5
	ldr r0, .L080BCFB0  @ gUnknown_082060B0
	adds r1, r1, r0
	movs r3, #0x18
	ldrsh r0, [r1, r3]
	mov r2, r9
	lsls r0, r2
	str r0, [r5]
	movs r3, #0x1a
	ldrsh r0, [r1, r3]
	lsls r0, r2
	str r0, [r5, #4]
	ldr r0, [sp, #0xc]
.L080BCF9A:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080BCFAC: .4byte gUnknown_08206674
.L080BCFB0: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080BCE34

	THUMB_FUNC_START ResetGmStoryNode
ResetGmStoryNode: @ 0x080BCFB4
	push {r4, lr}
	ldr r0, .L080BCFD8  @ gGmData
	movs r4, #0xfd
	adds r2, r0, #0
	adds r2, #0x30
	movs r3, #0x1c
.L080BCFC0:
	ldrb r1, [r2]
	adds r0, r4, #0
	ands r0, r1
	strb r0, [r2]
	adds r2, #4
	subs r3, #1
	cmp r3, #0
	bge .L080BCFC0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BCFD8: .4byte gGmData

	THUMB_FUNC_END ResetGmStoryNode

	THUMB_FUNC_START func_080BCFDC
func_080BCFDC: @ 0x080BCFDC
	push {r4, r5, lr}
	adds r5, r0, #0
	subs r0, #0x25
	cmp r0, #8
	bhi .L080BCFEE
	movs r5, #0x24
	b .L080BCFF8
.L080BCFEA:
	adds r0, r4, #0
	b .L080BD00E
.L080BCFEE:
	adds r0, r5, #0
	subs r0, #0x2f
	cmp r0, #8
	bhi .L080BCFF8
	movs r5, #0x2e
.L080BCFF8:
	movs r4, #0
.L080BCFFA:
	adds r0, r4, #0
	bl WMLocation_GetChapterId
	cmp r5, r0
	beq .L080BCFEA
	adds r4, #1
	cmp r4, #0x1c
	ble .L080BCFFA
	movs r0, #1
	negs r0, r0
.L080BD00E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BCFDC

	THUMB_FUNC_START func_080BD014
func_080BD014: @ 0x080BD014
	push {r4, r5, lr}
	movs r3, #0
	movs r5, #1
	movs r4, #2
	adds r2, r0, #0
	adds r2, #0x30
.L080BD020:
	ldrb r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BD036
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BD036
	adds r0, r3, #0
	b .L080BD042
.L080BD036:
	adds r2, #4
	adds r3, #1
	cmp r3, #0x1c
	ble .L080BD020
	movs r0, #1
	negs r0, r0
.L080BD042:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BD014

	THUMB_FUNC_START func_080BD048
func_080BD048: @ 0x080BD048
	push {lr}
	ldr r0, .L080BD05C  @ gGmData
	bl func_080BD014
	cmp r0, #0
	blt .L080BD060
	bl WMLocation_GetChapterId
	b .L080BD064
	.align 2, 0
.L080BD05C: .4byte gGmData
.L080BD060:
	movs r0, #1
	negs r0, r0
.L080BD064:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BD048

	THUMB_FUNC_START GetBattleMapKind
GetBattleMapKind: @ 0x080BD068
	push {r4, r5, r6, lr}
	ldr r0, .L080BD080  @ gPlaySt
	movs r5, #0xe
	ldrsb r5, [r0, r5]
	cmp r5, #0x47
	bls .L080BD076
	b .L080BD1A8
.L080BD076:
	lsls r0, r5, #2
	ldr r1, .L080BD084  @ .L080BD088
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080BD080: .4byte gPlaySt
.L080BD084: .4byte .L080BD088
.L080BD088: @ jump table
	.4byte .L080BD1E4 @ case 0
	.4byte .L080BD1E4 @ case 1
	.4byte .L080BD1A8 @ case 2
	.4byte .L080BD1A8 @ case 3
	.4byte .L080BD1A8 @ case 4
	.4byte .L080BD1E4 @ case 5
	.4byte .L080BD1A8 @ case 6
	.4byte .L080BD1A8 @ case 7
	.4byte .L080BD1A8 @ case 8
	.4byte .L080BD1A8 @ case 9
	.4byte .L080BD1A8 @ case 10
	.4byte .L080BD1A8 @ case 11
	.4byte .L080BD1E4 @ case 12
	.4byte .L080BD1A8 @ case 13
	.4byte .L080BD1A8 @ case 14
	.4byte .L080BD1A8 @ case 15
	.4byte .L080BD1A8 @ case 16
	.4byte .L080BD1A8 @ case 17
	.4byte .L080BD1A8 @ case 18
	.4byte .L080BD1A8 @ case 19
	.4byte .L080BD1A8 @ case 20
	.4byte .L080BD1E4 @ case 21
	.4byte .L080BD1E4 @ case 22
	.4byte .L080BD1A8 @ case 23
	.4byte .L080BD1A8 @ case 24
	.4byte .L080BD1E4 @ case 25
	.4byte .L080BD1A8 @ case 26
	.4byte .L080BD1A8 @ case 27
	.4byte .L080BD1A8 @ case 28
	.4byte .L080BD1A8 @ case 29
	.4byte .L080BD1A8 @ case 30
	.4byte .L080BD1A8 @ case 31
	.4byte .L080BD1A8 @ case 32
	.4byte .L080BD1A8 @ case 33
	.4byte .L080BD1E4 @ case 34
	.4byte .L080BD1E4 @ case 35
	.4byte .L080BD1A8 @ case 36
	.4byte .L080BD1A8 @ case 37
	.4byte .L080BD1A8 @ case 38
	.4byte .L080BD1A8 @ case 39
	.4byte .L080BD1A8 @ case 40
	.4byte .L080BD1A8 @ case 41
	.4byte .L080BD1A8 @ case 42
	.4byte .L080BD1A8 @ case 43
	.4byte .L080BD1A8 @ case 44
	.4byte .L080BD1A8 @ case 45
	.4byte .L080BD1A8 @ case 46
	.4byte .L080BD1A8 @ case 47
	.4byte .L080BD1A8 @ case 48
	.4byte .L080BD1A8 @ case 49
	.4byte .L080BD1A8 @ case 50
	.4byte .L080BD1A8 @ case 51
	.4byte .L080BD1A8 @ case 52
	.4byte .L080BD1A8 @ case 53
	.4byte .L080BD1A8 @ case 54
	.4byte .L080BD1A8 @ case 55
	.4byte .L080BD1E4 @ case 56
	.4byte .L080BD1A8 @ case 57
	.4byte .L080BD1A8 @ case 58
	.4byte .L080BD1E4 @ case 59
	.4byte .L080BD1E4 @ case 60
	.4byte .L080BD1A8 @ case 61
	.4byte .L080BD1A8 @ case 62
	.4byte .L080BD1E4 @ case 63
	.4byte .L080BD1E4 @ case 64
	.4byte .L080BD1E4 @ case 65
	.4byte .L080BD1E4 @ case 66
	.4byte .L080BD1E4 @ case 67
	.4byte .L080BD1E4 @ case 68
	.4byte .L080BD1E4 @ case 69
	.4byte .L080BD1E4 @ case 70
	.4byte .L080BD1E4 @ case 71
.L080BD1A8:
	adds r0, r5, #0
	subs r0, #0x25
	cmp r0, #8
	bhi .L080BD1B4
	movs r5, #0x24
	b .L080BD1BE
.L080BD1B4:
	adds r0, r5, #0
	subs r0, #0x2f
	cmp r0, #8
	bhi .L080BD1BE
	movs r5, #0x2e
.L080BD1BE:
	movs r4, #0
	ldr r6, .L080BD1E8  @ gUnknown_082060B0
.L080BD1C2:
	adds r0, r4, #0
	bl WMLocation_GetChapterId
	cmp r5, r0
	bne .L080BD1FA
	ldr r1, .L080BD1EC  @ gGmData
	lsls r0, r4, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BD1F0
	ldrb r0, [r6]
	cmp r0, #3
	beq .L080BD1F6
.L080BD1E4:
	movs r0, #0
	b .L080BD204
	.align 2, 0
.L080BD1E8: .4byte gUnknown_082060B0
.L080BD1EC: .4byte gGmData
.L080BD1F0:
	ldrb r0, [r6, #1]
	cmp r0, #3
	bne .L080BD202
.L080BD1F6:
	movs r0, #1
	b .L080BD204
.L080BD1FA:
	adds r6, #0x20
	adds r4, #1
	cmp r4, #0x1c
	ble .L080BD1C2
.L080BD202:
	movs r0, #2
.L080BD204:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetBattleMapKind

	THUMB_FUNC_START func_080BD20C
func_080BD20C: @ 0x080BD20C
	push {lr}
	adds r1, r0, #0
	cmp r1, #6
	ble .L080BD216
	movs r1, #0
.L080BD216:
	ldr r0, .L080BD220  @ gUnknown_08206868
	adds r0, r1, r0
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
.L080BD220: .4byte gUnknown_08206868

	THUMB_FUNC_END func_080BD20C

	THUMB_FUNC_START func_080BD224
func_080BD224: @ 0x080BD224
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0
	bl func_080BD014
	adds r1, r0, #0
	ldrb r0, [r4, #0x11]
	cmp r0, r1
	bne .L080BD242
	cmp r1, #0
	blt .L080BD258
	adds r0, r1, #0
	bl GetWmNodeNext
	b .L080BD252
.L080BD242:
	adds r0, r4, #0
	bl func_080BD014
	adds r1, r0, #0
	cmp r1, #0
	bge .L080BD250
	movs r1, #0
.L080BD250:
	adds r0, r1, #0
.L080BD252:
	bl WMLocation_GetChapterId
	adds r5, r0, #0
.L080BD258:
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BD224

	THUMB_FUNC_START func_080BD260
func_080BD260: @ 0x080BD260
	push {lr}
	adds r0, #0xce
	movs r2, #3
	bl CpuSet
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BD260

	THUMB_FUNC_START func_080BD270
func_080BD270: @ 0x080BD270
	push {lr}
	adds r2, r0, #0
	adds r0, r1, #0
	adds r2, #0xce
	adds r1, r2, #0
	movs r2, #3
	bl CpuSet
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BD270

	THUMB_FUNC_START func_080BD284
func_080BD284: @ 0x080BD284
	ldr r0, .L080BD288  @ gUnknown_0201B0D8
	bx lr
	.align 2, 0
.L080BD288: .4byte gUnknown_0201B0D8

	THUMB_FUNC_END func_080BD284

	THUMB_FUNC_START func_080BD28C
func_080BD28C: @ 0x080BD28C
	ldr r1, .L080BD298  @ gUnknown_0201B0D8
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
.L080BD298: .4byte gUnknown_0201B0D8

	THUMB_FUNC_END func_080BD28C

	THUMB_FUNC_START func_080BD29C
func_080BD29C: @ 0x080BD29C
	ldr r0, .L080BD2A4  @ gUnknown_0201B0D8
	ldr r0, [r0, #0x20]
	adds r0, #1
	bx lr
	.align 2, 0
.L080BD2A4: .4byte gUnknown_0201B0D8

	THUMB_FUNC_END func_080BD29C

	THUMB_FUNC_START nullsub_37
nullsub_37: @ 0x080BD2A8
	bx lr

	THUMB_FUNC_END nullsub_37

	THUMB_FUNC_START GetCharacterClassId
GetCharacterClassId: @ 0x080BD2AC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #1
.L080BD2B2:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L080BD2D0
	ldr r0, [r1]
	cmp r0, #0
	beq .L080BD2D0
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne .L080BD2D0
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	b .L080BD2E2
.L080BD2D0:
	adds r4, #1
	cmp r4, #0xbf
	ble .L080BD2B2
	ldr r2, .L080BD2E8  @ gCharacterData
	subs r1, r5, #1
	movs r0, #0x34
	muls r0, r1, r0
	adds r0, r0, r2
	ldrb r0, [r0, #5]
.L080BD2E2:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080BD2E8: .4byte gCharacterData

	THUMB_FUNC_END GetCharacterClassId

	THUMB_FUNC_START MapMUPrim_MakeUnitForChar
MapMUPrim_MakeUnitForChar: @ 0x080BD2EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r7, r1, #0
	mov r8, r2
	adds r5, r6, #0
	adds r5, #0x2b
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	blt .L080BD314
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	bl MapUnitC_DeleteGmapUnit
	movs r0, #0xff
	strb r0, [r5]
.L080BD314:
	ldr r0, [r6, #0x14]
	ldr r4, [r0, #0x4c]
	adds r0, r7, #0
	bl GetCharacterClassId
	adds r1, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r0, r4, #0
	movs r2, #0
	bl StartGmUnit
	strb r0, [r5]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	mov r2, r8
	lsls r3, r2, #5
	ldr r2, .L080BD370  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r4, #0x18
	ldrsh r2, [r3, r4]
	movs r4, #0x1a
	ldrsh r3, [r3, r4]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	movs r2, #4
	bl MapUnitC_SetAnim
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	bl MapUnitC_MarkSomething
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BD370: .4byte gUnknown_082060B0

	THUMB_FUNC_END MapMUPrim_MakeUnitForChar

	THUMB_FUNC_START MapMUPrim_MakeUnitForClass
MapMUPrim_MakeUnitForClass: @ 0x080BD374
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	adds r4, r5, #0
	adds r4, #0x2b
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	blt .L080BD398
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	bl MapUnitC_DeleteGmapUnit
	movs r0, #0xff
	strb r0, [r4]
.L080BD398:
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	lsls r1, r6, #0x10
	lsrs r1, r1, #0x10
	movs r2, #0
	bl StartGmUnit
	strb r0, [r4]
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	lsls r3, r7, #5
	ldr r2, .L080BD3E4  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r6, #0x18
	ldrsh r2, [r3, r6]
	movs r6, #0x1a
	ldrsh r3, [r3, r6]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #4
	bl MapUnitC_SetAnim
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	bl MapUnitC_MarkSomething
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BD3E4: .4byte gUnknown_082060B0

	THUMB_FUNC_END MapMUPrim_MakeUnitForClass

	THUMB_FUNC_START MapMUPrim_RemoveLinkedMapUnit
MapMUPrim_RemoveLinkedMapUnit: @ 0x080BD3E8
	push {r4, lr}
	adds r1, r0, #0
	adds r4, r1, #0
	adds r4, #0x2b
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	blt .L080BD408
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	bl MapUnitC_DeleteGmapUnit
	movs r0, #0xff
	strb r0, [r4]
.L080BD408:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END MapMUPrim_RemoveLinkedMapUnit

	THUMB_FUNC_START func_080BD410
func_080BD410: @ 0x080BD410
	adds r0, #0x2b
	movs r1, #0xff
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080BD410

	THUMB_FUNC_START nullsub_70
nullsub_70: @ 0x080BD418
	bx lr

	THUMB_FUNC_END nullsub_70

	THUMB_FUNC_START func_080BD41C
func_080BD41C: @ 0x080BD41C
	push {lr}
	adds r2, r0, #0
	muls r2, r0, r2
	adds r0, r2, #0
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	adds r0, r0, r1
	lsls r0, r0, #4
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #5
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BD41C

	THUMB_FUNC_START func_080BD444
func_080BD444: @ 0x080BD444
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x50]
	cmp r0, #0
	bge .L080BD48E
	adds r0, r6, #0
	adds r0, #0x2e
	movs r3, #0
	ldrsb r3, [r0, r3]
	lsls r3, r3, #5
	ldr r1, .L080BD5A0  @ gUnknown_082060B0
	adds r3, r3, r1
	movs r2, #0x18
	ldrsh r0, [r3, r2]
	adds r2, r6, #0
	adds r2, #0x2d
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	lsls r2, r2, #5
	adds r2, r2, r1
	movs r4, #0x18
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	movs r5, #0x1a
	ldrsh r1, [r3, r5]
	movs r3, #0x1a
	ldrsh r2, [r2, r3]
	subs r1, r1, r2
	bl func_080BD41C
	str r0, [r6, #0x50]
.L080BD48E:
	adds r2, r6, #0
	adds r2, #0x2d
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #5
	ldr r3, .L080BD5A0  @ gUnknown_082060B0
	adds r0, r0, r3
	ldrb r1, [r0, #0x1e]
	movs r4, #1
	adds r0, r4, #0
	ands r0, r1
	movs r5, #0x2e
	adds r5, r5, r6
	mov r8, r5
	mov r9, r2
	adds r7, r6, #0
	adds r7, #0x2b
	cmp r0, #0
	beq .L080BD4D4
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #5
	adds r0, r0, r3
	ldrb r1, [r0, #0x1e]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BD4D4
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	movs r2, #0x50
	bl func_080BB0E0
.L080BD4D4:
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r5, r0, #2
	adds r5, r5, r0
	lsls r5, r5, #2
	ldr r0, .L080BD5A4  @ gUnknown_0201B3A4
	adds r5, r5, r0
	movs r0, #0
	mov sl, r0
	movs r0, #2
	strh r0, [r5]
	movs r3, #0
	ldrsb r3, [r1, r3]
	lsls r3, r3, #5
	ldr r0, .L080BD5A8  @ gUnknown_0201B104
	adds r3, r3, r0
	str r3, [r5, #4]
	movs r4, #0
	ldrsb r4, [r1, r4]
	lsls r4, r4, #6
	ldr r0, .L080BD5AC  @ gUnknown_0201B1E4
	adds r4, r4, r0
	str r4, [r5, #8]
	ldr r0, .L080BD5B0  @ gUnknown_08A3E22C
	str r0, [r5, #0xc]
	ldr r0, .L080BD5B4  @ gUnknown_08A3E23C
	str r0, [r5, #0x10]
	mov r1, r9
	movs r0, #0
	ldrsb r0, [r1, r0]
	mov r2, r8
	movs r1, #0
	ldrsb r1, [r2, r1]
	ldr r2, [r6, #0x50]
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	str r4, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl func_080BCE34
	strh r0, [r5, #2]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r4, r7, #0
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r5, r9
	movs r3, #0
	ldrsb r3, [r5, r3]
	lsls r3, r3, #5
	ldr r2, .L080BD5A0  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r5, #0x18
	ldrsh r2, [r3, r5]
	movs r5, #0x1a
	ldrsh r3, [r3, r5]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	adds r2, r6, #0
	adds r2, #0x31
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt .L080BD56E
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetAnim
.L080BD56E:
	mov r0, sl
	str r0, [r6, #0x54]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r2, r6, #0
	adds r2, #0x44
	adds r3, r6, #0
	adds r3, #0x46
	bl func_080BAF44
	adds r0, r6, #0
	adds r0, #0x40
	mov r1, sl
	strh r1, [r0]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BD5A0: .4byte gUnknown_082060B0
.L080BD5A4: .4byte gUnknown_0201B3A4
.L080BD5A8: .4byte gUnknown_0201B104
.L080BD5AC: .4byte gUnknown_0201B1E4
.L080BD5B0: .4byte gUnknown_08A3E22C
.L080BD5B4: .4byte gUnknown_08A3E23C

	THUMB_FUNC_END func_080BD444

	THUMB_FUNC_START func_080BD5B8
func_080BD5B8: @ 0x080BD5B8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl func_080BAF44
	mov r0, sp
	adds r1, r5, #0
	adds r1, #0x44
	ldrh r0, [r0]
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r3, r0, #0
	adds r1, r5, #0
	adds r1, #0x46
	ldrh r0, [r4]
	ldrh r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r6, r0, #0
	cmp r3, #0
	bne .L080BD602
	cmp r0, #0
	beq .L080BD656
.L080BD602:
	adds r1, r5, #0
	adds r1, #0x40
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #2
	ble .L080BD634
	movs r2, #0
	adds r4, r5, #0
	adds r4, #0x3c
	movs r0, #0x3d
	adds r0, r0, r5
	mov ip, r0
	subs r1, #0xc
.L080BD61C:
	ldrb r0, [r1, #4]
	strb r0, [r1]
	ldrb r0, [r1, #5]
	strb r0, [r1, #1]
	adds r1, #4
	adds r2, #1
	cmp r2, #1
	ble .L080BD61C
	strb r3, [r4]
	mov r2, ip
	strb r6, [r2]
	b .L080BD652
.L080BD634:
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #2
	adds r0, r5, r0
	adds r0, #0x34
	strb r3, [r0]
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #2
	adds r0, r5, r0
	adds r0, #0x35
	strb r6, [r0]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
.L080BD652:
	movs r0, #1
	b .L080BD658
.L080BD656:
	movs r0, #0
.L080BD658:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BD5B8

	THUMB_FUNC_START func_080BD660
func_080BD660: @ 0x080BD660
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	adds r3, r1, #0
	movs r2, #0x9a
	lsls r2, r2, #7
	adds r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, .L080BD67C  @ 0x000019FF
	cmp r0, r2
	bhi .L080BD680
	movs r0, #3
	b .L080BD69C
	.align 2, 0
.L080BD67C: .4byte 0x000019FF
.L080BD680:
	ldr r4, .L080BD690  @ 0xFFFFCD00
	adds r0, r1, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r2
	bhi .L080BD694
	movs r0, #2
	b .L080BD69C
	.align 2, 0
.L080BD690: .4byte 0xFFFFCD00
.L080BD694:
	ldr r1, .L080BD6A4  @ 0xFFFFC000
	adds r0, r3, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x1f
.L080BD69C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080BD6A4: .4byte 0xFFFFC000

	THUMB_FUNC_END func_080BD660

	THUMB_FUNC_START func_080BD6A8
func_080BD6A8: @ 0x080BD6A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	movs r0, #0
	mov sl, r0
	mov r9, r0
	movs r7, #0
	mov r0, r8
	adds r0, #0x40
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r7, r0
	bge .L080BD72C
	mov r6, r8
	adds r6, #0x34
.L080BD6CE:
	movs r0, #0
	ldrsb r0, [r6, r0]
	mov r2, r9
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r1, r1, r0
	lsls r1, r1, #0x10
	movs r2, #1
	ldrsb r2, [r6, r2]
	mov r3, sl
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r1, #0x10
	mov r9, r2
	asrs r5, r1, #0x10
	lsrs r3, r0, #0x10
	mov sl, r3
	asrs r4, r0, #0x10
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl func_080C0834
	cmp r0, #0x23
	bls .L080BD71C
	adds r0, r5, #0
	adds r1, r4, #0
	bl ArcTan2
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl func_080BD660
	b .L080BD730
.L080BD71C:
	adds r6, #4
	adds r7, #1
	mov r0, r8
	adds r0, #0x40
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r7, r0
	blt .L080BD6CE
.L080BD72C:
	movs r0, #1
	negs r0, r0
.L080BD730:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BD6A8

	THUMB_FUNC_START func_080BD740
func_080BD740: @ 0x080BD740
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	bl func_080BD5B8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080BD81E
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0x20
	ands r0, r1
	adds r5, r2, #0
	cmp r0, #0
	beq .L080BD784
	adds r0, r6, #0
	bl func_080BE45C
	ldrb r1, [r5]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080BD784
	ldr r0, .L080BD828  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BD784
	adds r0, r6, #0
	bl func_080BE45C
.L080BD784:
	adds r0, r6, #0
	bl func_080BD6A8
	adds r4, r0, #0
	adds r7, r6, #0
	adds r7, #0x2b
	cmp r4, #0
	blt .L080BD7C8
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	bl func_080BAF70
	cmp r0, r4
	beq .L080BD7C8
	ldrb r1, [r5]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080BD7C8
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r2, r4, #0
	bl MapUnitC_SetAnim
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	bl MapUnitC_MarkSomething
.L080BD7C8:
	ldrb r1, [r5]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080BD80A
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl func_080BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetGmCameraCenteredPosition
	ldr r1, .L080BD82C  @ gGmData
	ldrh r0, [r4]
	strh r0, [r1, #2]
	ldrh r0, [r5]
	strh r0, [r1, #4]
.L080BD80A:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r7, r1]
	adds r2, r6, #0
	adds r2, #0x44
	adds r3, r6, #0
	adds r3, #0x46
	bl func_080BAF44
.L080BD81E:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BD828: .4byte gKeySt
.L080BD82C: .4byte gGmData

	THUMB_FUNC_END func_080BD740

	THUMB_FUNC_START func_080BD830
func_080BD830: @ 0x080BD830
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r6, r0, #0
	adds r0, #0x29
	ldrb r3, [r0]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L080BD848
	b .L080BD9C4
.L080BD848:
	adds r1, r6, #0
	adds r1, #0x42
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #0
	ble .L080BD85C
	subs r0, r2, #1
	strh r0, [r1]
	b .L080BD9C4
.L080BD85C:
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	beq .L080BD878
	ldr r0, .L080BD8C4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BD878
	ldr r0, [r6, #0x54]
	adds r0, #2
	str r0, [r6, #0x54]
.L080BD878:
	ldr r0, [r6, #0x54]
	adds r2, r0, #1
	str r2, [r6, #0x54]
	ldr r0, [r6, #0x50]
	cmp r2, r0
	bge .L080BD8CC
	adds r0, r6, #0
	adds r0, #0x2a
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, .L080BD8C8  @ gUnknown_0201B3A4
	adds r0, r0, r1
	lsls r1, r2, #0xc
	add r4, sp, #8
	adds r2, r4, #0
	bl func_0800A950
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [sp, #8]
	asrs r2, r2, #4
	ldr r3, [r4, #4]
	asrs r3, r3, #4
	adds r3, #6
	bl GmUnitCnt_SetPosition
	adds r0, r6, #0
	bl func_080BD740
	b .L080BD9C4
	.align 2, 0
.L080BD8C4: .4byte gKeySt
.L080BD8C8: .4byte gUnknown_0201B3A4
.L080BD8CC:
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #5
	ldr r2, .L080BD9D0  @ gUnknown_082060B0
	adds r0, r0, r2
	ldrb r1, [r0, #0x1e]
	movs r3, #1
	adds r0, r3, #0
	ands r0, r1
	adds r4, r6, #0
	adds r4, #0x2b
	adds r5, r6, #0
	adds r5, #0x2e
	cmp r0, #0
	beq .L080BD910
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #5
	adds r0, r0, r2
	ldrb r1, [r0, #0x1e]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BD910
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #0
	bl func_080BB0E0
.L080BD910:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r3, #0
	ldrsb r3, [r5, r3]
	lsls r3, r3, #5
	ldr r2, .L080BD9D0  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r7, #0x18
	ldrsh r2, [r3, r7]
	movs r7, #0x1a
	ldrsh r3, [r3, r7]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0x10
	ands r0, r1
	adds r7, r2, #0
	cmp r0, #0
	beq .L080BD95C
	adds r2, #9
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt .L080BD95C
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetAnim
.L080BD95C:
	ldr r0, .L080BD9D4  @ gGmData
	mov r8, r0
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	add r0, r8
	ldrb r1, [r5]
	strb r1, [r0, #0x11]
	ldrb r1, [r7]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080BD9B4
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl func_080BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetGmCameraCenteredPosition
	ldrh r0, [r4]
	mov r4, r8
	strh r0, [r4, #2]
	ldrh r0, [r5]
	strh r0, [r4, #4]
.L080BD9B4:
	adds r0, r6, #0
	bl Proc_Break
	ldrb r1, [r7]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
.L080BD9C4:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BD9D0: .4byte gUnknown_082060B0
.L080BD9D4: .4byte gGmData

	THUMB_FUNC_END func_080BD830

	THUMB_FUNC_START func_080BD9D8
func_080BD9D8: @ 0x080BD9D8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bge .L080BDA2E
	adds r0, r4, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #5
	ldr r3, .L080BDA74  @ gUnknown_082060B0
	adds r0, r0, r3
	movs r2, #0x18
	ldrsh r0, [r0, r2]
	adds r1, r4, #0
	adds r1, #0x48
	movs r5, #0
	ldrsh r1, [r1, r5]
	lsls r1, r1, #5
	adds r1, r1, r3
	movs r2, #0x18
	ldrsh r1, [r1, r2]
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x4e
	movs r5, #0
	ldrsh r1, [r1, r5]
	lsls r1, r1, #5
	adds r1, r1, r3
	movs r2, #0x1a
	ldrsh r1, [r1, r2]
	adds r2, r4, #0
	adds r2, #0x4a
	movs r5, #0
	ldrsh r2, [r2, r5]
	lsls r2, r2, #5
	adds r2, r2, r3
	movs r3, #0x1a
	ldrsh r2, [r2, r3]
	subs r1, r1, r2
	bl func_080BD41C
	str r0, [r4, #0x50]
.L080BDA2E:
	movs r6, #0
	str r6, [r4, #0x54]
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x4c]
	adds r5, r4, #0
	adds r5, #0x2b
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r2, r4, #0
	adds r2, #0x44
	adds r3, r4, #0
	adds r3, #0x46
	bl func_080BAF44
	adds r2, r4, #0
	adds r2, #0x31
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt .L080BDA68
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r5, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetAnim
.L080BDA68:
	adds r0, r4, #0
	adds r0, #0x40
	strh r6, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDA74: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080BD9D8

	THUMB_FUNC_START func_080BDA78
func_080BDA78: @ 0x080BDA78
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x29
	ldrb r3, [r0]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq .L080BDA8C
	b .L080BDBF4
.L080BDA8C:
	adds r1, r7, #0
	adds r1, #0x42
	ldrh r2, [r1]
	movs r4, #0
	ldrsh r0, [r1, r4]
	cmp r0, #0
	ble .L080BDAA0
	subs r0, r2, #1
	strh r0, [r1]
	b .L080BDBF4
.L080BDAA0:
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	beq .L080BDABC
	ldr r0, .L080BDB50  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #4]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BDABC
	ldr r0, [r7, #0x54]
	adds r0, #2
	str r0, [r7, #0x54]
.L080BDABC:
	ldr r0, [r7, #0x54]
	adds r0, #1
	str r0, [r7, #0x54]
	ldr r1, [r7, #0x50]
	cmp r0, r1
	bge .L080BDB54
	adds r2, r7, #0
	adds r2, #0x2f
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl Spline_800B84C
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r7, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r4, r7, #0
	adds r4, #0x48
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r1, [r4]
	adds r1, r1, r0
	mov r0, sp
	strh r1, [r0]
	adds r0, r7, #0
	adds r0, #0x4e
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r4, #2
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r3, [r4]
	adds r3, r3, r0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r0, sp
	adds r0, #2
	strh r3, [r0]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	mov r2, sp
	movs r4, #0
	ldrsh r2, [r2, r4]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r3, #6
	bl GmUnitCnt_SetPosition
	adds r0, r7, #0
	bl func_080BD740
	b .L080BDBF4
	.align 2, 0
.L080BDB50: .4byte gKeySt
.L080BDB54:
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r4, r7, #0
	adds r4, #0x2b
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r2, r7, #0
	adds r2, #0x4c
	movs r5, #0
	ldrsh r2, [r2, r5]
	adds r3, r7, #0
	adds r3, #0x4e
	movs r5, #0
	ldrsh r3, [r3, r5]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	adds r2, r7, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0x10
	ands r0, r1
	adds r6, r2, #0
	cmp r0, #0
	beq .L080BDBA2
	adds r2, #9
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	blt .L080BDBA2
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl MapUnitC_SetAnim
.L080BDBA2:
	ldrb r1, [r6]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080BDBE4
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl func_080BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetGmCameraCenteredPosition
	ldr r1, .L080BDBFC  @ gGmData
	ldrh r0, [r4]
	strh r0, [r1, #2]
	ldrh r0, [r5]
	strh r0, [r1, #4]
.L080BDBE4:
	adds r0, r7, #0
	bl Proc_Break
	ldrb r1, [r6]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r6]
.L080BDBF4:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDBFC: .4byte gGmData

	THUMB_FUNC_END func_080BDA78

	THUMB_FUNC_START nullsub_49
nullsub_49: @ 0x080BDC00
	bx lr

	THUMB_FUNC_END nullsub_49

	THUMB_FUNC_START GmMu_OnInit
GmMu_OnInit: @ 0x080BDC04
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x2c
	movs r5, #6
.L080BDC0E:
	ldr r1, [r4, #0x14]
	ldr r0, .L080BDC24  @ gUnknown_08A3E248
	bl SpawnProc
	stm r6!, {r0}
	subs r5, #1
	cmp r5, #0
	bge .L080BDC0E
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDC24: .4byte gUnknown_08A3E248

	THUMB_FUNC_END GmMu_OnInit

	THUMB_FUNC_START StartGmMu
StartGmMu: @ 0x080BDC28
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080BDC38  @ gUnknown_08A3E2C0
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080BDC38: .4byte gUnknown_08A3E2C0

	THUMB_FUNC_END StartGmMu

	THUMB_FUNC_START GmMu_SetUnit
GmMu_SetUnit: @ 0x080BDC3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	adds r5, r1, #0
	adds r6, r3, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r9, r2
	lsls r7, r5, #2
	adds r0, #0x2c
	adds r0, r0, r7
	ldr r4, [r0]
	movs r0, #0x2a
	adds r0, r0, r4
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt .L080BDC70
	mov r0, sl
	bl GmMu_RemoveUnit
.L080BDC70:
	mov r1, r8
	strb r5, [r1]
	mov r2, r9
	cmp r2, #0
	beq .L080BDC98
	adds r0, r4, #0
	adds r1, r6, #0
	ldr r2, [sp, #0x24]
	bl MapMUPrim_MakeUnitForClass
	ldr r0, .L080BDC94  @ gGmData
	adds r0, r7, r0
	strh r6, [r0, #0x12]
	ldrb r1, [r0, #0x10]
	movs r2, #2
	orrs r1, r2
	b .L080BDCAE
	.align 2, 0
.L080BDC94: .4byte gGmData
.L080BDC98:
	adds r0, r4, #0
	adds r1, r6, #0
	ldr r2, [sp, #0x24]
	bl MapMUPrim_MakeUnitForChar
	ldr r0, .L080BDD24  @ gGmData
	adds r0, r7, r0
	strh r6, [r0, #0x12]
	ldrb r2, [r0, #0x10]
	movs r1, #0xfd
	ands r1, r2
.L080BDCAE:
	strb r1, [r0, #0x10]
	ldr r1, .L080BDD24  @ gGmData
	lsls r0, r5, #2
	adds r0, r0, r1
	add r1, sp, #0x24
	ldrb r1, [r1]
	strb r1, [r0, #0x11]
	ldr r2, [sp, #0x20]
	cmp r2, #0
	bge .L080BDCCA
	adds r0, r5, #0
	bl func_080BD20C
	str r0, [sp, #0x20]
.L080BDCCA:
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r4, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [sp, #0x20]
	bl MapUnitC_SetAllegienceColorIndex
	adds r1, r4, #0
	adds r1, #0x40
	movs r2, #0
	movs r0, #0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	strb r2, [r0]
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	strb r0, [r2]
	ldr r0, .L080BDD28  @ gUnknown_08A3E2F0
	adds r0, r5, r0
	ldrb r2, [r0]
	mov r0, sl
	adds r1, r5, #0
	bl MapMU_SetUnitTCSOAMIndex
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDD24: .4byte gGmData
.L080BDD28: .4byte gUnknown_08A3E2F0

	THUMB_FUNC_END GmMu_SetUnit

	THUMB_FUNC_START GmMu_RemoveUnit
GmMu_RemoveUnit: @ 0x080BDD2C
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r4, r5, #2
	adds r0, #0x2c
	adds r0, r0, r4
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt .L080BDD8A
	adds r2, r1, #0
	adds r2, #0x2a
	movs r0, #0xff
	strb r0, [r2]
	adds r0, r1, #0
	bl MapMUPrim_RemoveLinkedMapUnit
	ldr r0, .L080BDD70  @ gGmData
	adds r1, r4, r0
	ldrb r2, [r1, #0x10]
	movs r0, #2
	ands r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	beq .L080BDD74
	movs r0, #0
	strh r0, [r1, #0x12]
	movs r0, #2
	orrs r0, r2
	b .L080BDD7A
	.align 2, 0
.L080BDD70: .4byte gGmData
.L080BDD74:
	strh r0, [r1, #0x12]
	movs r0, #0xfd
	ands r0, r2
.L080BDD7A:
	strb r0, [r1, #0x10]
	ldr r0, .L080BDD90  @ gGmData
	lsls r1, r5, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #0xfe
	ands r0, r2
	strb r0, [r1, #0x10]
.L080BDD8A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDD90: .4byte gGmData

	THUMB_FUNC_END GmMu_RemoveUnit

	THUMB_FUNC_START func_080BDD94
func_080BDD94: @ 0x080BDD94
	push {r4, r5, lr}
	adds r2, r0, #0
	cmp r1, #0
	blt .L080BDDAC
	lsls r0, r1, #2
	adds r1, r2, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r0, [r1]
	bl MapMUPrim_RemoveLinkedMapUnit
	b .L080BDDBE
.L080BDDAC:
	adds r5, r2, #0
	adds r5, #0x2c
	movs r4, #6
.L080BDDB2:
	ldm r5!, {r0}
	bl MapMUPrim_RemoveLinkedMapUnit
	subs r4, #1
	cmp r4, #0
	bge .L080BDDB2
.L080BDDBE:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BDD94

	THUMB_FUNC_START GmMu_ShowUnit
GmMu_ShowUnit: @ 0x080BDDC4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	cmp r1, #0
	blt .L080BDDF8
	lsls r4, r1, #2
	adds r0, #0x2c
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #1
	bl GmUnitCnt_SetDisplayed
	ldr r0, .L080BDDF4  @ gGmData
	adds r4, r4, r0
	ldrb r1, [r4, #0x10]
	movs r0, #1
	orrs r0, r1
	strb r0, [r4, #0x10]
	b .L080BDE30
	.align 2, 0
.L080BDDF4: .4byte gGmData
.L080BDDF8:
	movs r6, #0
	adds r4, r7, #0
	adds r4, #0x2c
.L080BDDFE:
	lsls r5, r6, #2
	ldr r1, [r4]
	adds r1, #0x2b
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L080BDE28
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #1
	bl GmUnitCnt_SetDisplayed
	ldr r1, .L080BDE38  @ gGmData
	adds r1, r5, r1
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
.L080BDE28:
	adds r4, #4
	adds r6, #1
	cmp r6, #6
	ble .L080BDDFE
.L080BDE30:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDE38: .4byte gGmData

	THUMB_FUNC_END GmMu_ShowUnit

	THUMB_FUNC_START GmMu_HideUnit
GmMu_HideUnit: @ 0x080BDE3C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	cmp r1, #0
	blt .L080BDE70
	lsls r4, r1, #2
	adds r0, #0x2c
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #0
	bl GmUnitCnt_SetDisplayed
	ldr r0, .L080BDE6C  @ gGmData
	adds r4, r4, r0
	ldrb r1, [r4, #0x10]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r4, #0x10]
	b .L080BDEA8
	.align 2, 0
.L080BDE6C: .4byte gGmData
.L080BDE70:
	movs r5, #0
	adds r4, r7, #0
	adds r4, #0x2c
.L080BDE76:
	lsls r6, r5, #2
	ldr r1, [r4]
	adds r1, #0x2b
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	blt .L080BDEA0
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x4c]
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r2, #0
	bl GmUnitCnt_SetDisplayed
	ldr r1, .L080BDEB0  @ gGmData
	adds r1, r6, r1
	ldrb r2, [r1, #0x10]
	movs r0, #0xfe
	ands r0, r2
	strb r0, [r1, #0x10]
.L080BDEA0:
	adds r4, #4
	adds r5, #1
	cmp r5, #6
	ble .L080BDE76
.L080BDEA8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDEB0: .4byte gGmData

	THUMB_FUNC_END GmMu_HideUnit

	THUMB_FUNC_START func_080BDEB4
func_080BDEB4: @ 0x080BDEB4
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r5, [r0]
	ldrh r0, [r6, #6]
	adds r2, r5, #0
	adds r2, #0x2d
	strb r0, [r2]
	ldrh r0, [r6, #8]
	adds r1, r5, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldr r0, [r6, #0xc]
	cmp r0, #0
	bge .L080BDF1A
	movs r0, #0
	ldrsb r0, [r1, r0]
	lsls r0, r0, #5
	ldr r1, .L080BDFA0  @ gUnknown_082060B0
	adds r4, r0, r1
	movs r0, #0x18
	ldrsh r3, [r4, r0]
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r0, r0, #5
	adds r2, r0, r1
	movs r0, #0x18
	ldrsh r1, [r2, r0]
	subs r0, r3, r1
	cmp r0, #0
	bge .L080BDEFA
	subs r0, r1, r3
.L080BDEFA:
	movs r1, #0x1a
	ldrsh r3, [r4, r1]
	movs r1, #0x1a
	ldrsh r2, [r2, r1]
	subs r1, r3, r2
	cmp r1, #0
	bge .L080BDF0A
	subs r1, r2, r3
.L080BDF0A:
	bl func_080BD41C
	adds r1, r0, #0
	ldr r0, [r6, #0xc]
	cmp r0, #0
	bge .L080BDF18
	negs r0, r0
.L080BDF18:
	muls r0, r1, r0
.L080BDF1A:
	str r0, [r5, #0x50]
	ldrb r0, [r6, #1]
	movs r1, #0x29
	adds r1, r1, r5
	mov ip, r1
	movs r4, #1
	movs r2, #1
	adds r1, r2, #0
	ands r1, r0
	lsls r1, r1, #2
	mov r0, ip
	ldrb r3, [r0]
	movs r0, #5
	negs r0, r0
	ands r0, r3
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	ldrh r0, [r6, #0xa]
	adds r1, r5, #0
	adds r1, #0x42
	movs r3, #0
	strh r0, [r1]
	mov r1, ip
	ldrb r0, [r1]
	orrs r0, r4
	movs r1, #3
	negs r1, r1
	ands r0, r1
	mov r1, ip
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r2, [r0]
	ldrb r0, [r1]
	movs r1, #0x10
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	ldrb r1, [r6, #2]
	ands r2, r1
	lsls r2, r2, #5
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	orrs r0, r2
	mov r1, ip
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x30
	strb r3, [r0]
	ldrb r0, [r6, #3]
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	ldrb r0, [r6, #4]
	adds r2, r5, #0
	adds r2, #0x32
	strb r0, [r2]
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BDFA0: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080BDEB4

	THUMB_FUNC_START func_080BDFA4
func_080BDFA4: @ 0x080BDFA4
	push {r4, r5, r6, r7, lr}
	ldrb r2, [r1]
	lsls r2, r2, #2
	adds r0, #0x2c
	adds r0, r0, r2
	ldr r0, [r0]
	mov ip, r0
	ldrh r2, [r1, #6]
	adds r0, #0x48
	movs r6, #0
	strh r2, [r0]
	ldrh r0, [r1, #8]
	mov r2, ip
	adds r2, #0x4a
	strh r0, [r2]
	ldrh r2, [r1, #0xa]
	mov r0, ip
	adds r0, #0x4c
	strh r2, [r0]
	ldrh r0, [r1, #0xc]
	mov r2, ip
	adds r2, #0x4e
	strh r0, [r2]
	ldr r0, [r1, #0x10]
	mov r2, ip
	str r0, [r2, #0x50]
	ldrb r0, [r1, #2]
	mov r7, ip
	adds r7, #0x29
	movs r5, #1
	movs r4, #1
	adds r2, r4, #0
	ands r2, r0
	lsls r2, r2, #2
	ldrb r3, [r7]
	movs r0, #5
	negs r0, r0
	ands r0, r3
	orrs r0, r2
	strb r0, [r7]
	ldrb r0, [r1, #1]
	mov r2, ip
	adds r2, #0x2f
	strb r0, [r2]
	ldrh r0, [r1, #0xe]
	adds r2, #0x13
	strh r0, [r2]
	ldrb r0, [r7]
	orrs r0, r5
	movs r2, #3
	negs r2, r2
	ands r0, r2
	strb r0, [r7]
	mov r2, ip
	adds r2, #0x2c
	movs r0, #2
	strb r0, [r2]
	ldrb r0, [r7]
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r7]
	ldrb r2, [r1, #3]
	ands r4, r2
	lsls r4, r4, #5
	movs r2, #0x21
	negs r2, r2
	ands r0, r2
	orrs r0, r4
	strb r0, [r7]
	mov r0, ip
	adds r0, #0x30
	strb r6, [r0]
	ldrb r0, [r1, #4]
	mov r2, ip
	adds r2, #0x31
	strb r0, [r2]
	ldrb r0, [r1, #5]
	mov r1, ip
	adds r1, #0x32
	strb r0, [r1]
	mov r0, ip
	movs r1, #2
	bl Proc_Goto
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BDFA4

	THUMB_FUNC_START GmMu_PauseMovement
GmMu_PauseMovement: @ 0x080BE054
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_END GmMu_PauseMovement

	THUMB_FUNC_START GmMu_ResumeMovement
GmMu_ResumeMovement: @ 0x080BE068
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	ldrb r2, [r1]
	movs r0, #3
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_END GmMu_ResumeMovement

	THUMB_FUNC_START func_080BE080
func_080BE080: @ 0x080BE080
	push {lr}
	lsls r1, r1, #2
	adds r3, r0, #0
	adds r3, #0x2c
	adds r3, r3, r1
	ldr r1, [r3]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	bl func_080BAFE0
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE080

	THUMB_FUNC_START func_080BE0A4
func_080BE0A4: @ 0x080BE0A4
	push {r4, lr}
	lsls r1, r1, #2
	adds r4, r0, #0
	adds r4, #0x2c
	adds r4, r4, r1
	ldr r1, [r4]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_080BAF44
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE0A4

	THUMB_FUNC_START func_080BE0C8
func_080BE0C8: @ 0x080BE0C8
	push {lr}
	lsls r1, r1, #2
	adds r2, r0, #0
	adds r2, #0x2c
	adds r2, r2, r1
	ldr r1, [r2]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_080BB008
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BE0C8

	THUMB_FUNC_START MapMU_SetUnitTCSOAMIndex
MapMU_SetUnitTCSOAMIndex: @ 0x080BE0E8
	push {lr}
	lsls r1, r1, #2
	adds r3, r0, #0
	adds r3, #0x2c
	adds r3, r3, r1
	ldr r1, [r3]
	ldr r0, [r0, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl MapUnitC_SetTCSOAMIndex
	pop {r0}
	bx r0

	THUMB_FUNC_END MapMU_SetUnitTCSOAMIndex

	THUMB_FUNC_START MapMU_80BE108
MapMU_80BE108: @ 0x080BE108
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	movs r0, #1
	ands r2, r0
	lsls r2, r2, #3
	ldrb r3, [r1]
	movs r0, #9
	negs r0, r0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_END MapMU_80BE108

	THUMB_FUNC_START func_080BE12C
func_080BE12C: @ 0x080BE12C
	push {r4, lr}
	adds r2, r0, #0
	cmp r1, #0
	bge .L080BE162
	movs r3, #0
	movs r4, #1
	adds r2, #0x2c
.L080BE13A:
	ldr r1, [r2]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt .L080BE158
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	bne .L080BE186
.L080BE158:
	adds r2, #4
	adds r3, #1
	cmp r3, #6
	ble .L080BE13A
	b .L080BE18A
.L080BE162:
	lsls r0, r1, #2
	adds r1, r2, #0
	adds r1, #0x2c
	adds r1, r1, r0
	ldr r1, [r1]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	blt .L080BE18A
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	b .L080BE18C
.L080BE186:
	movs r0, #1
	b .L080BE18C
.L080BE18A:
	movs r0, #0
.L080BE18C:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BE12C

	THUMB_FUNC_START func_080BE194
func_080BE194: @ 0x080BE194
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080BE1AE
	b .L080BE31E
.L080BE1AE:
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	cmp r2, #1
	beq .L080BE1C0
	cmp r2, #2
	beq .L080BE298
	adds r7, r5, #0
	b .L080BE30C
.L080BE1C0:
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #5
	ldr r3, .L080BE290  @ gUnknown_082060B0
	adds r0, r0, r3
	ldrb r1, [r0, #0x1e]
	adds r0, r2, #0
	ands r0, r1
	adds r5, r6, #0
	adds r5, #0x2e
	adds r4, r6, #0
	adds r4, #0x2b
	cmp r0, #0
	beq .L080BE200
	movs r0, #0
	ldrsb r0, [r5, r0]
	lsls r0, r0, #5
	adds r0, r0, r3
	ldrb r0, [r0, #0x1e]
	ands r2, r0
	cmp r2, #0
	beq .L080BE200
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #0
	bl func_080BB0E0
.L080BE200:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r3, #0
	ldrsb r3, [r5, r3]
	lsls r3, r3, #5
	ldr r2, .L080BE290  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r7, #0x18
	ldrsh r2, [r3, r7]
	movs r7, #0x1a
	ldrsh r3, [r3, r7]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #4
	bl MapUnitC_SetAnim
	ldr r0, .L080BE294  @ gGmData
	mov r8, r0
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	add r0, r8
	ldrb r1, [r5]
	strb r1, [r0, #0x11]
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #8
	ands r0, r1
	adds r7, r2, #0
	cmp r0, #0
	beq .L080BE30C
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl func_080BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetGmCameraCenteredPosition
	ldrh r0, [r4]
	mov r3, r8
	strh r0, [r3, #2]
	ldrh r0, [r5]
	strh r0, [r3, #4]
	b .L080BE30C
	.align 2, 0
.L080BE290: .4byte gUnknown_082060B0
.L080BE294: .4byte gGmData
.L080BE298:
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r4, r6, #0
	adds r4, #0x2b
	movs r1, #0
	ldrsb r1, [r4, r1]
	adds r2, r6, #0
	adds r2, #0x4c
	movs r7, #0
	ldrsh r2, [r2, r7]
	adds r3, r6, #0
	adds r3, #0x4e
	movs r7, #0
	ldrsh r3, [r3, r7]
	adds r3, #6
	bl GmUnitCnt_SetPosition
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	movs r2, #4
	bl MapUnitC_SetAnim
	ldrb r1, [r5]
	movs r0, #8
	ands r0, r1
	adds r7, r5, #0
	cmp r0, #0
	beq .L080BE30C
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	movs r1, #0
	ldrsb r1, [r4, r1]
	mov r4, sp
	adds r4, #2
	mov r2, sp
	adds r3, r4, #0
	bl func_080BAF44
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0
	ldrsh r1, [r4, r2]
	subs r1, #0xe
	add r4, sp, #4
	mov r5, sp
	adds r5, #6
	adds r2, r4, #0
	adds r3, r5, #0
	bl GetGmCameraCenteredPosition
	ldr r1, .L080BE32C  @ gGmData
	ldrh r0, [r4]
	strh r0, [r1, #2]
	ldrh r0, [r5]
	strh r0, [r1, #4]
.L080BE30C:
	ldrb r1, [r7]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
.L080BE31E:
	movs r0, #0
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080BE32C: .4byte gGmData

	THUMB_FUNC_END func_080BE194

	THUMB_FUNC_START func_080BE330
func_080BE330: @ 0x080BE330
	push {r4, r5, lr}
	cmp r1, #0
	bge .L080BE34A
	adds r5, r0, #0
	adds r5, #0x2c
	movs r4, #6
.L080BE33C:
	ldm r5!, {r0}
	bl func_080BE194
	subs r4, #1
	cmp r4, #0
	bge .L080BE33C
	b .L080BE356
.L080BE34A:
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	bl func_080BE194
.L080BE356:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE330

	THUMB_FUNC_START GmMu_SetPosition
GmMu_SetPosition: @ 0x080BE35C
	push {r4, r5, r6, lr}
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r6, [r0]
	lsls r2, r2, #0x10
	lsls r3, r3, #0x10
	movs r0, #0xc0
	lsls r0, r0, #0xb
	adds r3, r3, r0
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsrs r4, r2, #0x10
	asrs r2, r2, #0x10
	lsrs r5, r3, #0x10
	asrs r3, r3, #0x10
	bl GmUnitCnt_SetPosition
	adds r0, r6, #0
	adds r0, #0x44
	movs r1, #0
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	subs r0, #6
	strh r1, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmMu_SetPosition

	THUMB_FUNC_START func_080BE3A0
func_080BE3A0: @ 0x080BE3A0
	push {r4, lr}
	adds r4, r3, #0
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_080BAF44
	ldrh r0, [r4]
	subs r0, #6
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE3A0

	THUMB_FUNC_START GmMu_SetNode
GmMu_SetNode: @ 0x080BE3C8
	push {r4, lr}
	lsls r3, r2, #5
	ldr r2, .L080BE3E4  @ gUnknown_082060B0
	adds r3, r3, r2
	movs r4, #0x18
	ldrsh r2, [r3, r4]
	movs r4, #0x1a
	ldrsh r3, [r3, r4]
	bl GmMu_SetPosition
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BE3E4: .4byte gUnknown_082060B0

	THUMB_FUNC_END GmMu_SetNode

	THUMB_FUNC_START func_080BE3E8
func_080BE3E8: @ 0x080BE3E8
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r1, [r0]
	adds r1, #0x29
	movs r0, #1
	ands r2, r0
	lsls r2, r2, #2
	ldrb r3, [r1]
	movs r0, #5
	negs r0, r0
	ands r0, r3
	orrs r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_END func_080BE3E8

	THUMB_FUNC_START GmMu_StartFadeIn
GmMu_StartFadeIn: @ 0x080BE40C
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	movs r2, #0
	bl func_080BB4C0
	pop {r0}
	bx r0

	THUMB_FUNC_END GmMu_StartFadeIn

	THUMB_FUNC_START GmMu_StartFadeOut
GmMu_StartFadeOut: @ 0x080BE42C
	push {lr}
	lsls r1, r1, #2
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	movs r2, #0
	bl func_080BB538
	pop {r0}
	bx r0

	THUMB_FUNC_END GmMu_StartFadeOut

	THUMB_FUNC_START GmUnitFadeExists
GmUnitFadeExists: @ 0x080BE44C
	push {lr}
	bl FindGmUnitFade
	cmp r0, #0
	beq .L080BE458
	movs r0, #1
.L080BE458:
	pop {r1}
	bx r1

	THUMB_FUNC_END GmUnitFadeExists

	THUMB_FUNC_START func_080BE45C
func_080BE45C: @ 0x080BE45C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x4c]
	adds r1, r6, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_080BB194
	adds r4, r0, #0
	bl GetJInfo
	ldr r0, [r0, #0x28]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq .L080BE4AC
	cmp r4, #0x1f
	blt .L080BE4A4
	cmp r4, #0x24
	ble .L080BE49C
	cmp r4, #0x49
	bgt .L080BE4A4
	cmp r4, #0x48
	blt .L080BE4A4
	ldr r4, .L080BE498  @ gUnknown_08A3E3BA
	b .L080BE4E6
	.align 2, 0
.L080BE498: .4byte gUnknown_08A3E3BA
.L080BE49C:
	ldr r4, .L080BE4A0  @ gUnknown_08A3E38E
	b .L080BE4E6
	.align 2, 0
.L080BE4A0: .4byte gUnknown_08A3E38E
.L080BE4A4:
	ldr r4, .L080BE4A8  @ gUnknown_08A3E360
	b .L080BE4E6
	.align 2, 0
.L080BE4A8: .4byte gUnknown_08A3E360
.L080BE4AC:
	cmp r4, #0x65
	beq .L080BE4D4
	cmp r4, #0x65
	bgt .L080BE4CC
	cmp r4, #0x3c
	bgt .L080BE4C6
	cmp r4, #0x3b
	bge .L080BE4D4
	cmp r4, #0xc
	bgt .L080BE4E4
	cmp r4, #9
	blt .L080BE4E4
	b .L080BE4D4
.L080BE4C6:
	cmp r4, #0x50
	beq .L080BE4DC
	b .L080BE4E4
.L080BE4CC:
	cmp r4, #0x69
	bgt .L080BE4E4
	cmp r4, #0x67
	blt .L080BE4E4
.L080BE4D4:
	ldr r4, .L080BE4D8  @ gUnknown_08A3E31C
	b .L080BE4E6
	.align 2, 0
.L080BE4D8: .4byte gUnknown_08A3E31C
.L080BE4DC:
	ldr r4, .L080BE4E0  @ gUnknown_08A3E412
	b .L080BE4E6
	.align 2, 0
.L080BE4E0: .4byte gUnknown_08A3E412
.L080BE4E4:
	ldr r4, .L080BE528  @ gUnknown_08A3E2F8
.L080BE4E6:
	adds r2, r6, #0
	adds r2, #0x30
	ldrb r0, [r2]
	adds r1, r0, #1
	strb r1, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrh r1, [r4]
	bl DivRem
	ldr r1, .L080BE52C  @ 0xFFFF0000
	ands r5, r1
	movs r1, #0x78
	orrs r5, r1
	ldr r1, .L080BE530  @ 0x0000FFFF
	ands r5, r1
	movs r1, #0xa0
	lsls r1, r1, #0xf
	orrs r5, r1
	lsls r0, r0, #1
	adds r1, r0, r4
	ldrh r0, [r1, #4]
	cmp r0, #0
	beq .L080BE520
	ldrh r1, [r4, #2]
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	bl MU_StartStepSfx
.L080BE520:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BE528: .4byte gUnknown_08A3E2F8
.L080BE52C: .4byte 0xFFFF0000
.L080BE530: .4byte 0x0000FFFF

	THUMB_FUNC_END func_080BE45C

	THUMB_FUNC_START GmMu_SetUnitClass
GmMu_SetUnitClass: @ 0x080BE534
	push {r4, lr}
	sub sp, #8
	adds r4, r2, #0
	ldr r2, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #1
	adds r3, r4, #0
	bl GmMu_SetUnit
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmMu_SetUnitClass

	THUMB_FUNC_START GmMu_SetUnitChar
GmMu_SetUnitChar: @ 0x080BE550
	push {r4, lr}
	sub sp, #8
	adds r4, r2, #0
	ldr r2, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #0
	adds r3, r4, #0
	bl GmMu_SetUnit
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmMu_SetUnitChar

	THUMB_FUNC_START func_080BE56C
func_080BE56C: @ 0x080BE56C
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r1, #6
	bl InitTextDb
	movs r1, #0
	str r1, [r4, #0x58]
	adds r0, r4, #0
	adds r0, #0x56
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE56C

	THUMB_FUNC_START func_080BE594
func_080BE594: @ 0x080BE594
	push {lr}
	cmp r0, #0
	bge .L080BE5A6
	cmp r1, #0
	bge .L080BE5A2
	movs r0, #0
	b .L080BE5B0
.L080BE5A2:
	movs r0, #1
	b .L080BE5B0
.L080BE5A6:
	cmp r1, #0
	blt .L080BE5AE
	movs r0, #3
	b .L080BE5B0
.L080BE5AE:
	movs r0, #2
.L080BE5B0:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BE594

	THUMB_FUNC_START func_080BE5B4
func_080BE5B4: @ 0x080BE5B4
	push {lr}
	cmp r0, #0x40
	beq .L080BE5DC
	cmp r0, #0x40
	bgt .L080BE5C4
	cmp r0, #0
	beq .L080BE5CA
	b .L080BE5E4
.L080BE5C4:
	cmp r0, #0x80
	beq .L080BE5D4
	b .L080BE5E4
.L080BE5CA:
	ldr r0, .L080BE5D0  @ gUnknown_08A98E2C
	b .L080BE5E6
	.align 2, 0
.L080BE5D0: .4byte gUnknown_08A98E2C
.L080BE5D4:
	ldr r0, .L080BE5D8  @ gUnknown_08A98E4C
	b .L080BE5E6
	.align 2, 0
.L080BE5D8: .4byte gUnknown_08A98E4C
.L080BE5DC:
	ldr r0, .L080BE5E0  @ gUnknown_08A98E6C
	b .L080BE5E6
	.align 2, 0
.L080BE5E0: .4byte gUnknown_08A98E6C
.L080BE5E4:
	ldr r0, .L080BE5F4  @ gUnknown_08A98E8C
.L080BE5E6:
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
.L080BE5F4: .4byte gUnknown_08A98E8C

	THUMB_FUNC_END func_080BE5B4

	THUMB_FUNC_START func_080BE5F8
func_080BE5F8: @ 0x080BE5F8
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r5]
	adds r2, #1
	adds r0, r2, #0
	strh r0, [r5, #2]
	movs r4, #8
	ldrsb r4, [r1, r4]
	cmp r4, #9
	ble .L080BE622
	adds r0, r4, #0
	movs r1, #0xa
	bl __divsi3
	movs r1, #0xc4
	lsls r1, r1, #1
	adds r0, r0, r1
	strh r0, [r5, #4]
.L080BE622:
	adds r0, r4, #0
	movs r1, #0xa
	bl __modsi3
	movs r2, #0xc4
	lsls r2, r2, #1
	adds r0, r0, r2
	strh r0, [r5, #6]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE5F8

	THUMB_FUNC_START func_080BE638
func_080BE638: @ 0x080BE638
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	adds r0, #0x44
	ldrh r1, [r0]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne .L080BE658
	ldr r0, [r2, #0x40]
	adds r1, r3, #0
	bl func_080BE5F8
	movs r0, #1
	bl EnableBgSync
.L080BE658:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE638

	THUMB_FUNC_START func_080BE65C
func_080BE65C: @ 0x080BE65C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r1, #0
	ldr r1, .L080BE688  @ gUnknown_08A3E448
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #2
	ldrsb r1, [r0, r1]
	mov sl, r1
	ldrb r0, [r0, #3]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp]
	cmp r2, #0
	beq .L080BE68C
	cmp r2, #1
	beq .L080BE694
	b .L080BE69C
	.align 2, 0
.L080BE688: .4byte gUnknown_08A3E448
.L080BE68C:
	movs r0, #0xd
	mov r9, r0
	movs r1, #4
	b .L080BE69A
.L080BE694:
	movs r0, #0xd
	mov r9, r0
	movs r1, #9
.L080BE69A:
	mov r8, r1
.L080BE69C:
	mov r0, sl
	cmp r0, #0
	bge .L080BE6EC
	ldr r1, [sp]
	cmp r1, #0
	bge .L080BE6EC
	ldr r5, .L080BE800  @ gBg1Tm
	adds r0, r5, #0
	mov r1, r9
	mov r2, r8
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, .L080BE804  @ gBg0Tm
	adds r0, r6, #0
	mov r1, r9
	mov r2, r8
	movs r3, #0
	bl TmFillRect_thm
	adds r4, r7, #0
	subs r4, #0xa
	mov r0, r8
	subs r4, r0, r4
	lsls r4, r4, #6
	ldr r0, .L080BE808  @ gUnknown_0201B958
	adds r0, r4, r0
	adds r1, r5, #0
	mov r2, r9
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, .L080BE80C  @ gUnknown_0201B458
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r6, #0
	mov r2, r9
	adds r3, r7, #0
	bl TmCopyRect_thm
.L080BE6EC:
	mov r1, sl
	cmp r1, #0
	ble .L080BE746
	ldr r0, [sp]
	cmp r0, #0
	bge .L080BE746
	movs r5, #0x1e
	mov r1, r9
	subs r5, r5, r1
	lsls r5, r5, #1
	ldr r6, .L080BE800  @ gBg1Tm
	adds r6, r5, r6
	adds r0, r6, #0
	mov r2, r8
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE804  @ gBg0Tm
	adds r5, r5, r0
	adds r0, r5, #0
	mov r1, r9
	mov r2, r8
	movs r3, #0
	bl TmFillRect_thm
	adds r4, r7, #0
	subs r4, #0xa
	mov r0, r8
	subs r4, r0, r4
	lsls r4, r4, #6
	ldr r0, .L080BE808  @ gUnknown_0201B958
	adds r0, r4, r0
	adds r1, r6, #0
	mov r2, r9
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, .L080BE80C  @ gUnknown_0201B458
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r5, #0
	mov r2, r9
	adds r3, r7, #0
	bl TmCopyRect_thm
.L080BE746:
	mov r1, sl
	cmp r1, #0
	bge .L080BE798
	ldr r0, [sp]
	cmp r0, #0
	ble .L080BE798
	ldr r5, .L080BE810  @ gBg1Tm+0x400
	adds r0, r5, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, .L080BE814  @ gBg0Tm+0x400
	adds r0, r6, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE818  @ gUnknown_0201BBD8
	movs r4, #0x16
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, .L080BE81C  @ 0xFFFFFC00
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, .L080BE820  @ gUnknown_0201B758
	ldr r1, .L080BE81C  @ 0xFFFFFC00
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TmCopyRect_thm
.L080BE798:
	mov r0, sl
	cmp r0, #0
	ble .L080BE7EA
	ldr r1, [sp]
	cmp r1, #0
	ble .L080BE7EA
	ldr r5, .L080BE824  @ gBg1Tm+0x422
	adds r0, r5, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r6, .L080BE828  @ gBg0Tm+0x422
	adds r0, r6, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE818  @ gUnknown_0201BBD8
	movs r4, #0x16
	subs r4, r4, r7
	lsls r4, r4, #6
	ldr r1, .L080BE81C  @ 0xFFFFFC00
	adds r5, r5, r1
	adds r5, r4, r5
	adds r1, r5, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TmCopyRect_thm
	ldr r0, .L080BE820  @ gUnknown_0201B758
	ldr r1, .L080BE81C  @ 0xFFFFFC00
	adds r6, r6, r1
	adds r4, r4, r6
	adds r1, r4, #0
	movs r2, #0xd
	adds r3, r7, #0
	bl TmCopyRect_thm
.L080BE7EA:
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BE800: .4byte gBg1Tm
.L080BE804: .4byte gBg0Tm
.L080BE808: .4byte gUnknown_0201B958
.L080BE80C: .4byte gUnknown_0201B458
.L080BE810: .4byte gBg1Tm+0x400
.L080BE814: .4byte gBg0Tm+0x400
.L080BE818: .4byte gUnknown_0201BBD8
.L080BE81C: .4byte 0xFFFFFC00
.L080BE820: .4byte gUnknown_0201B758
.L080BE824: .4byte gBg1Tm+0x422
.L080BE828: .4byte gBg0Tm+0x422

	THUMB_FUNC_END func_080BE65C

	THUMB_FUNC_START func_080BE82C
func_080BE82C: @ 0x080BE82C
	push {r4, r5, lr}
	ldr r1, .L080BE8C4  @ gUnknown_08A3E448
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r4, #2
	ldrsb r4, [r0, r4]
	movs r5, #3
	ldrsb r5, [r0, r5]
	cmp r4, #0
	bge .L080BE85C
	cmp r5, #0
	bge .L080BE85C
	ldr r0, .L080BE8C8  @ gBg1Tm
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE8CC  @ gBg0Tm
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
.L080BE85C:
	cmp r4, #0
	ble .L080BE87C
	cmp r5, #0
	bge .L080BE87C
	ldr r0, .L080BE8D0  @ gBg1Tm+0x22
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE8D4  @ gBg0Tm+0x22
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
.L080BE87C:
	cmp r4, #0
	bge .L080BE89C
	cmp r5, #0
	ble .L080BE89C
	ldr r0, .L080BE8D8  @ gBg1Tm+0x400
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE8DC  @ gBg0Tm+0x400
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
.L080BE89C:
	cmp r4, #0
	ble .L080BE8BC
	cmp r5, #0
	ble .L080BE8BC
	ldr r0, .L080BE8E0  @ gBg1Tm+0x422
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BE8E4  @ gBg0Tm+0x422
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
.L080BE8BC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BE8C4: .4byte gUnknown_08A3E448
.L080BE8C8: .4byte gBg1Tm
.L080BE8CC: .4byte gBg0Tm
.L080BE8D0: .4byte gBg1Tm+0x22
.L080BE8D4: .4byte gBg0Tm+0x22
.L080BE8D8: .4byte gBg1Tm+0x400
.L080BE8DC: .4byte gBg0Tm+0x400
.L080BE8E0: .4byte gBg1Tm+0x422
.L080BE8E4: .4byte gBg0Tm+0x422

	THUMB_FUNC_END func_080BE82C

	THUMB_FUNC_START func_080BE8E8
func_080BE8E8: @ 0x080BE8E8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r5, #0
	bl func_080BBA28
	adds r5, r0, #0
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE8E8

	THUMB_FUNC_START func_080BE918
func_080BE918: @ 0x080BE918
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r5, #0x34
	adds r0, r5, #0
	bl ClearText
	ldr r1, .L080BE954  @ gCharacterData
	subs r4, #1
	movs r0, #0x34
	muls r0, r4, r0
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetMsg
	adds r4, r0, #0
	movs r0, #0x44
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #5
	adds r3, r4, #0
	bl Text_InsertDrawString
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BE954: .4byte gCharacterData

	THUMB_FUNC_END func_080BE918

	THUMB_FUNC_START func_080BE958
func_080BE958: @ 0x080BE958
	push {lr}
	sub sp, #4
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080BE974
	bl GetUnitByPid
	bl GetUnitChibiFid
	adds r3, r0, #0
	b .L080BE980
.L080BE974:
	adds r0, r2, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BE980
	ldr r3, .L080BE998  @ 0x00007F04
.L080BE980:
	ldr r1, .L080BE99C  @ gUnknown_0201B7DA
	movs r2, #0x88
	lsls r2, r2, #2
	movs r0, #0
	str r0, [sp]
	adds r0, r3, #0
	movs r3, #4
	bl PutFaceChibi
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080BE998: .4byte 0x00007F04
.L080BE99C: .4byte gUnknown_0201B7DA

	THUMB_FUNC_END func_080BE958

	THUMB_FUNC_START func_080BE9A0
func_080BE9A0: @ 0x080BE9A0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r4, #0x34
	adds r0, r4, #0
	bl ClearText
	adds r0, r5, #0
	bl GetJInfo
	ldrh r0, [r0]
	bl GetMsg
	adds r5, r0, #0
	movs r0, #0x44
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #5
	adds r3, r5, #0
	bl Text_InsertDrawString
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BE9A0

	THUMB_FUNC_START func_080BE9D8
func_080BE9D8: @ 0x080BE9D8
	push {r4, r5, lr}
	adds r2, r1, #0
	ldr r1, .L080BEA0C  @ gGmData
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080BEA56
	lsls r1, r2, #5
	ldr r2, .L080BEA10  @ gUnknown_082060B0
	adds r0, r1, r2
	ldr r0, [r0, #0xc]
	ldrh r3, [r0]
	adds r4, r1, #0
	adds r5, r2, #0
	cmp r3, #0
	beq .L080BEA20
	ldr r2, .L080BEA14  @ gUnknown_0201B430
	ldr r0, .L080BEA18  @ 0x000002BA
	adds r1, r2, r0
	ldr r0, .L080BEA1C  @ 0x00003231
	strh r0, [r1]
	b .L080BEA2A
	.align 2, 0
.L080BEA0C: .4byte gGmData
.L080BEA10: .4byte gUnknown_082060B0
.L080BEA14: .4byte gUnknown_0201B430
.L080BEA18: .4byte 0x000002BA
.L080BEA1C: .4byte 0x00003231
.L080BEA20:
	ldr r1, .L080BEA40  @ gUnknown_0201B430
	ldr r2, .L080BEA44  @ 0x000002BA
	adds r0, r1, r2
	strh r3, [r0]
	adds r2, r1, #0
.L080BEA2A:
	adds r0, r4, r5
	ldr r0, [r0, #0x10]
	ldrh r1, [r0]
	cmp r1, #0
	beq .L080BEA4C
	movs r3, #0xaf
	lsls r3, r3, #2
	adds r1, r2, r3
	ldr r0, .L080BEA48  @ 0x00003232
	strh r0, [r1]
	b .L080BEA68
	.align 2, 0
.L080BEA40: .4byte gUnknown_0201B430
.L080BEA44: .4byte 0x000002BA
.L080BEA48: .4byte 0x00003232
.L080BEA4C:
	movs r3, #0xaf
	lsls r3, r3, #2
	adds r0, r2, r3
	strh r1, [r0]
	b .L080BEA68
.L080BEA56:
	ldr r0, .L080BEA70  @ gUnknown_0201B430
	ldr r2, .L080BEA74  @ 0x000002BA
	adds r1, r0, r2
	movs r2, #0
	strh r2, [r1]
	movs r3, #0xaf
	lsls r3, r3, #2
	adds r0, r0, r3
	strh r2, [r0]
.L080BEA68:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEA70: .4byte gUnknown_0201B430
.L080BEA74: .4byte 0x000002BA

	THUMB_FUNC_END func_080BE9D8

	THUMB_FUNC_START func_080BEA78
func_080BEA78: @ 0x080BEA78
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080BEA90
	bl GetUnitByPid
	movs r5, #8
	ldrsb r5, [r0, r5]
	b .L080BEA9C
.L080BEA90:
	adds r0, r2, #0
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BEA9C
	movs r5, #0
.L080BEA9C:
	ldr r4, .L080BEAD8  @ gUnknown_0201B864
	ldr r1, .L080BEADC  @ 0x00005233
	adds r0, r1, #0
	strh r0, [r4]
	adds r1, r4, #0
	adds r1, #0x40
	ldr r2, .L080BEAE0  @ 0x00005253
	adds r0, r2, #0
	strh r0, [r1]
	ldr r3, .L080BEAE4  @ 0x00005234
	adds r0, r3, #0
	strh r0, [r4, #2]
	adds r1, #2
	adds r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	cmp r5, #0
	bne .L080BEAE8
	adds r3, #0xb
	adds r2, r3, #0
	strh r2, [r4, #4]
	adds r0, r4, #0
	adds r0, #0x44
	adds r3, #0x20
	adds r1, r3, #0
	strh r1, [r0]
	strh r2, [r4, #6]
	adds r0, #2
	strh r1, [r0]
	b .L080BEB1C
	.align 2, 0
.L080BEAD8: .4byte gUnknown_0201B864
.L080BEADC: .4byte 0x00005233
.L080BEAE0: .4byte 0x00005253
.L080BEAE4: .4byte 0x00005234
.L080BEAE8:
	cmp r5, #9
	ble .L080BEB04
	adds r0, r5, #0
	movs r1, #0xa
	bl __divsi3
	ldr r2, .L080BEB24  @ 0x00005235
	adds r1, r0, r2
	strh r1, [r4, #4]
	adds r1, r4, #0
	adds r1, #0x44
	ldr r3, .L080BEB28  @ 0x00005255
	adds r0, r0, r3
	strh r0, [r1]
.L080BEB04:
	adds r0, r5, #0
	movs r1, #0xa
	bl __modsi3
	ldr r2, .L080BEB24  @ 0x00005235
	adds r1, r0, r2
	strh r1, [r4, #6]
	adds r1, r4, #0
	adds r1, #0x46
	ldr r3, .L080BEB28  @ 0x00005255
	adds r0, r0, r3
	strh r0, [r1]
.L080BEB1C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEB24: .4byte 0x00005235
.L080BEB28: .4byte 0x00005255

	THUMB_FUNC_END func_080BEA78

	THUMB_FUNC_START func_080BEB2C
func_080BEB2C: @ 0x080BEB2C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BEB3E
	cmp r0, #1
	beq .L080BEB74
	b .L080BEBB4
.L080BEB3E:
	ldr r4, .L080BEB68  @ gUnknown_0201BBD8
	adds r0, r4, #0
	movs r1, #0xd
	movs r2, #4
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080BEB6C  @ gUnknown_0201B718
	movs r1, #0xd
	movs r2, #2
	movs r3, #0
	bl TmFillRect_thm
	ldr r1, .L080BEB70  @ gUnknown_08A98EAC
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r4, #0
	bl TmApplyTsa_thm
	b .L080BEBB4
	.align 2, 0
.L080BEB68: .4byte gUnknown_0201BBD8
.L080BEB6C: .4byte gUnknown_0201B718
.L080BEB70: .4byte gUnknown_08A98EAC
.L080BEB74:
	ldr r5, .L080BEBC4  @ gUnknown_0201BBD8
	adds r0, r5, #0
	movs r1, #0xd
	movs r2, #9
	movs r3, #0
	bl TmFillRect_thm
	ldr r4, .L080BEBC8  @ gUnknown_0201B718
	adds r0, r4, #0
	movs r1, #0xd
	movs r2, #7
	movs r3, #0
	bl TmFillRect_thm
	ldr r1, .L080BEBCC  @ gUnknown_08A98F30
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r5, #0
	bl TmApplyTsa_thm
	adds r0, r6, #0
	adds r0, #0x34
	adds r4, #0xc8
	adds r1, r4, #0
	bl PutText
	adds r0, r6, #0
	bl func_080BEA78
	adds r0, r6, #0
	bl func_080BE958
.L080BEBB4:
	adds r0, r6, #0
	adds r0, #0x2c
	ldr r1, .L080BEBD0  @ gUnknown_0201B71C
	bl PutText
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEBC4: .4byte gUnknown_0201BBD8
.L080BEBC8: .4byte gUnknown_0201B718
.L080BEBCC: .4byte gUnknown_08A98F30
.L080BEBD0: .4byte gUnknown_0201B71C

	THUMB_FUNC_END func_080BEB2C

	THUMB_FUNC_START func_080BEBD4
func_080BEBD4: @ 0x080BEBD4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl func_080C089C
	adds r1, r4, #0
	adds r1, #0x50
	strb r0, [r1]
	ldr r0, .L080BEC50  @ gUnknown_08A3E448
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r0, #2
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #3]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl func_080BE594
	adds r1, r4, #0
	adds r1, #0x57
	strb r0, [r1]
	adds r0, r4, #0
	bl func_080BEB2C
	adds r3, r4, #0
	adds r3, #0x4e
	ldr r1, .L080BEC54  @ gGmData
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4f
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strb r0, [r2]
	ldrb r1, [r3]
	adds r0, r4, #0
	adds r0, #0x4c
	strb r1, [r0]
	ldrb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEC50: .4byte gUnknown_08A3E448
.L080BEC54: .4byte gGmData

	THUMB_FUNC_END func_080BEBD4

	THUMB_FUNC_START func_080BEC58
func_080BEC58: @ 0x080BEC58
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BEC6A
	cmp r0, #1
	beq .L080BEC74
	b .L080BEC80
.L080BEC6A:
	ldr r1, .L080BEC70  @ gUnknown_08A3E458
	b .L080BEC76
	.align 2, 0
.L080BEC70: .4byte gUnknown_08A3E458
.L080BEC74:
	ldr r1, .L080BECB4  @ gUnknown_08A3E45E
.L080BEC76:
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r5, #3
.L080BEC80:
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x5e
	ldrb r2, [r2]
	bl func_080BE65C
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, r5
	bne .L080BECAE
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080BECAE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BECB4: .4byte gUnknown_08A3E45E

	THUMB_FUNC_END func_080BEC58

	THUMB_FUNC_START func_080BECB8
func_080BECB8: @ 0x080BECB8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x4e
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4c
	strb r0, [r2]
	movs r0, #0x4f
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	strb r0, [r1]
	ldr r1, .L080BED18  @ gGmData
	ldr r0, [r1, #8]
	asrs r5, r0, #8
	strb r5, [r3]
	ldr r0, [r1, #0xc]
	asrs r1, r0, #8
	mov r0, ip
	strb r1, [r0]
	ldrh r0, [r3]
	ldrh r2, [r2]
	cmp r0, r2
	beq .L080BEDB6
	adds r7, r1, #0
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x48]
	movs r1, #0
	str r1, [sp]
	adds r1, r5, #0
	adds r2, r7, #0
	movs r3, #0
	bl func_080BB628
	adds r5, r0, #0
	cmp r5, #0
	bge .L080BED1C
	adds r0, r4, #0
	bl Proc_Break
	b .L080BEDB6
	.align 2, 0
.L080BED18: .4byte gGmData
.L080BED1C:
	adds r0, r4, #0
	adds r0, #0x5c
	ldrh r1, [r0]
	mov r8, r0
	adds r6, r4, #0
	adds r6, #0x50
	cmp r1, r5
	beq .L080BED7A
	movs r0, #0
	ldrsb r0, [r6, r0]
	bl func_080BE82C
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080BEF20
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl func_080C089C
	strb r0, [r6]
	adds r0, r4, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0
	beq .L080BED5C
	cmp r1, #1
	beq .L080BED64
	b .L080BED6A
.L080BED5C:
	ldr r0, .L080BED60  @ gUnknown_08A3E458
	b .L080BED66
	.align 2, 0
.L080BED60: .4byte gUnknown_08A3E458
.L080BED64:
	ldr r0, .L080BEDC4  @ gUnknown_08A3E45E
.L080BED66:
	movs r7, #2
	ldrsb r7, [r0, r7]
.L080BED6A:
	movs r0, #0
	ldrsb r0, [r6, r0]
	ldrb r2, [r2]
	adds r1, r7, #0
	bl func_080BE65C
	mov r1, r8
	strh r5, [r1]
.L080BED7A:
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl func_080C089C
	movs r2, #0
	ldrsb r2, [r6, r2]
	cmp r0, r2
	beq .L080BEDB6
	ldr r1, .L080BEDC8  @ gUnknown_08A3E448
	lsls r0, r0, #2
	adds r3, r0, r1
	lsls r0, r2, #2
	adds r2, r0, r1
	movs r1, #2
	ldrsb r1, [r3, r1]
	movs r0, #2
	ldrsb r0, [r2, r0]
	cmp r1, r0
	bne .L080BEDB0
	movs r1, #3
	ldrsb r1, [r3, r1]
	movs r0, #3
	ldrsb r0, [r2, r0]
	cmp r1, r0
	beq .L080BEDB6
.L080BEDB0:
	adds r0, r4, #0
	bl Proc_Break
.L080BEDB6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEDC4: .4byte gUnknown_08A3E45E
.L080BEDC8: .4byte gUnknown_08A3E448

	THUMB_FUNC_END func_080BECB8

	THUMB_FUNC_START func_080BEDCC
func_080BEDCC: @ 0x080BEDCC
	adds r0, #0x56
	movs r1, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080BEDCC

	THUMB_FUNC_START func_080BEDD4
func_080BEDD4: @ 0x080BEDD4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x55
	movs r0, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x5e
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BEDF0
	cmp r0, #1
	beq .L080BEDF8
	b .L080BEE04
.L080BEDF0:
	ldr r1, .L080BEDF4  @ gUnknown_08A3E45B
	b .L080BEDFA
	.align 2, 0
.L080BEDF4: .4byte gUnknown_08A3E45B
.L080BEDF8:
	ldr r1, .L080BEE44  @ gUnknown_08A3E461
.L080BEDFA:
	ldr r0, [r4, #0x58]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r5, #3
.L080BEE04:
	adds r0, r4, #0
	adds r0, #0x50
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r4, #0
	adds r2, #0x5e
	ldrb r2, [r2]
	bl func_080BE65C
	ldr r0, [r4, #0x58]
	adds r0, #1
	str r0, [r4, #0x58]
	cmp r0, r5
	bne .L080BEE3C
	movs r0, #0
	str r0, [r4, #0x58]
	adds r1, r4, #0
	adds r1, #0x55
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080BEE3C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEE44: .4byte gUnknown_08A3E461

	THUMB_FUNC_END func_080BEDD4

	THUMB_FUNC_START func_080BEE48
func_080BEE48: @ 0x080BEE48
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	movs r5, #0
	ldr r1, .L080BEE78  @ gGmData
.L080BEE52:
	movs r3, #0x12
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq .L080BEE88
	ldrb r0, [r1, #0x11]
	cmp r0, r2
	bne .L080BEE88
	adds r0, r5, #0
	bl func_080BD20C
	cmp r0, #1
	beq .L080BEE7C
	cmp r0, #1
	ble .L080BEE72
	cmp r0, #2
	beq .L080BEE80
.L080BEE72:
	movs r0, #0
	b .L080BEE82
	.align 2, 0
.L080BEE78: .4byte gGmData
.L080BEE7C:
	movs r0, #0x80
	b .L080BEE82
.L080BEE80:
	movs r0, #0x40
.L080BEE82:
	str r0, [r4]
	adds r0, r5, #0
	b .L080BEE96
.L080BEE88:
	adds r1, #4
	adds r5, #1
	cmp r5, #6
	ble .L080BEE52
	movs r0, #1
	negs r0, r0
	str r0, [r4]
.L080BEE96:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BEE48

	THUMB_FUNC_START func_080BEE9C
func_080BEE9C: @ 0x080BEE9C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, r1, #0
	mov r1, sp
	bl func_080BEE48
	cmp r0, #0
	blt .L080BEF00
	ldr r1, .L080BEEDC  @ gGmData
	lsls r0, r0, #2
	adds r2, r0, r1
	ldrb r1, [r2, #0x10]
	movs r5, #2
	adds r0, r5, #0
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #0
	beq .L080BEEEA
	adds r1, r4, #0
	adds r1, #0x5f
	movs r0, #0
	strb r0, [r1]
	ldrb r1, [r2, #0x10]
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BEEE0
	ldrb r1, [r2, #0x12]
	b .L080BEEE2
	.align 2, 0
.L080BEEDC: .4byte gGmData
.L080BEEE0:
	movs r1, #0
.L080BEEE2:
	adds r0, r4, #0
	adds r0, #0x60
	strb r1, [r0]
	b .L080BEEF8
.L080BEEEA:
	ldrh r0, [r2, #0x12]
	adds r1, r4, #0
	adds r1, #0x5f
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x60
	strb r3, [r0]
.L080BEEF8:
	adds r1, r4, #0
	adds r1, #0x5e
	movs r0, #1
	b .L080BEF0E
.L080BEF00:
	adds r1, r4, #0
	adds r1, #0x5f
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	subs r1, #2
.L080BEF0E:
	strb r0, [r1]
	ldr r0, [sp]
	movs r1, #8
	bl func_080BE5B4
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BEE9C

	THUMB_FUNC_START func_080BEF20
func_080BEF20: @ 0x080BEF20
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl func_080BEE9C
	adds r0, r4, #0
	bl func_080BEB2C
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080BE8E8
	adds r1, r4, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080BEF4C
	adds r1, r0, #0
	adds r0, r4, #0
	bl func_080BE918
	b .L080BEF5E
.L080BEF4C:
	adds r1, r4, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080BEF5E
	adds r1, r0, #0
	adds r0, r4, #0
	bl func_080BE9A0
.L080BEF5E:
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080BE9D8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BEF20

	THUMB_FUNC_START func_080BEF6C
func_080BEF6C: @ 0x080BEF6C
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	add r2, sp, #4
	ldr r1, .L080BEFB4  @ gGmData
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	adds r2, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r2]
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x48]
	add r1, sp, #4
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r3, #0
	ldrsh r2, [r2, r3]
	movs r3, #0
	str r3, [sp]
	bl func_080BB628
	adds r1, r0, #0
	cmp r1, #0
	blt .L080BEFAC
	adds r0, r4, #0
	bl func_080BEF20
	adds r0, r4, #0
	bl Proc_Break
.L080BEFAC:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BEFB4: .4byte gGmData

	THUMB_FUNC_END func_080BEF6C

	THUMB_FUNC_START func_080BEFB8
func_080BEFB8: @ 0x080BEFB8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0
	str r0, [r7, #0x58]
	adds r0, r7, #0
	adds r0, #0x56
	movs r1, #0
	strb r1, [r0]
	subs r0, #6
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x57
	movs r0, #0xff
	strb r0, [r1]
	adds r6, r7, #0
	adds r6, #0x5c
	ldr r0, .L080BF040  @ 0x0000FFFF
	strh r0, [r6]
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	movs r1, #8
	bl InitText
	adds r4, r7, #0
	adds r4, #0x34
	adds r0, r4, #0
	movs r1, #8
	bl InitText
	adds r0, r5, #0
	bl ClearText
	adds r0, r4, #0
	bl ClearText
	add r2, sp, #4
	ldr r1, .L080BF044  @ gGmData
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	adds r2, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r2]
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x48]
	add r1, sp, #4
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r3, #0
	ldrsh r2, [r2, r3]
	movs r3, #0
	str r3, [sp]
	bl func_080BB628
	adds r1, r0, #0
	cmp r1, #0
	blt .L080BF038
	strh r1, [r6]
	adds r0, r7, #0
	bl func_080BEF20
.L080BF038:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF040: .4byte 0x0000FFFF
.L080BF044: .4byte gGmData

	THUMB_FUNC_END func_080BEFB8

	THUMB_FUNC_START func_080BF048
func_080BF048: @ 0x080BF048
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, .L080BF118  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	ldr r0, .L080BF11C  @ gUnknown_08A9901C
	ldr r4, .L080BF120  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r1, .L080BF124  @ 0x06004660
	adds r0, r4, #0
	movs r2, #0xd
	movs r3, #2
	bl CopyTileGfxForObj
	ldr r0, .L080BF128  @ gUnknown_08A99120
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080BF12C  @ gUnknown_08A97A80
	ldr r1, .L080BF130  @ 0x06004620
	bl Decompress
	ldr r0, .L080BF134  @ gUnknown_08A97A60
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	bl ResetTextFont
	ldr r0, .L080BF138  @ gUnknown_08A3E464
	ldr r1, [r5, #0x14]
	bl SpawnProc
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF118: .4byte gDispIo
.L080BF11C: .4byte gUnknown_08A9901C
.L080BF120: .4byte gBuf
.L080BF124: .4byte 0x06004660
.L080BF128: .4byte gUnknown_08A99120
.L080BF12C: .4byte gUnknown_08A97A80
.L080BF130: .4byte 0x06004620
.L080BF134: .4byte gUnknown_08A97A60
.L080BF138: .4byte gUnknown_08A3E464

	THUMB_FUNC_END func_080BF048

	THUMB_FUNC_START func_080BF13C
func_080BF13C: @ 0x080BF13C
	push {r4, lr}
	adds r4, r0, #0
	bl ResetText
	bl func_080C09B8
	ldr r0, .L080BF158  @ gUnknown_08A3E4D4
	adds r1, r4, #0
	bl SpawnProc
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080BF158: .4byte gUnknown_08A3E4D4

	THUMB_FUNC_END func_080BF13C

	THUMB_FUNC_START func_080BF15C
func_080BF15C: @ 0x080BF15C
	push {lr}
	ldr r0, .L080BF178  @ gUnknown_08A3E464
	bl EndEachProc
	ldr r0, .L080BF17C  @ gUnknown_08A3E4D4
	bl EndEachProc
	bl SetBlendNone
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
.L080BF178: .4byte gUnknown_08A3E464
.L080BF17C: .4byte gUnknown_08A3E4D4

	THUMB_FUNC_END func_080BF15C

	THUMB_FUNC_START func_080BF180
func_080BF180: @ 0x080BF180
	ldr r2, .L080BF18C  @ gGmData
	ldr r1, [r0, #0x38]
	str r1, [r2, #8]
	ldr r0, [r0, #0x3c]
	str r0, [r2, #0xc]
	bx lr
	.align 2, 0
.L080BF18C: .4byte gGmData

	THUMB_FUNC_END func_080BF180

	THUMB_FUNC_START func_080BF190
func_080BF190: @ 0x080BF190
	movs r1, #0
	strh r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_END func_080BF190

	THUMB_FUNC_START func_080BF198
func_080BF198: @ 0x080BF198
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	cmp r0, r1
	bge .L080BF1F4
	movs r1, #0x2c
	ldrsh r0, [r7, r1]
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	adds r2, #0x40
	ldrb r2, [r2]
	bl Spline_800B7E0
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	ldr r0, [r7, #0x44]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldr r4, [r7, #0x30]
	adds r4, r4, r0
	ldr r0, [r7, #0x48]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldr r1, [r7, #0x34]
	adds r1, r1, r0
	ldr r0, .L080BF1F0  @ gGmData
	str r4, [r0, #8]
	str r1, [r0, #0xc]
	b .L080BF204
	.align 2, 0
.L080BF1F0: .4byte gGmData
.L080BF1F4:
	ldr r0, .L080BF20C  @ gGmData
	ldr r1, [r7, #0x38]
	str r1, [r0, #8]
	ldr r1, [r7, #0x3c]
	str r1, [r0, #0xc]
	adds r0, r7, #0
	bl Proc_End
.L080BF204:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF20C: .4byte gGmData

	THUMB_FUNC_END func_080BF198

	THUMB_FUNC_START func_080BF210
func_080BF210: @ 0x080BF210
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x14]
	cmp r1, #0
	beq .L080BF228
	ldr r0, .L080BF224  @ gUnknown_08A3E4F4
	b .L080BF22C
	.align 2, 0
.L080BF224: .4byte gUnknown_08A3E4F4
.L080BF228:
	ldr r0, .L080BF240  @ gUnknown_08A3E4F4
	movs r1, #3
.L080BF22C:
	bl SpawnProc
	adds r2, r0, #0
	cmp r4, #0
	bne .L080BF248
	ldr r0, .L080BF244  @ gGmData
	ldr r1, [r0, #8]
	str r1, [r2, #0x30]
	ldr r0, [r0, #0xc]
	b .L080BF256
	.align 2, 0
.L080BF240: .4byte gUnknown_08A3E4F4
.L080BF244: .4byte gGmData
.L080BF248:
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #8
	str r0, [r2, #0x30]
	movs r1, #2
	ldrsh r0, [r4, r1]
	lsls r0, r0, #8
.L080BF256:
	str r0, [r2, #0x34]
	cmp r5, #0
	bne .L080BF262
	str r5, [r2, #0x38]
	str r5, [r2, #0x3c]
	b .L080BF272
.L080BF262:
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #8
	str r0, [r2, #0x38]
	movs r1, #2
	ldrsh r0, [r5, r1]
	lsls r0, r0, #8
	str r0, [r2, #0x3c]
.L080BF272:
	ldr r0, [r2, #0x38]
	ldr r1, [r2, #0x30]
	subs r0, r0, r1
	str r0, [r2, #0x44]
	ldr r0, [r2, #0x3c]
	ldr r1, [r2, #0x34]
	subs r0, r0, r1
	str r0, [r2, #0x48]
	strh r6, [r2, #0x2a]
	adds r0, r2, #0
	adds r0, #0x40
	strb r7, [r0]
	adds r0, r2, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080BF210

	THUMB_FUNC_START func_080BF294
func_080BF294: @ 0x080BF294
	push {lr}
	ldr r0, .L080BF2A8  @ gUnknown_08A3E4F4
	bl FindProc
	cmp r0, #0
	beq .L080BF2A2
	movs r0, #1
.L080BF2A2:
	pop {r1}
	bx r1
	.align 2, 0
.L080BF2A8: .4byte gUnknown_08A3E4F4

	THUMB_FUNC_END func_080BF294

	THUMB_FUNC_START GmScrollManage_OnEnd
GmScrollManage_OnEnd: @ 0x080BF2AC
	push {lr}
	adds r3, r0, #0
	ldr r0, .L080BF2CC  @ gGmData
	ldrh r1, [r3, #0x3a]
	strh r1, [r0, #2]
	ldrh r1, [r3, #0x3c]
	strh r1, [r0, #4]
	ldr r2, [r3, #0x2c]
	cmp r2, #0
	beq .L080BF2C8
	ldr r0, [r2]
	ldr r1, [r3, #0x30]
	orrs r0, r1
	str r0, [r2]
.L080BF2C8:
	pop {r0}
	bx r0
	.align 2, 0
.L080BF2CC: .4byte gGmData

	THUMB_FUNC_END GmScrollManage_OnEnd

	THUMB_FUNC_START GmScrollManage_OnInit
GmScrollManage_OnInit: @ 0x080BF2D0
	movs r1, #0
	str r1, [r0, #0x44]
	bx lr

	THUMB_FUNC_END GmScrollManage_OnInit

	THUMB_FUNC_START GmScrollManage_OnLoop
GmScrollManage_OnLoop: @ 0x080BF2D8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r1, r7, #0
	adds r1, #0x48
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	ble .L080BF2F0
	subs r0, r2, #1
	strh r0, [r1]
	b .L080BF36A
.L080BF2F0:
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldr r1, [r7, #0x30]
	ands r0, r1
	cmp r0, #0
	beq .L080BF304
	ldr r0, [r7, #0x40]
	str r0, [r7, #0x44]
	adds r1, r0, #0
	b .L080BF310
.L080BF304:
	ldr r0, [r7, #0x44]
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r0, r1
	str r0, [r7, #0x44]
	ldr r1, [r7, #0x40]
.L080BF310:
	ldr r0, [r7, #0x44]
	cmp r0, r1
	bge .L080BF364
	movs r3, #0x34
	ldrsh r2, [r7, r3]
	bl Spline_800B84C
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	movs r1, #0x3a
	ldrsh r0, [r7, r1]
	movs r2, #0x36
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	movs r3, #0x36
	ldrsh r4, [r7, r3]
	adds r4, r4, r0
	movs r1, #0x3c
	ldrsh r0, [r7, r1]
	movs r2, #0x38
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	movs r3, #0x38
	ldrsh r1, [r7, r3]
	adds r1, r1, r0
	ldr r0, .L080BF360  @ gGmData
	strh r4, [r0, #2]
	strh r1, [r0, #4]
	b .L080BF36A
	.align 2, 0
.L080BF360: .4byte gGmData
.L080BF364:
	adds r0, r7, #0
	bl Proc_Break
.L080BF36A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmScrollManage_OnLoop

	THUMB_FUNC_START StartGmScrollManage
StartGmScrollManage: @ 0x080BF370
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, .L080BF3B8  @ gUnknown_08A3E52C
	bl SpawnProc
	adds r3, r0, #0
	movs r1, #0xa
	ldrsh r0, [r4, r1]
	cmp r0, #0
	blt .L080BF38E
	movs r5, #0xc
	ldrsh r0, [r4, r5]
	ldr r2, .L080BF3BC  @ gGmData
	cmp r0, #0
	bge .L080BF39A
.L080BF38E:
	ldr r0, .L080BF3BC  @ gGmData
	ldrh r1, [r0, #2]
	strh r1, [r4, #0xa]
	ldrh r1, [r0, #4]
	strh r1, [r4, #0xc]
	adds r2, r0, #0
.L080BF39A:
	ldrh r1, [r4, #0xa]
	strh r1, [r3, #0x36]
	ldrh r0, [r4, #0xc]
	strh r0, [r3, #0x38]
	strh r1, [r2, #2]
	ldrh r0, [r3, #0x38]
	strh r0, [r2, #4]
	ldrh r2, [r4, #0xe]
	movs r5, #0xe
	ldrsh r0, [r4, r5]
	cmp r0, #0
	bge .L080BF3C0
	strh r1, [r3, #0x3a]
	b .L080BF3C2
	.align 2, 0
.L080BF3B8: .4byte gUnknown_08A3E52C
.L080BF3BC: .4byte gGmData
.L080BF3C0:
	strh r2, [r3, #0x3a]
.L080BF3C2:
	ldrh r0, [r4, #0x10]
	strh r0, [r3, #0x3c]
	ldrh r0, [r4, #8]
	strh r0, [r3, #0x34]
	ldr r0, [r4, #0x14]
	lsls r0, r0, #0xc
	str r0, [r3, #0x40]
	ldrh r1, [r4, #0x18]
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
	ldr r2, [r4]
	str r2, [r3, #0x2c]
	cmp r2, #0
	beq .L080BF3EC
	ldr r0, [r4, #4]
	ldr r1, [r2]
	bics r1, r0
	str r1, [r2]
	ldr r0, [r4, #4]
	str r0, [r3, #0x30]
.L080BF3EC:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END StartGmScrollManage

	THUMB_FUNC_START FindGmScrollManage
FindGmScrollManage: @ 0x080BF3F4
	push {lr}
	ldr r0, .L080BF400  @ gUnknown_08A3E52C
	bl FindProc
	pop {r1}
	bx r1
	.align 2, 0
.L080BF400: .4byte gUnknown_08A3E52C

	THUMB_FUNC_END FindGmScrollManage

	THUMB_FUNC_START StartGmScroll
StartGmScroll: @ 0x080BF404
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #0x20
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r4, [sp, #0x3c]
	ldr r0, [sp, #0x40]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	ldr r2, .L080BF48C  @ gUnknown_08A3D748
	mov sl, r2
	mov r0, sl
	str r3, [sp, #0x1c]
	bl FindProc
	adds r1, r0, #0
	adds r0, #0x30
	str r0, [sp]
	movs r2, #1
	str r2, [sp, #4]
	mov r0, sp
	strh r2, [r0, #8]
	strh r5, [r0, #0xa]
	strh r6, [r0, #0xc]
	mov r2, r8
	strh r2, [r0, #0xe]
	ldr r3, [sp, #0x1c]
	strh r3, [r0, #0x10]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	str r4, [sp, #0x14]
	mov r2, r9
	strh r2, [r0, #0x18]
	bl StartGmScrollManage
	mov r0, sl
	bl FindProc
	ldr r1, [r0, #0x50]
	adds r1, #0x32
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF48C: .4byte gUnknown_08A3D748

	THUMB_FUNC_END StartGmScroll

	THUMB_FUNC_START func_080BF490
func_080BF490: @ 0x080BF490
	push {lr}
	ldr r0, .L080BF4A4  @ gUnknown_08A3D748
	bl FindProc
	ldr r1, [r0, #0x30]
	movs r0, #1
	bics r0, r1
	pop {r1}
	bx r1
	.align 2, 0
.L080BF4A4: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BF490

	THUMB_FUNC_START EndGmScroll
EndGmScroll: @ 0x080BF4A8
	push {r4, lr}
	ldr r0, .L080BF4C8  @ gUnknown_08A3D748
	bl FindProc
	adds r4, r0, #0
	ldr r0, .L080BF4CC  @ gUnknown_08A3E52C
	bl EndEachProc
	ldr r0, [r4, #0x30]
	movs r1, #1
	orrs r0, r1
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF4C8: .4byte gUnknown_08A3D748
.L080BF4CC: .4byte gUnknown_08A3E52C

	THUMB_FUNC_END EndGmScroll

	THUMB_FUNC_START SetGmClassUnit
SetGmClassUnit: @ 0x080BF4D0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, .L080BF500  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	str r4, [sp]
	adds r1, r5, #0
	adds r2, r6, #0
	mov r3, r8
	bl GmMu_SetUnitClass
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF500: .4byte gUnknown_08A3D748

	THUMB_FUNC_END SetGmClassUnit

	THUMB_FUNC_START SetGmCharUnit
SetGmCharUnit: @ 0x080BF504
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, .L080BF534  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	str r4, [sp]
	adds r1, r5, #0
	adds r2, r6, #0
	mov r3, r8
	bl GmMu_SetUnitChar
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF534: .4byte gUnknown_08A3D748

	THUMB_FUNC_END SetGmCharUnit

	THUMB_FUNC_START RemoveGmUnit
RemoveGmUnit: @ 0x080BF538
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080BF550  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl GmMu_RemoveUnit
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF550: .4byte gUnknown_08A3D748

	THUMB_FUNC_END RemoveGmUnit

	THUMB_FUNC_START ShowGmUnit
ShowGmUnit: @ 0x080BF554
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080BF56C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl GmMu_ShowUnit
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF56C: .4byte gUnknown_08A3D748

	THUMB_FUNC_END ShowGmUnit

	THUMB_FUNC_START HideGmUnit
HideGmUnit: @ 0x080BF570
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080BF588  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl GmMu_HideUnit
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF588: .4byte gUnknown_08A3D748

	THUMB_FUNC_END HideGmUnit

	THUMB_FUNC_START AddAndDrawGmPath
AddAndDrawGmPath: @ 0x080BF58C
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, .L080BF5B8  @ gGmData
	adds r1, r0, #0
	adds r1, #0xa4
	bl AddGmPath
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080BF5B2
	ldr r0, .L080BF5BC  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x4c]
	adds r1, r4, #0
	bl MapRoute_BeginRouteTransition
.L080BF5B2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF5B8: .4byte gGmData
.L080BF5BC: .4byte gUnknown_08A3D748

	THUMB_FUNC_END AddAndDrawGmPath

	THUMB_FUNC_START nullsub_50
nullsub_50: @ 0x080BF5C0
	bx lr

	THUMB_FUNC_END nullsub_50

	THUMB_FUNC_START func_080BF5C4
func_080BF5C4: @ 0x080BF5C4
	movs r1, #0
	str r1, [r0, #0x30]
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #1
	ldr r2, .L080BF5D8  @ gPal
	adds r1, r1, r2
	str r1, [r0, #0x40]
	bx lr
	.align 2, 0
.L080BF5D8: .4byte gPal

	THUMB_FUNC_END func_080BF5C4

	THUMB_FUNC_START func_080BF5DC
func_080BF5DC: @ 0x080BF5DC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	adds r0, #1
	str r0, [r5, #0x30]
	ldr r1, [r5, #0x2c]
	cmp r0, r1
	bge .L080BF69A
	lsls r0, r0, #6
	bl __divsi3
	mov r9, r0
	movs r7, #0
	adds r0, r5, #0
	adds r0, #0x34
	mov sl, r0
	ldrb r0, [r0]
	cmp r7, r0
	bge .L080BF6AE
	movs r1, #0x1f
	mov ip, r1
.L080BF60E:
	ldr r0, [r5, #0x38]
	lsls r6, r7, #1
	adds r0, r6, r0
	ldrh r3, [r0]
	movs r2, #0x1f
	ands r2, r3
	ldr r0, [r5, #0x3c]
	adds r0, r6, r0
	ldrh r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	subs r0, r0, r2
	mov r4, r9
	muls r4, r0, r4
	adds r0, r4, #0
	cmp r0, #0
	bge .L080BF632
	adds r0, #0x3f
.L080BF632:
	asrs r0, r0, #6
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r4, r3, #0x10
	lsrs r2, r4, #0x15
	mov r0, ip
	ands r2, r0
	lsls r3, r1, #0x10
	lsrs r0, r3, #0x15
	mov r1, ip
	ands r0, r1
	subs r0, r0, r2
	mov r1, r9
	muls r1, r0, r1
	adds r0, r1, #0
	cmp r0, #0
	bge .L080BF65A
	adds r0, #0x3f
.L080BF65A:
	asrs r0, r0, #6
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	lsrs r2, r4, #0x1a
	mov r4, ip
	ands r2, r4
	lsrs r0, r3, #0x1a
	ands r0, r4
	subs r0, r0, r2
	mov r3, r9
	muls r3, r0, r3
	adds r0, r3, #0
	cmp r0, #0
	bge .L080BF67A
	adds r0, #0x3f
.L080BF67A:
	asrs r0, r0, #6
	adds r0, r2, r0
	lsls r0, r0, #0x10
	ldr r2, [r5, #0x40]
	adds r2, r6, r2
	lsrs r0, r0, #6
	lsls r1, r1, #5
	adds r0, r0, r1
	add r0, r8
	strh r0, [r2]
	adds r7, #1
	mov r4, sl
	ldrb r4, [r4]
	cmp r7, r4
	blt .L080BF60E
	b .L080BF6AE
.L080BF69A:
	ldr r0, [r5, #0x3c]
	ldr r1, [r5, #0x40]
	adds r2, r5, #0
	adds r2, #0x34
	ldrb r2, [r2]
	bl CpuSet
	adds r0, r5, #0
	bl Proc_Break
.L080BF6AE:
	bl EnablePalSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BF5DC

	THUMB_FUNC_START StartGmPalFade
StartGmPalFade: @ 0x080BF6C0
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, [r4, #0xc]
	cmp r0, #0
	ble .L080BF710
	cmp r2, #0
	beq .L080BF6E0
	ldr r0, .L080BF6DC  @ gUnknown_08A3E55C
	adds r1, r2, #0
	bl SpawnProcLocking
	b .L080BF6E8
	.align 2, 0
.L080BF6DC: .4byte gUnknown_08A3E55C
.L080BF6E0:
	ldr r0, .L080BF70C  @ gUnknown_08A3E55C
	movs r1, #3
	bl SpawnProc
.L080BF6E8:
	adds r2, r0, #0
	ldr r0, [r4, #0xc]
	str r0, [r2, #0x2c]
	ldrb r1, [r4, #8]
	adds r0, r2, #0
	adds r0, #0x34
	strb r1, [r0]
	ldrb r0, [r4, #9]
	adds r1, r2, #0
	adds r1, #0x35
	strb r0, [r1]
	ldr r0, [r4]
	str r0, [r2, #0x38]
	ldr r0, [r4, #4]
	str r0, [r2, #0x3c]
	adds r0, r2, #0
	b .L080BF726
	.align 2, 0
.L080BF70C: .4byte gUnknown_08A3E55C
.L080BF710:
	ldr r0, [r4, #4]
	ldrb r1, [r4, #9]
	lsls r1, r1, #1
	ldr r2, .L080BF72C  @ gPal
	adds r1, r1, r2
	ldrb r2, [r4, #8]
	bl CpuSet
	bl EnablePalSync
	movs r0, #0
.L080BF726:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080BF72C: .4byte gPal

	THUMB_FUNC_END StartGmPalFade

	THUMB_FUNC_START GmPalFadeActive
GmPalFadeActive: @ 0x080BF730
	push {lr}
	ldr r0, .L080BF744  @ gUnknown_08A3E55C
	bl FindProc
	cmp r0, #0
	beq .L080BF73E
	movs r0, #1
.L080BF73E:
	pop {r1}
	bx r1
	.align 2, 0
.L080BF744: .4byte gUnknown_08A3E55C

	THUMB_FUNC_END GmPalFadeActive

	THUMB_FUNC_START EndGmPalFade
EndGmPalFade: @ 0x080BF748
	push {r4, lr}
	ldr r4, .L080BF780  @ gUnknown_08A3E55C
	adds r0, r4, #0
	bl FindProc
	adds r3, r0, #0
	cmp r3, #0
	beq .L080BF77A
	ldr r0, [r3, #0x3c]
	adds r1, r3, #0
	adds r1, #0x35
	ldrb r1, [r1]
	lsls r1, r1, #1
	ldr r2, .L080BF784  @ gPal
	adds r1, r1, r2
	adds r2, r3, #0
	adds r2, #0x34
	ldrb r2, [r2]
	bl CpuSet
	bl EnablePalSync
	adds r0, r4, #0
	bl EndEachProc
.L080BF77A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF780: .4byte gUnknown_08A3E55C
.L080BF784: .4byte gPal

	THUMB_FUNC_END EndGmPalFade

	THUMB_FUNC_START StartGmPalFade_
StartGmPalFade_: @ 0x080BF788
	push {lr}
	sub sp, #0x10
	ldr r2, .L080BF7AC  @ gUnknown_08A95FE4
	str r2, [sp]
	ldr r2, .L080BF7B0  @ gUnknown_08A95F64
	str r2, [sp, #4]
	mov r3, sp
	movs r2, #0x90
	strb r2, [r3, #9]
	movs r2, #0x40
	strb r2, [r3, #8]
	str r1, [sp, #0xc]
	mov r1, sp
	bl StartGmPalFade
	add sp, #0x10
	pop {r1}
	bx r1
	.align 2, 0
.L080BF7AC: .4byte gUnknown_08A95FE4
.L080BF7B0: .4byte gUnknown_08A95F64

	THUMB_FUNC_END StartGmPalFade_

	THUMB_FUNC_START func_080BF7B4
func_080BF7B4: @ 0x080BF7B4
	ldr r3, .L080BF7D8  @ gDispIo
	ldr r1, [r3, #0x3c]
	ldr r2, [r3, #0x40]
	str r1, [r0]
	str r2, [r0, #4]
	adds r1, r3, #0
	adds r1, #0x44
	ldrb r1, [r1]
	strb r1, [r0, #8]
	adds r1, r3, #0
	adds r1, #0x45
	ldrb r1, [r1]
	strb r1, [r0, #9]
	adds r1, r3, #0
	adds r1, #0x46
	ldrb r1, [r1]
	strb r1, [r0, #0xa]
	bx lr
	.align 2, 0
.L080BF7D8: .4byte gDispIo

	THUMB_FUNC_END func_080BF7B4

	THUMB_FUNC_START func_080BF7DC
func_080BF7DC: @ 0x080BF7DC
	ldr r3, .L080BF800  @ gDispIo
	ldr r1, [r0]
	ldr r2, [r0, #4]
	str r1, [r3, #0x3c]
	str r2, [r3, #0x40]
	ldrb r2, [r0, #8]
	adds r1, r3, #0
	adds r1, #0x44
	strb r2, [r1]
	ldrb r1, [r0, #9]
	adds r2, r3, #0
	adds r2, #0x45
	strb r1, [r2]
	ldrb r1, [r0, #0xa]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080BF800: .4byte gDispIo

	THUMB_FUNC_END func_080BF7DC

	THUMB_FUNC_START func_080BF804
func_080BF804: @ 0x080BF804
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r5, .L080BF888  @ gUnknown_08A3D748
	adds r0, r5, #0
	bl FindProc
	ldr r3, [r0, #0x48]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r2, [r4]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r3, #0x34
	adds r3, r3, r0
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	lsls r1, r2
	ldr r0, [r3]
	bics r0, r1
	str r0, [r3]
	bl EnablePalSync
	ldr r3, .L080BF88C  @ gGmData
	ldrb r1, [r4]
	lsls r1, r1, #2
	adds r1, r1, r3
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1]
	ldrb r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r3
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BF876
	adds r0, r5, #0
	bl FindProc
	ldr r0, [r0, #0x48]
	ldrb r1, [r4]
	adds r0, #0x33
	strb r1, [r0]
	adds r0, r5, #0
	bl FindProc
	ldr r1, [r0, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
.L080BF876:
	bl func_080C13D8
	adds r0, r6, #0
	adds r0, #0x30
	bl func_080BF7DC
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BF888: .4byte gUnknown_08A3D748
.L080BF88C: .4byte gGmData

	THUMB_FUNC_END func_080BF804

	THUMB_FUNC_START func_080BF890
func_080BF890: @ 0x080BF890
	push {r4, lr}
	sub sp, #4
	adds r0, #0x30
	bl func_080BF7B4
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BF890

	THUMB_FUNC_START func_080BF8CC
func_080BF8CC: @ 0x080BF8CC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r4, .L080BF95C  @ gGmData
	adds r6, r5, #0
	adds r6, #0x29
	ldrb r1, [r6]
	lsls r1, r1, #2
	adds r1, r1, r4
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1]
	ldr r7, .L080BF960  @ gUnknown_08A3D748
	adds r0, r7, #0
	bl FindProc
	ldr r3, [r0, #0x48]
	ldrb r2, [r6]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r3, #0x34
	adds r3, r3, r0
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	lsls r1, r2
	ldr r0, [r3]
	orrs r0, r1
	str r0, [r3]
	ldrb r0, [r6]
	lsls r0, r0, #2
	adds r0, r0, r4
	adds r0, #0x30
	ldrb r1, [r0]
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080BF93C
	adds r0, r7, #0
	bl FindProc
	ldr r0, [r0, #0x48]
	ldrb r1, [r6]
	adds r0, #0x33
	strb r1, [r0]
	adds r0, r7, #0
	bl FindProc
	ldr r1, [r0, #0x48]
	adds r1, #0x32
	ldrb r0, [r1]
	movs r2, #2
	orrs r0, r2
	strb r0, [r1]
.L080BF93C:
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r2, [r0]
	cmp r2, #0
	beq .L080BF964
	cmp r2, #1
	beq .L080BF96C
	adds r0, #1
	b .L080BF972
	.align 2, 0
.L080BF95C: .4byte gGmData
.L080BF960: .4byte gUnknown_08A3D748
.L080BF964:
	adds r0, r5, #0
	adds r0, #0x2b
	strb r4, [r0]
	b .L080BF972
.L080BF96C:
	adds r0, r5, #0
	adds r0, #0x2b
	strb r2, [r0]
.L080BF972:
	ldrb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x2c
	movs r2, #0
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BF8CC

	THUMB_FUNC_START func_080BF988
func_080BF988: @ 0x080BF988
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bgt .L080BFA10
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BF9AE
	cmp r0, #1
	beq .L080BF9B8
	adds r1, #1
	b .L080BF9C2
.L080BF9AE:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	b .L080BF9C0
.L080BF9B8:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #2
.L080BF9C0:
	strb r0, [r1]
.L080BF9C2:
	ldrb r0, [r1]
	cmp r0, #0xf
	bhi .L080BF9E6
	adds r1, r0, #0
	movs r2, #0x10
	subs r2, r2, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	b .L080BFA10
.L080BF9E6:
	ldr r0, .L080BFA18  @ gUnknown_08A3D748
	bl FindProc
	ldr r3, [r0, #0x48]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r2, [r0]
	lsrs r0, r2, #5
	lsls r0, r0, #2
	adds r3, #0x34
	adds r3, r3, r0
	movs r0, #0x1f
	ands r2, r0
	movs r1, #1
	lsls r1, r2
	ldr r0, [r3]
	bics r0, r1
	str r0, [r3]
	adds r0, r4, #0
	bl Proc_Break
.L080BFA10:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFA18: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BF988

	THUMB_FUNC_START func_080BFA1C
func_080BFA1C: @ 0x080BFA1C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, .L080BFA40  @ gGmData
	adds r0, #0x29
	ldrb r2, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	adds r0, #0x30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080BFA48
	lsls r0, r2, #5
	ldr r1, .L080BFA44  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #2]
	b .L080BFA50
	.align 2, 0
.L080BFA40: .4byte gGmData
.L080BFA44: .4byte gUnknown_082060B0
.L080BFA48:
	lsls r0, r2, #5
	ldr r1, .L080BFA6C  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrb r0, [r0, #3]
.L080BFA50:
	lsls r0, r0, #4
	ldr r1, .L080BFA70  @ gUnknown_08205FA0
	adds r6, r0, r1
	movs r0, #0xa
	ldrsb r0, [r6, r0]
	cmp r0, #0x10
	beq .L080BFA74
	cmp r0, #0x10
	ble .L080BFA66
	cmp r0, #0x20
	beq .L080BFA78
.L080BFA66:
	movs r1, #0
	b .L080BFA7A
	.align 2, 0
.L080BFA6C: .4byte gUnknown_082060B0
.L080BFA70: .4byte gUnknown_08205FA0
.L080BFA74:
	movs r1, #1
	b .L080BFA7A
.L080BFA78:
	movs r1, #2
.L080BFA7A:
	adds r0, r5, #0
	bl func_080C1370
	adds r3, r0, #0
	adds r3, #0x29
	ldrb r1, [r3]
	movs r2, #1
	orrs r1, r2
	strb r1, [r3]
	adds r5, #0x29
	ldrb r3, [r5]
	lsls r3, r3, #5
	ldr r4, .L080BFAE0  @ gUnknown_082060B0
	adds r3, r3, r4
	movs r1, #0xa
	ldrsb r1, [r6, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	movs r2, #8
	ldrsb r2, [r6, r2]
	subs r1, r1, r2
	ldrh r3, [r3, #0x18]
	adds r1, r1, r3
	strh r1, [r0, #0x2c]
	ldrb r3, [r5]
	lsls r3, r3, #5
	adds r3, r3, r4
	movs r1, #0xb
	ldrsb r1, [r6, r1]
	lsrs r2, r1, #0x1f
	adds r1, r1, r2
	asrs r1, r1, #1
	movs r2, #9
	ldrsb r2, [r6, r2]
	subs r1, r1, r2
	ldrh r3, [r3, #0x1a]
	adds r1, r1, r3
	strh r1, [r0, #0x2e]
	ldr r0, .L080BFAE4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080BFADA
	ldr r0, .L080BFAE8  @ 0x00000311
	bl m4aSongNumStart
.L080BFADA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFAE0: .4byte gUnknown_082060B0
.L080BFAE4: .4byte gPlaySt
.L080BFAE8: .4byte 0x00000311

	THUMB_FUNC_END func_080BFA1C

	THUMB_FUNC_START StartGmBaseEntry
StartGmBaseEntry: @ 0x080BFAEC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq .L080BFB04
	ldr r0, .L080BFB00  @ gUnknown_08A3E594
	bl SpawnProcLocking
	b .L080BFB0C
	.align 2, 0
.L080BFB00: .4byte gUnknown_08A3E594
.L080BFB04:
	ldr r0, .L080BFB20  @ gUnknown_08A3E594
	movs r1, #3
	bl SpawnProc
.L080BFB0C:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x29
	strb r4, [r2]
	adds r1, #0x2a
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080BFB20: .4byte gUnknown_08A3E594

	THUMB_FUNC_END StartGmBaseEntry

	THUMB_FUNC_START EndGmBaseEntry
EndGmBaseEntry: @ 0x080BFB24
	push {lr}
	ldr r0, .L080BFB30  @ gUnknown_08A3E594
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080BFB30: .4byte gUnknown_08A3E594

	THUMB_FUNC_END EndGmBaseEntry

	THUMB_FUNC_START GmBaseEntryExists
GmBaseEntryExists: @ 0x080BFB34
	push {lr}
	ldr r0, .L080BFB48  @ gUnknown_08A3E594
	bl FindProc
	cmp r0, #0
	beq .L080BFB42
	movs r0, #1
.L080BFB42:
	pop {r1}
	bx r1
	.align 2, 0
.L080BFB48: .4byte gUnknown_08A3E594

	THUMB_FUNC_END GmBaseEntryExists

	THUMB_FUNC_START func_080BFB4C
func_080BFB4C: @ 0x080BFB4C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, .L080BFB88  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	movs r2, #0
	bl func_080BE080
	ldr r0, .L080BFB8C  @ gGmData
	ldrb r1, [r5]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
	bl func_080C13D8
	adds r4, #0x30
	adds r0, r4, #0
	bl func_080BF7DC
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFB88: .4byte gUnknown_08A3D748
.L080BFB8C: .4byte gGmData

	THUMB_FUNC_END func_080BFB4C

	THUMB_FUNC_START func_080BFB90
func_080BFB90: @ 0x080BFB90
	push {r4, lr}
	sub sp, #4
	adds r0, #0x30
	bl func_080BF7B4
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BFB90

	THUMB_FUNC_START func_080BFBCC
func_080BFBCC: @ 0x080BFBCC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, .L080BFC14  @ gGmData
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
	ldr r0, .L080BFC18  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrb r1, [r5]
	movs r2, #1
	bl func_080BE080
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r2, [r0]
	cmp r2, #0
	beq .L080BFC1C
	cmp r2, #1
	beq .L080BFC28
	adds r0, #1
	b .L080BFC2E
	.align 2, 0
.L080BFC14: .4byte gGmData
.L080BFC18: .4byte gUnknown_08A3D748
.L080BFC1C:
	adds r1, r4, #0
	adds r1, #0x2b
	movs r0, #2
	strb r0, [r1]
	adds r0, r1, #0
	b .L080BFC2E
.L080BFC28:
	adds r0, r4, #0
	adds r0, #0x2b
	strb r2, [r0]
.L080BFC2E:
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x2c
	movs r2, #0
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080BFBCC

	THUMB_FUNC_START func_080BFC44
func_080BFC44: @ 0x080BFC44
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bgt .L080BFCBC
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080BFC6A
	cmp r0, #1
	beq .L080BFC74
	adds r1, #1
	b .L080BFC7E
.L080BFC6A:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #1
	b .L080BFC7C
.L080BFC74:
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r0, [r1]
	adds r0, #2
.L080BFC7C:
	strb r0, [r1]
.L080BFC7E:
	ldrb r0, [r1]
	cmp r0, #0xf
	bhi .L080BFCA2
	adds r1, r0, #0
	movs r2, #0x10
	subs r2, r2, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	b .L080BFCBC
.L080BFCA2:
	ldr r0, .L080BFCC4  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r1, [r1]
	movs r2, #0
	bl func_080BE080
	adds r0, r4, #0
	bl Proc_Break
.L080BFCBC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFCC4: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080BFC44

	THUMB_FUNC_START func_080BFCC8
func_080BFCC8: @ 0x080BFCC8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq .L080BFCE0
	ldr r0, .L080BFCDC  @ gUnknown_08A3E5E4
	bl SpawnProcLocking
	b .L080BFCE8
	.align 2, 0
.L080BFCDC: .4byte gUnknown_08A3E5E4
.L080BFCE0:
	ldr r0, .L080BFCFC  @ gUnknown_08A3E5E4
	movs r1, #3
	bl SpawnProc
.L080BFCE8:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x29
	strb r4, [r2]
	adds r1, #0x2a
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080BFCFC: .4byte gUnknown_08A3E5E4

	THUMB_FUNC_END func_080BFCC8

	THUMB_FUNC_START func_080BFD00
func_080BFD00: @ 0x080BFD00
	push {lr}
	ldr r0, .L080BFD0C  @ gUnknown_08A3E5E4
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080BFD0C: .4byte gUnknown_08A3E5E4

	THUMB_FUNC_END func_080BFD00

	THUMB_FUNC_START func_080BFD10
func_080BFD10: @ 0x080BFD10
	push {lr}
	ldr r0, .L080BFD24  @ gUnknown_08A3E5E4
	bl FindProc
	cmp r0, #0
	beq .L080BFD1E
	movs r0, #1
.L080BFD1E:
	pop {r1}
	bx r1
	.align 2, 0
.L080BFD24: .4byte gUnknown_08A3E5E4

	THUMB_FUNC_END func_080BFD10

	THUMB_FUNC_START func_080BFD28
func_080BFD28: @ 0x080BFD28
	push {r4, lr}
	ldr r0, .L080BFD60  @ gUnknown_08A9E5BC
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r0, .L080BFD64  @ gUnknown_08A9E544
	ldr r1, .L080BFD68  @ 0x06004C00
	bl Decompress
	ldr r0, .L080BFD6C  @ gUnknown_08A9E5DC
	ldr r4, .L080BFD70  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080BFD74  @ gBg0Tm
	ldr r2, .L080BFD78  @ 0x00002260
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFD60: .4byte gUnknown_08A9E5BC
.L080BFD64: .4byte gUnknown_08A9E544
.L080BFD68: .4byte 0x06004C00
.L080BFD6C: .4byte gUnknown_08A9E5DC
.L080BFD70: .4byte gBuf
.L080BFD74: .4byte gBg0Tm
.L080BFD78: .4byte 0x00002260

	THUMB_FUNC_END func_080BFD28

	THUMB_FUNC_START nullsub_48
nullsub_48: @ 0x080BFD7C
	bx lr

	THUMB_FUNC_END nullsub_48

	THUMB_FUNC_START func_080BFD80
func_080BFD80: @ 0x080BFD80
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x29
	ldrb r1, [r3]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x2b
	movs r1, #0
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080BFD80

	THUMB_FUNC_START func_080BFDA0
func_080BFDA0: @ 0x080BFDA0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r0, #0
	movs r0, #0
	movs r1, #1
	bl func_080C1DA0
	str r0, [sp]
	movs r0, #1
	movs r1, #1
	bl func_080C1DA0
	str r0, [sp, #4]
	movs r3, #0
	movs r7, #0x40
	ldr r0, .L080BFEF4  @ 0x000001FF
	adds r5, r0, #0
	movs r4, #0
	ldr r2, [sp, #4]
	ldr r1, [sp]
.L080BFDD0:
	subs r0, r7, r3
	ands r0, r5
	strh r0, [r1]
	strh r4, [r2]
	adds r2, #2
	adds r1, #2
	adds r3, #1
	cmp r3, #0x9f
	ble .L080BFDD0
	movs r3, #0
	movs r1, #0x2a
	adds r1, r1, r6
	mov r8, r1
	adds r6, #0x2b
	str r6, [sp, #0xc]
	ldrb r2, [r1]
	cmp r3, r2
	bge .L080BFE60
	ldr r0, [sp, #4]
	mov sl, r0
	ldr r1, [sp]
	mov r9, r1
.L080BFDFC:
	mov r2, r8
	str r2, [sp, #8]
	ldrb r1, [r2]
	movs r0, #0x10
	subs r0, r0, r1
	mov r1, r9
	strh r0, [r1]
	ldrb r5, [r2]
	subs r4, r5, r3
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #1
	negs r0, r0
	adds r1, r5, #0
	str r3, [sp, #0x18]
	bl __divsi3
	adds r6, r0, #0
	adds r6, #0xd
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #1
	negs r0, r0
	adds r1, r5, #0
	bl __divsi3
	adds r7, r0, #0
	adds r7, #0x11
	lsls r0, r4, #3
	subs r4, r4, r0
	adds r0, r4, #0
	adds r1, r5, #0
	bl __divsi3
	adds r0, #0x17
	lsls r0, r0, #0xa
	lsls r1, r7, #5
	adds r0, r0, r1
	adds r0, r0, r6
	mov r2, sl
	strh r0, [r2]
	movs r0, #2
	add sl, r0
	add r9, r0
	ldr r3, [sp, #0x18]
	adds r3, #1
	ldr r1, [sp, #8]
	ldrb r1, [r1]
	cmp r3, r1
	blt .L080BFDFC
.L080BFE60:
	movs r3, #0
	ldr r2, [sp, #0xc]
	mov r8, r2
	ldrb r0, [r2]
	cmp r3, r0
	bge .L080BFEE0
	movs r1, #0
	str r1, [sp, #0x10]
	movs r2, #0
	str r2, [sp, #0x14]
	mov sl, r2
.L080BFE76:
	mov r9, r8
	mov r1, r8
	ldrb r0, [r1]
	subs r1, r0, r3
	movs r4, #0xa0
	subs r4, r4, r1
	lsls r4, r4, #1
	ldr r2, [sp]
	adds r1, r4, r2
	adds r0, #0xc8
	strh r0, [r1]
	mov r0, r8
	ldrb r5, [r0]
	mov r0, sl
	adds r1, r5, #0
	str r3, [sp, #0x18]
	bl __divsi3
	adds r6, r0, #0
	adds r6, #0xd
	ldr r0, [sp, #0x14]
	adds r1, r5, #0
	bl __divsi3
	adds r7, r0, #0
	adds r7, #0x11
	ldr r0, [sp, #0x10]
	adds r1, r5, #0
	bl __divsi3
	adds r0, #0x17
	ldr r1, [sp, #4]
	adds r4, r4, r1
	lsls r0, r0, #0xa
	lsls r1, r7, #5
	adds r0, r0, r1
	adds r0, r0, r6
	strh r0, [r4]
	ldr r2, [sp, #0x10]
	subs r2, #7
	str r2, [sp, #0x10]
	ldr r0, [sp, #0x14]
	subs r0, #0xa
	str r0, [sp, #0x14]
	movs r1, #6
	negs r1, r1
	add sl, r1
	ldr r3, [sp, #0x18]
	adds r3, #1
	mov r2, r9
	ldrb r2, [r2]
	cmp r3, r2
	blt .L080BFE76
.L080BFEE0:
	bl func_080C1DC8
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFEF4: .4byte 0x000001FF

	THUMB_FUNC_END func_080BFDA0

	THUMB_FUNC_START func_080BFEF8
func_080BFEF8: @ 0x080BFEF8
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	bl func_080BFD28
	movs r5, #0
	str r5, [r4, #0x38]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	ldrb r1, [r1]
	subs r0, r0, r1
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	ldrb r1, [r3]
	subs r0, r0, r1
	str r0, [r4, #0x40]
	movs r0, #0
	movs r1, #1
	bl func_080C1DA0
	adds r2, r0, #0
	add r1, sp, #4
	movs r0, #0x10
	strh r0, [r1]
	ldr r4, .L080BFFC0  @ 0x010000A0
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, .L080BFFC4  @ 0x04000012
	movs r0, #0
	bl func_080C1DD8
	movs r0, #0
	bl func_080C1DE8
	movs r0, #1
	movs r1, #1
	bl func_080C1DA0
	adds r2, r0, #0
	mov r0, sp
	adds r0, #6
	strh r5, [r0]
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, .L080BFFC8  @ 0x05000054
	movs r0, #1
	bl func_080C1DD8
	movs r0, #1
	bl func_080C1DE8
	ldr r2, .L080BFFCC  @ gUnknown_0201BE30
	ldrb r0, [r2]
	movs r1, #4
	orrs r0, r1
	strb r0, [r2]
	str r5, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080BFFC0: .4byte 0x010000A0
.L080BFFC4: .4byte 0x04000012
.L080BFFC8: .4byte 0x05000054
.L080BFFCC: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080BFEF8

	THUMB_FUNC_START func_080BFFD0
func_080BFFD0: @ 0x080BFFD0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	bl func_080BFD28
	movs r5, #0
	str r5, [r4, #0x38]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x2a
	strb r0, [r2]
	adds r3, r4, #0
	adds r3, #0x2e
	ldrb r0, [r3]
	adds r2, #1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	ldrb r1, [r1]
	subs r0, r0, r1
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	ldrb r1, [r3]
	subs r0, r0, r1
	str r0, [r4, #0x40]
	movs r0, #0
	movs r1, #1
	bl func_080C1DA0
	adds r2, r0, #0
	mov r1, sp
	movs r0, #0x10
	strh r0, [r1]
	ldr r4, .L080C0070  @ 0x010000A0
	mov r0, sp
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, .L080C0074  @ 0x04000012
	movs r0, #0
	bl func_080C1DD8
	movs r0, #0
	bl func_080C1DE8
	movs r0, #1
	movs r1, #1
	bl func_080C1DA0
	adds r2, r0, #0
	mov r0, sp
	adds r0, #2
	strh r5, [r0]
	adds r1, r2, #0
	adds r2, r4, #0
	bl CpuSet
	ldr r1, .L080C0078  @ 0x05000054
	movs r0, #1
	bl func_080C1DD8
	movs r0, #1
	bl func_080C1DE8
	ldr r2, .L080C007C  @ gUnknown_0201BE30
	ldrb r0, [r2]
	movs r1, #4
	orrs r0, r1
	strb r0, [r2]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0070: .4byte 0x010000A0
.L080C0074: .4byte 0x04000012
.L080C0078: .4byte 0x05000054
.L080C007C: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080BFFD0

	THUMB_FUNC_START func_080C0080
func_080C0080: @ 0x080C0080
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r0, r6
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x34]
	cmp r0, r1
	bge .L080C00F2
	movs r3, #0x30
	ldrsh r2, [r4, r3]
	bl Spline_800B7E0
	adds r5, r0, #0
	ldr r0, [r4, #0x3c]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	ldr r0, [r4, #0x40]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2b
	strb r1, [r0]
	adds r0, r5, #0
	cmp r5, #0
	bge .L080C00DA
	adds r0, #0xff
.L080C00DA:
	asrs r0, r0, #8
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C0134
.L080C00F2:
	movs r0, #0
	movs r1, #0
	bl func_080C1DD8
	adds r5, r6, #0
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r1, #1
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
.L080C0134:
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080BFDA0
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C0080

	THUMB_FUNC_START func_080C0144
func_080C0144: @ 0x080C0144
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	movs r6, #0x80
	lsls r6, r6, #5
	adds r0, r0, r6
	str r0, [r4, #0x38]
	ldr r1, [r4, #0x34]
	cmp r0, r1
	bge .L080C0198
	movs r3, #0x30
	ldrsh r2, [r4, r3]
	bl Spline_800B7E0
	adds r5, r0, #0
	ldr r0, [r4, #0x3c]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	ldr r0, [r4, #0x40]
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x2b
	strb r1, [r0]
	b .L080C01CE
.L080C0198:
	movs r0, #0
	movs r1, #0
	bl func_080C1DD8
	adds r5, r6, #0
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r1, #1
	strb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
.L080C01CE:
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080BFDA0
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C0144

	THUMB_FUNC_START StartGMapMuEntry
StartGMapMuEntry: @ 0x080C01DC
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq .L080C01F0
	ldr r0, .L080C01EC  @ gUnknown_08A3E624
	bl SpawnProcLocking
	b .L080C01F8
	.align 2, 0
.L080C01EC: .4byte gUnknown_08A3E624
.L080C01F0:
	ldr r0, .L080C01FC  @ gUnknown_08A3E624
	movs r1, #3
	bl SpawnProc
.L080C01F8:
	pop {r1}
	bx r1
	.align 2, 0
.L080C01FC: .4byte gUnknown_08A3E624

	THUMB_FUNC_END StartGMapMuEntry

	THUMB_FUNC_START func_080C0200
func_080C0200: @ 0x080C0200
	push {lr}
	ldr r0, .L080C020C  @ gUnknown_08A3E624
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C020C: .4byte gUnknown_08A3E624

	THUMB_FUNC_END func_080C0200

	THUMB_FUNC_START func_080C0210
func_080C0210: @ 0x080C0210
	push {lr}
	ldr r0, .L080C0224  @ gUnknown_08A3E624
	bl FindProc
	cmp r0, #0
	beq .L080C021E
	movs r0, #1
.L080C021E:
	pop {r1}
	bx r1
	.align 2, 0
.L080C0224: .4byte gUnknown_08A3E624

	THUMB_FUNC_END func_080C0210

	THUMB_FUNC_START func_080C0228
func_080C0228: @ 0x080C0228
	push {lr}
	ldr r0, .L080C023C  @ gUnknown_08A3E624
	bl FindProc
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
	pop {r1}
	bx r1
	.align 2, 0
.L080C023C: .4byte gUnknown_08A3E624

	THUMB_FUNC_END func_080C0228

	THUMB_FUNC_START GmMuEntryStartShow
GmMuEntryStartShow: @ 0x080C0240
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, .L080C0298  @ gUnknown_08A3E624
	bl FindProc
	adds r2, r0, #0
	movs r0, #0x29
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	movs r3, #1
	ands r3, r0
	cmp r3, #0
	bne .L080C029C
	adds r0, r2, #0
	adds r0, #0x2c
	strb r3, [r0]
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2e
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x38
	strb r0, [r1]
	strh r4, [r2, #0x30]
	lsls r0, r5, #0xc
	str r0, [r2, #0x34]
	mov r1, ip
	ldrb r0, [r1]
	movs r1, #1
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	adds r0, r2, #0
	movs r1, #1
	bl Proc_Goto
	movs r0, #0
	b .L080C029E
	.align 2, 0
.L080C0298: .4byte gUnknown_08A3E624
.L080C029C:
	movs r0, #1
.L080C029E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END GmMuEntryStartShow

	THUMB_FUNC_START GmMuEntryStartHide
GmMuEntryStartHide: @ 0x080C02A4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, .L080C02FC  @ gUnknown_08A3E624
	bl FindProc
	adds r2, r0, #0
	movs r0, #0x29
	adds r0, r0, r2
	mov ip, r0
	ldrb r0, [r0]
	movs r3, #1
	ands r3, r0
	cmp r3, #0
	bne .L080C0300
	adds r1, r2, #0
	adds r1, #0x2c
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2d
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x38
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2f
	strb r3, [r0]
	strh r4, [r2, #0x30]
	lsls r0, r5, #0xc
	str r0, [r2, #0x34]
	mov r1, ip
	ldrb r0, [r1]
	movs r1, #1
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	adds r0, r2, #0
	movs r1, #2
	bl Proc_Goto
	movs r0, #0
	b .L080C0302
	.align 2, 0
.L080C02FC: .4byte gUnknown_08A3E624
.L080C0300:
	movs r0, #1
.L080C0302:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END GmMuEntryStartHide

	THUMB_FUNC_START func_080C0308
func_080C0308: @ 0x080C0308
	push {r4, lr}
	sub sp, #4
	ldr r2, .L080C0354  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfb
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0354: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080C0308

	THUMB_FUNC_START func_080C0358
func_080C0358: @ 0x080C0358
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	movs r0, #0
	movs r1, #1
	bl func_080C1DA0
	mov r9, r0
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	movs r2, #0
	bl Spline_800B84C
	movs r6, #0x80
	lsls r6, r6, #5
	lsls r5, r0, #7
	negs r5, r5
	adds r0, r6, #0
	adds r1, r5, #0
	bl DivArm
	adds r4, r0, #0
	adds r4, #0x80
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r0, r6, #0
	adds r1, r5, #0
	bl DivArm
	adds r0, #0x50
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	movs r7, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r5, r9
.L080C03AA:
	cmp r7, r4
	blt .L080C03B2
	movs r0, #0
	b .L080C03D8
.L080C03B2:
	mov r1, r8
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	cmp r7, r0
	blt .L080C03D6
	subs r0, r7, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x30
	movs r2, #0
	bl Spline_800B84C
	subs r0, r6, r0
	lsls r1, r0, #4
	adds r0, r6, #0
	bl DivArm
	b .L080C03D8
.L080C03D6:
	movs r0, #0x10
.L080C03D8:
	strh r0, [r5]
	adds r5, #2
	adds r7, #1
	cmp r7, #0x4f
	ble .L080C03AA
	mov r1, r9
	movs r0, #0x9f
	lsls r0, r0, #1
	adds r2, r1, r0
	movs r7, #0x4f
.L080C03EC:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	subs r2, #2
	subs r7, #1
	cmp r7, #0
	bge .L080C03EC
	bl func_080C1DC8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C0358

	THUMB_FUNC_START func_080C040C
func_080C040C: @ 0x080C040C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #2
	bne .L080C0426
	movs r0, #1
	movs r1, #0
	bl NewFadeIn
	movs r0, #0x64
	b .L080C0430
.L080C0426:
	movs r0, #2
	movs r1, #0
	bl NewFadeIn
	movs r0, #0x32
.L080C0430:
	strh r0, [r4, #0x2c]
	movs r5, #0
	strh r5, [r4, #0x2a]
	add r1, sp, #4
	movs r0, #0x10
	strh r0, [r1]
	movs r0, #0
	movs r1, #0
	bl func_080C1DA0
	adds r1, r0, #0
	add r0, sp, #4
	ldr r2, .L080C04BC  @ 0x010000A0
	bl CpuSet
	ldr r1, .L080C04C0  @ 0x04000054
	movs r0, #0
	bl func_080C1DD8
	movs r0, #0
	bl func_080C1DE8
	movs r0, #3
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0x10
	bl SetBlendConfig
	ldr r2, .L080C04C4  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	ldr r1, .L080C04C8  @ gUnknown_0201BE30
	ldrb r0, [r1]
	orrs r0, r4
	strb r0, [r1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C04BC: .4byte 0x010000A0
.L080C04C0: .4byte 0x04000054
.L080C04C4: .4byte gDispIo
.L080C04C8: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080C040C

	THUMB_FUNC_START func_080C04CC
func_080C04CC: @ 0x080C04CC
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	cmp r0, r1
	bge .L080C04EA
	adds r0, r2, #0
	bl func_080C0358
	b .L080C04F0
.L080C04EA:
	adds r0, r2, #0
	bl Proc_Break
.L080C04F0:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C04CC

	THUMB_FUNC_START func_080C04F4
func_080C04F4: @ 0x080C04F4
	push {r4, lr}
	adds r4, r0, #0
	cmp r1, #0
	beq .L080C0508
	ldr r0, .L080C0504  @ gUnknown_08A3E6AC
	bl SpawnProcLocking
	b .L080C0510
	.align 2, 0
.L080C0504: .4byte gUnknown_08A3E6AC
.L080C0508:
	ldr r0, .L080C051C  @ gUnknown_08A3E6AC
	movs r1, #3
	bl SpawnProc
.L080C0510:
	adds r1, r0, #0
	adds r1, #0x29
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080C051C: .4byte gUnknown_08A3E6AC

	THUMB_FUNC_END func_080C04F4

	THUMB_FUNC_START func_080C0520
func_080C0520: @ 0x080C0520
	push {lr}
	ldr r0, .L080C052C  @ gUnknown_08A3E6AC
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C052C: .4byte gUnknown_08A3E6AC

	THUMB_FUNC_END func_080C0520

	THUMB_FUNC_START func_080C0530
func_080C0530: @ 0x080C0530
	push {lr}
	ldr r0, .L080C0544  @ gUnknown_08A3E6AC
	bl FindProc
	cmp r0, #0
	beq .L080C053E
	movs r0, #1
.L080C053E:
	pop {r1}
	bx r1
	.align 2, 0
.L080C0544: .4byte gUnknown_08A3E6AC

	THUMB_FUNC_END func_080C0530

	THUMB_FUNC_START nullsub_47
nullsub_47: @ 0x080C0548
	bx lr

	THUMB_FUNC_END nullsub_47

	THUMB_FUNC_START func_080C054C
func_080C054C: @ 0x080C054C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	adds r5, r1, #0
	mov r6, r8
	adds r6, #0x32
	mov r4, r8
	adds r4, #0x30
.L080C0560:
	ldr r0, .L080C05A8  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r1, r8
	adds r1, #0x2e
	adds r1, r1, r7
	ldrb r1, [r1]
	adds r2, r4, #0
	adds r3, r6, #0
	bl func_080BE3A0
	ldrh r0, [r5]
	strh r0, [r4, #0x10]
	ldrh r1, [r5, #2]
	strh r1, [r4, #0x12]
	ldrh r2, [r4]
	adds r0, r0, r2
	strh r0, [r4, #8]
	ldrh r0, [r4, #2]
	adds r1, r1, r0
	strh r1, [r4, #0xa]
	adds r5, #4
	adds r6, #4
	adds r4, #4
	adds r7, #1
	cmp r7, #1
	ble .L080C0560
	movs r0, #0
	mov r1, r8
	strh r0, [r1, #0x2a]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C05A8: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C054C

	THUMB_FUNC_START func_080C05AC
func_080C05AC: @ 0x080C05AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L080C05C0  @ gUnknown_082068F4
	bl func_080C054C
	movs r0, #0x10
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C05C0: .4byte gUnknown_082068F4

	THUMB_FUNC_END func_080C05AC

	THUMB_FUNC_START func_080C05C4
func_080C05C4: @ 0x080C05C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L080C05EC  @ gUnknown_082068FC
	bl func_080C054C
	movs r0, #5
	strh r0, [r4, #0x2c]
	ldr r0, .L080C05F0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C05E4
	ldr r0, .L080C05F4  @ 0x00000313
	bl m4aSongNumStart
.L080C05E4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C05EC: .4byte gUnknown_082068FC
.L080C05F0: .4byte gPlaySt
.L080C05F4: .4byte 0x00000313

	THUMB_FUNC_END func_080C05C4

	THUMB_FUNC_START func_080C05F8
func_080C05F8: @ 0x080C05F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L080C060C  @ gUnknown_08206904
	bl func_080C054C
	movs r0, #5
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C060C: .4byte gUnknown_08206904

	THUMB_FUNC_END func_080C05F8

	THUMB_FUNC_START func_080C0610
func_080C0610: @ 0x080C0610
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r5, #0x2c]
	cmp r0, r1
	bcs .L080C06A4
	ldrh r0, [r5, #0x2a]
	ldrh r1, [r5, #0x2c]
	movs r2, #1
	bl Spline_800B7E0
	mov r8, r0
	movs r7, #0
	movs r2, #0x2e
	adds r2, r2, r5
	mov r9, r2
	movs r3, #0x80
	lsls r3, r3, #5
	mov sl, r3
	adds r6, r5, #0
	adds r6, #0x30
.L080C064A:
	movs r1, #0x10
	ldrsh r0, [r6, r1]
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	bl DivArm
	ldrh r5, [r6]
	adds r5, r5, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	movs r2, #0x12
	ldrsh r0, [r6, r2]
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	bl DivArm
	ldrh r4, [r6, #2]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, .L080C06A0  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r3, r9
	adds r1, r3, r7
	ldrb r1, [r1]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r2, r5, #0
	adds r3, r4, #0
	bl GmMu_SetPosition
	adds r6, #4
	adds r7, #1
	cmp r7, #1
	ble .L080C064A
	b .L080C06DC
	.align 2, 0
.L080C06A0: .4byte gUnknown_08A3D748
.L080C06A4:
	movs r7, #0
	movs r6, #0x2e
	adds r6, r6, r5
	mov r9, r6
	adds r4, r5, #0
	adds r4, #0x38
.L080C06B0:
	ldr r0, .L080C06EC  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r2, r9
	adds r1, r2, r7
	ldrb r1, [r1]
	movs r3, #0
	ldrsh r2, [r4, r3]
	movs r6, #2
	ldrsh r3, [r4, r6]
	bl GmMu_SetPosition
	adds r4, #4
	adds r7, #1
	cmp r7, #1
	ble .L080C06B0
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
.L080C06DC:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C06EC: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C0610

	THUMB_FUNC_START func_080C06F0
func_080C06F0: @ 0x080C06F0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r0, .L080C07A0  @ gUnknown_08AA1970
	ldr r1, .L080C07A4  @ 0x06013000
	bl Decompress
	movs r5, #0
	movs r4, #0
	mov r6, sp
	adds r6, #0xa
.L080C0706:
	ldr r0, .L080C07A8  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r7, #0
	adds r1, #0x2e
	adds r1, r1, r4
	ldrb r1, [r1]
	add r2, sp, #8
	adds r3, r6, #0
	bl func_080BE3A0
	add r1, sp, #8
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	ldrh r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r4, #1
	cmp r4, #1
	ble .L080C0706
	lsls r0, r5, #0x10
	asrs r1, r0, #0x10
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	add r2, sp, #8
	ldr r3, .L080C07AC  @ gGmData
	ldrh r0, [r3, #2]
	asrs r1, r1, #1
	subs r1, r1, r0
	strh r1, [r2]
	adds r0, r2, #0
	subs r1, #0x14
	strh r1, [r0]
	ldrh r0, [r6]
	subs r0, #0xc
	ldrh r1, [r3, #4]
	subs r0, r0, r1
	strh r0, [r6]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x9f
	bhi .L080C0784
	adds r0, r2, #0
	ldrh r0, [r0]
	cmp r0, #0xef
	bhi .L080C0784
	ldr r0, .L080C07B0  @ gUnknown_08AA1C70
	adds r1, r2, #0
	movs r2, #0
	ldrsh r1, [r1, r2]
	movs r3, #0
	ldrsh r2, [r6, r3]
	movs r3, #0xe6
	lsls r3, r3, #6
	movs r4, #0
	str r4, [sp]
	movs r4, #7
	str r4, [sp, #4]
	bl StartSpriteAnimProc
	str r0, [r7, #0x48]
.L080C0784:
	ldr r0, .L080C07B4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C0798
	movs r0, #0xc5
	lsls r0, r0, #2
	bl m4aSongNumStart
.L080C0798:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C07A0: .4byte gUnknown_08AA1970
.L080C07A4: .4byte 0x06013000
.L080C07A8: .4byte gUnknown_08A3D748
.L080C07AC: .4byte gGmData
.L080C07B0: .4byte gUnknown_08AA1C70
.L080C07B4: .4byte gPlaySt

	THUMB_FUNC_END func_080C06F0

	THUMB_FUNC_START func_080C07B8
func_080C07B8: @ 0x080C07B8
	push {r4, lr}
	adds r4, r0, #0
	bl SpriteAnimExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C07CC
	adds r0, r4, #0
	bl Proc_Break
.L080C07CC:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C07B8

	THUMB_FUNC_START func_080C07D4
func_080C07D4: @ 0x080C07D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq .L080C07EC
	ldr r0, .L080C07E8  @ gUnknown_08A3E6E4
	bl SpawnProcLocking
	b .L080C07F4
	.align 2, 0
.L080C07E8: .4byte gUnknown_08A3E6E4
.L080C07EC:
	ldr r0, .L080C0808  @ gUnknown_08A3E6E4
	movs r1, #3
	bl SpawnProc
.L080C07F4:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x2f
	strb r4, [r2]
	adds r1, #0x2e
	strb r5, [r1]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080C0808: .4byte gUnknown_08A3E6E4

	THUMB_FUNC_END func_080C07D4

	THUMB_FUNC_START func_080C080C
func_080C080C: @ 0x080C080C
	push {lr}
	ldr r0, .L080C0818  @ gUnknown_08A3E6E4
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C0818: .4byte gUnknown_08A3E6E4

	THUMB_FUNC_END func_080C080C

	THUMB_FUNC_START func_080C081C
func_080C081C: @ 0x080C081C
	push {lr}
	ldr r0, .L080C0830  @ gUnknown_08A3E6E4
	bl FindProc
	cmp r0, #0
	beq .L080C082A
	movs r0, #1
.L080C082A:
	pop {r1}
	bx r1
	.align 2, 0
.L080C0830: .4byte gUnknown_08A3E6E4

	THUMB_FUNC_END func_080C081C

	THUMB_FUNC_START func_080C0834
func_080C0834: @ 0x080C0834
	push {r4, lr}
	ldr r4, [sp, #8]
	subs r2, r2, r0
	subs r3, r3, r1
	adds r0, r2, #0
	muls r0, r2, r0
	adds r1, r3, #0
	muls r1, r3, r1
	adds r0, r0, r1
	lsls r0, r4
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C0834

	THUMB_FUNC_START GetGmCameraCenteredPosition
GetGmCameraCenteredPosition: @ 0x080C0858
	push {lr}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	subs r0, #0x78
	strh r0, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge .L080C0872
	movs r0, #0
	b .L080C0878
.L080C0872:
	cmp r0, #0xf0
	ble .L080C087A
	movs r0, #0xf0
.L080C0878:
	strh r0, [r2]
.L080C087A:
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	subs r0, #0x50
	strh r0, [r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge .L080C088E
	movs r0, #0
	b .L080C0894
.L080C088E:
	cmp r0, #0xa0
	ble .L080C0896
	movs r0, #0xa0
.L080C0894:
	strh r0, [r3]
.L080C0896:
	pop {r0}
	bx r0

	THUMB_FUNC_END GetGmCameraCenteredPosition

	THUMB_FUNC_START func_080C089C
func_080C089C: @ 0x080C089C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	mov ip, r0
	mov r8, r1
	adds r6, r2, #0
	adds r7, r3, #0
	mov r2, sp
	ldr r1, .L080C0928  @ gGmData
	ldr r0, [r1, #8]
	asrs r0, r0, #8
	strh r0, [r2]
	adds r2, #2
	ldr r0, [r1, #0xc]
	asrs r0, r0, #8
	strh r0, [r2]
	add r3, sp, #4
	ldrh r0, [r1, #2]
	strh r0, [r3]
	mov r5, sp
	adds r5, #6
	ldrh r0, [r1, #4]
	strh r0, [r5]
	mov r4, sp
	mov r0, sp
	ldrh r1, [r3]
	subs r1, #8
	ldrh r0, [r0]
	subs r0, r0, r1
	strh r0, [r4]
	ldrh r1, [r5]
	subs r1, #8
	ldrh r0, [r2]
	subs r0, r0, r1
	strh r0, [r2]
	mov r0, ip
	cmp r0, #0
	bne .L080C08F0
	mov r1, r8
	cmp r1, #0
	beq .L080C0906
.L080C08F0:
	mov r0, sp
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #0x78
	subs r0, r0, r7
	cmp r1, r0
	blt .L080C0906
	adds r0, r6, #0
	adds r0, #0x78
	cmp r1, r0
	blt .L080C0924
.L080C0906:
	cmp r6, #0
	bne .L080C090E
	cmp r7, #0
	beq .L080C092C
.L080C090E:
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r0, #0x50
	mov r3, ip
	subs r0, r0, r3
	cmp r1, r0
	blt .L080C092C
	mov r0, r8
	adds r0, #0x50
	cmp r1, r0
	bge .L080C092C
.L080C0924:
	movs r0, #4
	b .L080C0954
	.align 2, 0
.L080C0928: .4byte gGmData
.L080C092C:
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x78
	bgt .L080C0942
	movs r3, #0
	ldrsh r0, [r2, r3]
	cmp r0, #0x50
	bgt .L080C094E
	movs r0, #0
	b .L080C0954
.L080C0942:
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0x50
	bgt .L080C0952
	movs r0, #1
	b .L080C0954
.L080C094E:
	movs r0, #2
	b .L080C0954
.L080C0952:
	movs r0, #3
.L080C0954:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C089C

	THUMB_FUNC_START func_080C0960
func_080C0960: @ 0x080C0960
	push {r4, lr}
	bl func_080BCFDC
	adds r4, r0, #0
	ldr r0, .L080C0998  @ gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne .L080C097E
	ldr r0, .L080C099C  @ gGmData
	bl func_080BD014
	cmp r0, r4
	beq .L080C09AE
.L080C097E:
	movs r1, #0
	ldr r0, .L080C09A0  @ gUnknown_08206951
	ldrb r0, [r0]
	cmp r1, r0
	bge .L080C09AE
	ldr r3, .L080C09A4  @ gUnknown_08206948
	adds r2, r0, #0
.L080C098C:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r4, r0
	bne .L080C09A8
	movs r0, #1
	b .L080C09B0
	.align 2, 0
.L080C0998: .4byte gPlaySt
.L080C099C: .4byte gGmData
.L080C09A0: .4byte gUnknown_08206951
.L080C09A4: .4byte gUnknown_08206948
.L080C09A8:
	adds r1, #1
	cmp r1, r2
	blt .L080C098C
.L080C09AE:
	movs r0, #0
.L080C09B0:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C0960

	THUMB_FUNC_START func_080C09B8
func_080C09B8: @ 0x080C09B8
	push {r4, r5, lr}
	sub sp, #8
	movs r4, #0
	str r4, [sp]
	ldr r1, .L080C09E0  @ gUnknown_0201B430
	ldr r5, .L080C09E4  @ 0x01000140
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, .L080C09E8  @ gUnknown_0201B930
	adds r2, r5, #0
	bl CpuFastSet
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C09E0: .4byte gUnknown_0201B430
.L080C09E4: .4byte 0x01000140
.L080C09E8: .4byte gUnknown_0201B930

	THUMB_FUNC_END func_080C09B8

	THUMB_FUNC_START func_080C09EC
func_080C09EC: @ 0x080C09EC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C0A08  @ 0x06013000
	movs r1, #9
	bl LoadHelpBoxGfx
	ldr r0, .L080C0A0C  @ gUnknown_08A3E78C
	adds r1, r4, #0
	bl StartMoveableHelpBox
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0A08: .4byte 0x06013000
.L080C0A0C: .4byte gUnknown_08A3E78C

	THUMB_FUNC_END func_080C09EC

	THUMB_FUNC_START func_080C0A10
func_080C0A10: @ 0x080C0A10
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C0A2C  @ gUnknown_08A3E8B8
	bl FindProc
	ldr r0, [r0, #0x2c]
	ldr r0, [r0]
	ldrh r1, [r0, #2]
	cmp r1, #0
	beq .L080C0A30
	adds r0, r4, #0
	adds r0, #0x4c
	strh r1, [r0]
	b .L080C0A38
	.align 2, 0
.L080C0A2C: .4byte gUnknown_08A3E8B8
.L080C0A30:
	adds r1, r4, #0
	adds r1, #0x4c
	ldr r0, .L080C0A40  @ 0x000006BE
	strh r0, [r1]
.L080C0A38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0A40: .4byte 0x000006BE

	THUMB_FUNC_END func_080C0A10

	THUMB_FUNC_START func_080C0A44
func_080C0A44: @ 0x080C0A44
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C0A60  @ gUnknown_08A3E8B8
	bl FindProc
	ldr r0, [r0, #0x2c]
	ldr r0, [r0, #4]
	ldrh r0, [r0, #2]
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0A60: .4byte gUnknown_08A3E8B8

	THUMB_FUNC_END func_080C0A44

	THUMB_FUNC_START func_080C0A64
func_080C0A64: @ 0x080C0A64
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
.L080C0A6A:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq .L080C0A88
	ldr r0, [r1]
	cmp r0, #0
	beq .L080C0A88
	ldr r0, [r1, #0xc]
	ldr r1, .L080C0A98  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	bne .L080C0A88
	adds r5, #1
.L080C0A88:
	adds r4, #1
	cmp r4, #0x3f
	ble .L080C0A6A
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080C0A98: .4byte 0x00010004

	THUMB_FUNC_END func_080C0A64

	THUMB_FUNC_START func_080C0A9C
func_080C0A9C: @ 0x080C0A9C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl GetMsg
	adds r5, r0, #0
	movs r0, #0x40
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	mov r8, r0
	ldr r4, [r7, #0x2c]
	adds r0, r4, #0
	bl GetUnitEquippedWeaponSlot
	adds r1, r0, #0
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r4, #0
	bl BattleGenerateUiStats
	adds r0, r7, #0
	adds r0, #0x34
	ldr r4, .L080C0B80  @ gBg0Tm+0x2A6
	movs r1, #0
	str r1, [sp]
	str r5, [sp, #4]
	adds r1, r4, #0
	movs r2, #0
	mov r3, r8
	bl PutDrawText
	ldr r0, [r7, #0x2c]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r4, #0
	adds r1, #0xbc
	movs r2, #7
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x35
	bl PutSpecialChar
	movs r1, #0xde
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl PutTwoSpecialChar
	movs r1, #0xe2
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #3
	movs r2, #0x16
	bl PutSpecialChar
	movs r1, #0xa1
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, [r7, #0x2c]
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl PutNumberOrBlank
	movs r1, #0xa4
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, [r7, #0x2c]
	ldrb r2, [r1, #9]
	movs r1, #2
	bl PutNumberOrBlank
	ldr r0, [r7, #0x2c]
	bl GetUnitCurrentHp
	cmp r0, #0x63
	ble .L080C0B84
	movs r1, #0xe0
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	movs r2, #0x14
	movs r3, #0x14
	bl PutTwoSpecialChar
	b .L080C0B9A
	.align 2, 0
.L080C0B80: .4byte gBg0Tm+0x2A6
.L080C0B84:
	movs r0, #0xe1
	lsls r0, r0, #1
	adds r4, r4, r0
	ldr r0, [r7, #0x2c]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
.L080C0B9A:
	ldr r0, [r7, #0x2c]
	bl GetUnitMaxHp
	cmp r0, #0x63
	ble .L080C0BB8
	ldr r0, .L080C0BB4  @ gBg0Tm+0x46C
	movs r1, #2
	movs r2, #0x14
	movs r3, #0x14
	bl PutTwoSpecialChar
	b .L080C0BCA
	.align 2, 0
.L080C0BB4: .4byte gBg0Tm+0x46C
.L080C0BB8:
	ldr r4, .L080C0C1C  @ gBg0Tm+0x46E
	ldr r0, [r7, #0x2c]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
.L080C0BCA:
	ldr r0, .L080C0C20  @ gGmData
	bl func_080BD014
	bl func_080BBA28
	adds r6, r0, #0
	movs r0, #0x48
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	mov r8, r0
	adds r5, r7, #0
	adds r5, #0x3c
	adds r0, r5, #0
	movs r1, #5
	bl Text_Skip
	ldr r4, .L080C0C24  @ gBg0Tm+0x186
	movs r0, #0
	str r0, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	mov r3, r8
	bl PutDrawText
	adds r4, #0xd2
	bl func_080C0A64
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0C1C: .4byte gBg0Tm+0x46E
.L080C0C20: .4byte gGmData
.L080C0C24: .4byte gBg0Tm+0x186

	THUMB_FUNC_END func_080C0A9C

	THUMB_FUNC_START func_080C0C28
func_080C0C28: @ 0x080C0C28
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x34
	movs r1, #8
	bl InitText
	adds r4, #0x3c
	adds r0, r4, #0
	movs r1, #9
	bl InitText
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C0C28

	THUMB_FUNC_START func_080C0C44
func_080C0C44: @ 0x080C0C44
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, .L080C0CB4  @ gGmData
	ldrb r1, [r2, #0x10]
	movs r0, #2
	ands r0, r1
	movs r1, #0
	cmp r0, #0
	bne .L080C0C5C
	movs r0, #0x12
	ldrsh r1, [r2, r0]
.L080C0C5C:
	adds r0, r1, #0
	bl GetUnitByPid
	str r0, [r5, #0x2c]
	bl GetUnitFid
	adds r4, r0, #0
	ldr r0, [r5, #0x2c]
	ldr r0, [r0, #0xc]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq .L080C0C7A
	adds r4, #1
.L080C0C7A:
	bl ResetText
	bl InitIcons
	adds r0, r5, #0
	bl func_080C0C28
	ldr r1, .L080C0CB8  @ gBg2Tm+0x64
	movs r3, #0x80
	lsls r3, r3, #2
	movs r0, #0xd
	str r0, [sp]
	adds r0, r5, #0
	adds r2, r4, #0
	bl PutFace80x72
	adds r0, r4, #0
	bl GetFaceInfo
	ldr r0, [r0]
	cmp r0, #0
	beq .L080C0CC0
	ldr r0, .L080C0CBC  @ gUnknown_08A01EE4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	b .L080C0CCA
	.align 2, 0
.L080C0CB4: .4byte gGmData
.L080C0CB8: .4byte gBg2Tm+0x64
.L080C0CBC: .4byte gUnknown_08A01EE4
.L080C0CC0:
	ldr r0, .L080C0CF0  @ gUnknown_08A01F04
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
.L080C0CCA:
	bl MU_EndAll
	ldr r0, [r5, #0x2c]
	movs r1, #0xd8
	movs r2, #0x87
	bl MU_CreateForUI
	str r0, [r5, #0x30]
	adds r0, r5, #0
	bl func_080C0A9C
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0CF0: .4byte gUnknown_08A01F04

	THUMB_FUNC_END func_080C0C44

	THUMB_FUNC_START func_080C0CF4
func_080C0CF4: @ 0x080C0CF4
	push {r4, r5, r6, r7, lr}
	ldr r0, .L080C0DB0  @ gUnknown_08A3E888
	bl SetupBackgrounds
	ldr r7, .L080C0DB4  @ gBg0Tm
	adds r0, r7, #0
	movs r1, #0
	bl TmFill
	ldr r5, .L080C0DB8  @ gBg1Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r6, .L080C0DBC  @ gBg2Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	movs r0, #7
	bl EnableBgSync
	bl ApplySystemGraphics
	bl ApplyUnitSpritePalettes
	ldr r1, .L080C0DC0  @ 0x0600B000
	movs r2, #1
	negs r2, r2
	movs r0, #0
	bl StartScreenMenuScrollingBg
	ldr r0, .L080C0DC4  @ gUnknown_08A986C0
	ldr r1, .L080C0DC8  @ 0x06003000
	bl Decompress
	ldr r0, .L080C0DCC  @ gUnknown_08A98DCC
	movs r1, #0xc0
	movs r2, #0x60
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r0, .L080C0DD0  @ gUnknown_08A98BF8
	ldr r4, .L080C0DD4  @ gBuf
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r5, #0
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #0xe1
	lsls r0, r0, #2
	adds r5, r5, r0
	ldr r1, .L080C0DD8  @ gUnknown_08A98CFC
	movs r4, #0xc3
	lsls r4, r4, #7
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	adds r0, r7, #0
	adds r0, #0xc4
	ldr r1, .L080C0DDC  @ gUnknown_08A98D58
	adds r2, r4, #0
	bl TmApplyTsa_thm
	movs r1, #0x91
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, .L080C0DE0  @ gUnknown_08A98D88
	adds r2, r4, #0
	bl TmApplyTsa_thm
	movs r1, #0xb1
	lsls r1, r1, #2
	adds r0, r7, r1
	ldr r1, .L080C0DE4  @ gUnknown_08A98DA0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080C0DE8  @ 0x00000432
	adds r6, r6, r0
	ldr r1, .L080C0DEC  @ gUnknown_08A98DB8
	adds r0, r6, #0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0DB0: .4byte gUnknown_08A3E888
.L080C0DB4: .4byte gBg0Tm
.L080C0DB8: .4byte gBg1Tm
.L080C0DBC: .4byte gBg2Tm
.L080C0DC0: .4byte 0x0600B000
.L080C0DC4: .4byte gUnknown_08A986C0
.L080C0DC8: .4byte 0x06003000
.L080C0DCC: .4byte gUnknown_08A98DCC
.L080C0DD0: .4byte gUnknown_08A98BF8
.L080C0DD4: .4byte gBuf
.L080C0DD8: .4byte gUnknown_08A98CFC
.L080C0DDC: .4byte gUnknown_08A98D58
.L080C0DE0: .4byte gUnknown_08A98D88
.L080C0DE4: .4byte gUnknown_08A98DA0
.L080C0DE8: .4byte 0x00000432
.L080C0DEC: .4byte gUnknown_08A98DB8

	THUMB_FUNC_END func_080C0CF4

	THUMB_FUNC_START func_080C0DF0
func_080C0DF0: @ 0x080C0DF0
	push {r4, lr}
	sub sp, #4
	ldr r2, .L080C0E44  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	bl SetBlendBackdropA
	ldr r0, .L080C0E48  @ gPal
	strh r4, [r0]
	bl EnablePalSync
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0E44: .4byte gDispIo
.L080C0E48: .4byte gPal

	THUMB_FUNC_END func_080C0DF0

	THUMB_FUNC_START func_080C0E4C
func_080C0E4C: @ 0x080C0E4C
	push {lr}
	bl EndBG3Slider
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C0E4C

	THUMB_FUNC_START func_080C0E58
func_080C0E58: @ 0x080C0E58
	push {r4, lr}
	sub sp, #4
	ldr r3, .L080C0EB8  @ gDispIo
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	ldrb r0, [r3, #0x10]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	movs r0, #2
	orrs r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	movs r1, #0xd
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0EB8: .4byte gDispIo

	THUMB_FUNC_END func_080C0E58

	THUMB_FUNC_START func_080C0EBC
func_080C0EBC: @ 0x080C0EBC
	push {r4, r5, lr}
	ldr r4, .L080C0EFC  @ gBg0Tm+0x3C6
	bl GetGameTime
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl PutTime
	adds r5, r4, #0
	subs r5, #0xf0
	bl GetGold
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl PutNumber
	subs r4, #0xee
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1e
	bl PutSpecialChar
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0EFC: .4byte gBg0Tm+0x3C6

	THUMB_FUNC_END func_080C0EBC

	THUMB_FUNC_START func_080C0F00
func_080C0F00: @ 0x080C0F00
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, .L080C0F24  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq .L080C0F28
	adds r0, r5, #0
	bl func_080C09EC
	b .L080C0F8E
	.align 2, 0
.L080C0F24: .4byte gKeySt
.L080C0F28:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080C0F8E
	ldr r2, .L080C0F98  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	bl SetBlendBackdropA
	ldr r0, .L080C0F9C  @ gPal
	strh r4, [r0]
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, .L080C0FA0  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C0F8E
	movs r0, #0x6b
	bl m4aSongNumStart
.L080C0F8E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C0F98: .4byte gDispIo
.L080C0F9C: .4byte gPal
.L080C0FA0: .4byte gPlaySt

	THUMB_FUNC_END func_080C0F00

	THUMB_FUNC_START func_080C0FA4
func_080C0FA4: @ 0x080C0FA4
	push {lr}
	movs r0, #0
	bl SetOnVMatch
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C0FA4

	THUMB_FUNC_START func_080C0FB0
func_080C0FB0: @ 0x080C0FB0
	adds r2, r0, #0
	ldr r3, .L080C0FE4  @ gDispIo
	ldr r0, [r2, #0x34]
	ldr r1, [r2, #0x38]
	str r0, [r3, #0x3c]
	str r1, [r3, #0x40]
	adds r0, r2, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x44
	strb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080C0FE4: .4byte gDispIo

	THUMB_FUNC_END func_080C0FB0

	THUMB_FUNC_START func_080C0FE8
func_080C0FE8: @ 0x080C0FE8
	push {r4, lr}
	sub sp, #4
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x30]
	movs r0, #4
	strh r0, [r3, #0x2e]
	strh r0, [r3, #0x2c]
	adds r2, r3, #0
	adds r2, #0x29
	ldrb r0, [r2]
	movs r4, #2
	negs r4, r4
	ands r4, r0
	strb r4, [r2]
	ldr r0, .L080C1024  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C1028
	movs r0, #2
	adds r1, r4, #0
	orrs r1, r0
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x2a
	movs r0, #0xff
	b .L080C1036
	.align 2, 0
.L080C1024: .4byte gGmData
.L080C1028:
	movs r0, #3
	negs r0, r0
	ands r0, r4
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2a
	movs r0, #0
.L080C1036:
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x2b
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldr r2, .L080C10B4  @ gDispIo
	ldr r0, [r2, #0x3c]
	ldr r1, [r2, #0x40]
	str r0, [r3, #0x34]
	str r1, [r3, #0x38]
	adds r0, r2, #0
	adds r0, #0x44
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x3c
	movs r4, #0
	strb r1, [r0]
	adds r0, r2, #0
	adds r0, #0x45
	ldrb r0, [r0]
	adds r1, r3, #0
	adds r1, #0x3d
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x46
	ldrb r1, [r0]
	adds r0, r3, #0
	adds r0, #0x3e
	strb r1, [r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C10B4: .4byte gDispIo

	THUMB_FUNC_END func_080C0FE8

	THUMB_FUNC_START func_080C10B8
func_080C10B8: @ 0x080C10B8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	subs r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt .L080C1190
	movs r5, #0
	adds r7, r4, #0
	adds r7, #0x29
	movs r0, #0x1f
	mov r8, r0
	ldr r6, .L080C10F0  @ gPal+0x2C0
.L080C10D8:
	ldrb r1, [r7]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C10F4
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	adds r0, r0, r5
	mov r2, r8
	ands r0, r2
	b .L080C1102
	.align 2, 0
.L080C10F0: .4byte gPal+0x2C0
.L080C10F4:
	adds r1, r5, #0
	adds r1, #0x20
	movs r2, #0x30
	ldrsh r0, [r4, r2]
	subs r0, r1, r0
	mov r1, r8
	ands r0, r1
.L080C1102:
	lsls r0, r0, #1
	ldr r1, .L080C1160  @ gUnknown_08A97E48
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r6]
	ldrh r0, [r4, #0x30]
	movs r1, #0xf
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r6, #2
	adds r5, #1
	cmp r5, #0xf
	ble .L080C10D8
	ldrh r0, [r4, #0x2e]
	movs r5, #0
	strh r0, [r4, #0x2c]
	bl EnablePalSync
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble .L080C1190
	ldrb r1, [r7]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080C1164
	adds r2, r4, #0
	adds r2, #0x2b
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C1190
	.align 2, 0
.L080C1160: .4byte gUnknown_08A97E48
.L080C1164:
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge .L080C1174
	strh r5, [r4, #0x30]
	b .L080C1190
.L080C1174:
	cmp r0, #0
	ble .L080C1190
	strh r5, [r4, #0x30]
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C1190
	ldrb r1, [r7]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r7]
.L080C1190:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C10B8

	THUMB_FUNC_START func_080C119C
func_080C119C: @ 0x080C119C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	ldr r2, .L080C11C8  @ gGmData
	ldrb r1, [r2]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C11CC
	mov r4, sp
	adds r4, #6
	add r0, sp, #4
	adds r1, r4, #0
	bl GetWMDisplayPosition
	mov sl, r4
	b .L080C11DA
	.align 2, 0
.L080C11C8: .4byte gGmData
.L080C11CC:
	add r1, sp, #4
	ldrh r0, [r2, #2]
	strh r0, [r1]
	adds r1, #2
	ldrh r0, [r2, #4]
	strh r0, [r1]
	mov sl, r1
.L080C11DA:
	movs r7, #0
	movs r0, #0x2a
	add r0, r8
	mov r9, r0
.L080C11E2:
	mov r1, r9
	ldrb r2, [r1]
	lsls r2, r2, #5
	lsls r0, r7, #3
	ldr r1, .L080C124C  @ gUnknown_08A3E9A0
	adds r0, r0, r1
	adds r5, r2, r0
	movs r2, #5
	ldrsb r2, [r5, r2]
	mov r3, r8
	ldrh r3, [r3, #0x2c]
	adds r2, r2, r3
	add r0, sp, #4
	ldrh r0, [r0]
	subs r2, r2, r0
	lsls r2, r2, #0x10
	movs r0, #6
	ldrsb r0, [r5, r0]
	mov r1, r8
	ldrh r1, [r1, #0x2e]
	adds r0, r0, r1
	mov r3, sl
	ldrh r1, [r3]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsrs r3, r2, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r2, r2, r1
	lsrs r2, r2, #0x10
	movs r1, #0x88
	lsls r1, r1, #1
	cmp r2, r1
	bhi .L080C1274
	lsls r1, r0, #0x10
	movs r2, #0x80
	lsls r2, r2, #0xe
	adds r0, r1, r2
	lsrs r0, r0, #0x10
	adds r2, r1, #0
	cmp r0, #0xc0
	bhi .L080C1274
	ldr r0, .L080C1250  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C1254
	movs r6, #0xc
	movs r4, #0xc0
	lsls r4, r4, #4
	b .L080C125A
	.align 2, 0
.L080C124C: .4byte gUnknown_08A3E9A0
.L080C1250: .4byte gGmData
.L080C1254:
	movs r6, #0xd
	movs r4, #0x80
	lsls r4, r4, #4
.L080C125A:
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	asrs r2, r2, #0x10
	ldr r3, [r5]
	ldrb r0, [r5, #4]
	movs r5, #0xc3
	lsls r5, r5, #7
	adds r4, r4, r5
	adds r0, r0, r4
	str r0, [sp]
	adds r0, r6, #0
	bl PutSprite
.L080C1274:
	adds r7, #1
	cmp r7, #3
	ble .L080C11E2
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C119C

	THUMB_FUNC_START func_080C128C
func_080C128C: @ 0x080C128C
	push {lr}
	ldr r0, .L080C12A4  @ gUnknown_08A3EA38
	bl func_080034FC
	cmp r0, #1
	bgt .L080C129E
	ldr r0, .L080C12A8  @ gUnknown_08A3EA00
	bl EndEachProc
.L080C129E:
	pop {r0}
	bx r0
	.align 2, 0
.L080C12A4: .4byte gUnknown_08A3EA38
.L080C12A8: .4byte gUnknown_08A3EA00

	THUMB_FUNC_END func_080C128C

	THUMB_FUNC_START func_080C12AC
func_080C12AC: @ 0x080C12AC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, .L080C130C  @ gUnknown_08A3EA38
	bl func_080034FC
	cmp r0, #1
	bgt .L080C12E0
	ldr r0, .L080C1310  @ gUnknown_08A97E28
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r0, .L080C1314  @ gUnknown_08A97C98
	ldr r4, .L080C1318  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r1, .L080C131C  @ 0x06013000
	adds r0, r4, #0
	movs r2, #6
	movs r3, #4
	bl CopyTileGfxForObj
.L080C12E0:
	ldr r4, .L080C1320  @ gUnknown_08A3EA00
	adds r0, r4, #0
	bl FindProc
	cmp r0, #0
	bne .L080C12F4
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
.L080C12F4:
	movs r0, #0
	strh r0, [r5, #0x2e]
	strh r0, [r5, #0x2c]
	adds r2, r5, #0
	adds r2, #0x29
	ldrb r1, [r2]
	subs r0, #2
	ands r0, r1
	strb r0, [r2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C130C: .4byte gUnknown_08A3EA38
.L080C1310: .4byte gUnknown_08A97E28
.L080C1314: .4byte gUnknown_08A97C98
.L080C1318: .4byte gBuf
.L080C131C: .4byte 0x06013000
.L080C1320: .4byte gUnknown_08A3EA00

	THUMB_FUNC_END func_080C12AC

	THUMB_FUNC_START func_080C1324
func_080C1324: @ 0x080C1324
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, .L080C136C  @ gUnknown_08A3EA00
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	bne .L080C133A
	adds r0, r5, #0
	bl Proc_Break
.L080C133A:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	movs r4, #1
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080C1350
	adds r0, r5, #0
	bl Proc_Break
.L080C1350:
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080C1364
	adds r0, r5, #0
	bl func_080C119C
.L080C1364:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C136C: .4byte gUnknown_08A3EA00

	THUMB_FUNC_END func_080C1324

	THUMB_FUNC_START func_080C1370
func_080C1370: @ 0x080C1370
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	cmp r2, #0
	beq .L080C1394
	ldr r0, .L080C138C  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	ldr r0, .L080C1390  @ gUnknown_08A3EA38
	adds r1, r2, #0
	bl SpawnProcLocking
	b .L080C13BC
	.align 2, 0
.L080C138C: .4byte gGmData
.L080C1390: .4byte gUnknown_08A3EA38
.L080C1394:
	ldr r0, .L080C13AC  @ gGmData
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C13B4
	ldr r0, .L080C13B0  @ gUnknown_08A3EA38
	movs r1, #3
	bl SpawnProc
	b .L080C13BC
	.align 2, 0
.L080C13AC: .4byte gGmData
.L080C13B0: .4byte gUnknown_08A3EA38
.L080C13B4:
	ldr r0, .L080C13C8  @ gUnknown_08A3EA38
	movs r1, #3
	bl SpawnProcLocking
.L080C13BC:
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080C13C8: .4byte gUnknown_08A3EA38

	THUMB_FUNC_END func_080C1370

	THUMB_FUNC_START func_080C13CC
func_080C13CC: @ 0x080C13CC
	push {lr}
	bl Proc_End
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C13CC

	THUMB_FUNC_START func_080C13D8
func_080C13D8: @ 0x080C13D8
	push {lr}
	ldr r0, .L080C13E4  @ gUnknown_08A3EA38
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C13E4: .4byte gUnknown_08A3EA38

	THUMB_FUNC_END func_080C13D8

	THUMB_FUNC_START func_080C13E8
func_080C13E8: @ 0x080C13E8
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	mov r9, r3
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r8, sp
	ldr r6, .L080C1458  @ gUnknown_08A3D748
	adds r0, r6, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldrh r0, [r0, #0x34]
	mov r1, r8
	strh r0, [r1]
	movs r0, #2
	add r0, sp
	mov r8, r0
	adds r0, r6, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldrh r1, [r0, #0x36]
	mov r0, r8
	strh r1, [r0]
	mov r0, sp
	ldrh r0, [r0]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	subs r5, r5, r0
	strh r5, [r7]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	subs r4, r4, r1
	mov r1, r9
	strh r4, [r1]
	adds r4, #0x20
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	cmp r4, #0xdf
	bhi .L080C1460
	ldrh r0, [r7]
	adds r0, #0x20
	lsls r0, r0, #0x10
	ldr r1, .L080C145C  @ 0x012F0000
	cmp r0, r1
	bhi .L080C1460
	movs r0, #1
	b .L080C1462
	.align 2, 0
.L080C1458: .4byte gUnknown_08A3D748
.L080C145C: .4byte 0x012F0000
.L080C1460:
	movs r0, #0
.L080C1462:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C13E8

	THUMB_FUNC_START func_080C1470
func_080C1470: @ 0x080C1470
	push {lr}
	ldr r0, [r0, #0x50]
	cmp r0, #0
	beq .L080C147C
	bl EndSpriteAnim
.L080C147C:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1470

	THUMB_FUNC_START func_080C1480
func_080C1480: @ 0x080C1480
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, .L080C151C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C149E
	movs r0, #0x77
	bl m4aSongNumStart
.L080C149E:
	movs r1, #0
	str r1, [r4, #0x50]
	adds r0, r4, #0
	adds r0, #0x64
	strh r1, [r0]
	ldr r4, .L080C1520  @ gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	negs r0, r0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, r9
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C151C: .4byte gPlaySt
.L080C1520: .4byte gSinLut

	THUMB_FUNC_END func_080C1480

	THUMB_FUNC_START func_080C1524
func_080C1524: @ 0x080C1524
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r1, r0, #1
	strh r1, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	ble .L080C154A
	adds r0, r7, #0
	bl Proc_Break
.L080C154A:
	movs r1, #0x80
	lsls r1, r1, #2
	movs r0, #0x80
	lsls r0, r0, #1
	mov sl, r0
	movs r2, #0
	ldrsh r3, [r4, r2]
	movs r0, #8
	str r0, [sp]
	movs r0, #5
	mov r2, sl
	bl Interpolate
	mov r8, r0
	ldr r4, .L080C1604  @ gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r9, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	negs r0, r0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r9
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, [r7, #0x2c]
	subs r0, #8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x30]
	subs r1, #8
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r4, sp
	adds r4, #6
	add r2, sp, #4
	adds r3, r4, #0
	bl func_080C13E8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080C1608
	ldr r0, [r7, #0x50]
	add r1, sp, #4
	movs r2, #0
	ldrsh r1, [r1, r2]
	ldrh r2, [r4]
	movs r4, #0xc0
	lsls r4, r4, #2
	adds r3, r4, #0
	orrs r2, r3
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	bl DisplaySpriteAnim
	b .L080C1614
	.align 2, 0
.L080C1604: .4byte gSinLut
.L080C1608:
	ldr r0, [r7, #0x50]
	movs r2, #0xec
	lsls r2, r2, #2
	mov r1, sl
	bl DisplaySpriteAnim
.L080C1614:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1524

	THUMB_FUNC_START func_080C1624
func_080C1624: @ 0x080C1624
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	strh r2, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0x27
	ble .L080C1640
	adds r0, r4, #0
	bl Proc_Break
.L080C1640:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	mov r5, sp
	adds r5, #2
	mov r2, sp
	adds r3, r5, #0
	bl func_080C13E8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080C1676
	ldr r0, [r4, #0x50]
	mov r1, sp
	movs r4, #0
	ldrsh r1, [r1, r4]
	ldrh r2, [r5]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r3, r4, #0
	orrs r2, r3
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	bl DisplaySpriteAnim
	b .L080C1684
.L080C1676:
	ldr r0, [r4, #0x50]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0xec
	lsls r2, r2, #2
	bl DisplaySpriteAnim
.L080C1684:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1624

	THUMB_FUNC_START func_080C168C
func_080C168C: @ 0x080C168C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, .L080C16CC  @ gUnknown_089ADD4C
	ldr r1, .L080C16D0  @ 0x06013000
	bl Decompress
	ldr r0, .L080C16D4  @ gUnknown_089A8EF8
	movs r1, #7
	bl StartSpriteAnim
	adds r4, r0, #0
	movs r0, #0x8c
	lsls r0, r0, #5
	strh r0, [r4, #0x22]
	adds r0, r4, #0
	movs r1, #0
	bl SetSpriteAnimId
	ldr r0, .L080C16D8  @ gUnknown_08A3EA70
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x50]
	adds r5, #8
	str r5, [r0, #0x2c]
	subs r6, #8
	str r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C16CC: .4byte gUnknown_089ADD4C
.L080C16D0: .4byte 0x06013000
.L080C16D4: .4byte gUnknown_089A8EF8
.L080C16D8: .4byte gUnknown_08A3EA70

	THUMB_FUNC_END func_080C168C

	THUMB_FUNC_START func_080C16DC
func_080C16DC: @ 0x080C16DC
	push {lr}
	ldr r0, .L080C16F0  @ gUnknown_08A3EA70
	bl FindProc
	cmp r0, #0
	beq .L080C16EA
	movs r0, #1
.L080C16EA:
	pop {r1}
	bx r1
	.align 2, 0
.L080C16F0: .4byte gUnknown_08A3EA70

	THUMB_FUNC_END func_080C16DC

	THUMB_FUNC_START func_080C16F4
func_080C16F4: @ 0x080C16F4
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r2, .L080C1720  @ gUnknown_08206954
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r4, r1, r2
	movs r5, #2
.L080C1704:
	bl RandNext_100
	ldr r1, [r4]
	cmp r0, r1
	bge .L080C1710
	adds r6, #1
.L080C1710:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge .L080C1704
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080C1720: .4byte gUnknown_08206954

	THUMB_FUNC_END func_080C16F4

	THUMB_FUNC_START func_080C1724
func_080C1724: @ 0x080C1724
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	movs r2, #0
	movs r1, #0
	cmp r1, r4
	bge .L080C173E
.L080C1732:
	adds r0, r5, r1
	ldrb r0, [r0]
	adds r2, r2, r0
	adds r1, #1
	cmp r1, r4
	blt .L080C1732
.L080C173E:
	cmp r2, #0
	bne .L080C1748
	movs r0, #1
	negs r0, r0
	b .L080C176E
.L080C1748:
	adds r0, r2, #0
	bl RandNext
	adds r3, r0, #0
	movs r1, #0
	cmp r1, r4
	bge .L080C176C
	ldrb r2, [r5]
	cmp r3, r2
	blt .L080C176C
.L080C175C:
	adds r1, #1
	cmp r1, r4
	bge .L080C176C
	adds r0, r5, r1
	ldrb r0, [r0]
	adds r2, r2, r0
	cmp r3, r2
	bge .L080C175C
.L080C176C:
	adds r0, r1, #0
.L080C176E:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C1724

	THUMB_FUNC_START func_080C1774
func_080C1774: @ 0x080C1774
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r3, r0, #0
	str r1, [sp, #0x18]
	cmp r3, #0
	blt .L080C1800
	cmp r3, #9
	ble .L080C17F4
	cmp r3, #0x38
	beq .L080C17F4
	cmp r3, #0
	blt .L080C1800
	ldr r0, .L080C17BC  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080C17A0
	cmp r0, #3
	beq .L080C17C8
.L080C17A0:
	movs r2, #0
	ldr r4, .L080C17C0  @ gUnknown_082069D8
	ldrb r0, [r4]
	ldr r1, .L080C17C4  @ gUnknown_082069EE
	cmp r0, r3
	beq .L080C17E2
.L080C17AC:
	adds r2, #1
	cmp r2, #0xa
	bhi .L080C17E2
	adds r0, r2, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne .L080C17AC
	b .L080C17E2
	.align 2, 0
.L080C17BC: .4byte gPlaySt
.L080C17C0: .4byte gUnknown_082069D8
.L080C17C4: .4byte gUnknown_082069EE
.L080C17C8:
	movs r2, #0
	ldr r4, .L080C17F8  @ gUnknown_082069E3
	ldrb r0, [r4]
	ldr r1, .L080C17FC  @ gUnknown_08206A51
	cmp r0, r3
	beq .L080C17E2
.L080C17D4:
	adds r2, #1
	cmp r2, #0xa
	bhi .L080C17E2
	adds r0, r2, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne .L080C17D4
.L080C17E2:
	lsls r0, r2, #3
	adds r0, r0, r2
	adds r4, r0, r1
	adds r0, r2, #0
	bl func_080C16F4
	mov r8, r0
	cmp r0, #0
	bgt .L080C1822
.L080C17F4:
	movs r0, #0
	b .L080C18C2
	.align 2, 0
.L080C17F8: .4byte gUnknown_082069E3
.L080C17FC: .4byte gUnknown_08206A51
.L080C1800:
	ldr r0, .L080C1810  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080C180C
	cmp r0, #3
	beq .L080C181C
.L080C180C:
	ldr r4, .L080C1814  @ gUnknown_08206A48
	b .L080C181E
	.align 2, 0
.L080C1810: .4byte gPlaySt
.L080C1814: .4byte gUnknown_08206A48
.L080C1818:
	adds r0, r6, #0
	b .L080C18C2
.L080C181C:
	ldr r4, .L080C18D4  @ gUnknown_08206AAB
.L080C181E:
	movs r0, #3
	mov r8, r0
.L080C1822:
	mov r0, sp
	adds r1, r4, #0
	movs r2, #9
	bl memcpy
	movs r6, #0
	add r1, sp, #0x10
	mov sl, r1
	ldr r3, .L080C18D8  @ gUnknown_08206948
	ldr r0, .L080C18DC  @ gGmData
	ldrb r1, [r0, #0x11]
	movs r2, #0
.L080C183A:
	adds r0, r6, r3
	ldrb r0, [r0]
	cmp r0, r1
	bne .L080C1848
	mov r4, sp
	adds r0, r4, r6
	strb r2, [r0]
.L080C1848:
	adds r6, #1
	cmp r6, #8
	bls .L080C183A
	mov r0, sl
	bl RandGetSt
	ldr r5, .L080C18E0  @ gGmMonsterRnState
	adds r0, r5, #0
	bl RandSetSt
	movs r6, #0
	cmp r6, r8
	bge .L080C18B4
	mov r9, r6
	add r7, sp, #0xc
	ldr r4, [sp, #0x18]
.L080C1868:
	mov r0, sp
	movs r1, #9
	bl func_080C1724
	adds r5, r0, #0
	cmp r5, #0
	blt .L080C1818
	ldr r0, .L080C18D8  @ gUnknown_08206948
	adds r0, r5, r0
	ldrb r0, [r0]
	strb r0, [r4]
	ldrb r0, [r4]
	bl WMLocation_GetChapterId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	bl GetChapterSkirmishLeaderClasses
	movs r0, #3
	bl RandNext
	adds r1, r7, r0
	ldrb r1, [r1]
	strb r1, [r4, #1]
	mov r1, r9
	strb r1, [r4, #2]
	ldr r2, .L080C18E4  @ gUnknown_03005349
	adds r1, r6, r2
	strb r0, [r1]
	mov r1, sp
	adds r0, r1, r5
	mov r2, r9
	strb r2, [r0]
	adds r4, #4
	adds r6, #1
	cmp r6, r8
	blt .L080C1868
.L080C18B4:
	ldr r0, .L080C18E0  @ gGmMonsterRnState
	bl RandGetSt
	mov r0, sl
	bl RandSetSt
	mov r0, r8
.L080C18C2:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080C18D4: .4byte gUnknown_08206AAB
.L080C18D8: .4byte gUnknown_08206948
.L080C18DC: .4byte gGmData
.L080C18E0: .4byte gGmMonsterRnState
.L080C18E4: .4byte gUnknown_03005349

	THUMB_FUNC_END func_080C1774

	THUMB_FUNC_START nullsub_72
nullsub_72: @ 0x080C18E8
	bx lr

	THUMB_FUNC_END nullsub_72

	THUMB_FUNC_START func_080C18EC
func_080C18EC: @ 0x080C18EC
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	bl func_080BD048
	adds r1, r4, #0
	adds r1, #0x2c
	bl func_080C1774
	adds r1, r4, #0
	adds r1, #0x38
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C1918
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
.L080C1918:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C18EC

	THUMB_FUNC_START func_080C1920
func_080C1920: @ 0x080C1920
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080C1A30
	ldr r0, .L080C1A40  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C194C
	ldr r0, .L080C1A44  @ 0x00000312
	bl m4aSongNumStart
.L080C194C:
	movs r6, #0
	adds r0, r7, #0
	adds r0, #0x38
	str r0, [sp, #0x10]
	ldrb r0, [r0]
	cmp r6, r0
	bge .L080C1A2A
	add r1, sp, #8
	mov sl, r1
	movs r2, #0xa
	add r2, sp
	mov r9, r2
	add r3, sp, #0xc
	mov r8, r3
	adds r5, r7, #0
	adds r5, #0x2c
	movs r0, #0
	str r0, [sp, #0x14]
.L080C1970:
	ldrb r0, [r5]
	lsls r0, r0, #5
	ldr r1, .L080C1A48  @ gUnknown_082060B0
	adds r0, r0, r1
	ldrh r0, [r0, #0x18]
	mov r2, sl
	strh r0, [r2]
	ldrb r0, [r5]
	lsls r0, r0, #5
	adds r0, r0, r1
	ldrh r0, [r0, #0x1a]
	mov r3, r9
	strh r0, [r3]
	ldr r0, .L080C1A4C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x44]
	ldrh r0, [r0, #0x34]
	mov r1, r8
	strh r0, [r1]
	mov r4, sp
	adds r4, #0xe
	ldr r0, .L080C1A4C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x44]
	ldrh r2, [r0, #0x36]
	strh r2, [r4]
	mov r3, sl
	ldrh r0, [r3]
	mov r3, r8
	ldrh r1, [r3]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	mov r3, r9
	ldrh r0, [r3]
	subs r0, r0, r2
	adds r0, #8
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r0, #0xaf
	bhi .L080C19EE
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0xef
	bhi .L080C19EE
	asrs r1, r1, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	str r0, [sp, #4]
	ldr r0, .L080C1A50  @ gUnknown_08A97AEC
	movs r3, #0xe2
	lsls r3, r3, #6
	bl StartSpriteAnimProc
	adds r1, r7, #0
	adds r1, #0x3c
	ldr r2, [sp, #0x14]
	adds r1, r1, r2
	str r0, [r1]
.L080C19EE:
	adds r4, r6, #4
	ldrb r1, [r5, #1]
	ldrb r3, [r5]
	adds r0, r4, #0
	movs r2, #1
	bl SetGmClassUnit
	ldr r0, .L080C1A54  @ gGmData
	lsls r1, r4, #2
	adds r1, r1, r0
	ldrb r2, [r1, #0x10]
	movs r0, #1
	orrs r0, r2
	strb r0, [r1, #0x10]
	ldr r0, .L080C1A4C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r4, #0
	bl GmMu_ShowUnit
	adds r5, #4
	ldr r3, [sp, #0x14]
	adds r3, #4
	str r3, [sp, #0x14]
	adds r6, #1
	ldr r0, [sp, #0x10]
	ldrb r0, [r0]
	cmp r6, r0
	blt .L080C1970
.L080C1A2A:
	adds r0, r7, #0
	bl Proc_Break
.L080C1A30:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1A40: .4byte gPlaySt
.L080C1A44: .4byte 0x00000312
.L080C1A48: .4byte gUnknown_082060B0
.L080C1A4C: .4byte gUnknown_08A3D748
.L080C1A50: .4byte gUnknown_08A97AEC
.L080C1A54: .4byte gGmData

	THUMB_FUNC_END func_080C1920

	THUMB_FUNC_START func_080C1A58
func_080C1A58: @ 0x080C1A58
	push {r4, lr}
	adds r4, r0, #0
	bl SpriteAnimExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C1A6C
	adds r0, r4, #0
	bl Proc_Break
.L080C1A6C:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1A58

	THUMB_FUNC_START func_080C1A74
func_080C1A74: @ 0x080C1A74
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	cmp r2, #0
	bne .L080C1A8C
	ldr r0, .L080C1A88  @ gUnknown_08A3EAA8
	movs r1, #3
	bl SpawnProc
	b .L080C1A94
	.align 2, 0
.L080C1A88: .4byte gUnknown_08A3EAA8
.L080C1A8C:
	ldr r0, .L080C1AAC  @ gUnknown_08A3EAA8
	adds r1, r2, #0
	bl SpawnProcLocking
.L080C1A94:
	adds r1, r0, #0
	cmp r4, #0
	beq .L080C1AA2
	adds r0, r1, #0
	adds r0, #0x38
	ldrb r0, [r0]
	str r0, [r4]
.L080C1AA2:
	adds r0, r1, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080C1AAC: .4byte gUnknown_08A3EAA8

	THUMB_FUNC_END func_080C1A74

	THUMB_FUNC_START func_080C1AB0
func_080C1AB0: @ 0x080C1AB0
	push {r4, lr}
	ldr r0, .L080C1AD4  @ gUnknown_08A3EAA8
	bl EndEachProc
	movs r4, #0
.L080C1ABA:
	ldr r0, .L080C1AD8  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r4, #4
	bl GmMu_RemoveUnit
	adds r4, #1
	cmp r4, #2
	ble .L080C1ABA
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1AD4: .4byte gUnknown_08A3EAA8
.L080C1AD8: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C1AB0

	THUMB_FUNC_START func_080C1ADC
func_080C1ADC: @ 0x080C1ADC
	push {lr}
	ldr r0, .L080C1AF4  @ gUnknown_08A3EAA8
	bl FindProc
	cmp r0, #0
	beq .L080C1AF0
	adds r1, r0, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
.L080C1AF0:
	pop {r0}
	bx r0
	.align 2, 0
.L080C1AF4: .4byte gUnknown_08A3EAA8

	THUMB_FUNC_END func_080C1ADC

	THUMB_FUNC_START func_080C1AF8
func_080C1AF8: @ 0x080C1AF8
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	movs r6, #4
	ldr r0, .L080C1B54  @ gGmData
	add r1, sp, #4
	mov r8, r1
	adds r5, r0, #0
	adds r5, #0x10
	ldr r3, .L080C1B58  @ gUnknown_082060B0
	mov r9, r3
	mov r7, sp
	adds r7, #6
.L080C1B16:
	movs r1, #0x12
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq .L080C1BC6
	ldrb r1, [r5, #0x10]
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq .L080C1B60
	ldr r0, .L080C1B5C  @ gUnknown_08A3D748
	bl FindProc
	ldr r3, [r0, #0x54]
	ldrb r1, [r5, #0x10]
	adds r0, r4, #0
	ands r0, r1
	movs r2, #0
	cmp r0, #0
	beq .L080C1B42
	movs r0, #0x12
	ldrsh r2, [r5, r0]
.L080C1B42:
	ldrb r0, [r5, #0x11]
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl GmMu_SetUnitClass
	b .L080C1B88
	.align 2, 0
.L080C1B54: .4byte gGmData
.L080C1B58: .4byte gUnknown_082060B0
.L080C1B5C: .4byte gUnknown_08A3D748
.L080C1B60:
	ldr r0, .L080C1BDC  @ gUnknown_08A3D748
	bl FindProc
	ldr r3, [r0, #0x54]
	ldrb r1, [r5, #0x10]
	adds r0, r4, #0
	ands r0, r1
	movs r2, #0
	cmp r0, #0
	bne .L080C1B78
	movs r1, #0x12
	ldrsh r2, [r5, r1]
.L080C1B78:
	ldrb r0, [r5, #0x11]
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r6, #0
	movs r3, #1
	negs r3, r3
	bl GmMu_SetUnitChar
.L080C1B88:
	ldrb r0, [r5, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x18]
	mov r3, r8
	strh r0, [r3]
	ldrb r0, [r5, #0x11]
	lsls r0, r0, #5
	add r0, r9
	ldrh r0, [r0, #0x1a]
	strh r0, [r7]
	ldr r4, .L080C1BDC  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r1, r8
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #0
	ldrsh r3, [r7, r1]
	adds r1, r6, #0
	bl GmMu_SetPosition
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x54]
	adds r1, r6, #0
	bl GmMu_ShowUnit
.L080C1BC6:
	adds r5, #4
	adds r6, #1
	cmp r6, #6
	ble .L080C1B16
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1BDC: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C1AF8

	THUMB_FUNC_START func_080C1BE0
func_080C1BE0: @ 0x080C1BE0
	push {lr}
	ldr r0, .L080C1BF4  @ gUnknown_08A3EAA8
	bl FindProc
	cmp r0, #0
	beq .L080C1BEE
	movs r0, #1
.L080C1BEE:
	pop {r1}
	bx r1
	.align 2, 0
.L080C1BF4: .4byte gUnknown_08A3EAA8

	THUMB_FUNC_END func_080C1BE0

	THUMB_FUNC_START func_080C1BF8
func_080C1BF8: @ 0x080C1BF8
	push {r4, r5, r6, lr}
	ldr r0, .L080C1C4C  @ 0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	adds r6, r3, #0
	cmp r3, #0xe4
	bne .L080C1C0C
	movs r3, #0
.L080C1C0C:
	cmp r3, #0x9f
	bhi .L080C1C60
	ldr r0, .L080C1C50  @ gUnknown_0201C5D1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080C1CB0
	ldr r0, .L080C1C54  @ gUnknown_0201C5D0
	ldrb r1, [r0]
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #6
	ldr r1, .L080C1C58  @ gUnknown_0201BE32
	adds r0, r0, r1
	lsls r1, r3, #1
	adds r1, r0, r1
	ldr r4, .L080C1C5C  @ gUnknown_0201C5C0
	movs r5, #0xa0
	lsls r5, r5, #1
	movs r3, #2
.L080C1C36:
	ldr r2, [r4]
	cmp r2, #0
	beq .L080C1C40
	ldrh r0, [r1]
	strh r0, [r2]
.L080C1C40:
	adds r1, r1, r5
	adds r4, #4
	subs r3, #1
	cmp r3, #0
	bge .L080C1C36
	b .L080C1CB0
	.align 2, 0
.L080C1C4C: .4byte 0x04000006
.L080C1C50: .4byte gUnknown_0201C5D1
.L080C1C54: .4byte gUnknown_0201C5D0
.L080C1C58: .4byte gUnknown_0201BE32
.L080C1C5C: .4byte gUnknown_0201C5C0
.L080C1C60:
	cmp r3, #0xa0
	bne .L080C1CB0
	ldr r0, .L080C1C94  @ gUnknown_0201BE30
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq .L080C1CAC
	ldr r1, .L080C1C98  @ gUnknown_0201C5D1
	movs r0, #1
	strb r0, [r1]
	ldr r1, .L080C1C9C  @ gUnknown_0201C5D0
	ldr r0, .L080C1CA0  @ gUnknown_0201C5CF
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r2, .L080C1CA4  @ gUnknown_0201C5B4
	ldr r1, .L080C1CA8  @ gUnknown_0201C5C0
	movs r3, #2
.L080C1C88:
	ldm r2!, {r0}
	stm r1!, {r0}
	subs r3, #1
	cmp r3, #0
	bge .L080C1C88
	b .L080C1CB0
	.align 2, 0
.L080C1C94: .4byte gUnknown_0201BE30
.L080C1C98: .4byte gUnknown_0201C5D1
.L080C1C9C: .4byte gUnknown_0201C5D0
.L080C1CA0: .4byte gUnknown_0201C5CF
.L080C1CA4: .4byte gUnknown_0201C5B4
.L080C1CA8: .4byte gUnknown_0201C5C0
.L080C1CAC:
	ldr r0, .L080C1CEC  @ gUnknown_0201C5D1
	strb r1, [r0]
.L080C1CB0:
	movs r3, #0
	cmp r6, #0x9f
	bhi .L080C1CB8
	adds r3, r6, #0
.L080C1CB8:
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	bne .L080C1CE4
	ldr r0, .L080C1CF0  @ gUnknown_0201BE30
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080C1CE4
	ldr r1, .L080C1CF4  @ gUnknown_0203E75C
	cmp r3, #0
	bne .L080C1CD8
	ldr r0, .L080C1CF8  @ gUnknown_0203E754
	ldr r0, [r0]
	str r0, [r1]
.L080C1CD8:
	ldr r2, .L080C1CFC  @ 0x04000040
	ldr r1, [r1]
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	strh r0, [r2]
.L080C1CE4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1CEC: .4byte gUnknown_0201C5D1
.L080C1CF0: .4byte gUnknown_0201BE30
.L080C1CF4: .4byte gUnknown_0203E75C
.L080C1CF8: .4byte gUnknown_0203E754
.L080C1CFC: .4byte 0x04000040

	THUMB_FUNC_END func_080C1BF8

	THUMB_FUNC_START func_080C1D00
func_080C1D00: @ 0x080C1D00
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r1, #0
	ldr r0, .L080C1D50  @ gUnknown_0201C5D0
	mov r8, r0
	ldr r6, .L080C1D54  @ gUnknown_0201C5CF
	ldr r7, .L080C1D58  @ gUnknown_0201C5D1
	ldr r0, .L080C1D5C  @ gUnknown_0201BE30
	mov ip, r0
	ldr r5, .L080C1D60  @ gUnknown_0201C5CC
	movs r2, #0
	ldr r4, .L080C1D64  @ gUnknown_0201C5B4
	ldr r3, .L080C1D68  @ gUnknown_0201C5C0
.L080C1D1C:
	adds r0, r1, r5
	strb r2, [r0]
	stm r4!, {r2}
	stm r3!, {r2}
	adds r1, #1
	cmp r1, #2
	ble .L080C1D1C
	movs r0, #0
	strb r0, [r6]
	mov r1, r8
	strb r0, [r1]
	strb r0, [r7]
	mov r1, ip
	strb r0, [r1]
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, .L080C1D6C  @ func_080C1BF8
	bl SetOnHBlankA
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1D50: .4byte gUnknown_0201C5D0
.L080C1D54: .4byte gUnknown_0201C5CF
.L080C1D58: .4byte gUnknown_0201C5D1
.L080C1D5C: .4byte gUnknown_0201BE30
.L080C1D60: .4byte gUnknown_0201C5CC
.L080C1D64: .4byte gUnknown_0201C5B4
.L080C1D68: .4byte gUnknown_0201C5C0
.L080C1D6C: .4byte func_080C1BF8

	THUMB_FUNC_END func_080C1D00

	THUMB_FUNC_START func_080C1D70
func_080C1D70: @ 0x080C1D70
	push {r4, lr}
	sub sp, #4
	movs r0, #0
	bl SetOnHBlankA
	mov r0, sp
	movs r4, #0
	strh r4, [r0]
	ldr r1, .L080C1D94  @ gUnknown_0201BE32
	ldr r2, .L080C1D98  @ 0x010003C0
	bl CpuSet
	ldr r0, .L080C1D9C  @ gUnknown_0201BE30
	strb r4, [r0]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1D94: .4byte gUnknown_0201BE32
.L080C1D98: .4byte 0x010003C0
.L080C1D9C: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080C1D70

	THUMB_FUNC_START func_080C1DA0
func_080C1DA0: @ 0x080C1DA0
	adds r3, r0, #0
	ldr r0, .L080C1DC0  @ gUnknown_0201C5CF
	ldrb r2, [r0]
	adds r2, r2, r1
	movs r0, #1
	ands r2, r0
	lsls r0, r2, #4
	subs r0, r0, r2
	lsls r0, r0, #6
	lsls r1, r3, #2
	adds r1, r1, r3
	lsls r1, r1, #6
	ldr r2, .L080C1DC4  @ gUnknown_0201BE32
	adds r1, r1, r2
	adds r0, r0, r1
	bx lr
	.align 2, 0
.L080C1DC0: .4byte gUnknown_0201C5CF
.L080C1DC4: .4byte gUnknown_0201BE32

	THUMB_FUNC_END func_080C1DA0

	THUMB_FUNC_START func_080C1DC8
func_080C1DC8: @ 0x080C1DC8
	ldr r0, .L080C1DD4  @ gUnknown_0201C5CF
	ldrb r1, [r0]
	movs r2, #1
	eors r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080C1DD4: .4byte gUnknown_0201C5CF

	THUMB_FUNC_END func_080C1DC8

	THUMB_FUNC_START func_080C1DD8
func_080C1DD8: @ 0x080C1DD8
	ldr r2, .L080C1DE4  @ gUnknown_0201C5B4
	lsls r0, r0, #2
	adds r0, r0, r2
	str r1, [r0]
	bx lr
	.align 2, 0
.L080C1DE4: .4byte gUnknown_0201C5B4

	THUMB_FUNC_END func_080C1DD8

	THUMB_FUNC_START func_080C1DE8
func_080C1DE8: @ 0x080C1DE8
	ldr r1, .L080C1DF8  @ gUnknown_0201C5CC
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r1, #3
	ands r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080C1DF8: .4byte gUnknown_0201C5CC

	THUMB_FUNC_END func_080C1DE8

	THUMB_FUNC_START func_080C1DFC
func_080C1DFC: @ 0x080C1DFC
	ldr r1, .L080C1E10  @ gUnknown_0201C5CC
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r1, #3
	ands r1, r2
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080C1E10: .4byte gUnknown_0201C5CC

	THUMB_FUNC_END func_080C1DFC

	THUMB_FUNC_START func_080C1E14
func_080C1E14: @ 0x080C1E14
	ldr r1, .L080C1E28  @ gUnknown_0201C5CC
	adds r0, r0, r1
	ldrb r2, [r0]
	movs r1, #3
	ands r1, r2
	movs r2, #2
	orrs r1, r2
	strb r1, [r0]
	bx lr
	.align 2, 0
.L080C1E28: .4byte gUnknown_0201C5CC

	THUMB_FUNC_END func_080C1E14

	THUMB_FUNC_START func_080C1E2C
func_080C1E2C: @ 0x080C1E2C
	push {lr}
	ldr r0, [r0, #0x14]
	ldrh r1, [r0, #0x2e]
	ldrh r2, [r0, #0x30]
	movs r0, #1
	bl SetBgOffset
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1E2C

	THUMB_FUNC_START func_080C1E40
func_080C1E40: @ 0x080C1E40
	push {lr}
	movs r1, #0x2e
	ldrsh r2, [r0, r1]
	movs r3, #0x30
	ldrsh r1, [r0, r3]
	adds r0, r2, #0
	bl func_080C2488
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1E40

	THUMB_FUNC_START func_080C1E54
func_080C1E54: @ 0x080C1E54
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x32]
	subs r0, #1
	strh r0, [r1, #0x32]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt .L080C1E6A
	adds r0, r1, #0
	bl Proc_Break
.L080C1E6A:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1E54

	THUMB_FUNC_START func_080C1E70
func_080C1E70: @ 0x080C1E70
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	bl func_080C2488
	movs r0, #0
	strh r0, [r4, #0x34]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1E70

	THUMB_FUNC_START func_080C1E8C
func_080C1E8C: @ 0x080C1E8C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldrh r0, [r7, #0x34]
	adds r0, #1
	strh r0, [r7, #0x34]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x36
	ldrsh r1, [r7, r2]
	cmp r0, r1
	bge .L080C1EFE
	movs r1, #0x34
	ldrsh r0, [r7, r1]
	movs r2, #0x36
	ldrsh r1, [r7, r2]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r3, #0
	bl func_08014CA4
	adds r5, r0, #0
	movs r6, #0x80
	lsls r6, r6, #5
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r4, [r7, #0x2a]
	adds r4, r4, r0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r1, #0x30
	ldrsh r0, [r7, r1]
	movs r2, #0x2c
	ldrsh r1, [r7, r2]
	subs r0, r0, r1
	adds r1, r0, #0
	muls r1, r5, r1
	adds r0, r6, #0
	bl DivArm
	ldrh r1, [r7, #0x2c]
	adds r1, r1, r0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl func_080C2488
	b .L080C1F10
.L080C1EFE:
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	movs r2, #0x30
	ldrsh r1, [r7, r2]
	bl func_080C2488
	adds r0, r7, #0
	bl Proc_Break
.L080C1F10:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C1E8C

	THUMB_FUNC_START StartGmRmUpdate2
StartGmRmUpdate2: @ 0x080C1F18
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	beq .L080C1F34
	ldr r0, .L080C1F30  @ gUnknown_08A3EB10
	bl SpawnProcLocking
	b .L080C1F3C
	.align 2, 0
.L080C1F30: .4byte gUnknown_08A3EB10
.L080C1F34:
	ldr r0, .L080C1F58  @ gUnknown_08A3EB10
	movs r1, #3
	bl SpawnProc
.L080C1F3C:
	adds r1, r0, #0
	strh r4, [r1, #0x2a]
	strh r5, [r1, #0x2c]
	strh r6, [r1, #0x2e]
	strh r7, [r1, #0x30]
	ldr r0, [sp, #0x14]
	strh r0, [r1, #0x36]
	ldr r0, [sp, #0x18]
	strh r0, [r1, #0x32]
	adds r0, r1, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080C1F58: .4byte gUnknown_08A3EB10

	THUMB_FUNC_END StartGmRmUpdate2

	THUMB_FUNC_START func_080C1F5C
func_080C1F5C: @ 0x080C1F5C
	push {lr}
	ldr r0, .L080C1F68  @ gUnknown_08A3EB10
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C1F68: .4byte gUnknown_08A3EB10

	THUMB_FUNC_END func_080C1F5C

	THUMB_FUNC_START func_080C1F6C
func_080C1F6C: @ 0x080C1F6C
	push {r4, lr}
	ldr r4, .L080C1FD0  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #4
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #3
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x48]
	bl func_080BB6FC
	bl LoadGMObjGraphics
	bl LoadObjUiGfx
	ldr r0, .L080C1FD4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl EnableBgSync
	bl LoadLegacyUiFrameGraphics
	ldr r2, .L080C1FD8  @ gGmData
	ldrb r1, [r2]
	movs r0, #9
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C1FD0: .4byte gUnknown_08A3D748
.L080C1FD4: .4byte gBg1Tm
.L080C1FD8: .4byte gGmData

	THUMB_FUNC_END func_080C1F6C

	THUMB_FUNC_START func_080C1FDC
func_080C1FDC: @ 0x080C1FDC
	bx lr

	THUMB_FUNC_END func_080C1FDC

	THUMB_FUNC_START func_080C1FE0
func_080C1FE0: @ 0x080C1FE0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, .L080C2040  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r2, [r1]
	movs r0, #0xfb
	ands r0, r2
	strb r0, [r1]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080C2044  @ gUnknown_08A99140
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	ldr r0, .L080C2048  @ gUnknown_08A9E4C4
	movs r1, #0xa0
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, .L080C204C  @ gUnknown_08A9DF74
	ldr r4, .L080C2050  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C2054  @ gBg1Tm
	movs r2, #0xa0
	lsls r2, r2, #7
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #2
	bl EnableBgSync
	ldr r0, .L080C2058  @ gUnknown_08A3EAF0
	adds r1, r5, #0
	bl SpawnProc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2040: .4byte gUnknown_08A3D748
.L080C2044: .4byte gUnknown_08A99140
.L080C2048: .4byte gUnknown_08A9E4C4
.L080C204C: .4byte gUnknown_08A9DF74
.L080C2050: .4byte gBuf
.L080C2054: .4byte gBg1Tm
.L080C2058: .4byte gUnknown_08A3EAF0

	THUMB_FUNC_END func_080C1FE0

	THUMB_FUNC_START func_080C205C
func_080C205C: @ 0x080C205C
	push {lr}
	adds r2, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080C2074
	adds r0, r2, #0
	movs r1, #0
	bl Proc_Goto
.L080C2074:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C205C

	THUMB_FUNC_START func_080C2078
func_080C2078: @ 0x080C2078
	push {lr}
	adds r2, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne .L080C2090
	adds r0, r2, #0
	movs r1, #1
	bl Proc_Goto
.L080C2090:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2078

	THUMB_FUNC_START func_080C2094
func_080C2094: @ 0x080C2094
	push {lr}
	adds r2, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080C20AA
	adds r0, r2, #0
	bl Proc_Break
.L080C20AA:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2094

	THUMB_FUNC_START func_080C20B0
func_080C20B0: @ 0x080C20B0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	ldr r2, .L080C2108  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	strh r4, [r5, #0x2a]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2108: .4byte gDispIo

	THUMB_FUNC_END func_080C20B0

	THUMB_FUNC_START func_080C210C
func_080C210C: @ 0x080C210C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2a]
	adds r0, #1
	strh r0, [r1, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x4a
	bhi .L080C2142
	ldrh r0, [r1, #0x2a]
	lsls r0, r0, #4
	movs r1, #0x4b
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C2148
.L080C2142:
	adds r0, r1, #0
	bl Proc_Break
.L080C2148:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C210C

	THUMB_FUNC_START func_080C214C
func_080C214C: @ 0x080C214C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, r9
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	mov sl, r0
	ldr r0, .L080C2238  @ gUnknown_08A97ED8
	ldr r1, .L080C223C  @ 0x06005000
	bl Decompress
	ldr r4, .L080C2240  @ gUnknown_08A3D748
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r1, [r0, #0x4c]
	adds r1, #0x31
	ldrb r0, [r1]
	movs r2, #4
	mov r8, r2
	movs r2, #0
	mov r9, r2
	mov r2, r8
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x4c]
	adds r0, #0x31
	ldrb r1, [r0]
	movs r5, #3
	orrs r1, r5
	strb r1, [r0]
	adds r0, r4, #0
	bl FindProc
	ldr r0, [r0, #0x48]
	bl func_080BB6FC
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	mov r0, sl
	bl func_080C22FC
	ldr r4, .L080C2244  @ gDispIo
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r0, [r4, #0x10]
	ands r1, r0
	movs r6, #1
	orrs r1, r6
	strb r1, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	orrs r0, r5
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	orrs r0, r5
	strb r0, [r4, #0x18]
	mov r0, r9
	str r0, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	ldrb r0, [r4, #1]
	orrs r0, r6
	movs r1, #2
	orrs r0, r1
	mov r1, r8
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	ldr r2, .L080C2248  @ gGmData
	ldrb r1, [r2]
	movs r0, #9
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	bl LoadGMObjGraphics
	bl LoadObjUiGfx
	mov r0, r9
	mov r2, sl
	strh r0, [r2, #0x2a]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2238: .4byte gUnknown_08A97ED8
.L080C223C: .4byte 0x06005000
.L080C2240: .4byte gUnknown_08A3D748
.L080C2244: .4byte gDispIo
.L080C2248: .4byte gGmData

	THUMB_FUNC_END func_080C214C

	THUMB_FUNC_START func_080C224C
func_080C224C: @ 0x080C224C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2a]
	adds r0, #1
	strh r0, [r1, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x4a
	bhi .L080C2284
	ldrh r0, [r1, #0x2a]
	lsls r0, r0, #4
	movs r1, #0x4b
	bl __divsi3
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C228A
.L080C2284:
	adds r0, r1, #0
	bl Proc_Break
.L080C228A:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C224C

	THUMB_FUNC_START func_080C2290
func_080C2290: @ 0x080C2290
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r5, #2
	ldr r7, .L080C22D4  @ gGmData
	adds r4, r7, #0
	adds r4, #8
.L080C229C:
	movs r1, #0x12
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq .L080C22B4
	ldrb r0, [r7, #0x11]
	ldrb r1, [r4, #0x11]
	cmp r0, r1
	bne .L080C22B4
	ldr r0, [r6, #0x54]
	adds r1, r5, #0
	bl GmMu_RemoveUnit
.L080C22B4:
	adds r4, #4
	adds r5, #1
	cmp r5, #6
	ble .L080C229C
	ldr r0, .L080C22D4  @ gGmData
	ldrb r1, [r0, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C22D8
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #8
	orrs r0, r1
	b .L080C22E2
	.align 2, 0
.L080C22D4: .4byte gGmData
.L080C22D8:
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #0xf7
	ands r0, r1
.L080C22E2:
	strb r0, [r2]
	ldr r0, .L080C22F8  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	movs r1, #0
	bl GmMu_HideUnit
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C22F8: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C2290

	THUMB_FUNC_START func_080C22FC
func_080C22FC: @ 0x080C22FC
	push {lr}
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C2318
	ldr r0, .L080C231C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	movs r1, #0
	bl GmMu_ShowUnit
.L080C2318:
	pop {r0}
	bx r0
	.align 2, 0
.L080C231C: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C22FC

	THUMB_FUNC_START func_080C2320
func_080C2320: @ 0x080C2320
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C238C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x48]
	bl func_080BB708
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	bl func_080C2290
	ldr r2, .L080C2390  @ gDispIo
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	movs r3, #3
	orrs r0, r3
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r3
	strb r0, [r2, #0x18]
	movs r0, #2
	bl GetBgTilemap
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r2, .L080C2394  @ gGmData
	ldrb r0, [r2]
	movs r1, #8
	orrs r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C238C: .4byte gUnknown_08A3D748
.L080C2390: .4byte gDispIo
.L080C2394: .4byte gGmData

	THUMB_FUNC_END func_080C2320

	THUMB_FUNC_START func_080C2398
func_080C2398: @ 0x080C2398
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C2410  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x48]
	bl func_080BB6FC
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	bl func_080C22FC
	ldr r2, .L080C2414  @ gDispIo
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	ands r1, r0
	movs r3, #1
	orrs r1, r3
	strb r1, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r1
	strb r0, [r2, #0x18]
	ldrb r0, [r2, #1]
	orrs r0, r3
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r2, .L080C2418  @ gGmData
	ldrb r1, [r2]
	movs r0, #9
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
	ldr r0, .L080C241C  @ gUnknown_08A3EAF0
	bl EndEachProc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2410: .4byte gUnknown_08A3D748
.L080C2414: .4byte gDispIo
.L080C2418: .4byte gGmData
.L080C241C: .4byte gUnknown_08A3EAF0

	THUMB_FUNC_END func_080C2398

	THUMB_FUNC_START StartGmRm
StartGmRm: @ 0x080C2420
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r1, r3, #0
	cmp r1, #0
	beq .L080C243C
	ldr r0, .L080C2438  @ gUnknown_08A3EB50
	bl SpawnProcLocking
	b .L080C2444
	.align 2, 0
.L080C2438: .4byte gUnknown_08A3EB50
.L080C243C:
	ldr r0, .L080C245C  @ gUnknown_08A3EB50
	movs r1, #3
	bl SpawnProc
.L080C2444:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x29
	movs r0, #0xfb
	ands r0, r4
	strb r0, [r2]
	strh r5, [r1, #0x2e]
	strh r6, [r1, #0x30]
	adds r0, r1, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
.L080C245C: .4byte gUnknown_08A3EB50

	THUMB_FUNC_END StartGmRm

	THUMB_FUNC_START func_080C2460
func_080C2460: @ 0x080C2460
	push {lr}
	ldr r0, .L080C246C  @ gUnknown_08A3EB50
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C246C: .4byte gUnknown_08A3EB50

	THUMB_FUNC_END func_080C2460

	THUMB_FUNC_START func_080C2470
func_080C2470: @ 0x080C2470
	push {lr}
	ldr r0, .L080C2484  @ gUnknown_08A3EB50
	bl FindProc
	cmp r0, #0
	beq .L080C247E
	movs r0, #1
.L080C247E:
	pop {r1}
	bx r1
	.align 2, 0
.L080C2484: .4byte gUnknown_08A3EB50

	THUMB_FUNC_END func_080C2470

	THUMB_FUNC_START func_080C2488
func_080C2488: @ 0x080C2488
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	ldr r0, .L080C24A8  @ gUnknown_08A3EB50
	bl FindProc
	cmp r0, #0
	beq .L080C24A0
	strh r5, [r0, #0x2e]
	strh r4, [r0, #0x30]
.L080C24A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C24A8: .4byte gUnknown_08A3EB50

	THUMB_FUNC_END func_080C2488

	THUMB_FUNC_START GetWMDisplayPosition
GetWMDisplayPosition: @ 0x080C24AC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, .L080C24C4  @ gUnknown_08A3EB50
	bl FindProc
	adds r1, r0, #0
	cmp r1, #0
	bne .L080C24C8
	movs r0, #0
	b .L080C24D2
	.align 2, 0
.L080C24C4: .4byte gUnknown_08A3EB50
.L080C24C8:
	ldrh r0, [r1, #0x2e]
	strh r0, [r4]
	ldrh r0, [r1, #0x30]
	strh r0, [r5]
	movs r0, #1
.L080C24D2:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetWMDisplayPosition

	THUMB_FUNC_START func_080C24D8
func_080C24D8: @ 0x080C24D8
	push {lr}
	ldr r0, .L080C24F4  @ gUnknown_08A3EB50
	bl FindProc
	cmp r0, #0
	beq .L080C24F0
	adds r2, r0, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #4
	orrs r0, r1
	strb r0, [r2]
.L080C24F0:
	pop {r0}
	bx r0
	.align 2, 0
.L080C24F4: .4byte gUnknown_08A3EB50

	THUMB_FUNC_END func_080C24D8

	THUMB_FUNC_START func_080C24F8
func_080C24F8: @ 0x080C24F8
	push {r4, r5, lr}
	ldr r0, .L080C2584  @ gUnknown_08A3EB50
	bl FindProc
	adds r5, r0, #0
	cmp r5, #0
	beq .L080C257E
	ldr r0, .L080C2588  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x48]
	bl func_080BB6FC
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r0, r5, #0
	bl func_080C22FC
	ldr r2, .L080C258C  @ gDispIo
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	strb r0, [r2, #0xc]
	ldrb r0, [r2, #0x10]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	orrs r0, r1
	strb r0, [r2, #0x18]
	ldr r3, .L080C2590  @ gGmData
	ldrb r1, [r3]
	movs r4, #9
	negs r4, r4
	adds r0, r4, #0
	ands r0, r1
	strb r0, [r3]
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	ands r0, r4
	subs r1, #0xc
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, .L080C2594  @ gUnknown_08A3EAF0
	bl EndEachProc
	adds r0, r5, #0
	bl Proc_End
.L080C257E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2584: .4byte gUnknown_08A3EB50
.L080C2588: .4byte gUnknown_08A3D748
.L080C258C: .4byte gDispIo
.L080C2590: .4byte gGmData
.L080C2594: .4byte gUnknown_08A3EAF0

	THUMB_FUNC_END func_080C24F8

	THUMB_FUNC_START func_080C2598
func_080C2598: @ 0x080C2598
	push {lr}
	bl func_080B86A4
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetBlendConfig
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2598

	THUMB_FUNC_START func_080C25B8
func_080C25B8: @ 0x080C25B8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	strh r5, [r4, #0x2a]
	adds r4, #0x29
	movs r0, #1
	strb r0, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C25B8

	THUMB_FUNC_START func_080C25F8
func_080C25F8: @ 0x080C25F8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2c
	bgt .L080C263C
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r1, #0x2d
	movs r2, #0
	bl Spline_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	lsls r1, r1, #4
	bl DivArm
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	b .L080C2652
.L080C263C:
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
.L080C2652:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C25F8

	THUMB_FUNC_START func_080C2658
func_080C2658: @ 0x080C2658
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2c
	bgt .L080C2696
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	movs r1, #0x2d
	movs r2, #0
	bl Spline_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	lsls r1, r1, #4
	bl DivArm
	movs r1, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	b .L080C26B4
.L080C2696:
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080C26B4:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2658

	THUMB_FUNC_START func_080C26BC
func_080C26BC: @ 0x080C26BC
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq .L080C26D0
	ldr r0, .L080C26CC  @ gUnknown_08A3EBE8
	bl SpawnProcLocking
	b .L080C26D8
	.align 2, 0
.L080C26CC: .4byte gUnknown_08A3EBE8
.L080C26D0:
	ldr r0, .L080C26DC  @ gUnknown_08A3EBE8
	movs r1, #3
	bl SpawnProc
.L080C26D8:
	pop {r1}
	bx r1
	.align 2, 0
.L080C26DC: .4byte gUnknown_08A3EBE8

	THUMB_FUNC_END func_080C26BC

	THUMB_FUNC_START func_080C26E0
func_080C26E0: @ 0x080C26E0
	push {lr}
	ldr r0, .L080C26EC  @ gUnknown_08A3EBE8
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C26EC: .4byte gUnknown_08A3EBE8

	THUMB_FUNC_END func_080C26E0

	THUMB_FUNC_START func_080C26F0
func_080C26F0: @ 0x080C26F0
	push {lr}
	ldr r0, .L080C2704  @ gUnknown_08A3EBE8
	bl FindProc
	cmp r0, #0
	beq .L080C26FE
	movs r0, #1
.L080C26FE:
	pop {r1}
	bx r1
	.align 2, 0
.L080C2704: .4byte gUnknown_08A3EBE8

	THUMB_FUNC_END func_080C26F0

	THUMB_FUNC_START func_080C2708
func_080C2708: @ 0x080C2708
	push {lr}
	ldr r0, .L080C2718  @ gUnknown_08A3EBE8
	bl FindProc
	cmp r0, #0
	bne .L080C271C
	movs r0, #0
	b .L080C2724
	.align 2, 0
.L080C2718: .4byte gUnknown_08A3EBE8
.L080C271C:
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
.L080C2724:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C2708

	THUMB_FUNC_START func_080C2728
func_080C2728: @ 0x080C2728
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	bl EndSpriteAnim
	ldr r0, [r4, #0x2c]
	bl EndSpriteAnim
	ldr r0, .L080C274C  @ gUnknown_08A3EC48
	bl func_080034FC
	cmp r0, #1
	bne .L080C2746
	bl func_080C26E0
.L080C2746:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C274C: .4byte gUnknown_08A3EC48

	THUMB_FUNC_END func_080C2728

	THUMB_FUNC_START func_080C2750
func_080C2750: @ 0x080C2750
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	strh r4, [r5, #0x30]
	ldr r0, .L080C27A0  @ gUnknown_08A3EC48
	bl func_080034FC
	cmp r0, #1
	bgt .L080C2798
	ldr r0, .L080C27A4  @ gUnknown_08A9E688
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
.L080C2798:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C27A0: .4byte gUnknown_08A3EC48
.L080C27A4: .4byte gUnknown_08A9E688

	THUMB_FUNC_END func_080C2750

	THUMB_FUNC_START func_080C27A8
func_080C27A8: @ 0x080C27A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	adds r7, r1, #0
	adds r6, r2, #0
	lsls r4, r3, #0x18
	lsrs r4, r4, #0x18
	mov r5, sp
	adds r5, #2
	mov r0, sp
	adds r1, r5, #0
	bl GetWMDisplayPosition
	mov r0, sp
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r7, r7, r0
	movs r1, #0
	ldrsh r0, [r5, r1]
	subs r6, r6, r0
	cmp r4, #0
	beq .L080C27EA
	mov r1, r8
	ldr r0, [r1, #0x34]
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r6
	adds r1, r7, #0
	bl DisplaySpriteAnim
	b .L080C27F6
.L080C27EA:
	mov r1, r8
	ldr r0, [r1, #0x34]
	adds r1, r7, #0
	adds r2, r6, #0
	bl DisplaySpriteAnim
.L080C27F6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C27A8

	THUMB_FUNC_START func_080C2804
func_080C2804: @ 0x080C2804
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x30]
	adds r0, #1
	strh r0, [r6, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x15
	bgt .L080C2880
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	movs r1, #0x16
	movs r2, #2
	bl Spline_800B7E0
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #5
	lsls r1, r4, #4
	adds r0, r5, #0
	bl DivArm
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetBlendConfig
	subs r4, r5, r4
	lsls r1, r4, #3
	adds r1, r1, r4
	lsls r1, r1, #1
	adds r0, r5, #0
	bl DivArm
	ldr r3, .L080C287C  @ gUnknown_08206AF0
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r2, [r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	movs r3, #8
	ldrsh r2, [r1, r3]
	adds r2, r2, r0
	movs r0, #0xa
	ldrsh r3, [r1, r0]
	adds r0, r6, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #1
	bl func_080C27A8
	b .L080C28BA
	.align 2, 0
.L080C287C: .4byte gUnknown_08206AF0
.L080C2880:
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	strh r0, [r6, #0x30]
	ldr r2, .L080C28C0  @ gUnknown_08206AF0
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	movs r1, #8
	ldrsh r2, [r0, r1]
	movs r1, #0xa
	ldrsh r3, [r0, r1]
	adds r0, r6, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0
	bl func_080C27A8
	adds r0, r6, #0
	bl Proc_Break
.L080C28BA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C28C0: .4byte gUnknown_08206AF0

	THUMB_FUNC_END func_080C2804

	THUMB_FUNC_START func_080C28C4
func_080C28C4: @ 0x080C28C4
	push {lr}
	ldr r0, .L080C28D8  @ gUnknown_08A3EC48
	bl func_080034FC
	cmp r0, #1
	bne .L080C28D4
	bl func_080C26E0
.L080C28D4:
	pop {r0}
	bx r0
	.align 2, 0
.L080C28D8: .4byte gUnknown_08A3EC48

	THUMB_FUNC_END func_080C28C4

	THUMB_FUNC_START func_080C28DC
func_080C28DC: @ 0x080C28DC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x30]
	adds r0, #1
	strh r0, [r6, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x15
	bgt .L080C2954
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	movs r1, #0x16
	movs r2, #2
	bl Spline_800B7E0
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #5
	lsls r1, r4, #4
	adds r0, r5, #0
	bl DivArm
	adds r2, r0, #0
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r3, #0
	bl SetBlendConfig
	lsls r1, r4, #3
	adds r1, r1, r4
	lsls r1, r1, #1
	adds r0, r5, #0
	bl DivArm
	ldr r3, .L080C2950  @ gUnknown_08206AF0
	adds r1, r6, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #2
	adds r2, r2, r3
	movs r3, #8
	ldrsh r1, [r2, r3]
	subs r1, r1, r0
	movs r0, #0xa
	ldrsh r2, [r2, r0]
	adds r0, r6, #0
	movs r3, #1
	bl func_080C27A8
	b .L080C295E
	.align 2, 0
.L080C2950: .4byte gUnknown_08206AF0
.L080C2954:
	bl SetBlendNone
	adds r0, r6, #0
	bl Proc_Break
.L080C295E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C28DC

	THUMB_FUNC_START func_080C2964
func_080C2964: @ 0x080C2964
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C2988  @ gUnknown_08A3EC48
	bl func_080034FC
	cmp r0, #1
	bgt .L080C2980
	movs r0, #0
	bl func_080C26BC
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
.L080C2980:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2988: .4byte gUnknown_08A3EC48

	THUMB_FUNC_END func_080C2964

	THUMB_FUNC_START func_080C298C
func_080C298C: @ 0x080C298C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	mov r5, sp
	adds r5, #2
	mov r0, sp
	adds r1, r5, #0
	bl GetWMDisplayPosition
	ldr r6, .L080C29F4  @ gUnknown_08206AF0
	adds r7, r4, #0
	adds r7, #0x2a
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r6
	mov r2, sp
	ldrh r1, [r0, #8]
	ldrh r2, [r2]
	subs r1, r1, r2
	ldrh r2, [r0, #0xa]
	ldrh r0, [r5]
	subs r2, r2, r0
	ldr r0, [r4, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r5, #0x80
	lsls r5, r5, #3
	adds r3, r5, #0
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	orrs r2, r3
	bl DisplaySpriteAnim
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r6
	movs r2, #8
	ldrsh r1, [r0, r2]
	movs r3, #0xa
	ldrsh r2, [r0, r3]
	adds r0, r4, #0
	movs r3, #0
	bl func_080C27A8
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C29F4: .4byte gUnknown_08206AF0

	THUMB_FUNC_END func_080C298C

	THUMB_FUNC_START func_080C29F8
func_080C29F8: @ 0x080C29F8
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C298C
	bl func_080C2708
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080C2A14
	movs r0, #0
	strh r0, [r4, #0x30]
	adds r0, r4, #0
	bl Proc_Break
.L080C2A14:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C29F8

	THUMB_FUNC_START func_080C2A1C
func_080C2A1C: @ 0x080C2A1C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C298C
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080C2A38
	adds r0, r4, #0
	bl Proc_Break
.L080C2A38:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2A1C

	THUMB_FUNC_START func_080C2A40
func_080C2A40: @ 0x080C2A40
	push {r4, r5, lr}
	sub sp, #0x18
	movs r4, #0
	ldr r1, .L080C2A68  @ gUnknown_08A3EC48
	mov r0, sp
	bl BeginFindProc
	add r5, sp, #0xc
.L080C2A50:
	mov r0, sp
	bl NextFindProc
	cmp r0, #0
	beq .L080C2A6C
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	stm r5!, {r0}
	adds r4, #1
	b .L080C2A50
	.align 2, 0
.L080C2A68: .4byte gUnknown_08A3EC48
.L080C2A6C:
	cmp r4, #0
	bne .L080C2A78
	movs r0, #0
	b .L080C2AA4
.L080C2A74:
	adds r0, r3, #0
	b .L080C2AA4
.L080C2A78:
	movs r3, #0
	ldr r5, [sp, #0xc]
.L080C2A7C:
	movs r2, #0
	cmp r2, r4
	bge .L080C2A96
	cmp r3, r5
	beq .L080C2A96
	add r1, sp, #0xc
.L080C2A88:
	adds r1, #4
	adds r2, #1
	cmp r2, r4
	bge .L080C2A96
	ldr r0, [r1]
	cmp r3, r0
	bne .L080C2A88
.L080C2A96:
	cmp r2, r4
	beq .L080C2A74
	adds r3, #1
	cmp r3, #2
	ble .L080C2A7C
	movs r0, #1
	negs r0, r0
.L080C2AA4:
	add sp, #0x18
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C2A40

	THUMB_FUNC_START func_080C2AAC
func_080C2AAC: @ 0x080C2AAC
	push {lr}
	adds r2, r0, #0
	lsls r2, r2, #0xc
	ldr r0, .L080C2ACC  @ 0x06010000
	adds r2, r2, r0
	ldr r3, .L080C2AD0  @ gUnknown_08206AF0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r0, [r0]
	adds r1, r2, #0
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
.L080C2ACC: .4byte 0x06010000
.L080C2AD0: .4byte gUnknown_08206AF0

	THUMB_FUNC_END func_080C2AAC

	THUMB_FUNC_START func_080C2AD4
func_080C2AD4: @ 0x080C2AD4
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r4, r1, #0
	bl func_080C2A40
	mov r8, r0
	cmp r4, #0
	beq .L080C2AF8
	ldr r0, .L080C2AF4  @ gUnknown_08A3EC48
	adds r1, r4, #0
	bl SpawnProcLocking
	b .L080C2B00
	.align 2, 0
.L080C2AF4: .4byte gUnknown_08A3EC48
.L080C2AF8:
	ldr r0, .L080C2B70  @ gUnknown_08A3EC48
	movs r1, #3
	bl SpawnProc
.L080C2B00:
	adds r7, r0, #0
	mov r0, r8
	adds r1, r6, #0
	bl func_080C2AAC
	ldr r1, .L080C2B74  @ gUnknown_08206AF0
	lsls r0, r6, #1
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r1, #4
	adds r0, r0, r1
	ldr r5, [r0]
	adds r0, r5, #0
	movs r1, #0xd
	bl StartSpriteAnim
	str r0, [r7, #0x2c]
	mov r1, r8
	lsls r4, r1, #0xc
	asrs r4, r4, #5
	ldr r2, .L080C2B78  @ 0xFFFF9C00
	adds r1, r2, #0
	movs r2, #0
	mov r9, r2
	orrs r4, r1
	strh r4, [r0, #0x22]
	ldr r0, [r7, #0x2c]
	movs r1, #0
	bl SetSpriteAnimId
	adds r0, r5, #0
	movs r1, #0xd
	bl StartSpriteAnim
	str r0, [r7, #0x34]
	strh r4, [r0, #0x22]
	ldr r0, [r7, #0x34]
	movs r1, #1
	bl SetSpriteAnimId
	adds r0, r7, #0
	adds r0, #0x2a
	strb r6, [r0]
	adds r0, #1
	mov r1, r8
	strb r1, [r0]
	subs r0, #2
	mov r2, r9
	strb r2, [r0]
	adds r0, r7, #0
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080C2B70: .4byte gUnknown_08A3EC48
.L080C2B74: .4byte gUnknown_08206AF0
.L080C2B78: .4byte 0xFFFF9C00

	THUMB_FUNC_END func_080C2AD4

	THUMB_FUNC_START func_080C2B7C
func_080C2B7C: @ 0x080C2B7C
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge .L080C2B9C
	ldr r0, .L080C2B90  @ gUnknown_08A3EC48
	bl EndEachProc
	b .L080C2BB8
	.align 2, 0
.L080C2B90: .4byte gUnknown_08A3EC48
.L080C2B94:
	adds r0, r1, #0
	bl Proc_End
	b .L080C2BB8
.L080C2B9C:
	ldr r1, .L080C2BC0  @ gUnknown_08A3EC48
	mov r0, sp
	bl BeginFindProc
.L080C2BA4:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, r4
	beq .L080C2B94
	cmp r1, #0
	bne .L080C2BA4
.L080C2BB8:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2BC0: .4byte gUnknown_08A3EC48

	THUMB_FUNC_END func_080C2B7C

	THUMB_FUNC_START func_080C2BC4
func_080C2BC4: @ 0x080C2BC4
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge .L080C2BE0
	ldr r0, .L080C2BDC  @ gUnknown_08A3EC48
	bl FindProc
	cmp r0, #0
	beq .L080C2C06
	movs r0, #1
	b .L080C2C06
	.align 2, 0
.L080C2BDC: .4byte gUnknown_08A3EC48
.L080C2BE0:
	ldr r1, .L080C2C00  @ gUnknown_08A3EC48
	mov r0, sp
	bl BeginFindProc
.L080C2BE8:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, r4
	beq .L080C2C04
	cmp r1, #0
	bne .L080C2BE8
	movs r0, #0
	b .L080C2C06
	.align 2, 0
.L080C2C00: .4byte gUnknown_08A3EC48
.L080C2C04:
	movs r0, #1
.L080C2C06:
	add sp, #0xc
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C2BC4

	THUMB_FUNC_START func_080C2C10
func_080C2C10: @ 0x080C2C10
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, .L080C2C3C  @ gUnknown_08A3EC48
	mov r0, sp
	bl BeginFindProc
	movs r5, #1
.L080C2C20:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	cmp r4, #0
	blt .L080C2C40
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, r4
	bne .L080C2C46
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
	b .L080C2C4A
	.align 2, 0
.L080C2C3C: .4byte gUnknown_08A3EC48
.L080C2C40:
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
.L080C2C46:
	cmp r1, #0
	bne .L080C2C20
.L080C2C4A:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2C10

	THUMB_FUNC_START func_080C2C54
func_080C2C54: @ 0x080C2C54
	bx lr

	THUMB_FUNC_END func_080C2C54

	THUMB_FUNC_START func_080C2C58
func_080C2C58: @ 0x080C2C58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C2C7C  @ gUnknown_08AA11B0
	movs r1, #0xa8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r4, #0x29
	movs r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2C7C: .4byte gUnknown_08AA11B0

	THUMB_FUNC_END func_080C2C58

	THUMB_FUNC_START func_080C2C80
func_080C2C80: @ 0x080C2C80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r2, [sp]
	str r3, [sp, #4]
	ldr r4, [sp, #0x2c]
	movs r2, #0
	bl Spline_800B7E0
	mov r8, r0
	movs r0, #0
	mov r9, r0
	adds r7, r4, #0
	movs r1, #0x80
	lsls r1, r1, #5
	mov sl, r1
.L080C2CA6:
	mov r2, r9
	lsls r1, r2, #1
	ldr r2, [sp]
	adds r0, r1, r2
	ldrh r4, [r0]
	adds r2, r4, #0
	movs r0, #0x1f
	ands r2, r0
	adds r6, r4, #0
	movs r0, #0xf8
	lsls r0, r0, #2
	ands r6, r0
	lsrs r6, r6, #5
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r4, r0
	lsrs r4, r4, #0xa
	ldr r0, [sp, #4]
	adds r1, r1, r0
	ldrh r5, [r1]
	adds r0, r5, #0
	movs r1, #0x1f
	ands r0, r1
	subs r0, r0, r2
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	str r2, [sp, #8]
	bl DivArm
	ldr r2, [sp, #8]
	adds r2, r2, r0
	adds r0, r5, #0
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	lsrs r0, r0, #5
	subs r0, r0, r6
	mov r1, r8
	muls r1, r0, r1
	mov r0, sl
	str r2, [sp, #8]
	bl DivArm
	adds r6, r6, r0
	movs r0, #0xf8
	lsls r0, r0, #7
	ands r5, r0
	lsrs r5, r5, #0xa
	subs r5, r5, r4
	mov r1, r8
	muls r1, r5, r1
	mov r0, sl
	bl DivArm
	adds r4, r4, r0
	lsls r4, r4, #0xa
	lsls r6, r6, #5
	adds r4, r4, r6
	ldr r2, [sp, #8]
	adds r4, r4, r2
	strh r4, [r7]
	adds r7, #2
	movs r1, #1
	add r9, r1
	mov r2, r9
	cmp r2, #0xf
	ble .L080C2CA6
	bl EnablePalSync
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2C80

	THUMB_FUNC_START func_080C2D44
func_080C2D44: @ 0x080C2D44
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	bgt .L080C2D80
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	ldr r2, .L080C2D78  @ gUnknown_08AA11B0
	adds r3, r2, #0
	subs r3, #0x20
	ldr r1, .L080C2D7C  @ gPal+0x2A0
	str r1, [sp]
	movs r1, #0x1e
	bl func_080C2C80
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	b .L080C2D94
	.align 2, 0
.L080C2D78: .4byte gUnknown_08AA11B0
.L080C2D7C: .4byte gPal+0x2A0
.L080C2D80:
	ldr r0, .L080C2D9C  @ gUnknown_08AA1190
	ldr r1, .L080C2DA0  @ gPal+0x2A0
	movs r2, #0x10
	bl CpuSet
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
.L080C2D94:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2D9C: .4byte gUnknown_08AA1190
.L080C2DA0: .4byte gPal+0x2A0

	THUMB_FUNC_END func_080C2D44

	THUMB_FUNC_START func_080C2DA4
func_080C2DA4: @ 0x080C2DA4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	bgt .L080C2DD8
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	ldr r2, .L080C2DD0  @ gUnknown_08AA1190
	adds r3, r2, #0
	adds r3, #0x20
	ldr r1, .L080C2DD4  @ gPal+0x2A0
	str r1, [sp]
	movs r1, #0x1e
	bl func_080C2C80
	b .L080C2DF4
	.align 2, 0
.L080C2DD0: .4byte gUnknown_08AA1190
.L080C2DD4: .4byte gPal+0x2A0
.L080C2DD8:
	ldr r0, .L080C2DFC  @ gUnknown_08AA11B0
	ldr r1, .L080C2E00  @ gPal+0x2A0
	movs r2, #0x10
	bl CpuSet
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080C2DF4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2DFC: .4byte gUnknown_08AA11B0
.L080C2E00: .4byte gPal+0x2A0

	THUMB_FUNC_END func_080C2DA4

	THUMB_FUNC_START func_080C2E04
func_080C2E04: @ 0x080C2E04
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq .L080C2E18
	ldr r0, .L080C2E14  @ gUnknown_08A3ECB0
	bl SpawnProcLocking
	b .L080C2E20
	.align 2, 0
.L080C2E14: .4byte gUnknown_08A3ECB0
.L080C2E18:
	ldr r0, .L080C2E24  @ gUnknown_08A3ECB0
	movs r1, #3
	bl SpawnProc
.L080C2E20:
	pop {r1}
	bx r1
	.align 2, 0
.L080C2E24: .4byte gUnknown_08A3ECB0

	THUMB_FUNC_END func_080C2E04

	THUMB_FUNC_START func_080C2E28
func_080C2E28: @ 0x080C2E28
	push {lr}
	ldr r0, .L080C2E34  @ gUnknown_08A3ECB0
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C2E34: .4byte gUnknown_08A3ECB0

	THUMB_FUNC_END func_080C2E28

	THUMB_FUNC_START func_080C2E38
func_080C2E38: @ 0x080C2E38
	push {lr}
	ldr r0, .L080C2E4C  @ gUnknown_08A3ECB0
	bl FindProc
	cmp r0, #0
	beq .L080C2E46
	movs r0, #1
.L080C2E46:
	pop {r1}
	bx r1
	.align 2, 0
.L080C2E4C: .4byte gUnknown_08A3ECB0

	THUMB_FUNC_END func_080C2E38

	THUMB_FUNC_START func_080C2E50
func_080C2E50: @ 0x080C2E50
	push {lr}
	ldr r0, .L080C2E60  @ gUnknown_08A3ECB0
	bl FindProc
	cmp r0, #0
	bne .L080C2E64
	movs r0, #0
	b .L080C2E6C
	.align 2, 0
.L080C2E60: .4byte gUnknown_08A3ECB0
.L080C2E64:
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
.L080C2E6C:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C2E50

	THUMB_FUNC_START func_080C2E70
func_080C2E70: @ 0x080C2E70
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C2EA0  @ gUnknown_08A3ED18
	bl func_080034FC
	cmp r0, #1
	bne .L080C2E82
	bl func_080C2E28
.L080C2E82:
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080C2E9A
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq .L080C2E9A
	bl func_080C13CC
.L080C2E9A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2EA0: .4byte gUnknown_08A3ED18

	THUMB_FUNC_END func_080C2E70

	THUMB_FUNC_START func_080C2EA4
func_080C2EA4: @ 0x080C2EA4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C2EE0  @ gUnknown_08A3ED18
	bl func_080034FC
	cmp r0, #1
	bgt .L080C2ED8
	movs r0, #0
	bl func_080C2E04
	ldr r0, .L080C2EE4  @ gUnknown_08AA114C
	ldr r1, .L080C2EE8  @ 0x060133C0
	bl Decompress
	ldr r0, .L080C2EEC  @ gUnknown_08AA11B0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
.L080C2ED8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2EE0: .4byte gUnknown_08A3ED18
.L080C2EE4: .4byte gUnknown_08AA114C
.L080C2EE8: .4byte 0x060133C0
.L080C2EEC: .4byte gUnknown_08AA11B0

	THUMB_FUNC_END func_080C2EA4

	THUMB_FUNC_START func_080C2EF0
func_080C2EF0: @ 0x080C2EF0
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	mov r4, sp
	adds r4, #6
	add r0, sp, #4
	adds r1, r4, #0
	bl GetWMDisplayPosition
	add r0, sp, #4
	ldrh r0, [r0]
	adds r0, #4
	ldrh r2, [r5, #0x2e]
	subs r2, r2, r0
	ldrh r1, [r4]
	adds r1, #4
	ldrh r0, [r5, #0x30]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	lsls r2, r2, #0x10
	asrs r6, r2, #0x10
	movs r0, #0x80
	lsls r0, r0, #0xe
	adds r2, r2, r0
	movs r0, #0x88
	lsls r0, r0, #0x11
	cmp r2, r0
	bhi .L080C2F70
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #0xe
	adds r0, r0, r1
	lsrs r0, r0, #0x10
	cmp r0, #0xc0
	bhi .L080C2F70
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	movs r1, #4
	cmp r0, #0
	beq .L080C2F4C
	movs r1, #5
.L080C2F4C:
	ldr r3, .L080C2F78  @ gUnknown_08A3ED10
	adds r2, r5, #0
	adds r2, #0x2c
	lsls r0, r1, #0xc
	movs r1, #0xcf
	lsls r1, r1, #1
	orrs r0, r1
	ldrb r2, [r2]
	adds r0, r0, r2
	movs r1, #0xc0
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #0xb
	adds r1, r6, #0
	adds r2, r4, #0
	bl PutSprite
.L080C2F70:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C2F78: .4byte gUnknown_08A3ED10

	THUMB_FUNC_END func_080C2EF0

	THUMB_FUNC_START func_080C2F7C
func_080C2F7C: @ 0x080C2F7C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C2EF0
	bl func_080C2E50
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080C2F94
	adds r0, r4, #0
	bl Proc_Break
.L080C2F94:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2F7C

	THUMB_FUNC_START func_080C2F9C
func_080C2F9C: @ 0x080C2F9C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C2EF0
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080C2FB8
	adds r0, r4, #0
	bl Proc_Break
.L080C2FB8:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C2F9C

	THUMB_FUNC_START func_080C2FC0
func_080C2FC0: @ 0x080C2FC0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	beq .L080C2FE0
	ldr r0, .L080C2FDC  @ gUnknown_08A3ED18
	bl SpawnProcLocking
	b .L080C2FE8
	.align 2, 0
.L080C2FDC: .4byte gUnknown_08A3ED18
.L080C2FE0:
	ldr r0, .L080C3030  @ gUnknown_08A3ED18
	movs r1, #3
	bl SpawnProc
.L080C2FE8:
	adds r4, r0, #0
	adds r0, r4, #0
	adds r0, #0x2b
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	strh r7, [r4, #0x2e]
	mov r0, r8
	strh r0, [r4, #0x30]
	adds r0, r4, #0
	adds r0, #0x2a
	mov r1, sp
	ldrb r1, [r1, #0x18]
	strb r1, [r0]
	movs r0, #2
	ldr r2, [sp, #0x18]
	ands r0, r2
	cmp r0, #0
	beq .L080C3034
	movs r0, #0
	movs r1, #1
	bl func_080C1370
	str r0, [r4, #0x34]
	adds r0, #0x29
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	strb r1, [r0]
	ldr r0, [r4, #0x34]
	strh r7, [r0, #0x2c]
	ldr r0, [r4, #0x34]
	mov r1, r8
	strh r1, [r0, #0x2e]
	b .L080C3036
	.align 2, 0
.L080C3030: .4byte gUnknown_08A3ED18
.L080C3034:
	str r0, [r4, #0x34]
.L080C3036:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C2FC0

	THUMB_FUNC_START func_080C304C
func_080C304C: @ 0x080C304C
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge .L080C306C
	ldr r0, .L080C3060  @ gUnknown_08A3ED18
	bl EndEachProc
	b .L080C3088
	.align 2, 0
.L080C3060: .4byte gUnknown_08A3ED18
.L080C3064:
	adds r0, r1, #0
	bl Proc_End
	b .L080C3088
.L080C306C:
	ldr r1, .L080C3090  @ gUnknown_08A3ED18
	mov r0, sp
	bl BeginFindProc
.L080C3074:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r4
	beq .L080C3064
	cmp r1, #0
	bne .L080C3074
.L080C3088:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3090: .4byte gUnknown_08A3ED18

	THUMB_FUNC_END func_080C304C

	THUMB_FUNC_START func_080C3094
func_080C3094: @ 0x080C3094
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge .L080C30B0
	ldr r0, .L080C30AC  @ gUnknown_08A3ED18
	bl FindProc
	cmp r0, #0
	beq .L080C30D6
	movs r0, #1
	b .L080C30D6
	.align 2, 0
.L080C30AC: .4byte gUnknown_08A3ED18
.L080C30B0:
	ldr r1, .L080C30D0  @ gUnknown_08A3ED18
	mov r0, sp
	bl BeginFindProc
.L080C30B8:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r4
	beq .L080C30D4
	cmp r1, #0
	bne .L080C30B8
	movs r0, #0
	b .L080C30D6
	.align 2, 0
.L080C30D0: .4byte gUnknown_08A3ED18
.L080C30D4:
	movs r0, #1
.L080C30D6:
	add sp, #0xc
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C3094

	THUMB_FUNC_START func_080C30E0
func_080C30E0: @ 0x080C30E0
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, .L080C310C  @ gUnknown_08A3ED18
	mov r0, sp
	bl BeginFindProc
	movs r5, #1
.L080C30F0:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	cmp r4, #0
	blt .L080C3110
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r4
	bne .L080C3116
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
	b .L080C311A
	.align 2, 0
.L080C310C: .4byte gUnknown_08A3ED18
.L080C3110:
	adds r0, r1, #0
	adds r0, #0x29
	strb r5, [r0]
.L080C3116:
	cmp r1, #0
	bne .L080C30F0
.L080C311A:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C30E0

	THUMB_FUNC_START GmAutoMu_OnEnd
GmAutoMu_OnEnd: @ 0x080C3124
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, .L080C3170  @ gUnknown_08A3D748
	adds r0, r5, #0
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	bl func_080BE12C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080C314C
	adds r0, r5, #0
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	bl func_080BE330
.L080C314C:
	bl EndGmUnitFade
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080C315E
	cmp r0, #1
	beq .L080C3178
.L080C315E:
	ldr r1, .L080C3174  @ gGmData
	ldrh r0, [r4, #0x2c]
	lsls r0, r0, #2
	adds r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x34
	ldrb r1, [r1]
	strb r1, [r0, #0x11]
	b .L080C318E
	.align 2, 0
.L080C3170: .4byte gUnknown_08A3D748
.L080C3174: .4byte gGmData
.L080C3178:
	adds r0, r5, #0
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	movs r3, #0x34
	ldrsh r2, [r4, r3]
	movs r5, #0x36
	ldrsh r3, [r4, r5]
	bl GmMu_SetPosition
.L080C318E:
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080C31A2
	ldrh r0, [r4, #0x2c]
	bl HideGmUnit
.L080C31A2:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END GmAutoMu_OnEnd

	THUMB_FUNC_START func_080C31A8
func_080C31A8: @ 0x080C31A8
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x3c]
	subs r0, #1
	strh r0, [r1, #0x3c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt .L080C31BE
	adds r0, r1, #0
	bl Proc_Break
.L080C31BE:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C31A8

	THUMB_FUNC_START func_080C31C4
func_080C31C4: @ 0x080C31C4
	push {lr}
	adds r2, r0, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C31DC
	adds r0, r2, #0
	movs r1, #0
	bl Proc_Goto
.L080C31DC:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C31C4

	THUMB_FUNC_START func_080C31E0
func_080C31E0: @ 0x080C31E0
	push {lr}
	adds r2, r0, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080C31F8
	adds r0, r2, #0
	movs r1, #4
	bl Proc_Goto
.L080C31F8:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C31E0

	THUMB_FUNC_START func_080C31FC
func_080C31FC: @ 0x080C31FC
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #0
	beq .L080C320C
	cmp r1, #1
	beq .L080C3214
.L080C320C:
	movs r1, #1
	bl Proc_Goto
	b .L080C321A
.L080C3214:
	movs r1, #2
	bl Proc_Goto
.L080C321A:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C31FC

	THUMB_FUNC_START func_080C3220
func_080C3220: @ 0x080C3220
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C3240  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	movs r2, #0x1e
	bl GmMu_StartFadeIn
	ldrh r0, [r4, #0x2c]
	bl ShowGmUnit
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3240: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C3220

	THUMB_FUNC_START func_080C3244
func_080C3244: @ 0x080C3244
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C3260  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	movs r2, #0x1e
	bl GmMu_StartFadeOut
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3260: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C3244

	THUMB_FUNC_START func_080C3264
func_080C3264: @ 0x080C3264
	push {r4, lr}
	adds r4, r0, #0
	bl GmUnitFadeExists
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C3278
	adds r0, r4, #0
	bl Proc_Break
.L080C3278:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C3264

	THUMB_FUNC_START func_080C3280
func_080C3280: @ 0x080C3280
	push {lr}
	sub sp, #0x10
	adds r3, r0, #0
	mov r1, sp
	ldrh r0, [r3, #0x2c]
	movs r2, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x38
	ldrb r0, [r0]
	strb r0, [r1, #1]
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	strh r0, [r1, #6]
	adds r0, r3, #0
	adds r0, #0x34
	ldrb r0, [r0]
	strh r0, [r1, #8]
	movs r1, #0x3a
	ldrsh r0, [r3, r1]
	str r0, [sp, #0xc]
	mov r0, sp
	strh r2, [r0, #0xa]
	mov r2, sp
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	strb r0, [r2, #2]
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #3]
	movs r0, #4
	strb r0, [r1, #4]
	ldr r0, .L080C32E0  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r1, sp
	bl func_080BDEB4
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
.L080C32E0: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C3280

	THUMB_FUNC_START func_080C32E4
func_080C32E4: @ 0x080C32E4
	push {lr}
	sub sp, #0x14
	adds r3, r0, #0
	mov r1, sp
	ldrh r0, [r3, #0x2c]
	movs r2, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x39
	ldrb r0, [r0]
	strb r0, [r1, #1]
	adds r0, r3, #0
	adds r0, #0x38
	ldrb r0, [r0]
	strb r0, [r1, #2]
	ldrh r0, [r3, #0x30]
	strh r0, [r1, #6]
	ldrh r0, [r3, #0x32]
	strh r0, [r1, #8]
	ldrh r0, [r3, #0x34]
	strh r0, [r1, #0xa]
	ldrh r0, [r3, #0x36]
	strh r0, [r1, #0xc]
	movs r1, #0x3a
	ldrsh r0, [r3, r1]
	str r0, [sp, #0x10]
	mov r0, sp
	strh r2, [r0, #0xe]
	mov r2, sp
	adds r0, r3, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsrs r0, r0, #2
	movs r1, #1
	ands r0, r1
	strb r0, [r2, #3]
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #4]
	movs r0, #4
	strb r0, [r1, #5]
	ldr r0, .L080C334C  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r1, sp
	bl func_080BDFA4
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
.L080C334C: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C32E4

	THUMB_FUNC_START func_080C3350
func_080C3350: @ 0x080C3350
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C3374  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	ldrh r1, [r4, #0x2c]
	bl func_080BE12C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C336E
	adds r0, r4, #0
	bl Proc_Break
.L080C336E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3374: .4byte gUnknown_08A3D748

	THUMB_FUNC_END func_080C3350

	THUMB_FUNC_START StartGmMuAuto_Paths
StartGmMuAuto_Paths: @ 0x080C3378
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq .L080C3390
	ldr r0, .L080C338C  @ gUnknown_08A3ED60
	bl SpawnProcLocking
	b .L080C3398
	.align 2, 0
.L080C338C: .4byte gUnknown_08A3ED60
.L080C3390:
	ldr r0, .L080C33D0  @ gUnknown_08A3ED60
	movs r1, #3
	bl SpawnProc
.L080C3398:
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r5, [r0]
	ldrb r0, [r4]
	strh r0, [r2, #0x2c]
	ldrb r1, [r4, #1]
	adds r0, r2, #0
	adds r0, #0x38
	strb r1, [r0]
	ldrh r1, [r4, #6]
	subs r0, #8
	strb r1, [r0]
	ldrh r1, [r4, #8]
	adds r0, #4
	strb r1, [r0]
	ldrh r0, [r4, #0xa]
	strh r0, [r2, #0x3c]
	ldr r0, [r4, #0xc]
	strh r0, [r2, #0x3a]
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080C33D0: .4byte gUnknown_08A3ED60

	THUMB_FUNC_END StartGmMuAuto_Paths

	THUMB_FUNC_START StartGmAutoMu_Free
StartGmAutoMu_Free: @ 0x080C33D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	cmp r1, #0
	beq .L080C33EC
	ldr r0, .L080C33E8  @ gUnknown_08A3ED60
	bl SpawnProcLocking
	b .L080C33F4
	.align 2, 0
.L080C33E8: .4byte gUnknown_08A3ED60
.L080C33EC:
	ldr r0, .L080C3438  @ gUnknown_08A3ED60
	movs r1, #3
	bl SpawnProc
.L080C33F4:
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x2a
	strb r5, [r0]
	ldrb r0, [r4]
	strh r0, [r2, #0x2c]
	ldrb r0, [r4, #1]
	adds r1, #0x10
	strb r0, [r1]
	ldrb r1, [r4, #2]
	adds r0, r2, #0
	adds r0, #0x38
	strb r1, [r0]
	ldrh r0, [r4, #6]
	strh r0, [r2, #0x30]
	ldrh r0, [r4, #8]
	strh r0, [r2, #0x32]
	ldrh r0, [r4, #0xa]
	strh r0, [r2, #0x34]
	ldrh r0, [r4, #0xc]
	strh r0, [r2, #0x36]
	ldrh r0, [r4, #0xe]
	strh r0, [r2, #0x3c]
	ldr r0, [r4, #0x10]
	strh r0, [r2, #0x3a]
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
.L080C3438: .4byte gUnknown_08A3ED60

	THUMB_FUNC_END StartGmAutoMu_Free

	THUMB_FUNC_START EndGmAutoMuFor
EndGmAutoMuFor: @ 0x080C343C
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge .L080C345C
	ldr r0, .L080C3450  @ gUnknown_08A3ED60
	bl EndEachProc
	b .L080C3476
	.align 2, 0
.L080C3450: .4byte gUnknown_08A3ED60
.L080C3454:
	adds r0, r1, #0
	bl Proc_End
	b .L080C3476
.L080C345C:
	ldr r1, .L080C3480  @ gUnknown_08A3ED60
	mov r0, sp
	bl BeginFindProc
.L080C3464:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, r4
	beq .L080C3454
	cmp r1, #0
	bne .L080C3464
.L080C3476:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3480: .4byte gUnknown_08A3ED60

	THUMB_FUNC_END EndGmAutoMuFor

	THUMB_FUNC_START GmAutoMuActiveFor
GmAutoMuActiveFor: @ 0x080C3484
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	cmp r4, #0
	bge .L080C34A0
	ldr r0, .L080C349C  @ gUnknown_08A3ED60
	bl FindProc
	cmp r0, #0
	beq .L080C34C6
	movs r0, #1
	b .L080C34C6
	.align 2, 0
.L080C349C: .4byte gUnknown_08A3ED60
.L080C34A0:
	ldr r1, .L080C34C0  @ gUnknown_08A3ED60
	mov r0, sp
	bl BeginFindProc
.L080C34A8:
	mov r0, sp
	bl NextFindProc
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	cmp r0, r4
	beq .L080C34C4
	cmp r1, #0
	bne .L080C34A8
	movs r0, #0
	b .L080C34C6
	.align 2, 0
.L080C34C0: .4byte gUnknown_08A3ED60
.L080C34C4:
	movs r0, #1
.L080C34C6:
	add sp, #0xc
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END GmAutoMuActiveFor

	THUMB_FUNC_START func_080C34D0
func_080C34D0: @ 0x080C34D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	adds r7, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp]
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	movs r2, #0
	cmp r2, r7
	bge .L080C357E
	movs r0, #0x1f
	mov r1, sl
	ands r1, r0
	str r1, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	mov r8, r4
	ldr r1, [sp]
	mov r9, r1
	mov r3, r9
	ands r3, r0
	mov r9, r3
.L080C350A:
	subs r6, r7, r2
	mov r0, r9
	muls r0, r6, r0
	ldr r1, [sp, #8]
	adds r0, r0, r1
	adds r1, r7, #0
	str r2, [sp, #0xc]
	bl __divsi3
	adds r4, r0, #0
	movs r3, #0x1f
	ands r4, r3
	ldr r0, [sp]
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	muls r0, r6, r0
	mov r1, sl
	movs r3, #0xf8
	lsls r3, r3, #2
	ands r1, r3
	ldr r2, [sp, #0xc]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	movs r1, #0xf8
	lsls r1, r1, #2
	ands r0, r1
	adds r4, r4, r0
	movs r5, #0xf8
	lsls r5, r5, #7
	ldr r0, [sp]
	ands r0, r5
	muls r0, r6, r0
	mov r1, sl
	ands r1, r5
	ldr r2, [sp, #0xc]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r1, r7, #0
	bl __divsi3
	ands r0, r5
	adds r4, r4, r0
	mov r3, r8
	strh r4, [r3]
	ldr r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r0, r0, r1
	str r0, [sp, #8]
	movs r3, #2
	add r8, r3
	ldr r2, [sp, #0xc]
	adds r2, #1
	cmp r2, r7
	blt .L080C350A
.L080C357E:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C34D0

	THUMB_FUNC_START func_080C3590
func_080C3590: @ 0x080C3590
	push {r4, r5, r6, lr}
	sub sp, #4
	movs r6, #0
	ldr r5, .L080C35BC  @ 0x06014000
	movs r4, #3
.L080C359A:
	str r6, [sp]
	mov r0, sp
	adds r1, r5, #0
	ldr r2, .L080C35C0  @ 0x010000E0
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge .L080C359A
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C35BC: .4byte 0x06014000
.L080C35C0: .4byte 0x010000E0

	THUMB_FUNC_END func_080C3590

	THUMB_FUNC_START func_080C35C4
func_080C35C4: @ 0x080C35C4
	push {lr}
	adds r3, r0, #0
	adds r3, #0x29
	movs r2, #0
	movs r1, #1
	strb r1, [r3]
	adds r0, #0x2a
	strb r2, [r0]
	bl func_080C3590
	ldr r2, .L080C35E8  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
.L080C35E8: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080C35C4

	THUMB_FUNC_START func_080C35EC
func_080C35EC: @ 0x080C35EC
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080C3618
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne .L080C3608
	movs r2, #0x6f
.L080C3608:
	ldr r3, .L080C3620  @ gUnknown_08A3EE28
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	bl PutSpriteExt
.L080C3618:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080C3620: .4byte gUnknown_08A3EE28

	THUMB_FUNC_END func_080C35EC

	THUMB_FUNC_START func_080C3624
func_080C3624: @ 0x080C3624
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r0, .L080C3658  @ gUnknown_08A3EE44
	bl FindProc
	adds r4, r0, #0
	cmp r4, #0
	beq .L080C3652
	bl func_080C3590
	ldr r2, .L080C365C  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
.L080C3652:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3658: .4byte gUnknown_08A3EE44
.L080C365C: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080C3624

	THUMB_FUNC_START func_080C3660
func_080C3660: @ 0x080C3660
	push {lr}
	ldr r0, .L080C3684  @ gUnknown_08A3EE44
	bl FindProc
	adds r3, r0, #0
	cmp r3, #0
	beq .L080C3680
	ldr r2, .L080C3688  @ gUnknown_0201BE30
	ldrb r1, [r2]
	movs r0, #0xfe
	ands r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x2a
	movs r0, #0
	strb r0, [r1]
.L080C3680:
	pop {r0}
	bx r0
	.align 2, 0
.L080C3684: .4byte gUnknown_08A3EE44
.L080C3688: .4byte gUnknown_0201BE30

	THUMB_FUNC_END func_080C3660

	THUMB_FUNC_START func_080C368C
func_080C368C: @ 0x080C368C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C369C  @ gUnknown_08A3EE44
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080C369C: .4byte gUnknown_08A3EE44

	THUMB_FUNC_END func_080C368C

	THUMB_FUNC_START func_080C36A0
func_080C36A0: @ 0x080C36A0
	push {r4, lr}
	adds r4, r0, #0
	bl EndTalk
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #2
	bl InitSpriteTalk
	bl EnablePalSync
	movs r0, #1
	movs r1, #0xf
	adds r2, r4, #0
	bl StartTalkMsg
	movs r0, #4
	bl Dialogue_SetCharacterDisplayDelay
	movs r0, #0x20
	bl SetTalkFlag
	movs r0, #0x80
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #1
	bl SetTalkFlag
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C36A0

	THUMB_FUNC_START func_080C36E8
func_080C36E8: @ 0x080C36E8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, .L080C375C  @ gGmData
	ldr r1, [r0, #8]
	asrs r1, r1, #8
	ldr r6, [r0, #0xc]
	asrs r6, r6, #8
	adds r0, r4, #0
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	adds r4, #0x30
	ldrb r4, [r4]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r1, r5, #1
	adds r2, r4, #7
	adds r5, #0x1f
	ldr r0, .L080C3760  @ 0x0000012F
	cmp r5, r0
	bhi .L080C3754
	movs r0, #0x20
	negs r0, r0
	cmp r2, r0
	blt .L080C3754
	cmp r2, #0xbf
	bgt .L080C3754
	ldr r0, .L080C3764  @ 0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, .L080C3768  @ Sprite_8x8
	ldr r0, .L080C376C  @ 0x000040F6
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080C3754:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C375C: .4byte gGmData
.L080C3760: .4byte 0x0000012F
.L080C3764: .4byte 0x000001FF
.L080C3768: .4byte Sprite_8x8
.L080C376C: .4byte 0x000040F6

	THUMB_FUNC_END func_080C36E8

	THUMB_FUNC_START func_080C3770
func_080C3770: @ 0x080C3770
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, .L080C37F4  @ gGmData
	bl func_080BD014
	cmp r0, #0
	blt .L080C37EA
	lsls r0, r0, #5
	ldr r1, .L080C37F8  @ gUnknown_082060B0
	adds r0, r0, r1
	movs r2, #0x18
	ldrsh r1, [r0, r2]
	movs r2, #0x1a
	ldrsh r6, [r0, r2]
	adds r0, r4, #0
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	adds r0, r4, #0
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r1, r5, #1
	adds r2, r4, #7
	adds r5, #0x1f
	ldr r0, .L080C37FC  @ 0x0000012F
	cmp r5, r0
	bhi .L080C37EA
	movs r0, #0x20
	negs r0, r0
	cmp r2, r0
	blt .L080C37EA
	cmp r2, #0xbf
	bgt .L080C37EA
	ldr r0, .L080C3800  @ 0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, .L080C3804  @ Sprite_8x8
	ldr r0, .L080C3808  @ 0x000040F7
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080C37EA:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C37F4: .4byte gGmData
.L080C37F8: .4byte gUnknown_082060B0
.L080C37FC: .4byte 0x0000012F
.L080C3800: .4byte 0x000001FF
.L080C3804: .4byte Sprite_8x8
.L080C3808: .4byte 0x000040F7

	THUMB_FUNC_END func_080C3770

	THUMB_FUNC_START func_080C380C
func_080C380C: @ 0x080C380C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, .L080C38A4  @ gGmData
	ldrb r1, [r0, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C389A
	ldr r0, .L080C38A8  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r4, sp
	adds r4, #6
	movs r1, #0
	add r2, sp, #4
	adds r3, r4, #0
	bl func_080BE3A0
	add r0, sp, #4
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0
	ldrsh r6, [r4, r0]
	adds r0, r7, #0
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	adds r0, r7, #0
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r1, r5, #3
	adds r2, r4, #7
	adds r5, #0x1d
	ldr r0, .L080C38AC  @ 0x0000012F
	cmp r5, r0
	bhi .L080C389A
	movs r0, #0x20
	negs r0, r0
	cmp r2, r0
	blt .L080C389A
	cmp r2, #0xbf
	bgt .L080C389A
	ldr r0, .L080C38B0  @ 0x000001FF
	ands r1, r0
	movs r0, #0xff
	ands r2, r0
	ldr r3, .L080C38B4  @ Sprite_8x8
	ldr r0, .L080C38B8  @ 0x000090F4
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080C389A:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C38A4: .4byte gGmData
.L080C38A8: .4byte gUnknown_08A3D748
.L080C38AC: .4byte 0x0000012F
.L080C38B0: .4byte 0x000001FF
.L080C38B4: .4byte Sprite_8x8
.L080C38B8: .4byte 0x000090F4

	THUMB_FUNC_END func_080C380C

	THUMB_FUNC_START func_080C38BC
func_080C38BC: @ 0x080C38BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp, #0x14]
	movs r0, #0
	str r0, [sp, #0x18]
	movs r1, #4
	mov r9, r1
	mov r2, sp
	adds r2, #0x10
	str r2, [sp, #0x1c]
	movs r3, #0x12
	add r3, sp
	mov sl, r3
	add r0, sp, #4
	mov r8, r0
.L080C38E2:
	ldr r1, .L080C3A10  @ gGmData
	mov r2, r9
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C3956
	ldr r0, .L080C3A14  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x54]
	mov r1, r9
	ldr r2, [sp, #0x1c]
	mov r3, sl
	bl func_080BE3A0
	ldr r3, [sp, #0x1c]
	movs r0, #0
	ldrsh r1, [r3, r0]
	mov r2, sl
	movs r3, #0
	ldrsh r6, [r2, r3]
	ldr r0, [sp, #0x14]
	adds r0, #0x2f
	movs r5, #0
	ldrsb r5, [r0, r5]
	lsls r5, r5, #3
	lsls r0, r1, #6
	subs r0, r0, r1
	movs r1, #0xf0
	lsls r1, r1, #1
	bl __divsi3
	adds r5, r5, r0
	ldr r0, [sp, #0x14]
	adds r0, #0x30
	movs r4, #0
	ldrsb r4, [r0, r4]
	lsls r4, r4, #3
	movs r0, #0x2b
	muls r0, r6, r0
	movs r1, #0xa0
	lsls r1, r1, #1
	bl __divsi3
	adds r4, r4, r0
	subs r5, #3
	mov r0, r8
	strh r5, [r0]
	adds r4, #7
	strh r4, [r0, #2]
	movs r1, #4
	add r8, r1
	ldr r2, [sp, #0x18]
	adds r2, #1
	str r2, [sp, #0x18]
.L080C3956:
	movs r3, #1
	add r9, r3
	mov r0, r9
	cmp r0, #6
	ble .L080C38E2
	movs r5, #0
	ldr r1, [sp, #0x18]
	subs r1, #1
	mov r8, r1
	cmp r5, r8
	bge .L080C39B6
.L080C396C:
	adds r6, r5, #1
	ldr r2, [sp, #0x18]
	cmp r6, r2
	bge .L080C39B0
	lsls r0, r5, #2
	mov r4, sp
	adds r4, r4, r0
	adds r4, #4
	lsls r0, r6, #2
	adds r2, r0, #0
	add r2, sp
	adds r2, #4
	ldr r3, [sp, #0x18]
	subs r5, r3, r6
.L080C3988:
	ldrh r0, [r4, #2]
	movs r3, #2
	ldrsh r1, [r2, r3]
	lsls r3, r0, #0x10
	asrs r0, r3, #0x10
	cmp r1, r0
	bge .L080C39A8
	ldrh r7, [r4]
	orrs r7, r3
	ldrh r0, [r2]
	strh r0, [r4]
	ldrh r0, [r2, #2]
	strh r0, [r4, #2]
	strh r7, [r2]
	asrs r0, r7, #0x10
	strh r0, [r2, #2]
.L080C39A8:
	adds r2, #4
	subs r5, #1
	cmp r5, #0
	bne .L080C3988
.L080C39B0:
	adds r5, r6, #0
	cmp r5, r8
	blt .L080C396C
.L080C39B6:
	ldr r0, [sp, #0x18]
	cmp r0, #0
	ble .L080C3A00
	ldr r7, .L080C3A18  @ 0x0000012F
	add r4, sp, #4
	movs r6, #0x20
	negs r6, r6
	adds r5, r0, #0
.L080C39C6:
	ldrh r2, [r4]
	adds r0, r2, #0
	adds r0, #0x20
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r7
	bhi .L080C39F8
	ldrh r3, [r4, #2]
	movs r1, #2
	ldrsh r0, [r4, r1]
	cmp r0, r6
	blt .L080C39F8
	cmp r0, #0xbf
	bgt .L080C39F8
	ldr r0, .L080C3A1C  @ 0x000001FF
	adds r1, r0, #0
	ands r1, r2
	movs r2, #0xff
	ands r2, r3
	ldr r0, .L080C3A20  @ 0x000090F5
	str r0, [sp]
	movs r0, #0
	ldr r3, .L080C3A24  @ Sprite_8x8
	bl PutSpriteExt
.L080C39F8:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bne .L080C39C6
.L080C3A00:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3A10: .4byte gGmData
.L080C3A14: .4byte gUnknown_08A3D748
.L080C3A18: .4byte 0x0000012F
.L080C3A1C: .4byte 0x000001FF
.L080C3A20: .4byte 0x000090F5
.L080C3A24: .4byte Sprite_8x8

	THUMB_FUNC_END func_080C38BC

	THUMB_FUNC_START func_080C3A28
func_080C3A28: @ 0x080C3A28
	push {lr}
	ldr r0, .L080C3A54  @ gUnknown_08A3D748
	bl FindProc
	ldr r0, [r0, #0x50]
	adds r0, #0x34
	ldrb r1, [r0]
	ldr r2, .L080C3A58  @ gPal+0x320
	lsls r1, r1, #1
	ldr r0, .L080C3A5C  @ gUnknown_08AA1930
	adds r0, r1, r0
	ldrh r0, [r0]
	strh r0, [r2, #0x12]
	ldr r0, .L080C3A60  @ gUnknown_08AA1950
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r2, #0xe]
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
.L080C3A54: .4byte gUnknown_08A3D748
.L080C3A58: .4byte gPal+0x320
.L080C3A5C: .4byte gUnknown_08AA1930
.L080C3A60: .4byte gUnknown_08AA1950

	THUMB_FUNC_END func_080C3A28

	THUMB_FUNC_START func_080C3A64
func_080C3A64: @ 0x080C3A64
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C3770
	adds r0, r4, #0
	bl func_080C38BC
	adds r0, r4, #0
	bl func_080C380C
	adds r0, r4, #0
	bl func_080C36E8
	adds r0, r4, #0
	bl func_080C3A28
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C3A64

	THUMB_FUNC_START func_080C3A8C
func_080C3A8C: @ 0x080C3A8C
	push {r4, lr}
	ldr r4, .L080C3AAC  @ gUnknown_0201B458
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	ldr r1, .L080C3AB0  @ gUnknown_08AA18AC
	ldr r2, .L080C3AB4  @ 0x000071E0
	adds r0, r4, #0
	bl TmApplyTsa_thm
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3AAC: .4byte gUnknown_0201B458
.L080C3AB0: .4byte gUnknown_08AA18AC
.L080C3AB4: .4byte 0x000071E0

	THUMB_FUNC_END func_080C3A8C

	THUMB_FUNC_START func_080C3AB8
func_080C3AB8: @ 0x080C3AB8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, .L080C3B38  @ gGmData
	ldrb r1, [r6]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080C3B32
	movs r0, #0
	str r0, [r5, #0x34]
	movs r0, #0x20
	movs r1, #0x20
	movs r2, #0x30
	movs r3, #0x30
	bl func_080C089C
	adds r1, r5, #0
	adds r1, #0x2a
	strb r0, [r1]
	ldr r3, .L080C3B3C  @ gUnknown_08206B70
	movs r2, #0
	ldrsb r2, [r1, r2]
	ldrb r4, [r6]
	lsls r1, r4, #0x1a
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r2, r2, r0
	adds r2, r2, r3
	ldrb r0, [r2]
	movs r1, #3
	ands r1, r0
	lsls r1, r1, #4
	movs r0, #0x31
	negs r0, r0
	ands r0, r4
	orrs r0, r1
	strb r0, [r6]
	adds r0, r5, #0
	bl func_080C3A8C
	adds r1, r5, #0
	adds r1, #0x2d
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	strb r0, [r1]
	adds r2, r5, #0
	adds r2, #0x2e
	ldr r0, [r6, #0xc]
	asrs r0, r0, #8
	strb r0, [r2]
	ldrb r0, [r1]
	subs r1, #2
	strb r0, [r1]
	ldrb r1, [r2]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r0, r5, #0
	bl Proc_Break
.L080C3B32:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3B38: .4byte gGmData
.L080C3B3C: .4byte gUnknown_08206B70

	THUMB_FUNC_END func_080C3AB8

	THUMB_FUNC_START func_080C3B40
func_080C3B40: @ 0x080C3B40
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl func_080C3A64
	adds r2, r4, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	adds r5, r4, #0
	adds r5, #0x2b
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r0, [r1]
	adds r7, r4, #0
	adds r7, #0x2c
	strb r0, [r7]
	ldr r6, .L080C3BDC  @ gGmData
	ldr r0, [r6, #8]
	asrs r0, r0, #8
	strb r0, [r2]
	ldr r0, [r6, #0xc]
	asrs r3, r0, #8
	strb r3, [r1]
	ldrb r1, [r6]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080C3BC6
	movs r0, #1
	ldrsb r0, [r6, r0]
	cmp r0, #0
	ble .L080C3BD4
	ldrb r0, [r2]
	ldrb r5, [r5]
	cmp r0, r5
	bne .L080C3B92
	lsls r0, r3, #0x18
	lsrs r0, r0, #0x18
	ldrb r7, [r7]
	cmp r0, r7
	beq .L080C3BD4
.L080C3B92:
	movs r0, #0x20
	movs r1, #0x20
	movs r2, #0x30
	movs r3, #0x30
	bl func_080C089C
	adds r5, r0, #0
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r5, r0
	beq .L080C3BD4
	ldrb r1, [r6]
	lsls r1, r1, #0x1a
	ldr r3, .L080C3BE0  @ gUnknown_08206B70
	lsrs r2, r1, #0x1e
	lsls r0, r2, #2
	adds r0, r0, r2
	adds r0, r5, r0
	adds r0, r0, r3
	adds r1, r2, #0
	ldrb r0, [r0]
	cmp r1, r0
	beq .L080C3BD4
.L080C3BC6:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080C3BD4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3BDC: .4byte gGmData
.L080C3BE0: .4byte gUnknown_08206B70

	THUMB_FUNC_END func_080C3B40

	THUMB_FUNC_START func_080C3BE4
func_080C3BE4: @ 0x080C3BE4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r6, r1, #0
	ldr r3, .L080C3C14  @ gUnknown_08206B70
	adds r0, #0x2a
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r0, .L080C3C18  @ gGmData
	ldrb r1, [r0]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1e
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r2, r2, r0
	adds r2, r2, r3
	ldrb r5, [r2]
	cmp r5, #1
	beq .L080C3C64
	cmp r5, #1
	bgt .L080C3C1C
	cmp r5, #0
	beq .L080C3C26
	b .L080C3D0C
	.align 2, 0
.L080C3C14: .4byte gUnknown_08206B70
.L080C3C18: .4byte gGmData
.L080C3C1C:
	cmp r5, #2
	beq .L080C3CA4
	cmp r5, #3
	beq .L080C3CD4
	b .L080C3D0C
.L080C3C26:
	ldr r4, .L080C3C5C  @ gBg0Tm
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0x1c
	subs r0, r0, r6
	lsls r0, r0, #1
	ldr r1, .L080C3C60  @ gUnknown_0201B430
	adds r0, r0, r1
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #8
	bl TmCopyRect_thm
	adds r0, r6, #0
	subs r0, #8
	adds r3, r7, #0
	adds r3, #0x2f
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x30
	strb r5, [r0]
	b .L080C3D0C
	.align 2, 0
.L080C3C5C: .4byte gBg0Tm
.L080C3C60: .4byte gUnknown_0201B430
.L080C3C64:
	ldr r4, .L080C3C9C  @ gBg0Tm+0x2C
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080C3CA0  @ gUnknown_0201B458
	movs r1, #0x1e
	subs r1, r1, r6
	lsls r1, r1, #1
	subs r4, #0x2c
	adds r1, r1, r4
	adds r2, r6, #0
	movs r3, #8
	bl TmCopyRect_thm
	movs r0, #0x1e
	subs r0, r0, r6
	adds r3, r7, #0
	adds r3, #0x2f
	movs r1, #0
	strb r0, [r3]
	adds r0, r7, #0
	adds r0, #0x30
	strb r1, [r0]
	b .L080C3D0C
	.align 2, 0
.L080C3C9C: .4byte gBg0Tm+0x2C
.L080C3CA0: .4byte gUnknown_0201B458
.L080C3CA4:
	ldr r4, .L080C3CCC  @ gBg0Tm+0x300
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #0x1c
	subs r0, r0, r6
	lsls r0, r0, #1
	ldr r1, .L080C3CD0  @ gUnknown_0201B430
	adds r0, r0, r1
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #8
	bl TmCopyRect_thm
	adds r0, r6, #0
	subs r0, #8
	b .L080C3CFE
	.align 2, 0
.L080C3CCC: .4byte gBg0Tm+0x300
.L080C3CD0: .4byte gUnknown_0201B430
.L080C3CD4:
	ldr r4, .L080C3D18  @ gBg0Tm+0x32C
	adds r0, r4, #0
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080C3D1C  @ gUnknown_0201B458
	movs r1, #0xcf
	lsls r1, r1, #1
	subs r1, r1, r6
	lsls r1, r1, #1
	ldr r2, .L080C3D20  @ 0xFFFFFCD4
	adds r4, r4, r2
	adds r1, r1, r4
	adds r2, r6, #0
	movs r3, #0xc
	bl TmCopyRect_thm
	movs r0, #0x1e
	subs r0, r0, r6
.L080C3CFE:
	adds r3, r7, #0
	adds r3, #0x2f
	strb r0, [r3]
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0xc
	strb r0, [r1]
.L080C3D0C:
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3D18: .4byte gBg0Tm+0x32C
.L080C3D1C: .4byte gUnknown_0201B458
.L080C3D20: .4byte 0xFFFFFCD4

	THUMB_FUNC_END func_080C3BE4

	THUMB_FUNC_START func_080C3D24
func_080C3D24: @ 0x080C3D24
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L080C3D58  @ gUnknown_08A3EE6C
	ldr r0, [r4, #0x34]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl func_080C3BE4
	adds r0, r4, #0
	bl func_080C3A64
	ldr r0, [r4, #0x34]
	adds r0, #1
	str r0, [r4, #0x34]
	cmp r0, #4
	bne .L080C3D52
	movs r0, #0
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080C3D52:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3D58: .4byte gUnknown_08A3EE6C

	THUMB_FUNC_END func_080C3D24

	THUMB_FUNC_START func_080C3D5C
func_080C3D5C: @ 0x080C3D5C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, .L080C3D98  @ gUnknown_08A3EE70
	ldr r0, [r4, #0x34]
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r4, #0
	bl func_080C3BE4
	adds r0, r4, #0
	bl func_080C3A64
	ldr r0, [r4, #0x34]
	adds r0, #1
	str r0, [r4, #0x34]
	cmp r0, #4
	bne .L080C3D90
	movs r0, #0
	str r0, [r4, #0x34]
	adds r1, r4, #0
	adds r1, #0x29
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080C3D90:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3D98: .4byte gUnknown_08A3EE70

	THUMB_FUNC_END func_080C3D5C

	THUMB_FUNC_START func_080C3D9C
func_080C3D9C: @ 0x080C3D9C
	movs r1, #0
	str r1, [r0, #0x34]
	adds r2, r0, #0
	adds r2, #0x29
	strb r1, [r2]
	adds r0, #0x2a
	strb r1, [r0]
	bx lr

	THUMB_FUNC_END func_080C3D9C

	THUMB_FUNC_START func_080C3DAC
func_080C3DAC: @ 0x080C3DAC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, .L080C3E68  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x36
	ldrb r0, [r2]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0xe
	movs r2, #3
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	ldr r0, .L080C3E6C  @ gUnknown_08AA1280
	ldr r1, .L080C3E70  @ 0x06003C00
	bl Decompress
	ldr r0, .L080C3E74  @ gUnknown_08AA188C
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080C3E78  @ gUnknown_08A97A60
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	ldr r0, .L080C3E7C  @ gUnknown_08A3EE74
	ldr r1, [r4, #0x14]
	bl SpawnProc
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3E68: .4byte gDispIo
.L080C3E6C: .4byte gUnknown_08AA1280
.L080C3E70: .4byte 0x06003C00
.L080C3E74: .4byte gUnknown_08AA188C
.L080C3E78: .4byte gUnknown_08A97A60
.L080C3E7C: .4byte gUnknown_08A3EE74

	THUMB_FUNC_END func_080C3DAC

	THUMB_FUNC_START func_080C3E80
func_080C3E80: @ 0x080C3E80
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C3E90  @ gUnknown_08A3EED4
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080C3E90: .4byte gUnknown_08A3EED4

	THUMB_FUNC_END func_080C3E80

	THUMB_FUNC_START func_080C3E94
func_080C3E94: @ 0x080C3E94
	push {lr}
	ldr r0, .L080C3EB8  @ gUnknown_08A3EE74
	bl EndEachProc
	ldr r0, .L080C3EBC  @ gUnknown_08A3EED4
	bl EndEachProc
	bl SetBlendNone
	ldr r0, .L080C3EC0  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #2
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L080C3EB8: .4byte gUnknown_08A3EE74
.L080C3EBC: .4byte gUnknown_08A3EED4
.L080C3EC0: .4byte gBg1Tm

	THUMB_FUNC_END func_080C3E94

	THUMB_FUNC_START nullsub_71
nullsub_71: @ 0x080C3EC4
	bx lr

	THUMB_FUNC_END nullsub_71

	THUMB_FUNC_START func_080C3EC8
func_080C3EC8: @ 0x080C3EC8
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x2a
	movs r0, #0
	strb r0, [r2]
	adds r2, #1
	strb r0, [r2]
	subs r0, #1
	str r0, [r1, #0x2c]
	bx lr

	THUMB_FUNC_END func_080C3EC8

	THUMB_FUNC_START func_080C3EDC
func_080C3EDC: @ 0x080C3EDC
	push {r4, lr}
	adds r4, r0, #0
	bl IsBgmPlaying
	adds r1, r4, #0
	adds r1, #0x30
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080C3EF6
	bl GetCurrentBgmSong
	str r0, [r4, #0x34]
.L080C3EF6:
	adds r0, r4, #0
	bl StartPrepScreenItemsMenu
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C3EDC

	THUMB_FUNC_START func_080C3F04
func_080C3F04: @ 0x080C3F04
	push {lr}
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080C3F1E
	ldr r0, [r1, #0x34]
	movs r1, #1
	movs r2, #0
	bl StartBgmFadeIn
.L080C3F1E:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C3F04

	THUMB_FUNC_START func_080C3F24
func_080C3F24: @ 0x080C3F24
	push {lr}
	adds r1, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080C3F50
	cmp r0, #1
	bgt .L080C3F3A
	cmp r0, #0
	beq .L080C3F40
	b .L080C3F7A
.L080C3F3A:
	cmp r0, #2
	beq .L080C3F60
	b .L080C3F7A
.L080C3F40:
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	beq .L080C3F70
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
	b .L080C3F82
.L080C3F50:
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	beq .L080C3F70
	adds r0, r1, #0
	movs r1, #2
	bl Proc_Goto
	b .L080C3F82
.L080C3F60:
	ldr r0, [r1, #0x2c]
	cmp r0, #0
	beq .L080C3F70
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Goto
	b .L080C3F82
.L080C3F70:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_Goto
	b .L080C3F82
.L080C3F7A:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_Goto
.L080C3F82:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C3F24

	THUMB_FUNC_START func_080C3F88
func_080C3F88: @ 0x080C3F88
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitByPid
	ldr r1, .L080C3FAC  @ gGmData
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #5
	ldr r2, .L080C3FB0  @ gUnknown_082060B0
	adds r1, r1, r2
	ldr r1, [r1, #0xc]
	adds r2, r4, #0
	bl StartArmoryScreen
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3FAC: .4byte gGmData
.L080C3FB0: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080C3F88

	THUMB_FUNC_START func_080C3FB4
func_080C3FB4: @ 0x080C3FB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitByPid
	ldr r1, .L080C3FD8  @ gGmData
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #5
	ldr r2, .L080C3FDC  @ gUnknown_082060B0
	adds r1, r1, r2
	ldr r1, [r1, #0x10]
	adds r2, r4, #0
	bl StartVendorScreen
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C3FD8: .4byte gGmData
.L080C3FDC: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080C3FB4

	THUMB_FUNC_START func_080C3FE0
func_080C3FE0: @ 0x080C3FE0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl GetUnitByPid
	ldr r1, .L080C4004  @ gGmData
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #5
	ldr r2, .L080C4008  @ gUnknown_082060B0
	adds r1, r1, r2
	ldr r1, [r1, #0x14]
	adds r2, r4, #0
	bl func_080B4220
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4004: .4byte gGmData
.L080C4008: .4byte gUnknown_082060B0

	THUMB_FUNC_END func_080C3FE0

	THUMB_FUNC_START func_080C400C
func_080C400C: @ 0x080C400C
	push {r4, lr}
	adds r4, r0, #0
	cmp r1, #0
	beq .L080C4020
	ldr r0, .L080C401C  @ gUnknown_08A3EEEC
	bl SpawnProcLocking
	b .L080C4028
	.align 2, 0
.L080C401C: .4byte gUnknown_08A3EEEC
.L080C4020:
	ldr r0, .L080C4034  @ gUnknown_08A3EEEC
	movs r1, #3
	bl SpawnProc
.L080C4028:
	adds r1, r0, #0
	adds r1, #0x29
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080C4034: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_END func_080C400C

	THUMB_FUNC_START func_080C4038
func_080C4038: @ 0x080C4038
	push {lr}
	ldr r0, .L080C4044  @ gUnknown_08A3EEEC
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C4044: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_END func_080C4038

	THUMB_FUNC_START GM_GetBaseMenuProc
GM_GetBaseMenuProc: @ 0x080C4048
	push {lr}
	ldr r0, .L080C4054  @ gUnknown_08A3EEEC
	bl FindProc
	pop {r1}
	bx r1
	.align 2, 0
.L080C4054: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_END GM_GetBaseMenuProc

	THUMB_FUNC_START func_080C4058
func_080C4058: @ 0x080C4058
	push {lr}
	ldr r0, .L080C406C  @ gUnknown_08A3EEEC
	bl FindProc
	cmp r0, #0
	beq .L080C4066
	movs r0, #1
.L080C4066:
	pop {r1}
	bx r1
	.align 2, 0
.L080C406C: .4byte gUnknown_08A3EEEC

	THUMB_FUNC_END func_080C4058

	THUMB_FUNC_START func_080C4070
func_080C4070: @ 0x080C4070
	push {lr}
	bl GM_GetBaseMenuProc
	cmp r0, #0
	bne .L080C407E
	movs r0, #0
	b .L080C4082
.L080C407E:
	adds r0, #0x29
	ldrb r0, [r0]
.L080C4082:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C4070

	THUMB_FUNC_START func_080C4088
func_080C4088: @ 0x080C4088
	push {lr}
	bl GM_GetBaseMenuProc
	cmp r0, #0
	bne .L080C4096
	movs r0, #0
	b .L080C4098
.L080C4096:
	ldr r0, [r0, #0x2c]
.L080C4098:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080C4088

	THUMB_FUNC_START func_080C409C
func_080C409C: @ 0x080C409C
	push {r4, lr}
	adds r4, r0, #0
	bl GM_GetBaseMenuProc
	cmp r0, #0
	beq .L080C40AA
	str r4, [r0, #0x2c]
.L080C40AA:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C409C

	THUMB_FUNC_START func_080C40B0
func_080C40B0: @ 0x080C40B0
	movs r1, #0
	strh r1, [r0, #0x30]
	strh r1, [r0, #0x34]
	bx lr

	THUMB_FUNC_END func_080C40B0

	THUMB_FUNC_START func_080C40B8
func_080C40B8: @ 0x080C40B8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x77
	bgt .L080C4100
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	movs r0, #0x77
	subs r0, r0, r1
	movs r1, #0x78
	movs r2, #1
	bl Spline_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	subs r1, r0, r1
	lsls r1, r1, #4
	bl DivArm
	adds r2, r0, #0
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C4124
.L080C4100:
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	ldr r0, [r4, #0x2c]
	ldrh r0, [r0, #0x30]
	strh r0, [r4, #0x34]
	ldr r1, [r4, #0x14]
	adds r1, #0x29
	ldrb r0, [r1]
	movs r2, #1
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080C4124:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C40B8

	THUMB_FUNC_START func_080C412C
func_080C412C: @ 0x080C412C
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x34]
	subs r0, #1
	strh r0, [r2, #0x34]
	ldr r1, [r2, #0x14]
	ldr r0, [r1, #0x30]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	ldr r3, [r1, #0x40]
	cmp r0, r3
	blt .L080C4150
	str r3, [r1, #0x30]
	adds r0, r2, #0
	bl Proc_Break
	b .L080C4152
.L080C4150:
	str r0, [r1, #0x30]
.L080C4152:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C412C

	THUMB_FUNC_START func_080C4158
func_080C4158: @ 0x080C4158
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x34]
	subs r0, #1
	strh r0, [r3, #0x34]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt .L080C417E
	movs r0, #0
	strh r0, [r3, #0x30]
	ldr r1, [r3, #0x14]
	adds r1, #0x29
	ldrb r2, [r1]
	subs r0, #2
	ands r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
.L080C417E:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C4158

	THUMB_FUNC_START func_080C4184
func_080C4184: @ 0x080C4184
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x77
	bgt .L080C41CA
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	movs r0, #0x77
	subs r0, r0, r1
	movs r1, #0x78
	movs r2, #1
	bl Spline_800B84C
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	subs r1, r0, r1
	lsls r1, r1, #4
	bl DivArm
	lsls r1, r0, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C41DC
.L080C41CA:
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	adds r0, r4, #0
	bl Proc_Break
.L080C41DC:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C4184

	THUMB_FUNC_START func_080C41E4
func_080C41E4: @ 0x080C41E4
	ldr r1, [r0, #0x14]
	adds r1, #0x29
	ldrb r2, [r1]
	movs r0, #5
	negs r0, r0
	ands r0, r2
	strb r0, [r1]
	bx lr

	THUMB_FUNC_END func_080C41E4

	THUMB_FUNC_START func_080C41F4
func_080C41F4: @ 0x080C41F4
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	ldr r0, .L080C420C  @ gUnknown_08AA2044
	adds r1, r2, #0
	bl SpawnProc
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C420C: .4byte gUnknown_08AA2044

	THUMB_FUNC_END func_080C41F4

	THUMB_FUNC_START func_080C4210
func_080C4210: @ 0x080C4210
	push {lr}
	ldr r0, .L080C4224  @ gUnknown_08AA2044
	bl FindProc
	cmp r0, #0
	beq .L080C421E
	movs r0, #1
.L080C421E:
	pop {r1}
	bx r1
	.align 2, 0
.L080C4224: .4byte gUnknown_08AA2044

	THUMB_FUNC_END func_080C4210

	THUMB_FUNC_START func_080C4228
func_080C4228: @ 0x080C4228
	push {lr}
	ldr r0, .L080C4234  @ gUnknown_08AA2044
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C4234: .4byte gUnknown_08AA2044

	THUMB_FUNC_END func_080C4228

	THUMB_FUNC_START func_080C4238
func_080C4238: @ 0x080C4238
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r3, r0, #0
	ldr r0, [r3, #0x30]
	asrs r0, r0, #8
	cmp r0, #0
	bge .L080C4250
	adds r0, #0xff
.L080C4250:
	asrs r4, r0, #8
	adds r1, r3, #0
	adds r1, #0x35
	strb r4, [r1]
	ldr r0, [r3, #0x30]
	asrs r2, r0, #8
	adds r0, r2, #0
	mov r8, r1
	cmp r2, #0
	bge .L080C4266
	adds r0, #0xff
.L080C4266:
	asrs r0, r0, #8
	lsls r0, r0, #8
	subs r0, r2, r0
	cmp r0, #0xf
	bgt .L080C4272
	b .L080C4398
.L080C4272:
	adds r0, r3, #0
	adds r0, #0x34
	lsls r1, r4, #0x18
	asrs r1, r1, #0x18
	movs r2, #0
	ldrsb r2, [r0, r2]
	str r0, [sp, #4]
	cmp r1, r2
	bne .L080C4286
	b .L080C4398
.L080C4286:
	adds r4, r3, #0
	adds r4, #0x29
	ldrb r1, [r4]
	movs r0, #4
	ands r0, r1
	ldr r1, .L080C42D4  @ gUnknown_08206E24
	mov r9, r1
	ldr r2, .L080C42D8  @ gUnknown_08206FDC
	mov sl, r2
	cmp r0, #0
	bne .L080C4302
	mov r1, r8
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r2, r0, #1
	cmp r2, #0x16
	bhi .L080C4302
	adds r6, r3, #0
	adds r6, #0x48
	mov r7, r9
	subs r7, #0x14
	ldr r0, .L080C42DC  @ gPlaySt
	mov ip, r0
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r1, r0, #2
.L080C42BA:
	adds r5, r1, r7
	ldr r0, [r5, #4]
	cmp r0, #0
	beq .L080C42FA
	movs r0, #0
	strb r0, [r6]
	mov r1, ip
	ldrb r0, [r1, #0x1b]
	cmp r0, #2
	bne .L080C42E0
	ldr r0, [r5, #4]
	b .L080C42E2
	.align 2, 0
.L080C42D4: .4byte gUnknown_08206E24
.L080C42D8: .4byte gUnknown_08206FDC
.L080C42DC: .4byte gPlaySt
.L080C42E0:
	ldr r0, [r5, #8]
.L080C42E2:
	str r0, [r3, #0x44]
	ldr r0, [r5, #0xc]
	str r0, [r3, #0x3c]
	ldr r0, [r5, #0x10]
	str r0, [r3, #0x40]
	ldrb r1, [r4]
	movs r0, #4
	orrs r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4]
	b .L080C4302
.L080C42FA:
	adds r1, #0x14
	adds r2, #1
	cmp r2, #0x16
	bls .L080C42BA
.L080C4302:
	mov r2, r8
	movs r0, #0
	ldrsb r0, [r2, r0]
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	mov r2, r9
	adds r5, r1, r2
	adds r2, r0, #1
	movs r0, #1
	ands r2, r0
	ldr r0, [r5]
	cmp r0, #0
	beq .L080C435C
	ldr r0, [r0]
	lsls r1, r2, #2
	add r1, sl
	ldr r4, [r1]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl Decompress
	ldr r0, [r5]
	ldr r0, [r0, #4]
	ldr r5, .L080C4354  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L080C4358  @ gUnknown_0201C5D4
	lsrs r4, r4, #5
	movs r1, #0xe0
	lsls r1, r1, #7
	adds r4, r4, r1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r1, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	b .L080C4390
	.align 2, 0
.L080C4354: .4byte gBuf
.L080C4358: .4byte gUnknown_0201C5D4
.L080C435C:
	movs r0, #1
	negs r0, r0
	str r0, [sp]
	ldr r1, .L080C43A8  @ gUnknown_08206FDC
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r4, [r0]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	ldr r2, .L080C43AC  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	lsrs r4, r4, #5
	movs r1, #0xe0
	lsls r1, r1, #7
	adds r0, r4, r1
	ldr r3, .L080C43B0  @ gUnknown_0201C5D4
	movs r2, #0x80
	lsls r2, r2, #3
.L080C4386:
	strh r0, [r3]
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bne .L080C4386
.L080C4390:
	mov r2, r8
	ldrb r0, [r2]
	ldr r1, [sp, #4]
	strb r0, [r1]
.L080C4398:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C43A8: .4byte gUnknown_08206FDC
.L080C43AC: .4byte 0x01000008
.L080C43B0: .4byte gUnknown_0201C5D4

	THUMB_FUNC_END func_080C4238

	THUMB_FUNC_START func_080C43B4
func_080C43B4: @ 0x080C43B4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	asrs r5, r0, #8
	adds r0, r5, #0
	cmp r5, #0
	bge .L080C43C4
	adds r0, #0xf
.L080C43C4:
	asrs r0, r0, #4
	strh r0, [r4, #0x38]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x36
	ldrsh r1, [r4, r2]
	cmp r0, r1
	beq .L080C440C
	adds r1, r5, #0
	adds r1, #0xf0
	adds r0, r1, #0
	cmp r1, #0
	bge .L080C43E2
	ldr r2, .L080C4454  @ 0x000001EF
	adds r0, r5, r2
.L080C43E2:
	asrs r0, r0, #8
	lsls r0, r0, #8
	subs r0, r1, r0
	adds r1, r0, #0
	cmp r0, #0
	bge .L080C43F0
	adds r1, r0, #7
.L080C43F0:
	asrs r1, r1, #3
	lsls r1, r1, #6
	ldr r0, .L080C4458  @ gUnknown_0201C5D4
	adds r0, r1, r0
	ldr r2, .L080C445C  @ gBg0Tm
	adds r1, r1, r2
	movs r2, #0x20
	bl CpuFastSet
	movs r0, #1
	bl EnableBgSync
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x36]
.L080C440C:
	bl func_080C4210
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080C443A
	ldr r0, [r4, #0x2c]
	ldr r2, [r4, #0x30]
	cmp r0, r2
	beq .L080C443A
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq .L080C443A
	ldr r0, [r4, #0x3c]
	cmp r2, r0
	blt .L080C443A
	ldr r1, [r4, #0x44]
	adds r0, r4, #0
	bl func_080C41F4
.L080C443A:
	movs r0, #0xff
	ands r5, r0
	movs r0, #0
	movs r1, #0
	adds r2, r5, #0
	bl SetBgOffset
	ldr r0, [r4, #0x30]
	str r0, [r4, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4454: .4byte 0x000001EF
.L080C4458: .4byte gUnknown_0201C5D4
.L080C445C: .4byte gBg0Tm

	THUMB_FUNC_END func_080C43B4

	THUMB_FUNC_START func_080C4460
func_080C4460: @ 0x080C4460
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0
	bl SetupBackgrounds
	ldr r3, .L080C45B8  @ gDispIo
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	ldrb r2, [r3, #0xc]
	adds r1, #0xd
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	str r4, [sp, #4]
	ldr r1, .L080C45BC  @ gPal
	ldr r2, .L080C45C0  @ 0x01000100
	add r0, sp, #4
	bl CpuFastSet
	ldr r0, .L080C45C4  @ gUnknown_08A40FC8
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	add r0, sp, #8
	ldr r1, .L080C45C8  @ gUnknown_08206FDC
	ldr r4, [r1]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	ldr r2, .L080C45CC  @ 0x01000008
	bl CpuFastSet
	lsrs r4, r4, #5
	movs r0, #0xe0
	lsls r0, r0, #7
	adds r4, r4, r0
	ldr r0, .L080C45D0  @ gBg0Tm
	movs r5, #0x80
	lsls r5, r5, #3
.L080C452A:
	strh r4, [r0]
	adds r0, #2
	subs r5, #1
	cmp r5, #0
	bne .L080C452A
	ldr r0, .L080C45D4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C45D8  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C45DC  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	bl EnablePalSync
	ldr r2, .L080C45B8  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r4, #3
	negs r4, r4
	ands r0, r4
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r2, #1]
	bl SetBlendNone
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r2, r6, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	ands r0, r4
	strb r0, [r2]
	str r5, [r6, #0x2c]
	str r5, [r6, #0x30]
	adds r1, r6, #0
	adds r1, #0x34
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x35
	strb r5, [r0]
	strh r5, [r6, #0x36]
	strh r5, [r6, #0x38]
	adds r0, #0x15
	strh r5, [r0]
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C45B8: .4byte gDispIo
.L080C45BC: .4byte gPal
.L080C45C0: .4byte 0x01000100
.L080C45C4: .4byte gUnknown_08A40FC8
.L080C45C8: .4byte gUnknown_08206FDC
.L080C45CC: .4byte 0x01000008
.L080C45D0: .4byte gBg0Tm
.L080C45D4: .4byte gBg1Tm
.L080C45D8: .4byte gBg2Tm
.L080C45DC: .4byte gBg3Tm

	THUMB_FUNC_END func_080C4460

	THUMB_FUNC_START func_080C45E0
func_080C45E0: @ 0x080C45E0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq .L080C465A
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r5, r0, #0
	cmp r1, #9
	bgt .L080C461C
	ldr r0, [r4, #0x44]
	movs r1, #0
	ldrsb r1, [r5, r1]
	lsls r2, r1, #2
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r1, #0xb
	ldr r2, .L080C4618  @ 0x06008000
	adds r1, r1, r2
	bl Decompress
	b .L080C463E
	.align 2, 0
.L080C4618: .4byte 0x06008000
.L080C461C:
	ldr r0, .L080C4660  @ gBg3Tm
	ldr r1, [r4, #0x44]
	ldr r1, [r1, #0x28]
	movs r2, #0
	bl TmApplyTsa_thm
	movs r0, #8
	bl EnableBgSync
	ldr r0, [r4, #0x44]
	ldr r0, [r0, #0x2c]
	movs r1, #0
	movs r2, #0xc0
	bl ApplyPaletteExt
	bl EnablePalSync
.L080C463E:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0xa
	ble .L080C465A
	adds r2, r4, #0
	adds r2, #0x29
	ldrb r1, [r2]
	movs r0, #3
	negs r0, r0
	ands r0, r1
	strb r0, [r2]
.L080C465A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4660: .4byte gBg3Tm

	THUMB_FUNC_END func_080C45E0

	THUMB_FUNC_START func_080C4664
func_080C4664: @ 0x080C4664
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C4688  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C468C
	bl func_080A4CB4
	cmp r0, #0
	beq .L080C468C
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	b .L080C46DA
	.align 2, 0
.L080C4688: .4byte gKeySt
.L080C468C:
	ldr r1, [r4, #0x30]
	ldr r0, .L080C46E0  @ 0x000037FF
	cmp r1, r0
	bgt .L080C469C
	movs r2, #0xf0
	lsls r2, r2, #3
	adds r0, r1, r2
	str r0, [r4, #0x30]
.L080C469C:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080C46B0
	ldr r0, [r4, #0x30]
	adds r0, #0x80
	str r0, [r4, #0x30]
.L080C46B0:
	adds r0, r4, #0
	bl func_080C4238
	adds r0, r4, #0
	bl func_080C43B4
	adds r0, r4, #0
	bl func_080C45E0
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x14
	bls .L080C46DA
	adds r1, r4, #0
	adds r1, #0x4a
	movs r0, #0xf0
	strh r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
.L080C46DA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C46E0: .4byte 0x000037FF

	THUMB_FUNC_END func_080C4664

	THUMB_FUNC_START func_080C46E4
func_080C46E4: @ 0x080C46E4
	push {lr}
	bl func_080C4228
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C46E4

	THUMB_FUNC_START func_080C46F0
func_080C46F0: @ 0x080C46F0
	push {lr}
	ldr r2, .L080C4730  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl SetBlendNone
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080C4734  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
.L080C4730: .4byte gDispIo
.L080C4734: .4byte gBg3Tm

	THUMB_FUNC_END func_080C46F0

	THUMB_FUNC_START func_080C4738
func_080C4738: @ 0x080C4738
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, .L080C4798  @ gUnknown_08206FB4
	ldr r5, [r0]
	ldr r0, [r5]
	ldr r1, .L080C479C  @ gUnknown_08206FDC
	ldr r4, [r1]
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl Decompress
	ldr r0, [r5, #4]
	ldr r5, .L080C47A0  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L080C47A4  @ gBg0Tm
	lsrs r4, r4, #5
	movs r1, #0xe0
	lsls r1, r1, #7
	adds r4, r4, r1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r1, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	ldr r1, .L080C47A8  @ gPal
	movs r0, #0
	strh r0, [r1]
	ldr r0, .L080C47AC  @ gUnknown_08A40FC8
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	adds r6, #0x4a
	movs r0, #0xf0
	strh r0, [r6]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4798: .4byte gUnknown_08206FB4
.L080C479C: .4byte gUnknown_08206FDC
.L080C47A0: .4byte gBuf
.L080C47A4: .4byte gBg0Tm
.L080C47A8: .4byte gPal
.L080C47AC: .4byte gUnknown_08A40FC8

	THUMB_FUNC_END func_080C4738

	THUMB_FUNC_START func_080C47B0
func_080C47B0: @ 0x080C47B0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	ldr r0, .L080C47F0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C47D8
	bl func_080A4CB4
	cmp r0, #0
	beq .L080C47D8
	movs r0, #0
	strh r0, [r4]
.L080C47D8:
	adds r0, r5, #0
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bgt .L080C47EA
	adds r0, r5, #0
	bl Proc_Break
.L080C47EA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C47F0: .4byte gKeySt

	THUMB_FUNC_END func_080C47B0

	THUMB_FUNC_START func_080C47F4
func_080C47F4: @ 0x080C47F4
	push {lr}
	sub sp, #4
	ldr r0, .L080C4860  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C4864  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C4868  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r2, .L080C486C  @ 0x01006000
	mov r0, sp
	bl CpuFastSet
	ldr r2, .L080C4870  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	ldr r0, .L080C4874  @ gBg3Tm
	movs r1, #1
	negs r1, r1
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080C4860: .4byte gBg0Tm
.L080C4864: .4byte gBg1Tm
.L080C4868: .4byte gBg2Tm
.L080C486C: .4byte 0x01006000
.L080C4870: .4byte gDispIo
.L080C4874: .4byte gBg3Tm

	THUMB_FUNC_END func_080C47F4

	THUMB_FUNC_START func_080C4878
func_080C4878: @ 0x080C4878
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C4888  @ gUnknown_08AA2084
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080C4888: .4byte gUnknown_08AA2084

	THUMB_FUNC_END func_080C4878

	THUMB_FUNC_START func_080C488C
func_080C488C: @ 0x080C488C
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	bl GetBgChrOffset
	adds r4, r0, #0
	ldr r0, .L080C48DC  @ gUnknown_08B12DB4
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r4, r2
	bl Decompress
	movs r0, #0
	str r0, [sp]
	ldr r0, .L080C48E0  @ 0x06005000
	adds r4, r4, r0
	ldr r5, .L080C48E4  @ 0x01000008
	mov r0, sp
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	movs r0, #1
	lsls r0, r6
	bl EnableBgSync
	ldr r0, .L080C48E8  @ gUnknown_08A708A7
	str r0, [sp, #4]
	add r0, sp, #4
	ldr r1, .L080C48EC  @ gPal+0x1C0
	adds r2, r5, #0
	bl CpuFastSet
	bl EnablePalSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C48DC: .4byte gUnknown_08B12DB4
.L080C48E0: .4byte 0x06005000
.L080C48E4: .4byte 0x01000008
.L080C48E8: .4byte gUnknown_08A708A7
.L080C48EC: .4byte gPal+0x1C0

	THUMB_FUNC_END func_080C488C

	THUMB_FUNC_START func_080C48F0
func_080C48F0: @ 0x080C48F0
	push {r4, lr}
	bl GetBgTilemap
	adds r2, r0, #0
	movs r4, #0xf0
	lsls r4, r4, #8
	movs r1, #0
	ldr r3, .L080C4914  @ 0x0000027F
.L080C4900:
	adds r0, r4, r1
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, r3
	ble .L080C4900
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4914: .4byte 0x0000027F

	THUMB_FUNC_END func_080C48F0

	THUMB_FUNC_START func_080C4918
func_080C4918: @ 0x080C4918
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C4940  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq .L080C4938
	movs r0, #1
	bl FadeBgmOut
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
.L080C4938:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4940: .4byte gKeySt

	THUMB_FUNC_END func_080C4918

	THUMB_FUNC_START func_080C4944
func_080C4944: @ 0x080C4944
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, .L080C4A28  @ gUnknown_08AA213C
	bl SetupBackgrounds
	ldr r3, .L080C4A2C  @ gDispIo
	ldrb r1, [r3]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r4, #1
	orrs r0, r4
	strb r0, [r3]
	ldrb r0, [r3, #0xc]
	movs r2, #3
	orrs r0, r2
	strb r0, [r3, #0xc]
	ldrb r0, [r3, #0x10]
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r1, [r3, #0x14]
	movs r0, #4
	negs r0, r0
	ands r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r0, r2
	strb r0, [r3, #0x18]
	ldrb r1, [r3, #1]
	orrs r1, r4
	movs r0, #3
	negs r0, r0
	ands r1, r0
	subs r0, #2
	ands r1, r0
	subs r0, #4
	ands r1, r0
	movs r0, #0x10
	orrs r1, r0
	ldrb r2, [r3, #0x15]
	movs r0, #0x3f
	ands r0, r2
	movs r2, #0x40
	orrs r0, r2
	movs r2, #0x21
	negs r2, r2
	ands r0, r2
	strb r0, [r3, #0x15]
	ands r1, r2
	movs r0, #0x41
	negs r0, r0
	ands r1, r0
	movs r0, #0x7f
	ands r1, r0
	strb r1, [r3, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r4, .L080C4A30  @ gUnknown_08B17B64
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C4A34  @ gUnknown_08B18ED4
	movs r1, #0
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, .L080C4A38  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	movs r0, #3
	movs r1, #0
	bl StartBgm
	adds r0, r6, #0
	adds r0, #0x29
	strb r5, [r0]
	movs r0, #0x3c
	strh r0, [r6, #0x2a]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4A28: .4byte gUnknown_08AA213C
.L080C4A2C: .4byte gDispIo
.L080C4A30: .4byte gUnknown_08B17B64
.L080C4A34: .4byte gUnknown_08B18ED4
.L080C4A38: .4byte gBg2Tm

	THUMB_FUNC_END func_080C4944

	THUMB_FUNC_START func_080C4A3C
func_080C4A3C: @ 0x080C4A3C
	push {lr}
	adds r1, r0, #0
	adds r1, #0x4c
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x4e
	strh r2, [r0]
	ldr r0, .L080C4A7C  @ gBg2Tm
	ldr r1, .L080C4A80  @ gUnknown_08B18D68
	movs r3, #5
	bl func_0800154C
	movs r0, #4
	bl EnableBgSync
	ldr r2, .L080C4A84  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
.L080C4A7C: .4byte gBg2Tm
.L080C4A80: .4byte gUnknown_08B18D68
.L080C4A84: .4byte gDispIo

	THUMB_FUNC_END func_080C4A3C

	THUMB_FUNC_START func_080C4A88
func_080C4A88: @ 0x080C4A88
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	mov r5, r9
	adds r5, #0x4c
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0x1d
	bgt .L080C4AC2
	adds r3, r0, #0
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #5
	movs r1, #4
	movs r2, #0x32
	bl Interpolate
	adds r7, r0, #0
	movs r0, #0
	ldrsh r3, [r5, r0]
	str r4, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x10
	b .L080C4AE6
.L080C4AC2:
	movs r1, #0
	ldrsh r3, [r5, r1]
	subs r3, #0x1e
	movs r4, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x32
	movs r2, #0x64
	bl Interpolate
	adds r7, r0, #0
	movs r2, #0
	ldrsh r3, [r5, r2]
	subs r3, #0x1e
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
.L080C4AE6:
	bl Interpolate
	mov sl, r0
	cmp r7, #0x31
	ble .L080C4AF4
	movs r0, #0x64
	subs r7, r0, r7
.L080C4AF4:
	mov r6, r9
	adds r6, #0x4c
	movs r0, #0
	ldrsh r3, [r6, r0]
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd6
	bl Interpolate
	adds r5, r0, #0
	movs r1, #0
	ldrsh r3, [r6, r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0x80
	bl Interpolate
	adds r4, r0, #0
	movs r2, #0x4e
	add r2, r9
	mov r8, r2
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r7, #2
	adds r0, r0, r7
	adds r0, #0x80
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #2
	movs r2, #0
	movs r3, #0
	bl func_080ADDFC
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #2
	adds r1, r2, #0
	bl func_080ADE90
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	movs r0, #0x48
	str r0, [sp]
	movs r0, #2
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x50
	bl func_080ADEE0
	mov r1, r8
	ldrh r0, [r1]
	subs r0, #0x40
	strh r0, [r1]
	mov r2, sl
	lsls r1, r2, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	ble .L080C4B90
	mov r0, r9
	bl Proc_Break
.L080C4B90:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C4A88

	THUMB_FUNC_START func_080C4BA0
func_080C4BA0: @ 0x080C4BA0
	ldr r2, .L080C4BB0  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #5
	negs r0, r0
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
.L080C4BB0: .4byte gDispIo

	THUMB_FUNC_END func_080C4BA0

	THUMB_FUNC_START func_080C4BB4
func_080C4BB4: @ 0x080C4BB4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r3
	cmp r2, #0
	ble .L080C4C2E
	mov r9, r1
	adds r7, r0, #0
	mov r8, r2
.L080C4BCA:
	ldrh r6, [r7]
	adds r0, r6, #0
	movs r1, #0x1f
	ands r0, r1
	mov r1, sl
	muls r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #5
	bl DivArm
	adds r5, r0, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	asrs r0, r6, #5
	movs r1, #0x1f
	ands r0, r1
	mov r1, sl
	muls r1, r0, r1
	movs r0, #0x80
	lsls r0, r0, #5
	bl DivArm
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	asrs r6, r6, #0xa
	movs r0, #0x1f
	ands r6, r0
	mov r1, sl
	muls r1, r6, r1
	movs r0, #0x80
	lsls r0, r0, #5
	bl DivArm
	lsls r0, r0, #0x10
	lsls r4, r4, #5
	adds r5, r5, r4
	lsrs r0, r0, #6
	adds r5, r5, r0
	mov r1, r9
	strh r5, [r1]
	movs r0, #2
	add r9, r0
	adds r7, #2
	movs r1, #1
	negs r1, r1
	add r8, r1
	mov r0, r8
	cmp r0, #0
	bne .L080C4BCA
.L080C4C2E:
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C4BB4

	THUMB_FUNC_START func_080C4C3C
func_080C4C3C: @ 0x080C4C3C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	subs r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt .L080C4C52
	adds r0, r4, #0
	bl Proc_Break
.L080C4C52:
	adds r0, r4, #0
	bl func_080C4918
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C4C3C

	THUMB_FUNC_START func_080C4C60
func_080C4C60: @ 0x080C4C60
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, .L080C4CBC  @ gUnknown_08206FE4
	adds r6, r5, #0
	adds r6, #0x29
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, .L080C4CC0  @ 0x06001000
	bl Decompress
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r4, #4
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r4, .L080C4CC4  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C4CC8  @ gBg0Tm
	movs r2, #0xc2
	lsls r2, r2, #6
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r2, .L080C4CCC  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
	strh r0, [r5, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4CBC: .4byte gUnknown_08206FE4
.L080C4CC0: .4byte 0x06001000
.L080C4CC4: .4byte gBuf
.L080C4CC8: .4byte gBg0Tm
.L080C4CCC: .4byte gDispIo

	THUMB_FUNC_END func_080C4C60

	THUMB_FUNC_START func_080C4CD0
func_080C4CD0: @ 0x080C4CD0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, .L080C4D38  @ gUnknown_08206FE4
	adds r6, r5, #0
	adds r6, #0x29
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, .L080C4D3C  @ 0x06001000
	bl Decompress
	movs r1, #0
	ldrsb r1, [r6, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r4, #4
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r4, .L080C4D40  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C4D44  @ gBg0Tm
	movs r2, #0xc2
	lsls r2, r2, #6
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080C4D48  @ gBg1Tm
	ldr r2, .L080C4D4C  @ 0x0000E080
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r2, .L080C4D50  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	bl EnableBgSync
	movs r0, #0
	strh r0, [r5, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4D38: .4byte gUnknown_08206FE4
.L080C4D3C: .4byte 0x06001000
.L080C4D40: .4byte gBuf
.L080C4D44: .4byte gBg0Tm
.L080C4D48: .4byte gBg1Tm
.L080C4D4C: .4byte 0x0000E080
.L080C4D50: .4byte gDispIo

	THUMB_FUNC_END func_080C4CD0

	THUMB_FUNC_START func_080C4D54
func_080C4D54: @ 0x080C4D54
	push {r4, r5, lr}
	ldr r5, .L080C4D90  @ gUnknown_08206FE4
	lsls r4, r0, #1
	adds r4, r4, r0
	lsls r4, r4, #2
	adds r0, r4, r5
	ldr r0, [r0]
	ldr r1, .L080C4D94  @ 0x06005000
	bl Decompress
	adds r5, #4
	adds r4, r4, r5
	ldr r0, [r4]
	ldr r4, .L080C4D98  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C4D9C  @ gBg0Tm
	movs r2, #0xca
	lsls r2, r2, #6
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4D90: .4byte gUnknown_08206FE4
.L080C4D94: .4byte 0x06005000
.L080C4D98: .4byte gBuf
.L080C4D9C: .4byte gBg0Tm

	THUMB_FUNC_END func_080C4D54

	THUMB_FUNC_START func_080C4DA0
func_080C4DA0: @ 0x080C4DA0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt .L080C4DD4
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl Spline_800B7E0
	adds r3, r0, #0
	ldr r0, .L080C4DCC  @ gUnknown_08AA239C
	ldr r1, .L080C4DD0  @ gPal+0x60
	movs r2, #0x10
	bl func_080C4BB4
	b .L080C4E00
	.align 2, 0
.L080C4DCC: .4byte gUnknown_08AA239C
.L080C4DD0: .4byte gPal+0x60
.L080C4DD4:
	ldr r0, .L080C4E10  @ gUnknown_08AA239C
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	bl Proc_Break
	ldr r2, .L080C4E14  @ gUnknown_08206FE4
	adds r0, r4, #0
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x2a]
	movs r0, #0
	strh r0, [r4, #0x2c]
.L080C4E00:
	bl EnablePalSync
	adds r0, r4, #0
	bl func_080C4918
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4E10: .4byte gUnknown_08AA239C
.L080C4E14: .4byte gUnknown_08206FE4

	THUMB_FUNC_END func_080C4DA0

	THUMB_FUNC_START func_080C4E18
func_080C4E18: @ 0x080C4E18
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt .L080C4E54
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl Spline_800B7E0
	movs r3, #0x80
	lsls r3, r3, #5
	subs r3, r3, r0
	ldr r0, .L080C4E4C  @ gUnknown_08AA239C
	ldr r1, .L080C4E50  @ gPal+0x60
	movs r2, #0x10
	bl func_080C4BB4
	b .L080C4EAE
	.align 2, 0
.L080C4E4C: .4byte gUnknown_08AA239C
.L080C4E50: .4byte gPal+0x60
.L080C4E54:
	str r5, [sp]
	ldr r1, .L080C4E80  @ gPal+0x60
	ldr r2, .L080C4E84  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	strh r5, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bgt .L080C4E88
	movs r0, #0x50
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C4EAE
	.align 2, 0
.L080C4E80: .4byte gPal+0x60
.L080C4E84: .4byte 0x01000008
.L080C4E88:
	ldr r2, .L080C4EC0  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
.L080C4EAE:
	bl EnablePalSync
	adds r0, r4, #0
	bl func_080C4918
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4EC0: .4byte gDispIo

	THUMB_FUNC_END func_080C4E18

	THUMB_FUNC_START func_080C4EC4
func_080C4EC4: @ 0x080C4EC4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt .L080C4F00
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl Spline_800B7E0
	movs r3, #0x80
	lsls r3, r3, #5
	subs r3, r3, r0
	ldr r0, .L080C4EF8  @ gUnknown_08AA239C
	ldr r1, .L080C4EFC  @ gPal+0x60
	movs r2, #0x10
	bl func_080C4BB4
	b .L080C4F40
	.align 2, 0
.L080C4EF8: .4byte gUnknown_08AA239C
.L080C4EFC: .4byte gPal+0x60
.L080C4F00:
	str r5, [sp]
	ldr r1, .L080C4F54  @ gPal+0x60
	ldr r2, .L080C4F58  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	strh r5, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x5a
	strh r0, [r4, #0x2a]
	ldr r2, .L080C4F5C  @ gDispIo
	ldrb r1, [r2, #1]
	subs r0, #0x5c
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	bl Proc_Break
.L080C4F40:
	bl EnablePalSync
	adds r0, r4, #0
	bl func_080C4918
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C4F54: .4byte gPal+0x60
.L080C4F58: .4byte 0x01000008
.L080C4F5C: .4byte gDispIo

	THUMB_FUNC_END func_080C4EC4

	THUMB_FUNC_START func_080C4F60
func_080C4F60: @ 0x080C4F60
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt .L080C4FA6
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	movs r1, #0x50
	movs r2, #0
	bl Spline_800B7E0
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	lsls r1, r1, #4
	bl DivArm
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C5006
.L080C4FA6:
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	adds r4, r5, #0
	adds r4, #0x29
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #4
	bgt .L080C4FE4
	adds r0, r5, #0
	bl Proc_Break
	ldr r2, .L080C4FE0  @ gUnknown_08206FE4
	movs r1, #0
	ldrsb r1, [r4, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r5, #0x2a]
	movs r0, #0
	strh r0, [r5, #0x2c]
	b .L080C5006
	.align 2, 0
.L080C4FE0: .4byte gUnknown_08206FE4
.L080C4FE4:
	ldr r2, .L080C5018  @ gUnknown_08206FE4
	movs r1, #0
	ldrsb r1, [r4, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r5, #0x2a]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
.L080C5006:
	bl EnablePalSync
	adds r0, r5, #0
	bl func_080C4918
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5018: .4byte gUnknown_08206FE4

	THUMB_FUNC_END func_080C4F60

	THUMB_FUNC_START func_080C501C
func_080C501C: @ 0x080C501C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x4f
	bgt .L080C5064
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x50
	movs r2, #0
	bl Spline_800B7E0
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #5
	subs r1, r0, r1
	lsls r1, r1, #4
	bl DivArm
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r1, #0x10
	subs r1, r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #0
	bl SetBlendConfig
	b .L080C508E
.L080C5064:
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0x50
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	adds r0, r4, #0
	bl func_080C4918
.L080C508E:
	bl EnablePalSync
	adds r0, r4, #0
	bl func_080C4918
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C501C

	THUMB_FUNC_START func_080C50A0
func_080C50A0: @ 0x080C50A0
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r0, #1
	bl func_080C488C
	movs r4, #0
	str r4, [sp]
	ldr r1, .L080C50F0  @ gPal+0x1E0
	ldr r2, .L080C50F4  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	movs r0, #1
	bl func_080C48F0
	movs r0, #2
	bl EnableBgSync
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, .L080C50F8  @ 0x06005000
	ldr r2, .L080C50FC  @ 0x01000400
	bl CpuFastSet
	ldr r0, .L080C5100  @ gBg0Tm
	movs r1, #0xa0
	lsls r1, r1, #2
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	movs r0, #0x16
	strh r0, [r5, #0x2a]
	strh r4, [r5, #0x2c]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C50F0: .4byte gPal+0x1E0
.L080C50F4: .4byte 0x01000008
.L080C50F8: .4byte 0x06005000
.L080C50FC: .4byte 0x01000400
.L080C5100: .4byte gBg0Tm

	THUMB_FUNC_END func_080C50A0

	THUMB_FUNC_START func_080C5104
func_080C5104: @ 0x080C5104
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne .L080C512C
	ldr r2, .L080C5154  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
.L080C512C:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2d
	bgt .L080C5160
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x2e
	movs r2, #0
	bl Spline_800B7E0
	adds r3, r0, #0
	ldr r0, .L080C5158  @ gUnknown_08B1756C
	ldr r1, .L080C515C  @ gPal+0x1E0
	movs r2, #0x10
	bl func_080C4BB4
	b .L080C518E
	.align 2, 0
.L080C5154: .4byte gDispIo
.L080C5158: .4byte gUnknown_08B1756C
.L080C515C: .4byte gPal+0x1E0
.L080C5160:
	ldr r0, .L080C51A0  @ gUnknown_08B1756C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	bl Proc_Break
	ldr r2, .L080C51A4  @ gUnknown_08206FE4
	adds r0, r4, #0
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r0, [r0]
	strh r0, [r4, #0x2a]
	movs r0, #0
	strh r0, [r4, #0x2c]
.L080C518E:
	bl EnablePalSync
	adds r0, r4, #0
	bl func_080C4918
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C51A0: .4byte gUnknown_08B1756C
.L080C51A4: .4byte gUnknown_08206FE4

	THUMB_FUNC_END func_080C5104

	THUMB_FUNC_START func_080C51A8
func_080C51A8: @ 0x080C51A8
	push {lr}
	movs r0, #2
	bl func_080C4D54
	ldr r0, .L080C51C4  @ gUnknown_08AA239C
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
.L080C51C4: .4byte gUnknown_08AA239C

	THUMB_FUNC_END func_080C51A8

	THUMB_FUNC_START func_080C51C8
func_080C51C8: @ 0x080C51C8
	push {r4, r5, lr}
	ldr r1, .L080C5210  @ gUnknown_0300308C
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #4]
	strh r0, [r1, #8]
	strh r0, [r1, #0xc]
	ldr r4, .L080C5214  @ gUnknown_08AA21A4
	movs r5, #0
.L080C51DA:
	ldrh r1, [r4]
	adds r4, #2
	adds r0, r5, #0
	bl SetBgChrOffset
	ldrh r1, [r4]
	adds r4, #2
	adds r0, r5, #0
	bl SetBgTilemapOffset
	ldrh r1, [r4]
	adds r4, #2
	adds r0, r5, #0
	bl SetBgScreenSize
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r5, #1
	cmp r5, #3
	ble .L080C51DA
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5210: .4byte gUnknown_0300308C
.L080C5214: .4byte gUnknown_08AA21A4

	THUMB_FUNC_END func_080C51C8

	THUMB_FUNC_START func_080C5218
func_080C5218: @ 0x080C5218
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	mov r8, r0
	bl func_080C51C8
	ldr r4, .L080C5318  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r6, #1
	orrs r0, r6
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	ands r2, r0
	strb r2, [r4, #0x18]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetA
	str r5, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, .L080C531C  @ 0x0000FFFD
	movs r0, #1
	adds r1, r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	bl func_080C488C
	movs r0, #3
	bl func_080C48F0
	ldr r0, .L080C5320  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C5324  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xe
	bl EnableBgSync
	movs r0, #2
	bl func_080C4D54
	ldrb r0, [r4, #1]
	orrs r0, r6
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r4, #1]
	mov r1, r8
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	movs r0, #0x78
	mov r1, r8
	strh r0, [r1, #0x2a]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5318: .4byte gDispIo
.L080C531C: .4byte 0x0000FFFD
.L080C5320: .4byte gBg1Tm
.L080C5324: .4byte gBg2Tm

	THUMB_FUNC_END func_080C5218

	THUMB_FUNC_START func_080C5328
func_080C5328: @ 0x080C5328
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r2, .L080C5368  @ 0x01000008
	mov r0, sp
	bl CpuFastSet
	movs r0, #2
	bl EnableBgSync
	ldr r2, .L080C536C  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	negs r1, r1
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
.L080C5368: .4byte 0x01000008
.L080C536C: .4byte gDispIo

	THUMB_FUNC_END func_080C5328

	THUMB_FUNC_START func_080C5370
func_080C5370: @ 0x080C5370
	push {lr}
	movs r1, #0
	strh r1, [r0, #0x2c]
	ldr r0, .L080C5384  @ gPal
	ldr r1, .L080C5388  @ gUnknown_0201CDD4
	movs r2, #0x80
	bl CpuFastSet
	pop {r0}
	bx r0
	.align 2, 0
.L080C5384: .4byte gPal
.L080C5388: .4byte gUnknown_0201CDD4

	THUMB_FUNC_END func_080C5370

	THUMB_FUNC_START func_080C538C
func_080C538C: @ 0x080C538C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	bgt .L080C53CC
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	movs r1, #0x3c
	movs r2, #0
	bl Spline_800B7E0
	movs r3, #0x80
	lsls r3, r3, #5
	subs r3, r3, r0
	ldr r0, .L080C53C4  @ gUnknown_0201CDD4
	ldr r1, .L080C53C8  @ gPal
	movs r2, #0x80
	lsls r2, r2, #2
	bl func_080C4BB4
	b .L080C53E4
	.align 2, 0
.L080C53C4: .4byte gUnknown_0201CDD4
.L080C53C8: .4byte gPal
.L080C53CC:
	str r5, [sp]
	ldr r1, .L080C53F8  @ gPal
	ldr r2, .L080C53FC  @ 0x01000080
	mov r0, sp
	bl CpuFastSet
	strh r5, [r4, #0x2c]
	movs r0, #0x3c
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
.L080C53E4:
	bl EnablePalSync
	adds r0, r4, #0
	bl func_080C4918
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C53F8: .4byte gPal
.L080C53FC: .4byte 0x01000080

	THUMB_FUNC_END func_080C538C

	THUMB_FUNC_START func_080C5400
func_080C5400: @ 0x080C5400
	push {lr}
	movs r0, #4
	bl FadeBgmOut
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C5400

	THUMB_FUNC_START func_080C540C
func_080C540C: @ 0x080C540C
	push {lr}
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C540C

	THUMB_FUNC_START func_080C541C
func_080C541C: @ 0x080C541C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C542C  @ gUnknown_08AA21BC
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
.L080C542C: .4byte gUnknown_08AA21BC

	THUMB_FUNC_END func_080C541C

	THUMB_FUNC_START func_080C5430
func_080C5430: @ 0x080C5430
	adds r1, r0, #0
	adds r1, #0x4c
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x52
	strh r2, [r0]
	bx lr

	THUMB_FUNC_END func_080C5430

	THUMB_FUNC_START func_080C5440
func_080C5440: @ 0x080C5440
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, .L080C54F4  @ gUnknown_08AA6774
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0
	movs r1, #4
	movs r2, #0x30
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r3, .L080C54F8  @ Sprite_16x16
	ldr r0, .L080C54FC  @ 0x0000201E
	str r0, [sp]
	movs r0, #0
	movs r1, #0xdc
	movs r2, #0x29
	bl PutSpriteExt
	ldr r2, .L080C5500  @ 0x00000435
	movs r0, #0x82
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #2
	movs r1, #4
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r3, .L080C5504  @ gUnknown_08AA6794
	ldr r0, .L080C5508  @ 0x000031A0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x55
	bl PutSpriteExt
	ldr r3, .L080C550C  @ gUnknown_08AA67E0
	movs r0, #0xdd
	lsls r0, r0, #1
	str r0, [sp]
	movs r0, #1
	movs r1, #0x48
	movs r2, #0x7c
	bl PutSpriteExt
	ldr r3, .L080C5510  @ gUnknown_08AA67AE
	movs r0, #0x8c
	lsls r0, r0, #5
	str r0, [sp]
	movs r0, #1
	movs r1, #4
	movs r2, #0x94
	bl PutSpriteExt
	adds r0, r5, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r1, #3
	bl DivRem
	cmp r0, #0
	bne .L080C54D0
	adds r2, r5, #0
	adds r2, #0x52
	ldrh r0, [r2]
	adds r0, #1
	movs r1, #0x1f
	ands r0, r1
	strh r0, [r2]
.L080C54D0:
	adds r1, r5, #0
	adds r1, #0x52
	ldrh r2, [r1]
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq .L080C5518
	movs r0, #0xf
	ands r0, r2
	lsls r0, r0, #1
	ldr r1, .L080C5514  @ gUnknown_08AADBE8
	adds r0, r0, r1
	movs r1, #0x84
	lsls r1, r1, #2
	movs r2, #2
	bl ApplyPaletteExt
	b .L080C5532
	.align 2, 0
.L080C54F4: .4byte gUnknown_08AA6774
.L080C54F8: .4byte Sprite_16x16
.L080C54FC: .4byte 0x0000201E
.L080C5500: .4byte 0x00000435
.L080C5504: .4byte gUnknown_08AA6794
.L080C5508: .4byte 0x000031A0
.L080C550C: .4byte gUnknown_08AA67E0
.L080C5510: .4byte gUnknown_08AA67AE
.L080C5514: .4byte gUnknown_08AADBE8
.L080C5518:
	ldrh r1, [r1]
	movs r0, #0x1f
	subs r0, r0, r1
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, .L080C5544  @ gUnknown_08AADBE8
	adds r0, r0, r1
	movs r1, #0x84
	lsls r1, r1, #2
	movs r2, #2
	bl ApplyPaletteExt
.L080C5532:
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5544: .4byte gUnknown_08AADBE8

	THUMB_FUNC_END func_080C5440

	THUMB_FUNC_START func_080C5548
func_080C5548: @ 0x080C5548
	push {lr}
	sub sp, #0x14
	movs r1, #0xf0
	lsls r1, r1, #7
	str r1, [sp]
	movs r1, #0xa0
	lsls r1, r1, #7
	str r1, [sp, #4]
	mov r2, sp
	movs r3, #0
	movs r1, #0x78
	strh r1, [r2, #8]
	movs r1, #0x50
	strh r1, [r2, #0xa]
	mov r1, sp
	strh r0, [r1, #0xc]
	strh r0, [r1, #0xe]
	mov r0, sp
	strh r3, [r0, #0x10]
	ldr r1, .L080C557C  @ gUnknown_030030C8
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
.L080C557C: .4byte gUnknown_030030C8

	THUMB_FUNC_END func_080C5548

	THUMB_FUNC_START func_080C5580
func_080C5580: @ 0x080C5580
	push {lr}
	adds r2, r0, #0
	ldr r0, .L080C55A0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq .L080C559A
	ldr r0, [r2, #0x14]
	movs r1, #3
	bl Proc_Goto
.L080C559A:
	pop {r0}
	bx r0
	.align 2, 0
.L080C55A0: .4byte gKeySt

	THUMB_FUNC_END func_080C5580

	THUMB_FUNC_START func_080C55A4
func_080C55A4: @ 0x080C55A4
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C55B4  @ gUnknown_08AA6814
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C55B4: .4byte gUnknown_08AA6814

	THUMB_FUNC_END func_080C55A4

	THUMB_FUNC_START func_080C55B8
func_080C55B8: @ 0x080C55B8
	push {lr}
	ldr r0, .L080C55C8  @ gUnknown_08AA6814
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080C55C8: .4byte gUnknown_08AA6814

	THUMB_FUNC_END func_080C55B8

	THUMB_FUNC_START func_080C55CC
func_080C55CC: @ 0x080C55CC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, .L080C56E0  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	strb r0, [r4, #1]
	movs r1, #0
	bl SetBgChrOffset
	movs r0, #1
	movs r1, #0
	bl SetBgChrOffset
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #8
	movs r0, #3
	bl SetBgChrOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xe0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xb0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	movs r1, #0xf0
	lsls r1, r1, #7
	movs r0, #3
	bl SetBgTilemapOffset
	movs r0, #0
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #1
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #3
	movs r1, #0
	bl SetBgScreenSize
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080C56E4  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C56E8  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C56EC  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C56F0  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	bl SetBlendNone
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #0
	strh r0, [r5, #0x2a]
	str r0, [r5, #0x2c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C56E0: .4byte gDispIo
.L080C56E4: .4byte gBg0Tm
.L080C56E8: .4byte gBg1Tm
.L080C56EC: .4byte gBg2Tm
.L080C56F0: .4byte gBg3Tm

	THUMB_FUNC_END func_080C55CC

	THUMB_FUNC_START func_080C56F4
func_080C56F4: @ 0x080C56F4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #4
	bls .L080C5700
	b .L080C583C
.L080C5700:
	lsls r0, r0, #2
	ldr r1, .L080C570C  @ .L080C5710
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C570C: .4byte .L080C5710
.L080C5710: @ jump table
	.4byte .L080C5724 @ case 0
	.4byte .L080C5734 @ case 1
	.4byte .L080C57A8 @ case 2
	.4byte .L080C57FC @ case 3
	.4byte .L080C5810 @ case 4
.L080C5724:
	ldr r0, .L080C5730  @ gUnknown_08AA7760
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	b .L080C583C
	.align 2, 0
.L080C5730: .4byte gUnknown_08AA7760
.L080C5734:
	ldr r0, .L080C5780  @ gUnknown_08AA9708
	ldr r1, .L080C5784  @ 0x06003000
	bl Decompress
	ldr r0, .L080C5788  @ gUnknown_08AAAE90
	ldr r4, .L080C578C  @ gBg1Tm
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C5790  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r2, r5, #0
	adds r2, #0x29
	movs r0, #0xe0
	lsls r0, r0, #8
	adds r3, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C5760:
	ldrh r6, [r4]
	adds r0, r3, r6
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne .L080C5760
	movs r1, #0
	ldrsb r1, [r2, r1]
	cmp r1, #0
	beq .L080C579C
	ldr r1, .L080C5794  @ gPal
	ldr r0, .L080C5798  @ 0x00007FFF
	strh r0, [r1]
	b .L080C583C
	.align 2, 0
.L080C5780: .4byte gUnknown_08AA9708
.L080C5784: .4byte 0x06003000
.L080C5788: .4byte gUnknown_08AAAE90
.L080C578C: .4byte gBg1Tm
.L080C5790: .4byte gUnknown_08AAB3F4
.L080C5794: .4byte gPal
.L080C5798: .4byte 0x00007FFF
.L080C579C:
	ldr r0, .L080C57A4  @ gPal
	strh r1, [r0]
	b .L080C583C
	.align 2, 0
.L080C57A4: .4byte gPal
.L080C57A8:
	ldr r0, .L080C57E4  @ gUnknown_08AAB414
	ldr r1, .L080C57E8  @ 0x06005000
	bl Decompress
	ldr r0, .L080C57EC  @ gUnknown_08AAC2A4
	ldr r4, .L080C57F0  @ gBg0Tm
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C57F4  @ gUnknown_08AAC58C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080C57F8  @ 0x0000F280
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C57CE:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne .L080C57CE
	movs r0, #1
	bl EnableBgSync
	b .L080C583C
	.align 2, 0
.L080C57E4: .4byte gUnknown_08AAB414
.L080C57E8: .4byte 0x06005000
.L080C57EC: .4byte gUnknown_08AAC2A4
.L080C57F0: .4byte gBg0Tm
.L080C57F4: .4byte gUnknown_08AAC58C
.L080C57F8: .4byte 0x0000F280
.L080C57FC:
	ldr r0, .L080C5808  @ gUnknown_08AAC5AC
	ldr r1, .L080C580C  @ 0x06010000
	bl Decompress
	b .L080C583C
	.align 2, 0
.L080C5808: .4byte gUnknown_08AAC5AC
.L080C580C: .4byte 0x06010000
.L080C5810:
	ldr r0, .L080C5830  @ gUnknown_08AACEDC
	ldr r1, .L080C5834  @ 0x06013000
	bl Decompress
	ldr r0, .L080C5838  @ gUnknown_08AADB68
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C5842
	.align 2, 0
.L080C5830: .4byte gUnknown_08AACEDC
.L080C5834: .4byte 0x06013000
.L080C5838: .4byte gUnknown_08AADB68
.L080C583C:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C5842:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C56F4

	THUMB_FUNC_START func_080C5848
func_080C5848: @ 0x080C5848
	push {lr}
	adds r1, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080C5862
	adds r0, r1, #0
	movs r1, #0
	bl Proc_Goto
	b .L080C5868
.L080C5862:
	ldr r0, .L080C586C  @ gUnknown_08AA67FC
	bl SpawnProc
.L080C5868:
	pop {r0}
	bx r0
	.align 2, 0
.L080C586C: .4byte gUnknown_08AA67FC

	THUMB_FUNC_END func_080C5848

	THUMB_FUNC_START func_080C5870
func_080C5870: @ 0x080C5870
	push {r4, lr}
	sub sp, #4
	movs r0, #0xf
	bl EnableBgSync
	ldr r2, .L080C58C8  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C58C8: .4byte gDispIo

	THUMB_FUNC_END func_080C5870

	THUMB_FUNC_START func_080C58CC
func_080C58CC: @ 0x080C58CC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #4
	bls .L080C58D8
	b .L080C5A14
.L080C58D8:
	lsls r0, r0, #2
	ldr r1, .L080C58E4  @ .L080C58E8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C58E4: .4byte .L080C58E8
.L080C58E8: @ jump table
	.4byte .L080C58FC @ case 0
	.4byte .L080C5950 @ case 1
	.4byte .L080C59A0 @ case 2
	.4byte .L080C59EC @ case 3
	.4byte .L080C5A34 @ case 4
.L080C58FC:
	movs r1, #0xc0
	lsls r1, r1, #8
	movs r0, #0
	bl SetBgChrOffset
	movs r1, #0xf0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	ldr r0, .L080C5934  @ gUnknown_08AAFD14
	ldr r1, .L080C5938  @ 0x06008000
	bl Decompress
	ldr r0, .L080C593C  @ gUnknown_08AAFF10
	ldr r1, .L080C5940  @ 0x0600B000
	bl Decompress
	ldr r0, .L080C5944  @ gUnknown_08AB0114
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, .L080C5948  @ gPal
	ldr r0, .L080C594C  @ 0x00007FFF
	strh r0, [r1]
	b .L080C5A14
	.align 2, 0
.L080C5934: .4byte gUnknown_08AAFD14
.L080C5938: .4byte 0x06008000
.L080C593C: .4byte gUnknown_08AAFF10
.L080C5940: .4byte 0x0600B000
.L080C5944: .4byte gUnknown_08AB0114
.L080C5948: .4byte gPal
.L080C594C: .4byte 0x00007FFF
.L080C5950:
	ldr r0, .L080C598C  @ gUnknown_08AADC08
	ldr r1, .L080C5990  @ 0x0600C000
	bl Decompress
	ldr r0, .L080C5994  @ gUnknown_08AAE61C
	ldr r4, .L080C5998  @ gBg0Tm
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C599C  @ gUnknown_08AAE8CC
	movs r1, #0x20
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0x80
	lsls r0, r0, #5
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C5976:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne .L080C5976
	movs r0, #1
	bl EnableBgSync
	b .L080C5A14
	.align 2, 0
.L080C598C: .4byte gUnknown_08AADC08
.L080C5990: .4byte 0x0600C000
.L080C5994: .4byte gUnknown_08AAE61C
.L080C5998: .4byte gBg0Tm
.L080C599C: .4byte gUnknown_08AAE8CC
.L080C59A0:
	ldr r0, .L080C59D8  @ gUnknown_08AAE8EC
	ldr r1, .L080C59DC  @ 0x0600D000
	bl Decompress
	ldr r0, .L080C59E0  @ gUnknown_08AAF928
	ldr r4, .L080C59E4  @ gBg0Tm
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C59E8  @ gUnknown_08AAFCF4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0x82
	lsls r0, r0, #6
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C59C6:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne .L080C59C6
	b .L080C5A14
	.align 2, 0
.L080C59D8: .4byte gUnknown_08AAE8EC
.L080C59DC: .4byte 0x0600D000
.L080C59E0: .4byte gUnknown_08AAF928
.L080C59E4: .4byte gBg0Tm
.L080C59E8: .4byte gUnknown_08AAFCF4
.L080C59EC:
	ldr r0, .L080C5A1C  @ gUnknown_08AB1C24
	ldr r1, .L080C5A20  @ 0x06014400
	bl Decompress
	ldr r0, .L080C5A24  @ gUnknown_08AB210C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, .L080C5A28  @ gUnknown_08AB216C
	ldr r1, .L080C5A2C  @ 0x06015400
	bl Decompress
	ldr r0, .L080C5A30  @ gUnknown_08AB21B8
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
.L080C5A14:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
	b .L080C5A3E
	.align 2, 0
.L080C5A1C: .4byte gUnknown_08AB1C24
.L080C5A20: .4byte 0x06014400
.L080C5A24: .4byte gUnknown_08AB210C
.L080C5A28: .4byte gUnknown_08AB216C
.L080C5A2C: .4byte 0x06015400
.L080C5A30: .4byte gUnknown_08AB21B8
.L080C5A34:
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
.L080C5A3E:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C58CC

	THUMB_FUNC_START func_080C5A44
func_080C5A44: @ 0x080C5A44
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r4, .L080C5AE8  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r5, #1
	orrs r0, r5
	strb r0, [r4]
	movs r0, #2
	movs r1, #2
	bl SetBgScreenSize
	movs r0, #8
	movs r1, #0
	bl func_080C6BF0
	ldrb r1, [r4, #0x15]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	strb r0, [r4, #0x15]
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	ldrb r1, [r4, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	orrs r0, r5
	strb r0, [r4, #0xc]
	ldrb r1, [r4, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r2, r0
	strb r2, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #2
	movs r1, #8
	movs r2, #8
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	ldr r0, .L080C5AEC  @ gPal
	movs r4, #0
	strh r4, [r0]
	bl EnablePalSync
	strh r4, [r6, #0x2a]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5AE8: .4byte gDispIo
.L080C5AEC: .4byte gPal

	THUMB_FUNC_END func_080C5A44

	THUMB_FUNC_START func_080C5AF0
func_080C5AF0: @ 0x080C5AF0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x2c
	bhi .L080C5B0C
	movs r2, #0x80
	lsls r2, r2, #1
	adds r3, r0, #0
	movs r0, #0x2d
	str r0, [sp]
	movs r0, #0
	movs r1, #0x40
	b .L080C5B1E
.L080C5B0C:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0xe0
	lsls r2, r2, #1
	ldrh r3, [r5, #0x2a]
	subs r3, #0x2d
	movs r0, #0x2d
	str r0, [sp]
	movs r0, #0
.L080C5B1E:
	bl Interpolate
	adds r4, r0, #0
	ldrh r3, [r5, #0x2a]
	movs r0, #0x5a
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x40
	bl Interpolate
	adds r1, r0, #0
	adds r0, r4, #0
	bl func_080C6BF0
	cmp r4, #0xff
	ble .L080C5B50
	ldr r3, .L080C5BBC  @ Sprite_32x32
	ldr r0, .L080C5BC0  @ 0x00004220
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	bl PutSpriteExt
.L080C5B50:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x16
	bhi .L080C5B6C
	adds r3, r0, #0
	movs r0, #0x16
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, .L080C5BC4  @ gDispIo
	adds r1, #0x46
	strb r0, [r1]
.L080C5B6C:
	ldrh r0, [r5, #0x2a]
	adds r4, r0, #0
	subs r4, #0x44
	cmp r4, #0
	blt .L080C5BAA
	cmp r4, #0
	bne .L080C5B94
	ldr r0, .L080C5BC4  @ gDispIo
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xc0
	orrs r1, r2
	strb r1, [r0]
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
.L080C5B94:
	movs r0, #0x16
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	adds r3, r4, #0
	bl Interpolate
	ldr r1, .L080C5BC4  @ gDispIo
	adds r1, #0x46
	strb r0, [r1]
.L080C5BAA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x5a
	bne .L080C5BC8
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C5BCC
	.align 2, 0
.L080C5BBC: .4byte Sprite_32x32
.L080C5BC0: .4byte 0x00004220
.L080C5BC4: .4byte gDispIo
.L080C5BC8:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C5BCC:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C5AF0

	THUMB_FUNC_START func_080C5BD4
func_080C5BD4: @ 0x080C5BD4
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, .L080C5C54  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #6
	bl EnableBgSync
	ldr r4, .L080C5C58  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	str r5, [sp, #4]
	ldr r1, .L080C5C5C  @ gPal+0x1C0
	ldr r2, .L080C5C60  @ 0x01000008
	add r0, sp, #4
	bl CpuFastSet
	bl EnablePalSync
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5C54: .4byte gBg2Tm
.L080C5C58: .4byte gDispIo
.L080C5C5C: .4byte gPal+0x1C0
.L080C5C60: .4byte 0x01000008

	THUMB_FUNC_END func_080C5BD4

	THUMB_FUNC_START func_080C5C64
func_080C5C64: @ 0x080C5C64
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, .L080C5CC0  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080C5CC4  @ gPal+0x1C0
	ldrh r3, [r7, #0x2a]
	movs r0, #0x30
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	movs r1, #0
	bl func_080C69B0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x14
	bne .L080C5CA6
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
.L080C5CA6:
	ldrh r1, [r7, #0x2a]
	adds r0, r1, #0
	cmp r0, #0x13
	bhi .L080C5CD0
	ldr r3, .L080C5CC8  @ Sprite_32x32
	ldr r0, .L080C5CCC  @ 0x00004220
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	bl PutSpriteExt
	b .L080C5DC0
	.align 2, 0
.L080C5CC0: .4byte gUnknown_08AAB3F4
.L080C5CC4: .4byte gPal+0x1C0
.L080C5CC8: .4byte Sprite_32x32
.L080C5CCC: .4byte 0x00004220
.L080C5CD0:
	cmp r0, #0x17
	bhi .L080C5D30
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C5D00
	ldr r4, .L080C5CF4  @ Sprite_32x32
	ldr r0, .L080C5CF8  @ 0x00006228
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L080C5CFC  @ 0x00005224
	b .L080C5D14
	.align 2, 0
.L080C5CF4: .4byte Sprite_32x32
.L080C5CF8: .4byte 0x00006228
.L080C5CFC: .4byte 0x00005224
.L080C5D00:
	ldr r4, .L080C5D24  @ Sprite_32x32
	ldr r0, .L080C5D28  @ 0x00005224
	str r0, [sp]
	movs r0, #0
	movs r1, #0x68
	movs r2, #0x40
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L080C5D2C  @ 0x00006228
.L080C5D14:
	str r0, [sp]
	movs r0, #1
	movs r1, #0x68
	movs r2, #0x40
	adds r3, r4, #0
	bl PutSpriteExt
	b .L080C5DC0
	.align 2, 0
.L080C5D24: .4byte Sprite_32x32
.L080C5D28: .4byte 0x00005224
.L080C5D2C: .4byte 0x00006228
.L080C5D30:
	ldrh r0, [r7, #0x2a]
	adds r3, r0, #0
	subs r3, #0x18
	cmp r3, #8
	bgt .L080C5DC0
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x80
	bl Interpolate
	adds r6, r0, #0
	ldrh r1, [r7, #0x2a]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq .L080C5D94
	movs r1, #0x68
	subs r1, r1, r6
	ldr r4, .L080C5D84  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080C5D88  @ Sprite_32x32
	ldr r0, .L080C5D8C  @ 0x00006228
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r6, #0
	adds r1, #0x68
	ands r1, r4
	ldr r0, .L080C5D90  @ 0x00005224
	str r0, [sp]
	movs r0, #1
	movs r2, #0x40
	adds r3, r5, #0
	bl PutSpriteExt
	b .L080C5DC0
	.align 2, 0
.L080C5D84: .4byte 0x000001FF
.L080C5D88: .4byte Sprite_32x32
.L080C5D8C: .4byte 0x00006228
.L080C5D90: .4byte 0x00005224
.L080C5D94:
	adds r1, r6, #0
	adds r1, #0x68
	ldr r4, .L080C5DD4  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080C5DD8  @ Sprite_32x32
	ldr r0, .L080C5DDC  @ 0x00005224
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	adds r3, r5, #0
	bl PutSpriteExt
	movs r1, #0x68
	subs r1, r1, r6
	ands r1, r4
	ldr r0, .L080C5DE0  @ 0x00006228
	str r0, [sp]
	movs r0, #1
	movs r2, #0x40
	adds r3, r5, #0
	bl PutSpriteExt
.L080C5DC0:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x30
	bne .L080C5DE4
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C5DE8
	.align 2, 0
.L080C5DD4: .4byte 0x000001FF
.L080C5DD8: .4byte Sprite_32x32
.L080C5DDC: .4byte 0x00005224
.L080C5DE0: .4byte 0x00006228
.L080C5DE4:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C5DE8:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C5C64

	THUMB_FUNC_START func_080C5DF0
func_080C5DF0: @ 0x080C5DF0
	push {r4, lr}
	sub sp, #4
	ldr r2, .L080C5E54  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	ldr r0, .L080C5E58  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C5E4C
	ldr r0, .L080C5E5C  @ 0x00000317
	bl m4aSongNumStart
.L080C5E4C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5E54: .4byte gDispIo
.L080C5E58: .4byte gPlaySt
.L080C5E5C: .4byte 0x00000317

	THUMB_FUNC_END func_080C5DF0

	THUMB_FUNC_START func_080C5E60
func_080C5E60: @ 0x080C5E60
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd
	bl Interpolate
	ldr r1, .L080C5E90  @ gDispIo
	adds r1, #0x44
	strb r0, [r1]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xc
	bne .L080C5E94
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C5E98
	.align 2, 0
.L080C5E90: .4byte gDispIo
.L080C5E94:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C5E98:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C5E60

	THUMB_FUNC_START func_080C5EA0
func_080C5EA0: @ 0x080C5EA0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0
	bne .L080C5EC4
	movs r0, #1
	bl EnableBgSync
.L080C5EC4:
	ldr r0, .L080C5F10  @ gUnknown_08AAFCF4
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080C5F14  @ gPal+0x40
	ldr r6, .L080C5F18  @ 0x00007FFF
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl func_080C69B0
	ldr r0, .L080C5F1C  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r4, r4, r0
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl func_080C69B0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xc
	bne .L080C5F20
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C5F24
	.align 2, 0
.L080C5F10: .4byte gUnknown_08AAFCF4
.L080C5F14: .4byte gPal+0x40
.L080C5F18: .4byte 0x00007FFF
.L080C5F1C: .4byte gUnknown_08AAB3F4
.L080C5F20:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C5F24:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C5EA0

	THUMB_FUNC_START func_080C5F2C
func_080C5F2C: @ 0x080C5F2C
	push {r4, lr}
	ldr r0, .L080C5F70  @ gUnknown_08AB0B44
	ldr r1, .L080C5F74  @ 0x06008000
	bl Decompress
	ldr r0, .L080C5F78  @ gUnknown_08AB1890
	ldr r4, .L080C5F7C  @ gBg2Tm
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080C5F80  @ gUnknown_08AB1C04
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0xc0
	lsls r0, r0, #6
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C5F54:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne .L080C5F54
	movs r0, #4
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C5F70: .4byte gUnknown_08AB0B44
.L080C5F74: .4byte 0x06008000
.L080C5F78: .4byte gUnknown_08AB1890
.L080C5F7C: .4byte gBg2Tm
.L080C5F80: .4byte gUnknown_08AB1C04

	THUMB_FUNC_END func_080C5F2C

	THUMB_FUNC_START func_080C5F84
func_080C5F84: @ 0x080C5F84
	ldr r2, .L080C5FB0  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r2, #0x3c
	ldrb r1, [r2]
	movs r0, #0x3f
	ands r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
.L080C5FB0: .4byte gDispIo

	THUMB_FUNC_END func_080C5F84

	THUMB_FUNC_START func_080C5FB4
func_080C5FB4: @ 0x080C5FB4
	ldr r2, .L080C5FE4  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r2, #0x3c
	ldrb r1, [r2]
	movs r0, #0x3f
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
.L080C5FE4: .4byte gDispIo

	THUMB_FUNC_END func_080C5FB4

	THUMB_FUNC_START func_080C5FE8
func_080C5FE8: @ 0x080C5FE8
	push {r4, r5, lr}
	sub sp, #4
	ldr r4, .L080C606C  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	movs r5, #1
	orrs r0, r5
	strb r0, [r4]
	movs r0, #2
	movs r1, #1
	bl SetBgScreenSize
	movs r0, #0x40
	bl func_080C5548
	ldr r0, .L080C6070  @ gUnknown_08AB0134
	ldr r1, .L080C6074  @ 0x06008000
	bl Decompress
	ldr r0, .L080C6078  @ gUnknown_08AB0A20
	ldr r1, .L080C607C  @ gBg2Tm
	bl Decompress
	ldr r0, .L080C6080  @ gUnknown_08AB0B24
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #4
	bl EnableBgSync
	ldr r0, .L080C6084  @ 0x7FFF7FFF
	str r0, [sp]
	ldr r1, .L080C6088  @ gPal+0x1C0
	ldr r2, .L080C608C  @ 0x01000010
	mov r0, sp
	bl CpuFastSet
	movs r0, #0
	movs r1, #0
	bl SetBgChrOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	ldrb r0, [r4, #1]
	orrs r0, r5
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C606C: .4byte gDispIo
.L080C6070: .4byte gUnknown_08AB0134
.L080C6074: .4byte 0x06008000
.L080C6078: .4byte gUnknown_08AB0A20
.L080C607C: .4byte gBg2Tm
.L080C6080: .4byte gUnknown_08AB0B24
.L080C6084: .4byte 0x7FFF7FFF
.L080C6088: .4byte gPal+0x1C0
.L080C608C: .4byte 0x01000010

	THUMB_FUNC_END func_080C5FE8

	THUMB_FUNC_START func_080C6090
func_080C6090: @ 0x080C6090
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r2, #0x80
	lsls r2, r2, #1
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #1
	movs r1, #0x20
	bl Interpolate
	bl func_080C5548
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C60BE
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C60C2
.L080C60BE:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C60C2:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C6090

	THUMB_FUNC_START func_080C60CC
func_080C60CC: @ 0x080C60CC
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r5, .L080C60F8  @ gBuf
	movs r6, #0
	movs r4, #3
.L080C60D6:
	str r6, [sp]
	mov r0, sp
	adds r1, r5, #0
	ldr r2, .L080C60FC  @ 0x01000080
	bl CpuFastSet
	movs r0, #0x80
	lsls r0, r0, #3
	adds r5, r5, r0
	subs r4, #1
	cmp r4, #0
	bge .L080C60D6
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C60F8: .4byte gBuf
.L080C60FC: .4byte 0x01000080

	THUMB_FUNC_END func_080C60CC

	THUMB_FUNC_START nullsub_23
nullsub_23: @ 0x080C6100
	bx lr

	THUMB_FUNC_END nullsub_23

	THUMB_FUNC_START func_080C6104
func_080C6104: @ 0x080C6104
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	str r4, [r5, #0x30]
	bl func_080C60CC
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C6104

	THUMB_FUNC_START func_080C6144
func_080C6144: @ 0x080C6144
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, .L080C61F4  @ gUnknown_08AA6858
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	beq .L080C61E6
	ldr r3, .L080C61F8  @ gUnknown_08AA682C
	mov r8, r3
	movs r7, #0x18
.L080C615E:
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	add r0, r8
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r1, #0
	ldrsh r0, [r5, r1]
	adds r1, r2, #0
	muls r1, r0, r1
	asrs r1, r1, #8
	movs r3, #2
	ldrsh r0, [r5, r3]
	muls r2, r0, r2
	asrs r2, r2, #8
	str r7, [sp]
	movs r0, #0
	adds r3, r6, #0
	bl Interpolate
	adds r4, r0, #0
	adds r4, #0x74
	ldrb r0, [r5, #4]
	lsls r0, r0, #1
	adds r0, #1
	add r0, r8
	movs r2, #0
	ldrsb r2, [r0, r2]
	movs r1, #0
	ldrsh r0, [r5, r1]
	adds r1, r2, #0
	muls r1, r0, r1
	asrs r1, r1, #8
	movs r3, #2
	ldrsh r0, [r5, r3]
	muls r2, r0, r2
	asrs r2, r2, #8
	str r7, [sp]
	movs r0, #0
	adds r3, r6, #0
	bl Interpolate
	adds r2, r0, #0
	adds r2, #0x38
	ldr r0, .L080C61FC  @ 0x000001FF
	ands r4, r0
	movs r0, #0xff
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r2, r0
	ldrb r0, [r5, #5]
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r0, r0, r1
	movs r1, #0xe8
	lsls r1, r1, #7
	orrs r0, r1
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	ldr r3, .L080C6200  @ Sprite_8x8
	bl PutSpriteExt
	adds r5, #8
	movs r3, #0
	ldrsh r0, [r5, r3]
	cmp r0, #0
	bne .L080C615E
.L080C61E6:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C61F4: .4byte gUnknown_08AA6858
.L080C61F8: .4byte gUnknown_08AA682C
.L080C61FC: .4byte 0x000001FF
.L080C6200: .4byte Sprite_8x8

	THUMB_FUNC_END func_080C6144

	THUMB_FUNC_START func_080C6204
func_080C6204: @ 0x080C6204
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r0, #0x18
	mov r8, r0
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, .L080C62B0  @ gDispIo
	adds r1, #0x44
	strb r0, [r1]
	ldrh r3, [r7, #0x2a]
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, .L080C62B4  @ gUnknown_08AAB3F4
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, .L080C62B8  @ gPal+0x1C0
	ldr r6, .L080C62BC  @ 0x00007FFF
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl func_080C69B0
	ldr r0, .L080C62C0  @ gUnknown_08AAC58C
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r4, #0x20
	adds r0, r4, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl func_080C69B0
	ldrh r3, [r7, #0x2a]
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x3f
	bl Interpolate
	adds r5, r0, #0
	ldr r1, [r7, #0x30]
	bl nullsub_23
	str r5, [r7, #0x30]
	ldr r3, .L080C62C4  @ gUnknown_08AA6794
	ldr r0, .L080C62C8  @ 0x000031A0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x55
	bl PutSpriteExt
	ldrh r0, [r7, #0x2a]
	bl func_080C6144
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x18
	bne .L080C62CC
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C62D0
	.align 2, 0
.L080C62B0: .4byte gDispIo
.L080C62B4: .4byte gUnknown_08AAB3F4
.L080C62B8: .4byte gPal+0x1C0
.L080C62BC: .4byte 0x00007FFF
.L080C62C0: .4byte gUnknown_08AAC58C
.L080C62C4: .4byte gUnknown_08AA6794
.L080C62C8: .4byte 0x000031A0
.L080C62CC:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C62D0:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C6204

	THUMB_FUNC_START func_080C62DC
func_080C62DC: @ 0x080C62DC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, .L080C634C  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #2
	movs r1, #0
	bl SetBgScreenSize
	ldrb r0, [r4, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	ldr r0, .L080C6350  @ gUnknown_08AA67FC
	adds r1, r5, #0
	bl SpawnProc
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C634C: .4byte gDispIo
.L080C6350: .4byte gUnknown_08AA67FC

	THUMB_FUNC_END func_080C62DC

	THUMB_FUNC_START func_080C6354
func_080C6354: @ 0x080C6354
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r2, r0, #1
	str r2, [r4, #0x2c]
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	ldr r3, .L080C639C  @ 0x0000FFFF
	adds r1, r3, #0
	ands r0, r1
	movs r1, #0x3f
	ands r0, r1
	strh r0, [r4, #0x2a]
	ldr r0, .L080C63A0  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #9
	ands r0, r1
	cmp r0, #0
	beq .L080C63A8
	ldr r0, .L080C63A4  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080C638E
	movs r0, #0x6d
	bl m4aSongNumStart
.L080C638E:
	movs r0, #0
	bl SetNextGameActionId
	adds r0, r4, #0
	bl Proc_Break
	b .L080C63BA
	.align 2, 0
.L080C639C: .4byte 0x0000FFFF
.L080C63A0: .4byte gKeySt
.L080C63A4: .4byte gPlaySt
.L080C63A8:
	ldr r0, .L080C63C0  @ 0x0000032F
	cmp r2, r0
	bne .L080C63BA
	movs r0, #1
	bl SetNextGameActionId
	adds r0, r4, #0
	bl Proc_Break
.L080C63BA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C63C0: .4byte 0x0000032F

	THUMB_FUNC_END func_080C6354

	THUMB_FUNC_START func_080C63C4
func_080C63C4: @ 0x080C63C4
	push {lr}
	bl EndAllProcChildren
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C63C4

	THUMB_FUNC_START func_080C63D0
func_080C63D0: @ 0x080C63D0
	push {r4, r5, lr}
	adds r4, r0, #0
	bl EndAllProcChildren
	bl func_080C55B8
	ldr r1, .L080C641C  @ gPal
	movs r5, #0
	movs r0, #0
	strh r0, [r1]
	bl EnablePalSync
	adds r4, #0x29
	strb r5, [r4]
	ldr r2, .L080C6420  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0x43
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C641C: .4byte gPal
.L080C6420: .4byte gDispIo

	THUMB_FUNC_END func_080C63D0

	THUMB_FUNC_START func_080C6424
func_080C6424: @ 0x080C6424
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C6440  @ gUnknown_08AA6A50
	bl SpawnProcLocking
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	movs r0, #0x43
	movs r2, #0
	bl StartBgmExt
	pop {r0}
	bx r0
	.align 2, 0
.L080C6440: .4byte gUnknown_08AA6A50

	THUMB_FUNC_END func_080C6424

	THUMB_FUNC_START func_080C6444
func_080C6444: @ 0x080C6444
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C6458  @ gUnknown_08AA6A50
	bl SpawnProcLocking
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
.L080C6458: .4byte gUnknown_08AA6A50

	THUMB_FUNC_END func_080C6444

	THUMB_FUNC_START func_080C645C
func_080C645C: @ 0x080C645C
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C6470  @ gUnknown_08AA6A50
	bl SpawnProcLocking
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
.L080C6470: .4byte gUnknown_08AA6A50

	THUMB_FUNC_END func_080C645C

	THUMB_FUNC_START func_080C6474
func_080C6474: @ 0x080C6474
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r7, r1, #0
	lsls r2, r2, #0x18
	lsrs r0, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	cmp r0, #4
	bls .L080C648A
	b .L080C66DE
.L080C648A:
	lsls r0, r0, #2
	ldr r1, .L080C6494  @ .L080C6498
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C6494: .4byte .L080C6498
.L080C6498: @ jump table
	.4byte .L080C64AC @ case 0
	.4byte .L080C64F4 @ case 1
	.4byte .L080C653C @ case 2
	.4byte .L080C65B0 @ case 3
	.4byte .L080C6624 @ case 4
.L080C64AC:
	cmp r3, #1
	beq .L080C64D0
	cmp r3, #1
	bgt .L080C64BA
	cmp r3, #0
	beq .L080C64C4
	b .L080C66DE
.L080C64BA:
	cmp r3, #2
	beq .L080C64DC
	cmp r3, #3
	beq .L080C64E8
	b .L080C66DE
.L080C64C4:
	movs r5, #0x8a
	ldr r4, .L080C64CC  @ gUnknown_08AA6C22
	b .L080C66DE
	.align 2, 0
.L080C64CC: .4byte gUnknown_08AA6C22
.L080C64D0:
	movs r5, #0x8a
	ldr r4, .L080C64D8  @ gUnknown_08AA6C36
	b .L080C66DE
	.align 2, 0
.L080C64D8: .4byte gUnknown_08AA6C36
.L080C64DC:
	movs r5, #0xb2
	ldr r4, .L080C64E4  @ gUnknown_08AA6C22
	b .L080C66DE
	.align 2, 0
.L080C64E4: .4byte gUnknown_08AA6C22
.L080C64E8:
	movs r5, #0xb2
	ldr r4, .L080C64F0  @ gUnknown_08AA6C36
	b .L080C66DE
	.align 2, 0
.L080C64F0: .4byte gUnknown_08AA6C36
.L080C64F4:
	cmp r3, #1
	beq .L080C6518
	cmp r3, #1
	bgt .L080C6502
	cmp r3, #0
	beq .L080C650C
	b .L080C66DE
.L080C6502:
	cmp r3, #2
	beq .L080C6524
	cmp r3, #3
	beq .L080C6530
	b .L080C66DE
.L080C650C:
	movs r5, #0xda
	ldr r4, .L080C6514  @ gUnknown_08AA6C4A
	b .L080C66DE
	.align 2, 0
.L080C6514: .4byte gUnknown_08AA6C4A
.L080C6518:
	movs r5, #0xda
	ldr r4, .L080C6520  @ gUnknown_08AA6C58
	b .L080C66DE
	.align 2, 0
.L080C6520: .4byte gUnknown_08AA6C58
.L080C6524:
	movs r5, #0xf2
	ldr r4, .L080C652C  @ gUnknown_08AA6C4A
	b .L080C66DE
	.align 2, 0
.L080C652C: .4byte gUnknown_08AA6C4A
.L080C6530:
	movs r5, #0xf2
	ldr r4, .L080C6538  @ gUnknown_08AA6C58
	b .L080C66DE
	.align 2, 0
.L080C6538: .4byte gUnknown_08AA6C58
.L080C653C:
	cmp r3, #5
	bls .L080C6542
	b .L080C66DE
.L080C6542:
	lsls r0, r3, #2
	ldr r1, .L080C654C  @ .L080C6550
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C654C: .4byte .L080C6550
.L080C6550: @ jump table
	.4byte .L080C6568 @ case 0
	.4byte .L080C6574 @ case 1
	.4byte .L080C6580 @ case 2
	.4byte .L080C658C @ case 3
	.4byte .L080C6598 @ case 4
	.4byte .L080C65A4 @ case 5
.L080C6568:
	movs r5, #0x85
	lsls r5, r5, #1
	ldr r4, .L080C6570  @ gUnknown_08AA6C66
	b .L080C66DE
	.align 2, 0
.L080C6570: .4byte gUnknown_08AA6C66
.L080C6574:
	movs r5, #0x85
	lsls r5, r5, #1
	ldr r4, .L080C657C  @ gUnknown_08AA6C74
	b .L080C66DE
	.align 2, 0
.L080C657C: .4byte gUnknown_08AA6C74
.L080C6580:
	movs r5, #0x8b
	lsls r5, r5, #1
	ldr r4, .L080C6588  @ gUnknown_08AA6C66
	b .L080C66DE
	.align 2, 0
.L080C6588: .4byte gUnknown_08AA6C66
.L080C658C:
	movs r5, #0x8b
	lsls r5, r5, #1
	ldr r4, .L080C6594  @ gUnknown_08AA6C74
	b .L080C66DE
	.align 2, 0
.L080C6594: .4byte gUnknown_08AA6C74
.L080C6598:
	movs r5, #0x9d
	lsls r5, r5, #1
	ldr r4, .L080C65A0  @ gUnknown_08AA6C66
	b .L080C66DE
	.align 2, 0
.L080C65A0: .4byte gUnknown_08AA6C66
.L080C65A4:
	movs r5, #0x9d
	lsls r5, r5, #1
	ldr r4, .L080C65AC  @ gUnknown_08AA6C74
	b .L080C66DE
	.align 2, 0
.L080C65AC: .4byte gUnknown_08AA6C74
.L080C65B0:
	cmp r3, #5
	bls .L080C65B6
	b .L080C66DE
.L080C65B6:
	lsls r0, r3, #2
	ldr r1, .L080C65C0  @ .L080C65C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C65C0: .4byte .L080C65C4
.L080C65C4: @ jump table
	.4byte .L080C65DC @ case 0
	.4byte .L080C65E8 @ case 1
	.4byte .L080C65F4 @ case 2
	.4byte .L080C6600 @ case 3
	.4byte .L080C660C @ case 4
	.4byte .L080C6618 @ case 5
.L080C65DC:
	movs r5, #0x91
	lsls r5, r5, #1
	ldr r4, .L080C65E4  @ gUnknown_08AA6C82
	b .L080C66DE
	.align 2, 0
.L080C65E4: .4byte gUnknown_08AA6C82
.L080C65E8:
	movs r5, #0x91
	lsls r5, r5, #1
	ldr r4, .L080C65F0  @ gUnknown_08AA6C8A
	b .L080C66DE
	.align 2, 0
.L080C65F0: .4byte gUnknown_08AA6C8A
.L080C65F4:
	movs r5, #0x93
	lsls r5, r5, #1
	ldr r4, .L080C65FC  @ gUnknown_08AA6C82
	b .L080C66DE
	.align 2, 0
.L080C65FC: .4byte gUnknown_08AA6C82
.L080C6600:
	movs r5, #0x93
	lsls r5, r5, #1
	ldr r4, .L080C6608  @ gUnknown_08AA6C8A
	b .L080C66DE
	.align 2, 0
.L080C6608: .4byte gUnknown_08AA6C8A
.L080C660C:
	movs r5, #0x97
	lsls r5, r5, #1
	ldr r4, .L080C6614  @ gUnknown_08AA6C82
	b .L080C66DE
	.align 2, 0
.L080C6614: .4byte gUnknown_08AA6C82
.L080C6618:
	movs r5, #0x97
	lsls r5, r5, #1
	ldr r4, .L080C6620  @ gUnknown_08AA6C8A
	b .L080C66DE
	.align 2, 0
.L080C6620: .4byte gUnknown_08AA6C8A
.L080C6624:
	cmp r3, #0xb
	bhi .L080C66DE
	lsls r0, r3, #2
	ldr r1, .L080C6634  @ .L080C6638
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C6634: .4byte .L080C6638
.L080C6638: @ jump table
	.4byte .L080C6668 @ case 0
	.4byte .L080C6674 @ case 1
	.4byte .L080C667A @ case 2
	.4byte .L080C6688 @ case 3
	.4byte .L080C668E @ case 4
	.4byte .L080C669C @ case 5
	.4byte .L080C66A2 @ case 6
	.4byte .L080C66B0 @ case 7
	.4byte .L080C66B6 @ case 8
	.4byte .L080C66C4 @ case 9
	.4byte .L080C66CA @ case 10
	.4byte .L080C66D8 @ case 11
.L080C6668:
	movs r5, #0x95
	lsls r5, r5, #1
	ldr r4, .L080C6670  @ gUnknown_08AA6C92
	b .L080C66DE
	.align 2, 0
.L080C6670: .4byte gUnknown_08AA6C92
.L080C6674:
	movs r5, #0x95
	lsls r5, r5, #1
	b .L080C66DC
.L080C667A:
	movs r5, #0x96
	lsls r5, r5, #1
	ldr r4, .L080C6684  @ gUnknown_08AA6C92
	b .L080C66DE
	.align 2, 0
.L080C6684: .4byte gUnknown_08AA6C92
.L080C6688:
	movs r5, #0x96
	lsls r5, r5, #1
	b .L080C66DC
.L080C668E:
	movs r5, #0x99
	lsls r5, r5, #1
	ldr r4, .L080C6698  @ gUnknown_08AA6C92
	b .L080C66DE
	.align 2, 0
.L080C6698: .4byte gUnknown_08AA6C92
.L080C669C:
	movs r5, #0x99
	lsls r5, r5, #1
	b .L080C66DC
.L080C66A2:
	movs r5, #0x9a
	lsls r5, r5, #1
	ldr r4, .L080C66AC  @ gUnknown_08AA6C92
	b .L080C66DE
	.align 2, 0
.L080C66AC: .4byte gUnknown_08AA6C92
.L080C66B0:
	movs r5, #0x9a
	lsls r5, r5, #1
	b .L080C66DC
.L080C66B6:
	movs r5, #0x9b
	lsls r5, r5, #1
	ldr r4, .L080C66C0  @ gUnknown_08AA6C92
	b .L080C66DE
	.align 2, 0
.L080C66C0: .4byte gUnknown_08AA6C92
.L080C66C4:
	movs r5, #0x9b
	lsls r5, r5, #1
	b .L080C66DC
.L080C66CA:
	movs r5, #0x9c
	lsls r5, r5, #1
	ldr r4, .L080C66D4  @ gUnknown_08AA6C92
	b .L080C66DE
	.align 2, 0
.L080C66D4: .4byte gUnknown_08AA6C92
.L080C66D8:
	movs r5, #0x9c
	lsls r5, r5, #1
.L080C66DC:
	ldr r4, .L080C6700  @ gUnknown_08AA6C9A
.L080C66DE:
	movs r1, #0xc0
	lsls r1, r1, #6
	adds r0, r1, #0
	orrs r5, r0
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r7, #0
	adds r3, r4, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6700: .4byte gUnknown_08AA6C9A

	THUMB_FUNC_END func_080C6474

	THUMB_FUNC_START func_080C6704
func_080C6704: @ 0x080C6704
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C6730  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xb
	ands r0, r1
	cmp r0, #0
	beq .L080C672A
	movs r0, #2
	bl SetNextGameActionId
	ldr r0, .L080C6734  @ gUnknown_02022188
	movs r1, #0
	strh r1, [r0, #0xc]
	ldr r0, [r4, #0x14]
	movs r1, #0x63
	bl Proc_Goto
.L080C672A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6730: .4byte gKeySt
.L080C6734: .4byte gUnknown_02022188

	THUMB_FUNC_END func_080C6704

	THUMB_FUNC_START AddSomeChild6C
AddSomeChild6C: @ 0x080C6738
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080C6748  @ gUnknown_08AA6CA4
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C6748: .4byte gUnknown_08AA6CA4

	THUMB_FUNC_END AddSomeChild6C

	THUMB_FUNC_START DeleteSome6C
DeleteSome6C: @ 0x080C674C
	push {lr}
	ldr r0, .L080C675C  @ gUnknown_08AA6CA4
	bl FindProc
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
.L080C675C: .4byte gUnknown_08AA6CA4

	THUMB_FUNC_END DeleteSome6C

	THUMB_FUNC_START StorePaletteToBufferMaybe
StorePaletteToBufferMaybe: @ 0x080C6760
	push {lr}
	bl ApplyPaletteExt
	ldr r1, .L080C6774  @ gPal
	ldr r0, .L080C6778  @ gUnknown_02022188
	ldrh r0, [r0, #0xc]
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
.L080C6774: .4byte gPal
.L080C6778: .4byte gUnknown_02022188

	THUMB_FUNC_END StorePaletteToBufferMaybe

	THUMB_FUNC_START func_080C677C
func_080C677C: @ 0x080C677C
	push {lr}
	adds r2, r0, #0
	movs r3, #0x13
.L080C6782:
	ldrh r0, [r2]
	strh r0, [r1]
	adds r2, #0x40
	adds r1, #0x40
	subs r3, #1
	cmp r3, #0
	bge .L080C6782
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C677C

	THUMB_FUNC_START func_080C6794
func_080C6794: @ 0x080C6794
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	lsls r2, r2, #0x18
	ldr r6, .L080C67BC  @ 0x00007FFF
	lsrs r5, r2, #0xc
	movs r2, #0x13
.L080C67A2:
	ldrh r1, [r4]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r5
	strh r0, [r3]
	adds r4, #0x40
	adds r3, #0x40
	subs r2, #1
	cmp r2, #0
	bge .L080C67A2
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C67BC: .4byte 0x00007FFF

	THUMB_FUNC_END func_080C6794

	THUMB_FUNC_START func_080C67C0
func_080C67C0: @ 0x080C67C0
	push {lr}
	movs r2, #0
	movs r1, #0x13
.L080C67C6:
	strh r2, [r0]
	adds r0, #0x40
	subs r1, #1
	cmp r1, #0
	bge .L080C67C6
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C67C0

	THUMB_FUNC_START func_080C67D4
func_080C67D4: @ 0x080C67D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	ldr r2, [sp, #0x24]
	mov r9, r2
	ldr r2, [sp, #0x28]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r8, r2
	mov r0, sl
	bl GetBgTilemap
	adds r5, r0, #0
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne .L080C680E
	subs r0, #8
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
.L080C680E:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x13
	adds r4, r0, #1
	lsls r1, r6, #0x10
	asrs r0, r1, #0x13
	adds r0, #1
	adds r6, r1, #0
	cmp r4, r0
	bge .L080C687E
	movs r7, #0x1f
	mov r1, r8
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
.L080C682A:
	cmp r4, #0x3f
	bhi .L080C6838
	cmp r4, #0x1f
	ble .L080C6846
	mov r2, r9
	cmp r2, #0
	bne .L080C6846
.L080C6838:
	adds r0, r4, #0
	ands r0, r7
	lsls r0, r0, #1
	adds r0, r5, r0
	bl func_080C67C0
	b .L080C6874
.L080C6846:
	mov r0, r9
	cmp r4, #0x1f
	bgt .L080C684E
	ldr r0, [sp, #0x20]
.L080C684E:
	mov r1, r8
	cmp r1, #0
	bne .L080C6864
	adds r1, r4, #0
	ands r1, r7
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r5, r1
	bl func_080C677C
	b .L080C6874
.L080C6864:
	adds r1, r4, #0
	ands r1, r7
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r5, r1
	movs r2, #0xf
	bl func_080C6794
.L080C6874:
	adds r4, #1
	asrs r0, r6, #0x13
	adds r0, #1
	cmp r4, r0
	blt .L080C682A
.L080C687E:
	movs r2, #0x80
	lsls r2, r2, #0xd
	adds r1, r6, r2
	lsrs r1, r1, #0x10
	mov r0, sl
	movs r2, #0
	bl SetBgOffset
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C67D4

	THUMB_FUNC_START func_080C689C
func_080C689C: @ 0x080C689C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r4, [sp, #0x28]
	mov r9, r4
	ldr r4, [sp, #0x2c]
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	mov sl, r4
	adds r0, r3, #0
	bl GetBgTilemap
	adds r7, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bne .L080C68DE
	subs r0, #8
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
.L080C68DE:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	mov r2, r8
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r4, r9
	cmp r4, #0
	beq .L080C6906
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	b .L080C690C
.L080C6906:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
.L080C690C:
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	subs r1, r0, r1
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r0, r5, #0x10
	asrs r0, r0, #0x13
	subs r4, r0, #1
	lsls r1, r6, #0x10
	asrs r0, r1, #0x13
	subs r0, #1
	adds r5, r1, #0
	cmp r4, r0
	ble .L080C6994
	movs r6, #0x1f
	mov r1, sl
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	mov r8, r0
.L080C693C:
	cmp r4, #0x3f
	bhi .L080C694A
	cmp r4, #0x1f
	ble .L080C6958
	mov r2, r9
	cmp r2, #0
	bne .L080C6958
.L080C694A:
	adds r0, r4, #0
	ands r0, r6
	lsls r0, r0, #1
	adds r0, r7, r0
	bl func_080C67C0
	b .L080C698A
.L080C6958:
	mov r0, r9
	cmp r4, #0x1f
	bgt .L080C6960
	ldr r0, [sp, #0x24]
.L080C6960:
	cmp r0, #0
	beq .L080C6994
	mov r1, r8
	cmp r1, #0
	bne .L080C697A
	adds r1, r4, #0
	ands r1, r6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r7, r1
	bl func_080C677C
	b .L080C698A
.L080C697A:
	adds r1, r4, #0
	ands r1, r6
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r1, r7, r1
	movs r2, #0xf
	bl func_080C6794
.L080C698A:
	subs r4, #1
	asrs r0, r5, #0x13
	subs r0, #1
	cmp r4, r0
	bgt .L080C693C
.L080C6994:
	lsrs r1, r5, #0x10
	ldr r0, [sp]
	movs r2, #0
	bl SetBgOffset
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C689C

	THUMB_FUNC_START func_080C69B0
func_080C69B0: @ 0x080C69B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp]
	movs r0, #0x1f
	mov ip, r0
	movs r5, #0x1f
	movs r0, #0x10
	subs r6, r0, r2
	movs r1, #0xf
	mov r9, r1
	mov r0, r8
	ands r0, r5
	adds r7, r0, #0
	muls r7, r2, r7
	mov sl, r7
.L080C69E2:
	ldrh r1, [r4]
	adds r0, r5, #0
	ands r0, r1
	adds r3, r0, #0
	muls r3, r6, r3
	add r3, sl
	asrs r3, r3, #4
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x15
	mov r2, ip
	ands r0, r2
	adds r2, r0, #0
	muls r2, r6, r2
	mov r7, r8
	lsrs r0, r7, #5
	mov r7, ip
	ands r0, r7
	ldr r7, [sp]
	muls r0, r7, r0
	adds r2, r2, r0
	asrs r2, r2, #4
	lsrs r1, r1, #0x1a
	mov r0, ip
	ands r1, r0
	muls r1, r6, r1
	mov r7, r8
	lsrs r0, r7, #0xa
	mov r7, ip
	ands r0, r7
	ldr r7, [sp]
	muls r0, r7, r0
	adds r1, r1, r0
	asrs r1, r1, #4
	ands r1, r5
	lsls r1, r1, #0xa
	ands r2, r5
	lsls r2, r2, #5
	orrs r1, r2
	ands r3, r5
	orrs r3, r1
	strh r3, [r4]
	adds r4, #2
	movs r0, #1
	negs r0, r0
	add r9, r0
	mov r1, r9
	cmp r1, #0
	bge .L080C69E2
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C69B0

	THUMB_FUNC_START Initialize6CIntroSequence
Initialize6CIntroSequence: @ 0x080C6A54
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #1
	bl FadeBgmOut
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl SetOnHBlankA
	movs r1, #0
	strh r1, [r4, #0x2a]
	ldr r0, .L080C6B10  @ gUnknown_02022188
	strh r1, [r0, #0xc]
	ldr r2, .L080C6B14  @ gDispIo
	ldrb r0, [r2]
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, .L080C6B18  @ gUnknown_08AF1AE8
	ldr r1, .L080C6B1C  @ 0x06010000
	bl Decompress
	ldr r0, .L080C6B20  @ gUnknown_08AF1B38
	ldr r1, .L080C6B24  @ 0x06010100
	bl Decompress
	ldr r0, .L080C6B28  @ gUnknown_08AF1FD0
	ldr r1, .L080C6B2C  @ 0x060108C0
	bl Decompress
	ldr r0, .L080C6B30  @ gUnknown_08AF2654
	ldr r1, .L080C6B34  @ 0x06011140
	bl Decompress
	ldr r0, .L080C6B38  @ gUnknown_08AF1B18
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C6B3C  @ gUnknown_08AF1FB0
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C6B40  @ gUnknown_08AF2634
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C6B44  @ gUnknown_08AF310C
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r0, #1
	negs r0, r0
	str r0, [sp]
	ldr r1, .L080C6B48  @ 0x06017800
	ldr r2, .L080C6B4C  @ 0x01000200
	mov r0, sp
	bl CpuFastSet
	movs r0, #3
	bl SetNextGameActionId
	adds r0, r4, #0
	bl AddSomeChild6C
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6B10: .4byte gUnknown_02022188
.L080C6B14: .4byte gDispIo
.L080C6B18: .4byte gUnknown_08AF1AE8
.L080C6B1C: .4byte 0x06010000
.L080C6B20: .4byte gUnknown_08AF1B38
.L080C6B24: .4byte 0x06010100
.L080C6B28: .4byte gUnknown_08AF1FD0
.L080C6B2C: .4byte 0x060108C0
.L080C6B30: .4byte gUnknown_08AF2654
.L080C6B34: .4byte 0x06011140
.L080C6B38: .4byte gUnknown_08AF1B18
.L080C6B3C: .4byte gUnknown_08AF1FB0
.L080C6B40: .4byte gUnknown_08AF2634
.L080C6B44: .4byte gUnknown_08AF310C
.L080C6B48: .4byte 0x06017800
.L080C6B4C: .4byte 0x01000200

	THUMB_FUNC_END Initialize6CIntroSequence

	THUMB_FUNC_START func_080C6B50
func_080C6B50: @ 0x080C6B50
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, .L080C6B88  @ gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	ldrb r1, [r3]
	movs r0, #0x3f
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r3]
	adds r2, #0x46
	movs r5, #0
	strb r5, [r2]
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	adds r4, #0x4c
	strh r5, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6B88: .4byte gDispIo

	THUMB_FUNC_END func_080C6B50

	THUMB_FUNC_START func_080C6B8C
func_080C6B8C: @ 0x080C6B8C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	movs r0, #0
	ldrsh r3, [r5, r0]
	adds r4, r6, #0
	adds r4, #0x64
	movs r1, #0
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	ldr r1, .L080C6BD4  @ gDispIo
	adds r1, #0x46
	strb r0, [r1]
	movs r2, #0
	ldrsh r1, [r5, r2]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r1, r0
	bne .L080C6BC6
	adds r0, r6, #0
	bl Proc_Break
.L080C6BC6:
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6BD4: .4byte gDispIo

	THUMB_FUNC_END func_080C6B8C

	THUMB_FUNC_START func_080C6BD8
func_080C6BD8: @ 0x080C6BD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080C6BEC  @ gUnknown_08AA6CBC
	bl SpawnProc
	adds r0, #0x64
	strh r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6BEC: .4byte gUnknown_08AA6CBC

	THUMB_FUNC_END func_080C6BD8

	THUMB_FUNC_START func_080C6BF0
func_080C6BF0: @ 0x080C6BF0
	push {lr}
	sub sp, #0x14
	movs r2, #0x80
	lsls r2, r2, #9
	str r2, [sp]
	str r2, [sp, #4]
	mov r3, sp
	movs r2, #0x78
	strh r2, [r3, #8]
	movs r2, #0x50
	strh r2, [r3, #0xa]
	mov r2, sp
	strh r0, [r2, #0xc]
	strh r0, [r2, #0xe]
	mov r0, sp
	lsls r1, r1, #8
	strh r1, [r0, #0x10]
	ldr r1, .L080C6C20  @ gUnknown_030030C8
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r0}
	bx r0
	.align 2, 0
.L080C6C20: .4byte gUnknown_030030C8

	THUMB_FUNC_END func_080C6BF0

	THUMB_FUNC_START func_080C6C24
func_080C6C24: @ 0x080C6C24
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r4, .L080C6DE8  @ gDispIo
	ldrb r1, [r4]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	movs r1, #0
	bl SetBgChrOffset
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgChrOffset
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	movs r0, #3
	movs r1, #0
	bl SetBgChrOffset
	movs r1, #0xd8
	lsls r1, r1, #8
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	movs r1, #0xf8
	lsls r1, r1, #8
	movs r0, #3
	bl SetBgTilemapOffset
	movs r0, #0
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #1
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #3
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	ldr r4, .L080C6DEC  @ gUnknown_08AB21D8
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C6DF0  @ gUnknown_08AB5D90
	ldr r1, .L080C6DF4  @ 0x0600F000
	bl Decompress
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C6DF8  @ gPal
	ldr r2, .L080C6DFC  @ 0x01000008
	add r0, sp, #4
	bl CpuFastSet
	ldr r0, .L080C6E00  @ gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	ldr r4, .L080C6E04  @ gUnknown_08AB632C
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C6E08  @ gUnknown_08AB7DB0
	movs r1, #0x40
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r4, .L080C6E0C  @ 0x0600E800
	ldr r0, .L080C6E10  @ gUnknown_08AB7AC0
	adds r1, r4, #0
	bl Decompress
	movs r0, #0x80
	lsls r0, r0, #6
	adds r1, r0, #0
	movs r5, #0x80
	lsls r5, r5, #3
.L080C6D72:
	ldrh r2, [r4]
	adds r0, r1, r2
	strh r0, [r4]
	subs r5, #1
	adds r4, #2
	cmp r5, #0
	bne .L080C6D72
	bl EnablePalSync
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r5, [sp]
	movs r0, #1
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	strh r5, [r6, #0x2a]
	strh r5, [r6, #0x34]
	strh r5, [r6, #0x36]
	ldr r2, .L080C6DE8  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6DE8: .4byte gDispIo
.L080C6DEC: .4byte gUnknown_08AB21D8
.L080C6DF0: .4byte gUnknown_08AB5D90
.L080C6DF4: .4byte 0x0600F000
.L080C6DF8: .4byte gPal
.L080C6DFC: .4byte 0x01000008
.L080C6E00: .4byte gBg0Tm
.L080C6E04: .4byte gUnknown_08AB632C
.L080C6E08: .4byte gUnknown_08AB7DB0
.L080C6E0C: .4byte 0x0600E800
.L080C6E10: .4byte gUnknown_08AB7AC0

	THUMB_FUNC_END func_080C6C24

	THUMB_FUNC_START func_080C6E14
func_080C6E14: @ 0x080C6E14
	movs r1, #0
	strh r1, [r0, #0x2a]
	bx lr

	THUMB_FUNC_END func_080C6E14

	THUMB_FUNC_START func_080C6E1C
func_080C6E1C: @ 0x080C6E1C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x3e
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1f
	bl Interpolate
	adds r2, r0, #0
	lsls r0, r2, #0xa
	lsls r1, r2, #5
	orrs r0, r1
	orrs r2, r0
	ldr r1, .L080C6E78  @ gPal
	adds r0, r1, #0
	adds r0, #0x1e
.L080C6E42:
	strh r2, [r0]
	subs r0, #2
	cmp r0, r1
	bge .L080C6E42
	bl EnablePalSync
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x3e
	bne .L080C6E84
	movs r0, #0
	strh r0, [r4, #0x2a]
	ldr r1, .L080C6E7C  @ gUnknown_02022188
	ldr r0, .L080C6E80  @ 0x00007FFF
	strh r0, [r1, #0xc]
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	adds r0, r4, #0
	bl Proc_Break
	b .L080C6E88
	.align 2, 0
.L080C6E78: .4byte gPal
.L080C6E7C: .4byte gUnknown_02022188
.L080C6E80: .4byte 0x00007FFF
.L080C6E84:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C6E88:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C6E1C

	THUMB_FUNC_START Until6C2AIs8Callback
Until6C2AIs8Callback: @ 0x080C6E90
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2a]
	cmp r0, #8
	bne .L080C6EA6
	movs r0, #0
	strh r0, [r1, #0x2a]
	adds r0, r1, #0
	bl Proc_Break
	b .L080C6EAA
.L080C6EA6:
	adds r0, #1
	strh r0, [r1, #0x2a]
.L080C6EAA:
	pop {r0}
	bx r0

	THUMB_FUNC_END Until6C2AIs8Callback

	THUMB_FUNC_START func_080C6EB0
func_080C6EB0: @ 0x080C6EB0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r2, .L080C6EE8  @ gDispIo
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C6EEC
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C6EF0
	.align 2, 0
.L080C6EE8: .4byte gDispIo
.L080C6EEC:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C6EF0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C6EB0

	THUMB_FUNC_START func_080C6EF8
func_080C6EF8: @ 0x080C6EF8
	push {lr}
	ldr r0, .L080C6F0C  @ gUnknown_08AA6CDC
	bl FindProc
	cmp r0, #0
	beq .L080C6F06
	movs r0, #1
.L080C6F06:
	pop {r1}
	bx r1
	.align 2, 0
.L080C6F0C: .4byte gUnknown_08AA6CDC

	THUMB_FUNC_END func_080C6EF8

	THUMB_FUNC_START func_080C6F10
func_080C6F10: @ 0x080C6F10
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #1
	movs r1, #8
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
	ldr r2, .L080C6F6C  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	strh r4, [r5, #0x2c]
	strh r4, [r5, #0x2e]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C6F6C: .4byte gDispIo

	THUMB_FUNC_END func_080C6F10

	THUMB_FUNC_START func_080C6F70
func_080C6F70: @ 0x080C6F70
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r1, [r5, #0x2a]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne .L080C6F86
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
.L080C6F86:
	ldrh r1, [r5, #0x2a]
	movs r0, #3
	ands r0, r1
	cmp r0, #0
	bne .L080C6F96
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
.L080C6F96:
	ldrh r1, [r5, #0x2c]
	ldrh r2, [r5, #0x2e]
	movs r0, #1
	bl SetBgOffset
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x60
	bhi .L080C6FD0
	adds r3, r0, #0
	movs r0, #0x60
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	ldr r0, .L080C7034  @ gUnknown_08AB630C
	movs r1, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C7038  @ gPal
	ldr r1, .L080C703C  @ 0x00007FFF
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r2, r4, #0
	bl func_080C69B0
.L080C6FD0:
	ldrh r0, [r5, #0x2a]
	adds r3, r0, #0
	subs r3, #0x80
	cmp r3, #0x60
	bhi .L080C6FEE
	movs r0, #0x60
	str r0, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl Interpolate
	ldr r1, .L080C7040  @ gDispIo
	adds r1, #0x44
	strb r0, [r1]
.L080C6FEE:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0xef
	bne .L080C701C
	ldr r2, .L080C7040  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0x20
	adds r1, r5, #0
	bl func_080C6BD8
.L080C701C:
	ldrh r1, [r5, #0x2a]
	movs r0, #0x88
	lsls r0, r0, #1
	cmp r1, r0
	bne .L080C7044
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C7048
	.align 2, 0
.L080C7034: .4byte gUnknown_08AB630C
.L080C7038: .4byte gPal
.L080C703C: .4byte 0x00007FFF
.L080C7040: .4byte gDispIo
.L080C7044:
	adds r0, r1, #1
	strh r0, [r5, #0x2a]
.L080C7048:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C6F70

	THUMB_FUNC_START func_080C7050
func_080C7050: @ 0x080C7050
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, .L080C719C  @ gDispIo
	ldrb r1, [r5]
	movs r0, #8
	negs r0, r0
	ands r0, r1
	strb r0, [r5]
	movs r0, #0
	movs r1, #0
	bl SetBgChrOffset
	movs r0, #1
	movs r1, #0
	bl SetBgChrOffset
	movs r4, #0x80
	lsls r4, r4, #7
	movs r0, #2
	adds r1, r4, #0
	bl SetBgChrOffset
	movs r0, #3
	adds r1, r4, #0
	bl SetBgChrOffset
	movs r1, #0xd8
	lsls r1, r1, #8
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xe0
	lsls r1, r1, #8
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	movs r1, #0xf8
	lsls r1, r1, #8
	movs r0, #3
	bl SetBgTilemapOffset
	movs r0, #0
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #1
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #3
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrb r2, [r5, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r5, #0xc]
	ldrb r2, [r5, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r5, #0x14]
	ldrb r0, [r5, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r5, #0x18]
	movs r0, #0
	strb r0, [r5, #1]
	ldr r0, .L080C71A0  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C71A4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C71A8  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C71AC  @ gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #8
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #0
	strh r4, [r6, #0x2a]
	strh r4, [r6, #0x38]
	strh r4, [r6, #0x3a]
	strh r4, [r6, #0x3c]
	adds r1, r6, #0
	adds r1, #0x46
	strb r0, [r1]
	strh r4, [r6, #0x3e]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C719C: .4byte gDispIo
.L080C71A0: .4byte gBg0Tm
.L080C71A4: .4byte gBg1Tm
.L080C71A8: .4byte gBg2Tm
.L080C71AC: .4byte gBg3Tm

	THUMB_FUNC_END func_080C7050

	THUMB_FUNC_START func_080C71B0
func_080C71B0: @ 0x080C71B0
	ldr r0, .L080C71BC  @ gUnknown_02022188
	ldrh r1, [r0, #2]
	strh r1, [r0, #8]
	ldrh r1, [r0, #6]
	strh r1, [r0, #0xa]
	bx lr
	.align 2, 0
.L080C71BC: .4byte gUnknown_02022188

	THUMB_FUNC_END func_080C71B0

	THUMB_FUNC_START func_080C71C0
func_080C71C0: @ 0x080C71C0
	push {lr}
	ldr r0, .L080C71D0  @ gUnknown_08AA6D04
	movs r1, #0
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C71D0: .4byte gUnknown_08AA6D04

	THUMB_FUNC_END func_080C71C0

	THUMB_FUNC_START func_080C71D4
func_080C71D4: @ 0x080C71D4
	push {lr}
	ldr r0, .L080C71E0  @ gUnknown_08AA6D04
	bl EndEachProc
	pop {r0}
	bx r0
	.align 2, 0
.L080C71E0: .4byte gUnknown_08AA6D04

	THUMB_FUNC_END func_080C71D4

	THUMB_FUNC_START func_080C71E4
func_080C71E4: @ 0x080C71E4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0x63
	bhi .L080C7250
	asrs r1, r1, #0x10
	movs r0, #0x1f
	bics r0, r1
	lsls r0, r0, #6
	ldr r2, .L080C725C  @ 0x0600E800
	adds r7, r0, r2
	movs r5, #0x63
	subs r5, r5, r1
	ldr r1, .L080C7260  @ gUnknown_08AA6D14
	lsls r5, r5, #0x10
	asrs r0, r5, #0x10
	lsls r4, r0, #2
	adds r1, r4, r1
	ldr r6, [r1]
	movs r1, #0x16
	bl DivRem
	adds r1, r0, #0
	lsls r1, r1, #0xa
	ldr r0, .L080C7264  @ 0x06008000
	adds r1, r1, r0
	adds r0, r6, #0
	bl Decompress
	ldr r0, .L080C7268  @ gUnknown_08AA6EA4
	adds r4, r4, r0
	ldr r4, [r4]
	movs r6, #0
	movs r2, #0xfc
	lsls r2, r2, #8
	mov r8, r2
.L080C7230:
	asrs r0, r5, #0x10
	movs r1, #0x16
	bl DivRem
	ldrh r1, [r4]
	mov r2, r8
	ands r1, r2
	lsls r0, r0, #5
	adds r0, r0, r6
	orrs r1, r0
	strh r1, [r7]
	adds r6, #1
	adds r7, #2
	adds r4, #2
	cmp r6, #0x1d
	ble .L080C7230
.L080C7250:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C725C: .4byte 0x0600E800
.L080C7260: .4byte gUnknown_08AA6D14
.L080C7264: .4byte 0x06008000
.L080C7268: .4byte gUnknown_08AA6EA4

	THUMB_FUNC_END func_080C71E4

	THUMB_FUNC_START func_080C726C
func_080C726C: @ 0x080C726C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	asrs r1, r1, #3
	adds r4, r1, #0
	adds r4, #0x15
	asrs r0, r6, #3
	adds r0, #0x15
	cmp r4, r0
	bge .L080C728E
	adds r5, r0, #0
.L080C7280:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl func_080C71E4
	adds r4, #1
	cmp r4, r5
	blt .L080C7280
.L080C728E:
	movs r2, #0x60
	subs r2, r2, r6
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C726C

	THUMB_FUNC_START func_080C72A4
func_080C72A4: @ 0x080C72A4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	bl SetBlendNone
	cmp r4, #0
	bne .L080C72DC
	ldr r2, .L080C72D8  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	b .L080C737C
	.align 2, 0
.L080C72D8: .4byte gDispIo
.L080C72DC:
	ldr r4, .L080C73A4  @ gDispIo
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	ldrb r0, [r4, #1]
	orrs r0, r2
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgChrOffset
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #1
	bl SetBgTilemapOffset
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
	ldr r0, .L080C73A8  @ gUnknown_08AF47F0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x80
	bl StorePaletteToBufferMaybe
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrb r1, [r4, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
.L080C737C:
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	ldr r0, .L080C73AC  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C73A4: .4byte gDispIo
.L080C73A8: .4byte gUnknown_08AF47F0
.L080C73AC: .4byte gUnknown_08B103D8

	THUMB_FUNC_END func_080C72A4

	THUMB_FUNC_START func_080C73B0
func_080C73B0: @ 0x080C73B0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2a]
	cmp r0, #6
	bls .L080C73BC
	b .L080C7604
.L080C73BC:
	lsls r0, r0, #2
	ldr r1, .L080C73C8  @ .L080C73CC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C73C8: .4byte .L080C73CC
.L080C73CC: @ jump table
	.4byte .L080C73E8 @ case 0
	.4byte .L080C7454 @ case 1
	.4byte .L080C7480 @ case 2
	.4byte .L080C74B0 @ case 3
	.4byte .L080C74EC @ case 4
	.4byte .L080C7510 @ case 5
	.4byte .L080C754C @ case 6
.L080C73E8:
	ldr r4, .L080C743C  @ gUnknown_08AB7DD0
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C7440  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C7444  @ gUnknown_08AB87E0
	ldr r1, .L080C7448  @ gBg3Tm
	bl Decompress
	ldr r0, .L080C744C  @ gPal
	ldr r1, .L080C7450  @ 0x00007FFF
	movs r2, #0xe1
	lsls r2, r2, #1
	adds r0, r0, r2
	movs r2, #0xe
.L080C7410:
	strh r1, [r0]
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge .L080C7410
	movs r4, #0xe1
	lsls r4, r4, #8
	adds r3, r4, #0
	ldr r1, .L080C7448  @ gBg3Tm
	movs r2, #0xa0
	lsls r2, r2, #2
.L080C7426:
	ldrh r4, [r1]
	adds r0, r3, r4
	strh r0, [r1]
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bne .L080C7426
	movs r0, #8
	bl EnableBgSync
	b .L080C7604
	.align 2, 0
.L080C743C: .4byte gUnknown_08AB7DD0
.L080C7440: .4byte 0x06002000
.L080C7444: .4byte gUnknown_08AB87E0
.L080C7448: .4byte gBg3Tm
.L080C744C: .4byte gPal
.L080C7450: .4byte 0x00007FFF
.L080C7454:
	ldr r4, .L080C7474  @ gUnknown_08ABF168
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C7478  @ gUnknown_08AC1878
	ldr r1, .L080C747C  @ gBuf
	bl Decompress
	b .L080C7604
	.align 2, 0
.L080C7474: .4byte gUnknown_08ABF168
.L080C7478: .4byte gUnknown_08AC1878
.L080C747C: .4byte gBuf
.L080C7480:
	ldr r4, .L080C74A0  @ gUnknown_08AC0BD8
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r2, .L080C74A4  @ 0x06002000
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C74A8  @ gUnknown_08AC1B98
	ldr r1, .L080C74AC  @ gBuf+0x800
	bl Decompress
	b .L080C7604
	.align 2, 0
.L080C74A0: .4byte gUnknown_08AC0BD8
.L080C74A4: .4byte 0x06002000
.L080C74A8: .4byte gUnknown_08AC1B98
.L080C74AC: .4byte gBuf+0x800
.L080C74B0:
	ldr r4, .L080C74DC  @ gUnknown_08ABB14C
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r1, r1, r3
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C74E0  @ gUnknown_08ABC074
	ldr r1, .L080C74E4  @ gBuf+0x1000
	bl Decompress
	ldr r0, .L080C74E8  @ gUnknown_08AC1C8C
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	b .L080C7604
	.align 2, 0
.L080C74DC: .4byte gUnknown_08ABB14C
.L080C74E0: .4byte gUnknown_08ABC074
.L080C74E4: .4byte gBuf+0x1000
.L080C74E8: .4byte gUnknown_08AC1C8C
.L080C74EC:
	ldr r0, .L080C7500  @ gUnknown_08ABE304
	ldr r1, .L080C7504  @ 0x06008000
	bl Decompress
	ldr r0, .L080C7508  @ gUnknown_08ABEF70
	ldr r1, .L080C750C  @ 0x0600C000
	bl Decompress
	b .L080C7604
	.align 2, 0
.L080C7500: .4byte gUnknown_08ABE304
.L080C7504: .4byte 0x06008000
.L080C7508: .4byte gUnknown_08ABEF70
.L080C750C: .4byte 0x0600C000
.L080C7510:
	ldr r0, .L080C753C  @ gUnknown_08ABD348
	ldr r1, .L080C7540  @ 0x0600A000
	bl Decompress
	ldr r0, .L080C7544  @ gUnknown_08ABE120
	ldr r4, .L080C7548  @ 0x0600C800
	adds r1, r4, #0
	bl Decompress
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r0, #0
	movs r2, #0xa0
	lsls r2, r2, #2
.L080C752C:
	ldrh r3, [r4]
	adds r0, r1, r3
	strh r0, [r4]
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bne .L080C752C
	b .L080C7604
	.align 2, 0
.L080C753C: .4byte gUnknown_08ABD348
.L080C7540: .4byte 0x0600A000
.L080C7544: .4byte gUnknown_08ABE120
.L080C7548: .4byte 0x0600C800
.L080C754C:
	ldr r3, .L080C75EC  @ gBuf+0x1000
	ldr r0, .L080C75F0  @ gPal
	movs r1, #0
	movs r4, #0xf1
	lsls r4, r4, #1
	adds r0, r0, r4
	movs r2, #0xe
.L080C755A:
	strh r1, [r0]
	adds r0, #2
	subs r2, #1
	cmp r2, #0
	bge .L080C755A
	movs r0, #0x80
	lsls r0, r0, #4
	adds r4, r3, r0
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r3, #0
	adds r1, r4, #0
	bl CpuFastSet
	adds r7, r4, #0
	ldr r6, .L080C75F4  @ 0x00000FFF
	movs r2, #0xf0
	lsls r2, r2, #8
	adds r4, r2, #0
	adds r3, r7, #0
	movs r2, #0xa0
	lsls r2, r2, #2
.L080C7586:
	ldrh r1, [r3]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r4
	strh r0, [r3]
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bne .L080C7586
	ldr r1, .L080C75F8  @ 0x0600F000
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r7, #0
	bl CpuFastSet
	bl EnablePalSync
	ldr r2, .L080C75FC  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	strh r0, [r5, #0x2a]
	strh r0, [r5, #0x30]
	strh r0, [r5, #0x32]
	ldr r1, .L080C7600  @ gUnknown_02022188
	strh r0, [r1]
	strh r0, [r1, #2]
	strh r0, [r1, #4]
	movs r2, #0xa0
	strh r2, [r1, #6]
	strh r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	adds r0, r5, #0
	bl Proc_Break
	b .L080C760A
	.align 2, 0
.L080C75EC: .4byte gBuf+0x1000
.L080C75F0: .4byte gPal
.L080C75F4: .4byte 0x00000FFF
.L080C75F8: .4byte 0x0600F000
.L080C75FC: .4byte gDispIo
.L080C7600: .4byte gUnknown_02022188
.L080C7604:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C760A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C73B0

	THUMB_FUNC_START func_080C7610
func_080C7610: @ 0x080C7610
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	THUMB_FUNC_END func_080C7610

	THUMB_FUNC_START func_080C7618
func_080C7618: @ 0x080C7618
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x4c
	movs r0, #0
	ldrsh r3, [r5, r0]
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	ldr r0, .L080C7668  @ gUnknown_08AB8CAC
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C766C  @ gPal+0x1C0
	ldr r1, .L080C7670  @ 0x00007FFF
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	adds r2, r4, #0
	bl func_080C69B0
	ldrh r1, [r5]
	movs r2, #0
	ldrsh r0, [r5, r2]
	cmp r0, #0x20
	bne .L080C7674
	movs r0, #0
	strh r0, [r5]
	adds r0, r6, #0
	bl Proc_Break
	b .L080C7678
	.align 2, 0
.L080C7668: .4byte gUnknown_08AB8CAC
.L080C766C: .4byte gPal+0x1C0
.L080C7670: .4byte 0x00007FFF
.L080C7674:
	adds r0, r1, #1
	strh r0, [r5]
.L080C7678:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C7618

	THUMB_FUNC_START func_080C7680
func_080C7680: @ 0x080C7680
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r5, r1, #0
	movs r4, #0
	movs r6, #4
.L080C768C:
	lsls r1, r4, #5
	str r6, [sp]
	movs r0, #0
	adds r2, r5, #0
	ldr r3, .L080C76C0  @ Sprite_32x8
	bl PutSpriteExt
	adds r4, #1
	cmp r4, #7
	ble .L080C768C
	movs r4, #0
	movs r5, #0
.L080C76A4:
	lsls r2, r4, #5
	str r5, [sp]
	movs r0, #0
	adds r1, r7, #0
	ldr r3, .L080C76C4  @ Sprite_8x32
	bl PutSpriteExt
	adds r4, #1
	cmp r4, #7
	ble .L080C76A4
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C76C0: .4byte Sprite_32x8
.L080C76C4: .4byte Sprite_8x32

	THUMB_FUNC_END func_080C7680

	THUMB_FUNC_START func_080C76C8
func_080C76C8: @ 0x080C76C8
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	movs r0, #7
	bl EnableBgSync
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x10
	bhi .L080C77BA
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x80
	bl Interpolate
	adds r6, r0, #0
	ldrh r0, [r5, #0x2a]
	subs r0, #0xc
	cmp r0, #4
	bhi .L080C7770
	lsls r0, r0, #2
	ldr r1, .L080C7704  @ .L080C7708
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C7704: .4byte .L080C7708
.L080C7708: @ jump table
	.4byte .L080C771C @ case 0
	.4byte .L080C7730 @ case 1
	.4byte .L080C7750 @ case 2
	.4byte .L080C7770 @ case 3
	.4byte .L080C7790 @ case 4
.L080C771C:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, .L080C772C  @ 0x0600C800
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b .L080C7782
	.align 2, 0
.L080C772C: .4byte 0x0600C800
.L080C7730:
	ldr r0, .L080C7744  @ gUnknown_08ABC22C
	ldr r1, .L080C7748  @ 0x06008000
	bl Decompress
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, .L080C774C  @ 0x0600C800
	b .L080C777A
	.align 2, 0
.L080C7744: .4byte gUnknown_08ABC22C
.L080C7748: .4byte 0x06008000
.L080C774C: .4byte 0x0600C800
.L080C7750:
	ldr r0, .L080C7768  @ gUnknown_08ABD174
	ldr r4, .L080C776C  @ 0x0600C000
	adds r1, r4, #0
	bl Decompress
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	str r4, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b .L080C7782
	.align 2, 0
.L080C7768: .4byte gUnknown_08ABD174
.L080C776C: .4byte 0x0600C000
.L080C7770:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, .L080C778C  @ 0x0600C000
.L080C777A:
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
.L080C7782:
	movs r2, #0x88
	movs r3, #2
	bl func_080C67D4
	b .L080C77B8
	.align 2, 0
.L080C778C: .4byte 0x0600C000
.L080C7790:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, .L080C7824  @ gBuf+0x1000
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	movs r2, #0x88
	movs r3, #2
	bl func_080C67D4
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgChrOffset
	ldr r0, .L080C7828  @ gUnknown_08AA7034
	adds r1, r5, #0
	bl SpawnProc
.L080C77B8:
	strh r6, [r5, #0x30]
.L080C77BA:
	ldrh r0, [r5, #0x2a]
	subs r4, r0, #5
	cmp r4, #0
	blt .L080C7830
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x90
	adds r3, r4, #0
	bl Interpolate
	adds r6, r0, #0
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r5, r2]
	ldr r7, .L080C782C  @ gBuf
	str r7, [sp]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r2, r2, r7
	mov r9, r2
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0xc8
	movs r3, #1
	bl func_080C689C
	movs r0, #0
	mov r8, r0
	strh r6, [r5, #0x32]
	cmp r4, #0x10
	bne .L080C7830
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	str r7, [sp]
	mov r2, r9
	str r2, [sp, #4]
	mov r1, r8
	str r1, [sp, #8]
	movs r1, #0
	movs r2, #0xc8
	movs r3, #0
	bl func_080C689C
	mov r2, r8
	strh r2, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C7836
	.align 2, 0
.L080C7824: .4byte gBuf+0x1000
.L080C7828: .4byte gUnknown_08AA7034
.L080C782C: .4byte gBuf
.L080C7830:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C7836:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C76C8

	THUMB_FUNC_START func_080C7844
func_080C7844: @ 0x080C7844
	push {r4, lr}
	ldr r0, .L080C78A0  @ 0x04000006
	ldrh r0, [r0]
	adds r3, r0, #0
	subs r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x9f
	bls .L080C7870
	ldr r2, .L080C78A4  @ 0x0400000C
	ldrh r1, [r2]
	ldr r0, .L080C78A8  @ 0x0000C0FF
	ands r0, r1
	movs r4, #0xf0
	lsls r4, r4, #5
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, .L080C78AC  @ 0x04000050
	ldr r2, .L080C78B0  @ 0x00000C46
	adds r0, r2, #0
	strh r0, [r1]
.L080C7870:
	ldr r1, .L080C78B4  @ gUnknown_02022188
	movs r4, #8
	ldrsh r0, [r1, r4]
	cmp r3, r0
	beq .L080C787E
	cmp r0, #0
	bne .L080C7898
.L080C787E:
	ldr r2, .L080C78A4  @ 0x0400000C
	ldrh r1, [r2]
	ldr r0, .L080C78A8  @ 0x0000C0FF
	ands r0, r1
	movs r3, #0xe8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r1, .L080C78AC  @ 0x04000050
	ldr r4, .L080C78B8  @ 0x00000C42
	adds r0, r4, #0
	strh r0, [r1]
.L080C7898:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C78A0: .4byte 0x04000006
.L080C78A4: .4byte 0x0400000C
.L080C78A8: .4byte 0x0000C0FF
.L080C78AC: .4byte 0x04000050
.L080C78B0: .4byte 0x00000C46
.L080C78B4: .4byte gUnknown_02022188
.L080C78B8: .4byte 0x00000C42

	THUMB_FUNC_END func_080C7844

	THUMB_FUNC_START func_080C78BC
func_080C78BC: @ 0x080C78BC
	push {lr}
	ldr r0, .L080C78EC  @ 0x04000006
	ldrh r0, [r0]
	adds r2, r0, #0
	subs r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x9f
	bls .L080C78D6
	ldr r1, .L080C78F0  @ 0x04000050
	ldr r3, .L080C78F4  @ 0x00000C46
	adds r0, r3, #0
	strh r0, [r1]
.L080C78D6:
	ldr r0, .L080C78F8  @ gUnknown_02022188
	movs r1, #0xa
	ldrsh r0, [r0, r1]
	cmp r2, r0
	bne .L080C78E8
	ldr r1, .L080C78F0  @ 0x04000050
	ldr r2, .L080C78FC  @ 0x00000CCF
	adds r0, r2, #0
	strh r0, [r1]
.L080C78E8:
	pop {r0}
	bx r0
	.align 2, 0
.L080C78EC: .4byte 0x04000006
.L080C78F0: .4byte 0x04000050
.L080C78F4: .4byte 0x00000C46
.L080C78F8: .4byte gUnknown_02022188
.L080C78FC: .4byte 0x00000CCF

	THUMB_FUNC_END func_080C78BC

	THUMB_FUNC_START func_080C7900
func_080C7900: @ 0x080C7900
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	ldr r0, .L080C79E4  @ func_080C7844
	bl SetOnHBlankA
	ldr r7, .L080C79E8  @ gDispIo
	ldrb r2, [r7, #1]
	movs r0, #0x20
	orrs r2, r0
	subs r0, #0x61
	ands r2, r0
	movs r0, #0x7f
	ands r2, r0
	ldr r1, .L080C79EC  @ gUnknown_030030B4
	ldrb r3, [r1]
	movs r0, #1
	mov r9, r0
	mov r1, r9
	orrs r3, r1
	movs r6, #2
	orrs r3, r6
	movs r0, #4
	mov r8, r0
	mov r1, r8
	orrs r3, r1
	movs r5, #8
	orrs r3, r5
	movs r4, #0x10
	orrs r3, r4
	movs r0, #0x35
	adds r0, r0, r7
	mov ip, r0
	ldrb r0, [r0]
	mov r1, r9
	orrs r0, r1
	orrs r0, r6
	movs r1, #5
	negs r1, r1
	ands r0, r1
	orrs r0, r5
	orrs r0, r4
	mov r1, ip
	strb r0, [r1]
	movs r0, #0x36
	adds r0, r0, r7
	mov sl, r0
	ldrb r1, [r0]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	orrs r0, r6
	mov r1, r8
	orrs r0, r1
	orrs r0, r5
	orrs r0, r4
	mov r1, r9
	orrs r2, r1
	orrs r2, r6
	mov r1, r8
	orrs r2, r1
	orrs r2, r5
	orrs r2, r4
	strb r2, [r7, #1]
	movs r1, #0x20
	orrs r3, r1
	ldr r1, .L080C79EC  @ gUnknown_030030B4
	strb r3, [r1]
	movs r1, #0x20
	orrs r0, r1
	mov r1, sl
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r4, #0
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	ldr r0, .L080C79F0  @ gUnknown_02022188
	ldrh r1, [r0]
	adds r0, r7, #0
	adds r0, #0x2c
	strb r1, [r0]
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	ldr r0, [sp, #4]
	bl Proc_Break
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080C79E4: .4byte func_080C7844
.L080C79E8: .4byte gDispIo
.L080C79EC: .4byte gUnknown_030030B4
.L080C79F0: .4byte gUnknown_02022188

	THUMB_FUNC_END func_080C7900

	THUMB_FUNC_START func_080C79F4
func_080C79F4: @ 0x080C79F4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r5, #0x10
	str r5, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xf0
	bl Interpolate
	ldr r4, .L080C7A6C  @ gUnknown_02022188
	movs r6, #0
	strh r0, [r4]
	ldrh r3, [r7, #0x2a]
	str r5, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xa0
	bl Interpolate
	strh r0, [r4, #2]
	ldr r2, .L080C7A70  @ gDispIo
	adds r0, r2, #0
	adds r0, #0x2d
	strb r6, [r0]
	adds r0, #4
	strb r6, [r0]
	ldrh r1, [r4]
	subs r0, #5
	strb r1, [r0]
	adds r1, r2, #0
	adds r1, #0x30
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r2, #2
	ldrsh r1, [r4, r2]
	cmp r0, #0xe8
	ble .L080C7A48
	movs r0, #0xe8
.L080C7A48:
	cmp r1, #0x88
	ble .L080C7A4E
	movs r1, #0x88
.L080C7A4E:
	bl func_080C7680
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x10
	bne .L080C7A78
	ldr r0, .L080C7A74  @ func_080C78BC
	bl SetOnHBlankA
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C7A7C
	.align 2, 0
.L080C7A6C: .4byte gUnknown_02022188
.L080C7A70: .4byte gDispIo
.L080C7A74: .4byte func_080C78BC
.L080C7A78:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C7A7C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C79F4

	THUMB_FUNC_START func_080C7A84
func_080C7A84: @ 0x080C7A84
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa0
	movs r2, #0x78
	bl Interpolate
	ldr r1, .L080C7AD0  @ gUnknown_02022188
	strh r0, [r1, #6]
	movs r0, #0xe8
	movs r1, #0x88
	bl func_080C7680
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xe
	bls .L080C7ABC
	ldr r3, .L080C7AD4  @ gUnknown_08AA6BFA
	ldr r0, .L080C7AD8  @ 0x00002046
	str r0, [sp]
	movs r0, #1
	movs r1, #0x98
	movs r2, #0x88
	bl PutSpriteExt
.L080C7ABC:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C7ADC
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C7AE0
	.align 2, 0
.L080C7AD0: .4byte gUnknown_02022188
.L080C7AD4: .4byte gUnknown_08AA6BFA
.L080C7AD8: .4byte 0x00002046
.L080C7ADC:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C7AE0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C7A84

	THUMB_FUNC_START func_080C7AE8
func_080C7AE8: @ 0x080C7AE8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0xe8
	movs r1, #0x88
	bl func_080C7680
	ldr r3, .L080C7B60  @ gUnknown_08AA6BFA
	ldr r0, .L080C7B64  @ 0x0000205A
	str r0, [sp]
	movs r0, #1
	movs r1, #0x98
	movs r2, #0x88
	bl PutSpriteExt
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x38
	bne .L080C7B74
	movs r0, #0
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x30]
	strh r0, [r4, #0x34]
	ldrh r0, [r4, #0x32]
	strh r0, [r4, #0x36]
	ldr r2, .L080C7B68  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r6, .L080C7B6C  @ 0x00007FFF
	movs r0, #0xf0
	lsls r0, r0, #8
	adds r5, r0, #0
	ldr r2, .L080C7B70  @ gBg2Tm
	movs r7, #0
	movs r3, #0xa0
	lsls r3, r3, #2
.L080C7B44:
	ldrh r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r5
	strh r0, [r2]
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bne .L080C7B44
	adds r0, r4, #0
	bl Proc_Break
	b .L080C7B78
	.align 2, 0
.L080C7B60: .4byte gUnknown_08AA6BFA
.L080C7B64: .4byte 0x0000205A
.L080C7B68: .4byte gDispIo
.L080C7B6C: .4byte 0x00007FFF
.L080C7B70: .4byte gBg2Tm
.L080C7B74:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C7B78:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C7AE8

	THUMB_FUNC_START func_080C7B80
func_080C7B80: @ 0x080C7B80
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #5
	bl EnableBgSync
	ldrh r0, [r6, #0x2a]
	cmp r0, #1
	bhi .L080C7BA8
	ldr r3, .L080C7CD0  @ gUnknown_08AA6BFA
	ldr r0, .L080C7CD4  @ 0x00002046
	str r0, [sp]
	movs r0, #1
	movs r1, #0x98
	movs r2, #0x88
	bl PutSpriteExt
.L080C7BA8:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bhi .L080C7BEC
	adds r3, r0, #0
	movs r5, #0x10
	str r5, [sp]
	movs r0, #1
	movs r1, #0x78
	movs r2, #0xa0
	bl Interpolate
	ldr r4, .L080C7CD8  @ gUnknown_02022188
	strh r0, [r4, #6]
	movs r2, #0x80
	lsls r2, r2, #1
	ldrh r3, [r6, #0x2a]
	str r5, [sp]
	movs r0, #1
	movs r1, #0xe8
	bl Interpolate
	adds r5, r0, #0
	movs r0, #6
	ldrsh r1, [r4, r0]
	adds r1, #0x10
	adds r0, r5, #0
	bl func_080C7680
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bne .L080C7BEC
	movs r0, #0
	bl SetOnHBlankA
.L080C7BEC:
	ldrh r2, [r6, #0x2a]
	mov r8, r2
	mov r7, r8
	subs r7, #4
	cmp r7, #0
	blt .L080C7CE4
	cmp r7, #0x18
	bgt .L080C7C2E
	ldrh r1, [r6, #0x34]
	movs r2, #0xb8
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	adds r3, r7, #0
	bl Interpolate
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x30
	ldrsh r1, [r6, r3]
	ldr r2, .L080C7CDC  @ gBuf+0x1000
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0x88
	movs r3, #2
	bl func_080C67D4
	strh r5, [r6, #0x30]
.L080C7C2E:
	movs r0, #0xb
	negs r0, r0
	add r0, r8
	mov r9, r0
	cmp r0, #0
	blt .L080C7CE4
	cmp r7, #0x18
	bne .L080C7C5C
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
.L080C7C5C:
	cmp r7, #0x17
	ble .L080C7C88
	mov r3, r8
	subs r3, #0x1b
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r5
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetBlendConfig
.L080C7C88:
	ldrh r1, [r6, #0x36]
	movs r2, #0xc0
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	mov r3, r9
	bl Interpolate
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	ldr r2, .L080C7CE0  @ gBuf
	str r2, [sp]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r2, r3
	str r2, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r2, #0xc8
	movs r3, #0
	bl func_080C689C
	strh r5, [r6, #0x32]
	mov r0, r9
	cmp r0, #0x18
	bne .L080C7CE4
	strh r4, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_Break
	b .L080C7CEA
	.align 2, 0
.L080C7CD0: .4byte gUnknown_08AA6BFA
.L080C7CD4: .4byte 0x00002046
.L080C7CD8: .4byte gUnknown_02022188
.L080C7CDC: .4byte gBuf+0x1000
.L080C7CE0: .4byte gBuf
.L080C7CE4:
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080C7CEA:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C7B80

	THUMB_FUNC_START func_080C7CF8
func_080C7CF8: @ 0x080C7CF8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	cmp r0, #6
	bls .L080C7D06
	b .L080C7F80
.L080C7D06:
	lsls r0, r0, #2
	ldr r1, .L080C7D10  @ .L080C7D14
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C7D10: .4byte .L080C7D14
.L080C7D14: @ jump table
	.4byte .L080C7D30 @ case 0
	.4byte .L080C7DEC @ case 1
	.4byte .L080C7E18 @ case 2
	.4byte .L080C7E48 @ case 3
	.4byte .L080C7E84 @ case 4
	.4byte .L080C7EA8 @ case 5
	.4byte .L080C7EE4 @ case 6
.L080C7D30:
	ldr r2, .L080C7DDC  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080C7DE0  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C7DE4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C7DE8  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #7
	bl EnableBgSync
	movs r0, #0
	bl SetBlendBackdropA
	movs r0, #0
	bl SetBlendBackdropB
	movs r0, #1
	movs r1, #8
	movs r2, #8
	movs r3, #8
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	b .L080C7F80
	.align 2, 0
.L080C7DDC: .4byte gDispIo
.L080C7DE0: .4byte gBg0Tm
.L080C7DE4: .4byte gBg1Tm
.L080C7DE8: .4byte gBg2Tm
.L080C7DEC:
	ldr r4, .L080C7E0C  @ gUnknown_08AC5614
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C7E10  @ gUnknown_08AC8DDC
	ldr r1, .L080C7E14  @ gBuf
	bl Decompress
	b .L080C7F80
	.align 2, 0
.L080C7E0C: .4byte gUnknown_08AC5614
.L080C7E10: .4byte gUnknown_08AC8DDC
.L080C7E14: .4byte gBuf
.L080C7E18:
	ldr r4, .L080C7E38  @ gUnknown_08AC7374
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r2, .L080C7E3C  @ 0x06002000
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C7E40  @ gUnknown_08AC91F8
	ldr r1, .L080C7E44  @ gBuf+0x800
	bl Decompress
	b .L080C7F80
	.align 2, 0
.L080C7E38: .4byte gUnknown_08AC7374
.L080C7E3C: .4byte 0x06002000
.L080C7E40: .4byte gUnknown_08AC91F8
.L080C7E44: .4byte gBuf+0x800
.L080C7E48:
	ldr r4, .L080C7E74  @ gUnknown_08AC1DEC
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C7E78  @ gUnknown_08AC2B24
	ldr r1, .L080C7E7C  @ gBuf+0x1000
	bl Decompress
	ldr r0, .L080C7E80  @ gUnknown_08AC933C
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	b .L080C7F80
	.align 2, 0
.L080C7E74: .4byte gUnknown_08AC1DEC
.L080C7E78: .4byte gUnknown_08AC2B24
.L080C7E7C: .4byte gBuf+0x1000
.L080C7E80: .4byte gUnknown_08AC933C
.L080C7E84:
	ldr r0, .L080C7E98  @ gUnknown_08AC4928
	ldr r1, .L080C7E9C  @ 0x06008000
	bl Decompress
	ldr r0, .L080C7EA0  @ gUnknown_08AC5420
	ldr r1, .L080C7EA4  @ 0x0600C000
	bl Decompress
	b .L080C7F80
	.align 2, 0
.L080C7E98: .4byte gUnknown_08AC4928
.L080C7E9C: .4byte 0x06008000
.L080C7EA0: .4byte gUnknown_08AC5420
.L080C7EA4: .4byte 0x0600C000
.L080C7EA8:
	ldr r0, .L080C7ED4  @ gUnknown_08AC3BC8
	ldr r1, .L080C7ED8  @ 0x0600A000
	bl Decompress
	ldr r0, .L080C7EDC  @ gUnknown_08AC4760
	ldr r4, .L080C7EE0  @ 0x0600C800
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r2, #0
	movs r3, #0xa0
	lsls r3, r3, #2
.L080C7EC4:
	ldrh r2, [r4]
	adds r0, r1, r2
	strh r0, [r4]
	adds r4, #2
	subs r3, #1
	cmp r3, #0
	bne .L080C7EC4
	b .L080C7F80
	.align 2, 0
.L080C7ED4: .4byte gUnknown_08AC3BC8
.L080C7ED8: .4byte 0x0600A000
.L080C7EDC: .4byte gUnknown_08AC4760
.L080C7EE0: .4byte 0x0600C800
.L080C7EE4:
	ldr r0, .L080C7F6C  @ gBuf+0x1000
	movs r1, #0x80
	lsls r1, r1, #4
	adds r4, r0, r1
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r4, #0
	bl CpuFastSet
	adds r7, r4, #0
	ldr r5, .L080C7F70  @ 0x00000FFF
	movs r2, #0xf0
	lsls r2, r2, #8
	adds r4, r2, #0
	adds r2, r7, #0
	movs r3, #0xa0
	lsls r3, r3, #2
.L080C7F06:
	ldrh r1, [r2]
	adds r0, r5, #0
	ands r0, r1
	orrs r0, r4
	strh r0, [r2]
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bne .L080C7F06
	ldr r1, .L080C7F74  @ 0x0600F000
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r7, #0
	bl CpuFastSet
	bl EnablePalSync
	ldr r2, .L080C7F78  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r2, #0
	strh r2, [r6, #0x2a]
	strh r2, [r6, #0x30]
	strh r2, [r6, #0x32]
	ldr r1, .L080C7F7C  @ gUnknown_02022188
	movs r0, #0xf0
	strh r0, [r1]
	strh r2, [r1, #2]
	strh r2, [r1, #4]
	movs r0, #0xa0
	strh r0, [r1, #6]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	adds r0, r6, #0
	bl Proc_Break
	b .L080C7F86
	.align 2, 0
.L080C7F6C: .4byte gBuf+0x1000
.L080C7F70: .4byte 0x00000FFF
.L080C7F74: .4byte 0x0600F000
.L080C7F78: .4byte gDispIo
.L080C7F7C: .4byte gUnknown_02022188
.L080C7F80:
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080C7F86:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C7CF8

	THUMB_FUNC_START func_080C7F90
func_080C7F90: @ 0x080C7F90
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	movs r0, #7
	bl EnableBgSync
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x10
	bhi .L080C807A
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x68
	bl Interpolate
	adds r6, r0, #0
	ldrh r0, [r5, #0x2a]
	subs r0, #0xc
	cmp r0, #4
	bhi .L080C8038
	lsls r0, r0, #2
	ldr r1, .L080C7FCC  @ .L080C7FD0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C7FCC: .4byte .L080C7FD0
.L080C7FD0: @ jump table
	.4byte .L080C7FE4 @ case 0
	.4byte .L080C7FF8 @ case 1
	.4byte .L080C8018 @ case 2
	.4byte .L080C8038 @ case 3
	.4byte .L080C8058 @ case 4
.L080C7FE4:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, .L080C7FF4  @ 0x0600C800
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b .L080C804A
	.align 2, 0
.L080C7FF4: .4byte 0x0600C800
.L080C7FF8:
	ldr r0, .L080C800C  @ gUnknown_08AC2CB4
	ldr r1, .L080C8010  @ 0x06008000
	bl Decompress
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, .L080C8014  @ 0x0600C800
	b .L080C8042
	.align 2, 0
.L080C800C: .4byte gUnknown_08AC2CB4
.L080C8010: .4byte 0x06008000
.L080C8014: .4byte 0x0600C800
.L080C8018:
	ldr r0, .L080C8030  @ gUnknown_08AC3A2C
	ldr r4, .L080C8034  @ 0x0600C000
	adds r1, r4, #0
	bl Decompress
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	str r4, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	b .L080C804A
	.align 2, 0
.L080C8030: .4byte gUnknown_08AC3A2C
.L080C8034: .4byte 0x0600C000
.L080C8038:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	ldr r2, .L080C8054  @ 0x0600C000
.L080C8042:
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
.L080C804A:
	movs r2, #0x98
	movs r3, #2
	bl func_080C689C
	b .L080C8078
	.align 2, 0
.L080C8054: .4byte 0x0600C000
.L080C8058:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	ldr r1, .L080C80E4  @ gBuf+0x1000
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	str r1, [sp, #8]
	movs r2, #0x98
	movs r3, #2
	bl func_080C689C
	movs r1, #0x80
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgChrOffset
.L080C8078:
	strh r6, [r5, #0x30]
.L080C807A:
	ldrh r0, [r5, #0x2a]
	subs r4, r0, #5
	cmp r4, #0
	blt .L080C80EC
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xcc
	adds r3, r4, #0
	bl Interpolate
	adds r6, r0, #0
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r5, r2]
	ldr r7, .L080C80E8  @ gBuf
	str r7, [sp]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r2, r2, r7
	mov r9, r2
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0xc0
	movs r3, #1
	bl func_080C67D4
	movs r0, #0
	mov r8, r0
	strh r6, [r5, #0x32]
	cmp r4, #0x10
	bne .L080C80EC
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	str r7, [sp]
	mov r2, r9
	str r2, [sp, #4]
	mov r1, r8
	str r1, [sp, #8]
	movs r1, #0
	movs r2, #0xc0
	movs r3, #0
	bl func_080C67D4
	mov r2, r8
	strh r2, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C80F2
	.align 2, 0
.L080C80E4: .4byte gBuf+0x1000
.L080C80E8: .4byte gBuf
.L080C80EC:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C80F2:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C7F90

	THUMB_FUNC_START func_080C8100
func_080C8100: @ 0x080C8100
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, .L080C8178  @ func_080C7844
	bl SetOnHBlankA
	ldr r2, .L080C817C  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, .L080C8180  @ gUnknown_02022188
	ldrh r0, [r0]
	adds r1, r2, #0
	adds r1, #0x2d
	movs r4, #0
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r4, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0xf0
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	adds r0, r5, #0
	bl Proc_Break
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C8178: .4byte func_080C7844
.L080C817C: .4byte gDispIo
.L080C8180: .4byte gUnknown_02022188

	THUMB_FUNC_END func_080C8100

	THUMB_FUNC_START func_080C8184
func_080C8184: @ 0x080C8184
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r5, #0x10
	str r5, [sp]
	movs r0, #4
	movs r1, #0xf0
	movs r2, #0
	bl Interpolate
	ldr r4, .L080C81FC  @ gUnknown_02022188
	movs r6, #0
	strh r0, [r4]
	ldrh r3, [r7, #0x2a]
	str r5, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0xa0
	bl Interpolate
	strh r0, [r4, #2]
	ldr r2, .L080C8200  @ gDispIo
	ldrh r0, [r4]
	adds r1, r2, #0
	adds r1, #0x2d
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x31
	strb r6, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r2, #2
	ldrsh r1, [r4, r2]
	cmp r0, #7
	bgt .L080C81DA
	movs r0, #8
.L080C81DA:
	cmp r1, #0x88
	ble .L080C81E0
	movs r1, #0x88
.L080C81E0:
	bl func_080C7680
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x10
	bne .L080C8208
	ldr r0, .L080C8204  @ func_080C78BC
	bl SetOnHBlankA
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C820C
	.align 2, 0
.L080C81FC: .4byte gUnknown_02022188
.L080C8200: .4byte gDispIo
.L080C8204: .4byte func_080C78BC
.L080C8208:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C820C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8184

	THUMB_FUNC_START func_080C8214
func_080C8214: @ 0x080C8214
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r3, [r4, #0x2a]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	movs r1, #0xa0
	movs r2, #0x78
	bl Interpolate
	ldr r1, .L080C8260  @ gUnknown_02022188
	strh r0, [r1, #6]
	movs r0, #8
	movs r1, #0x88
	bl func_080C7680
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xe
	bls .L080C824C
	ldr r3, .L080C8264  @ gUnknown_08AA6C0E
	ldr r0, .L080C8268  @ 0x0000206E
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0x88
	bl PutSpriteExt
.L080C824C:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C826C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C8270
	.align 2, 0
.L080C8260: .4byte gUnknown_02022188
.L080C8264: .4byte gUnknown_08AA6C0E
.L080C8268: .4byte 0x0000206E
.L080C826C:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C8270:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8214

	THUMB_FUNC_START func_080C8278
func_080C8278: @ 0x080C8278
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #8
	movs r1, #0x88
	bl func_080C7680
	ldr r3, .L080C82A8  @ gUnknown_08AA6C0E
	ldr r0, .L080C82AC  @ 0x0000207C
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0x88
	bl PutSpriteExt
	ldrh r0, [r5, #0x2a]
	cmp r0, #1
	beq .L080C82C8
	cmp r0, #1
	bgt .L080C82B0
	cmp r0, #0
	beq .L080C82B6
	b .L080C82EA
	.align 2, 0
.L080C82A8: .4byte gUnknown_08AA6C0E
.L080C82AC: .4byte 0x0000207C
.L080C82B0:
	cmp r0, #2
	beq .L080C82DA
	b .L080C82EA
.L080C82B6:
	movs r4, #0
.L080C82B8:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl func_080C71E4
	adds r4, #1
	cmp r4, #7
	ble .L080C82B8
	b .L080C82EA
.L080C82C8:
	movs r4, #8
.L080C82CA:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl func_080C71E4
	adds r4, #1
	cmp r4, #0xf
	ble .L080C82CA
	b .L080C82EA
.L080C82DA:
	movs r4, #0x10
.L080C82DC:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	bl func_080C71E4
	adds r4, #1
	cmp r4, #0x15
	ble .L080C82DC
.L080C82EA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x38
	bne .L080C8350
	movs r0, #0
	strh r0, [r5, #0x2a]
	ldrh r0, [r5, #0x30]
	strh r0, [r5, #0x34]
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x36]
	ldr r2, .L080C8344  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r6, .L080C8348  @ 0x00007FFF
	movs r0, #0xf0
	lsls r0, r0, #8
	adds r3, r0, #0
	ldr r2, .L080C834C  @ gBg2Tm
	movs r7, #0
	movs r4, #0xa0
	lsls r4, r4, #2
.L080C8328:
	ldrh r1, [r2]
	adds r0, r6, #0
	ands r0, r1
	orrs r0, r3
	strh r0, [r2]
	adds r2, #2
	subs r4, #1
	cmp r4, #0
	bne .L080C8328
	adds r0, r5, #0
	bl Proc_Break
	b .L080C8354
	.align 2, 0
.L080C8344: .4byte gDispIo
.L080C8348: .4byte 0x00007FFF
.L080C834C: .4byte gBg2Tm
.L080C8350:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C8354:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8278

	THUMB_FUNC_START func_080C835C
func_080C835C: @ 0x080C835C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #5
	bl EnableBgSync
	ldrh r0, [r6, #0x2a]
	cmp r0, #1
	bhi .L080C8384
	ldr r3, .L080C84B0  @ gUnknown_08AA6C0E
	ldr r0, .L080C84B4  @ 0x0000206E
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0x88
	bl PutSpriteExt
.L080C8384:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bhi .L080C83C6
	adds r3, r0, #0
	movs r5, #0x10
	str r5, [sp]
	movs r0, #1
	movs r1, #0x78
	movs r2, #0xa0
	bl Interpolate
	ldr r4, .L080C84B8  @ gUnknown_02022188
	strh r0, [r4, #6]
	ldrh r3, [r6, #0x2a]
	str r5, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	movs r0, #6
	ldrsh r1, [r4, r0]
	adds r1, #0x10
	adds r0, r5, #0
	bl func_080C7680
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x10
	bne .L080C83C6
	movs r0, #0
	bl SetOnHBlankA
.L080C83C6:
	ldrh r2, [r6, #0x2a]
	mov r8, r2
	mov r7, r8
	subs r7, #4
	cmp r7, #0
	blt .L080C84C4
	cmp r7, #0x18
	bgt .L080C8408
	ldrh r1, [r6, #0x34]
	movs r2, #0xac
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	adds r3, r7, #0
	bl Interpolate
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r3, #0x30
	ldrsh r1, [r6, r3]
	ldr r2, .L080C84BC  @ gBuf+0x1000
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	movs r2, #1
	str r2, [sp, #8]
	movs r2, #0x98
	movs r3, #2
	bl func_080C689C
	strh r5, [r6, #0x30]
.L080C8408:
	movs r0, #0xb
	negs r0, r0
	add r0, r8
	mov r9, r0
	cmp r0, #0
	blt .L080C84C4
	cmp r7, #0x18
	bne .L080C8436
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
.L080C8436:
	cmp r7, #0x17
	ble .L080C8462
	mov r3, r8
	subs r3, #0x1b
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r5
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetBlendConfig
.L080C8462:
	ldrh r1, [r6, #0x36]
	movs r2, #0xde
	lsls r2, r2, #1
	movs r0, #0x18
	str r0, [sp]
	movs r0, #1
	mov r3, r9
	bl Interpolate
	adds r5, r0, #0
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	ldr r2, .L080C84C0  @ gBuf
	str r2, [sp]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r2, r2, r3
	str r2, [sp, #4]
	movs r4, #0
	str r4, [sp, #8]
	movs r2, #0xc0
	movs r3, #0
	bl func_080C67D4
	strh r5, [r6, #0x32]
	mov r0, r9
	cmp r0, #0x18
	bne .L080C84C4
	movs r0, #0
	bl SetOnHBlankA
	strh r4, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_Break
	b .L080C84CA
	.align 2, 0
.L080C84B0: .4byte gUnknown_08AA6C0E
.L080C84B4: .4byte 0x0000206E
.L080C84B8: .4byte gUnknown_02022188
.L080C84BC: .4byte gBuf+0x1000
.L080C84C0: .4byte gBuf
.L080C84C4:
	ldrh r0, [r6, #0x2a]
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080C84CA:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C835C

	THUMB_FUNC_START func_080C84D8
func_080C84D8: @ 0x080C84D8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0
	bne .L080C851C
	ldr r2, .L080C8544  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
.L080C851C:
	ldrh r3, [r4, #0x2a]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	ldr r1, .L080C8544  @ gDispIo
	adds r1, #0x46
	strb r0, [r1]
	ldrh r0, [r4, #0x2a]
	cmp r0, #8
	bne .L080C8548
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C854C
	.align 2, 0
.L080C8544: .4byte gDispIo
.L080C8548:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C854C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C84D8

	THUMB_FUNC_START func_080C8554
func_080C8554: @ 0x080C8554
	ldr r1, .L080C8560  @ gDispIo
	ldrh r0, [r1, #0x28]
	adds r0, #2
	strh r0, [r1, #0x28]
	bx lr
	.align 2, 0
.L080C8560: .4byte gDispIo

	THUMB_FUNC_END func_080C8554

	THUMB_FUNC_START func_080C8564
func_080C8564: @ 0x080C8564
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x46
	ldrb r0, [r0]
	bl func_080C72A4
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl func_080C726C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8564

	THUMB_FUNC_START func_080C8580
func_080C8580: @ 0x080C8580
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #3
	movs r1, #8
	movs r2, #8
	movs r3, #0xe
	bl SetBlendConfig
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	adds r4, #0x4c
	strh r5, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8580

	THUMB_FUNC_START func_080C85B0
func_080C85B0: @ 0x080C85B0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #0
	movs r1, #0xe
	movs r2, #0
	bl Interpolate
	adds r3, r0, #0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #8
	movs r2, #8
	bl SetBlendConfig
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0x28
	bne .L080C85EE
	adds r0, r5, #0
	bl Proc_Break
	b .L080C85F2
.L080C85EE:
	adds r0, r1, #1
	strh r0, [r4]
.L080C85F2:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C85B0

	THUMB_FUNC_START func_080C85FC
func_080C85FC: @ 0x080C85FC
	push {lr}
	bl SetBlendNone
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C85FC

	THUMB_FUNC_START func_080C8608
func_080C8608: @ 0x080C8608
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #3
	movs r1, #8
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	adds r4, #0x4c
	strh r5, [r4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8608

	THUMB_FUNC_START func_080C8638
func_080C8638: @ 0x080C8638
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xc
	bl Interpolate
	adds r3, r0, #0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #3
	movs r1, #8
	movs r2, #8
	bl SetBlendConfig
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0x28
	bne .L080C8676
	adds r0, r5, #0
	bl Proc_Break
	b .L080C867A
.L080C8676:
	adds r0, r1, #1
	strh r0, [r4]
.L080C867A:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8638

	THUMB_FUNC_START func_080C8684
func_080C8684: @ 0x080C8684
	push {lr}
	bl SetBlendNone
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8684

	THUMB_FUNC_START func_080C8690
func_080C8690: @ 0x080C8690
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	subs r0, #1
	cmp r0, #5
	bls .L080C86C8
	b .L080C8802
.L080C86C8:
	lsls r0, r0, #2
	ldr r1, .L080C86D4  @ .L080C86D8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C86D4: .4byte .L080C86D8
.L080C86D8: @ jump table
	.4byte .L080C86F0 @ case 0
	.4byte .L080C8740 @ case 1
	.4byte .L080C876C @ case 2
	.4byte .L080C879C @ case 3
	.4byte .L080C87CC @ case 4
	.4byte .L080C87E0 @ case 5
.L080C86F0:
	ldr r4, .L080C8730  @ gUnknown_08AB8CCC
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C8734  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8738  @ gUnknown_08AB942C
	ldr r4, .L080C873C  @ gBg3Tm
	adds r1, r4, #0
	bl Decompress
	movs r3, #0xe1
	lsls r3, r3, #8
	adds r2, r3, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C8718:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne .L080C8718
	movs r0, #8
	bl EnableBgSync
	b .L080C8802
	.align 2, 0
.L080C8730: .4byte gUnknown_08AB8CCC
.L080C8734: .4byte 0x06002000
.L080C8738: .4byte gUnknown_08AB942C
.L080C873C: .4byte gBg3Tm
.L080C8740:
	ldr r4, .L080C8760  @ gUnknown_08AC949C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8764  @ gUnknown_08ACBF58
	ldr r1, .L080C8768  @ gBuf
	bl Decompress
	b .L080C8802
	.align 2, 0
.L080C8760: .4byte gUnknown_08AC949C
.L080C8764: .4byte gUnknown_08ACBF58
.L080C8768: .4byte gBuf
.L080C876C:
	ldr r4, .L080C878C  @ gUnknown_08ACAF70
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r3, .L080C8790  @ 0x06002000
	adds r1, r1, r3
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8794  @ gUnknown_08ACC340
	ldr r1, .L080C8798  @ gBuf+0x800
	bl Decompress
	b .L080C8802
	.align 2, 0
.L080C878C: .4byte gUnknown_08ACAF70
.L080C8790: .4byte 0x06002000
.L080C8794: .4byte gUnknown_08ACC340
.L080C8798: .4byte gBuf+0x800
.L080C879C:
	ldr r0, .L080C87BC  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C87C0  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C87C4  @ 0x0600D800
	ldr r2, .L080C87C8  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
	b .L080C8802
	.align 2, 0
.L080C87BC: .4byte gBg0Tm
.L080C87C0: .4byte gBg1Tm
.L080C87C4: .4byte 0x0600D800
.L080C87C8: .4byte 0x01000400
.L080C87CC:
	ldr r0, .L080C87D8  @ gUnknown_08AF312C
	ldr r1, .L080C87DC  @ 0x06004000
	bl Decompress
	b .L080C8802
	.align 2, 0
.L080C87D8: .4byte gUnknown_08AF312C
.L080C87DC: .4byte 0x06004000
.L080C87E0:
	ldr r0, .L080C8820  @ gUnknown_08AF404C
	ldr r4, .L080C8824  @ 0x0600F000
	adds r1, r4, #0
	bl Decompress
	movs r0, #0x80
	lsls r0, r0, #8
	adds r2, r0, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080C87F4:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	subs r1, #1
	adds r4, #2
	cmp r1, #0
	bne .L080C87F4
.L080C8802:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne .L080C8830
	ldr r0, .L080C8828  @ gUnknown_08AA705C
	bl EndEachProc
	ldr r0, .L080C882C  @ gUnknown_08AA707C
	bl EndEachProc
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C8834
	.align 2, 0
.L080C8820: .4byte gUnknown_08AF404C
.L080C8824: .4byte 0x0600F000
.L080C8828: .4byte gUnknown_08AA705C
.L080C882C: .4byte gUnknown_08AA707C
.L080C8830:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C8834:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8690

	THUMB_FUNC_START func_080C883C
func_080C883C: @ 0x080C883C
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq .L080C88AC
	cmp r0, #2
	bgt .L080C887A
	cmp r0, #1
	beq .L080C8880
	b .L080C88FA
.L080C887A:
	cmp r0, #3
	beq .L080C88DC
	b .L080C88FA
.L080C8880:
	ldr r4, .L080C88A0  @ gUnknown_08ACC540
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C88A4  @ gUnknown_08ACEED0
	ldr r1, .L080C88A8  @ gBuf
	bl Decompress
	b .L080C88FA
	.align 2, 0
.L080C88A0: .4byte gUnknown_08ACC540
.L080C88A4: .4byte gUnknown_08ACEED0
.L080C88A8: .4byte gBuf
.L080C88AC:
	ldr r4, .L080C88CC  @ gUnknown_08ACE0B8
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C88D0  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C88D4  @ gUnknown_08ACF200
	ldr r1, .L080C88D8  @ gBuf+0x800
	bl Decompress
	b .L080C88FA
	.align 2, 0
.L080C88CC: .4byte gUnknown_08ACE0B8
.L080C88D0: .4byte 0x06002000
.L080C88D4: .4byte gUnknown_08ACF200
.L080C88D8: .4byte gBuf+0x800
.L080C88DC:
	ldr r0, .L080C8914  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C8918  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C891C  @ 0x0600D800
	ldr r2, .L080C8920  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
.L080C88FA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne .L080C8928
	ldr r0, .L080C8924  @ gUnknown_08AA705C
	bl EndEachProc
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C892C
	.align 2, 0
.L080C8914: .4byte gBg0Tm
.L080C8918: .4byte gBg1Tm
.L080C891C: .4byte 0x0600D800
.L080C8920: .4byte 0x01000400
.L080C8924: .4byte gUnknown_08AA705C
.L080C8928:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C892C:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C883C

	THUMB_FUNC_START func_080C8934
func_080C8934: @ 0x080C8934
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq .L080C89A4
	cmp r0, #2
	bgt .L080C8972
	cmp r0, #1
	beq .L080C8978
	b .L080C89F2
.L080C8972:
	cmp r0, #3
	beq .L080C89D4
	b .L080C89F2
.L080C8978:
	ldr r4, .L080C8998  @ gUnknown_08ACF474
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C899C  @ gUnknown_08AD206C
	ldr r1, .L080C89A0  @ gBuf
	bl Decompress
	b .L080C89F2
	.align 2, 0
.L080C8998: .4byte gUnknown_08ACF474
.L080C899C: .4byte gUnknown_08AD206C
.L080C89A0: .4byte gBuf
.L080C89A4:
	ldr r4, .L080C89C4  @ gUnknown_08AD1048
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C89C8  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C89CC  @ gUnknown_08AD236C
	ldr r1, .L080C89D0  @ gBuf+0x800
	bl Decompress
	b .L080C89F2
	.align 2, 0
.L080C89C4: .4byte gUnknown_08AD1048
.L080C89C8: .4byte 0x06002000
.L080C89CC: .4byte gUnknown_08AD236C
.L080C89D0: .4byte gBuf+0x800
.L080C89D4:
	ldr r0, .L080C8A04  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C8A08  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C8A0C  @ 0x0600D800
	ldr r2, .L080C8A10  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
.L080C89F2:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne .L080C8A14
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C8A18
	.align 2, 0
.L080C8A04: .4byte gBg0Tm
.L080C8A08: .4byte gBg1Tm
.L080C8A0C: .4byte 0x0600D800
.L080C8A10: .4byte 0x01000400
.L080C8A14:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C8A18:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8934

	THUMB_FUNC_START func_080C8A20
func_080C8A20: @ 0x080C8A20
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq .L080C8A90
	cmp r0, #2
	bgt .L080C8A5E
	cmp r0, #1
	beq .L080C8A64
	b .L080C8ADE
.L080C8A5E:
	cmp r0, #3
	beq .L080C8AC0
	b .L080C8ADE
.L080C8A64:
	ldr r4, .L080C8A84  @ gUnknown_08AD2614
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8A88  @ gUnknown_08AD5094
	ldr r1, .L080C8A8C  @ gBuf
	bl Decompress
	b .L080C8ADE
	.align 2, 0
.L080C8A84: .4byte gUnknown_08AD2614
.L080C8A88: .4byte gUnknown_08AD5094
.L080C8A8C: .4byte gBuf
.L080C8A90:
	ldr r4, .L080C8AB0  @ gUnknown_08AD423C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C8AB4  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8AB8  @ gUnknown_08AD543C
	ldr r1, .L080C8ABC  @ gBuf+0x800
	bl Decompress
	b .L080C8ADE
	.align 2, 0
.L080C8AB0: .4byte gUnknown_08AD423C
.L080C8AB4: .4byte 0x06002000
.L080C8AB8: .4byte gUnknown_08AD543C
.L080C8ABC: .4byte gBuf+0x800
.L080C8AC0:
	ldr r0, .L080C8AF0  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C8AF4  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C8AF8  @ 0x0600D800
	ldr r2, .L080C8AFC  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
.L080C8ADE:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne .L080C8B00
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C8B04
	.align 2, 0
.L080C8AF0: .4byte gBg0Tm
.L080C8AF4: .4byte gBg1Tm
.L080C8AF8: .4byte 0x0600D800
.L080C8AFC: .4byte 0x01000400
.L080C8B00:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C8B04:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8A20

	THUMB_FUNC_START func_080C8B0C
func_080C8B0C: @ 0x080C8B0C
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq .L080C8B7C
	cmp r0, #2
	bgt .L080C8B4A
	cmp r0, #1
	beq .L080C8B50
	b .L080C8BCA
.L080C8B4A:
	cmp r0, #3
	beq .L080C8BAC
	b .L080C8BCA
.L080C8B50:
	ldr r4, .L080C8B70  @ gUnknown_08AD563C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8B74  @ gUnknown_08AD8518
	ldr r1, .L080C8B78  @ gBuf
	bl Decompress
	b .L080C8BCA
	.align 2, 0
.L080C8B70: .4byte gUnknown_08AD563C
.L080C8B74: .4byte gUnknown_08AD8518
.L080C8B78: .4byte gBuf
.L080C8B7C:
	ldr r4, .L080C8B9C  @ gUnknown_08AD72FC
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C8BA0  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8BA4  @ gUnknown_08AD88D4
	ldr r1, .L080C8BA8  @ gBuf+0x800
	bl Decompress
	b .L080C8BCA
	.align 2, 0
.L080C8B9C: .4byte gUnknown_08AD72FC
.L080C8BA0: .4byte 0x06002000
.L080C8BA4: .4byte gUnknown_08AD88D4
.L080C8BA8: .4byte gBuf+0x800
.L080C8BAC:
	ldr r0, .L080C8BDC  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C8BE0  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C8BE4  @ 0x0600D800
	ldr r2, .L080C8BE8  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
.L080C8BCA:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne .L080C8BEC
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C8BF0
	.align 2, 0
.L080C8BDC: .4byte gBg0Tm
.L080C8BE0: .4byte gBg1Tm
.L080C8BE4: .4byte 0x0600D800
.L080C8BE8: .4byte 0x01000400
.L080C8BEC:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C8BF0:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8B0C

	THUMB_FUNC_START func_080C8BF8
func_080C8BF8: @ 0x080C8BF8
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x2a]
	cmp r0, #2
	beq .L080C8C68
	cmp r0, #2
	bgt .L080C8C36
	cmp r0, #1
	beq .L080C8C3C
	b .L080C8CB6
.L080C8C36:
	cmp r0, #3
	beq .L080C8C98
	b .L080C8CB6
.L080C8C3C:
	ldr r4, .L080C8C5C  @ gUnknown_08AD8B08
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8C60  @ gUnknown_08ADB804
	ldr r1, .L080C8C64  @ gBuf
	bl Decompress
	b .L080C8CB6
	.align 2, 0
.L080C8C5C: .4byte gUnknown_08AD8B08
.L080C8C60: .4byte gUnknown_08ADB804
.L080C8C64: .4byte gBuf
.L080C8C68:
	ldr r4, .L080C8C88  @ gUnknown_08ADA31C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080C8C8C  @ 0x06002000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080C8C90  @ gUnknown_08ADBC0C
	ldr r1, .L080C8C94  @ gBuf+0x800
	bl Decompress
	b .L080C8CB6
	.align 2, 0
.L080C8C88: .4byte gUnknown_08ADA31C
.L080C8C8C: .4byte 0x06002000
.L080C8C90: .4byte gUnknown_08ADBC0C
.L080C8C94: .4byte gBuf+0x800
.L080C8C98:
	ldr r0, .L080C8CC8  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080C8CCC  @ gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp, #4]
	ldr r1, .L080C8CD0  @ 0x0600D800
	ldr r2, .L080C8CD4  @ 0x01000400
	add r0, sp, #4
	bl CpuFastSet
.L080C8CB6:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x28
	bne .L080C8CD8
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080C8CDC
	.align 2, 0
.L080C8CC8: .4byte gBg0Tm
.L080C8CCC: .4byte gBg1Tm
.L080C8CD0: .4byte 0x0600D800
.L080C8CD4: .4byte 0x01000400
.L080C8CD8:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080C8CDC:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8BF8

	THUMB_FUNC_START func_080C8CE4
func_080C8CE4: @ 0x080C8CE4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl func_080C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x28
	bne .L080C8D24
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C8D28
.L080C8D24:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C8D28:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8CE4

	THUMB_FUNC_START func_080C8D30
func_080C8D30: @ 0x080C8D30
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x3e]
	movs r1, #0x4c
	bl DivRem
	adds r4, r0, #0
	movs r0, #0x4c
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	adds r3, r4, #0
	bl Interpolate
	adds r4, r0, #0
	cmp r4, #0xc
	bgt .L080C8D66
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C8D78
.L080C8D66:
	movs r1, #0x19
	subs r1, r1, r4
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C8D78:
	ldrh r0, [r7, #0x3e]
	adds r0, #1
	strh r0, [r7, #0x3e]
	ldr r0, .L080C8DC4  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	ldrh r3, [r7, #0x2a]
	movs r0, #0x26
	str r0, [sp]
	movs r0, #0
	movs r1, #0xc
	movs r2, #0
	bl Interpolate
	ldr r5, .L080C8DC8  @ gPal
	lsls r6, r0, #0x10
	movs r4, #7
.L080C8DA0:
	adds r0, r5, #0
	movs r1, #0
	lsrs r2, r6, #0x10
	bl func_080C69B0
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L080C8DA0
	ldrh r0, [r7, #0x2a]
	subs r0, #1
	cmp r0, #4
	bhi .L080C8EA0
	lsls r0, r0, #2
	ldr r1, .L080C8DCC  @ .L080C8DD0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080C8DC4: .4byte gUnknown_08B103D8
.L080C8DC8: .4byte gPal
.L080C8DCC: .4byte .L080C8DD0
.L080C8DD0: @ jump table
	.4byte .L080C8EA0 @ case 0
	.4byte .L080C8DE4 @ case 1
	.4byte .L080C8E1C @ case 2
	.4byte .L080C8E50 @ case 3
	.4byte .L080C8E84 @ case 4
.L080C8DE4:
	ldr r4, .L080C8E18  @ gUnknown_08ADBE78
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r1, #0x98
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r1, #0xa8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	movs r1, #0xb8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	b .L080C8EA0
	.align 2, 0
.L080C8E18: .4byte gUnknown_08ADBE78
.L080C8E1C:
	ldr r0, .L080C8E3C  @ gUnknown_08ADBE98
	ldr r1, .L080C8E40  @ 0x06010000
	bl Decompress
	ldr r0, .L080C8E44  @ gUnknown_08ADC708
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C8E48  @ gUnknown_08ADC3C0
	ldr r1, .L080C8E4C  @ 0x06010F00
	bl Decompress
	b .L080C8EA0
	.align 2, 0
.L080C8E3C: .4byte gUnknown_08ADBE98
.L080C8E40: .4byte 0x06010000
.L080C8E44: .4byte gUnknown_08ADC708
.L080C8E48: .4byte gUnknown_08ADC3C0
.L080C8E4C: .4byte 0x06010F00
.L080C8E50:
	ldr r0, .L080C8E70  @ gUnknown_08ADC728
	ldr r1, .L080C8E74  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C8E78  @ gUnknown_08ADD050
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C8E7C  @ gUnknown_08ADCCB8
	ldr r1, .L080C8E80  @ 0x06012D00
	bl Decompress
	b .L080C8EA0
	.align 2, 0
.L080C8E70: .4byte gUnknown_08ADC728
.L080C8E74: .4byte 0x06011E00
.L080C8E78: .4byte gUnknown_08ADD050
.L080C8E7C: .4byte gUnknown_08ADCCB8
.L080C8E80: .4byte 0x06012D00
.L080C8E84:
	ldr r0, .L080C8EB4  @ gUnknown_08ADD070
	ldr r1, .L080C8EB8  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C8EBC  @ gUnknown_08ADDA54
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C8EC0  @ gUnknown_08ADD6EC
	ldr r1, .L080C8EC4  @ 0x06014B00
	bl Decompress
.L080C8EA0:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x26
	bne .L080C8EC8
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C8ECC
	.align 2, 0
.L080C8EB4: .4byte gUnknown_08ADD070
.L080C8EB8: .4byte 0x06013C00
.L080C8EBC: .4byte gUnknown_08ADDA54
.L080C8EC0: .4byte gUnknown_08ADD6EC
.L080C8EC4: .4byte 0x06014B00
.L080C8EC8:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C8ECC:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8D30

	THUMB_FUNC_START func_080C8ED4
func_080C8ED4: @ 0x080C8ED4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0x12
	bl DivRem
	adds r3, r0, #0
	movs r0, #0x12
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C8F08
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C8F1A
.L080C8F08:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C8F1A:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C8F6C
	cmp r0, #2
	bgt .L080C8F30
	cmp r0, #1
	beq .L080C8F3A
	b .L080C8FF0
.L080C8F30:
	cmp r0, #3
	beq .L080C8FA0
	cmp r0, #4
	beq .L080C8FD4
	b .L080C8FF0
.L080C8F3A:
	ldr r0, .L080C8F58  @ gUnknown_08ADDA74
	ldr r1, .L080C8F5C  @ 0x06010000
	bl Decompress
	ldr r0, .L080C8F60  @ gUnknown_08ADE47C
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C8F64  @ gUnknown_08ADE080
	ldr r1, .L080C8F68  @ 0x06010F00
	bl Decompress
	b .L080C8FF0
	.align 2, 0
.L080C8F58: .4byte gUnknown_08ADDA74
.L080C8F5C: .4byte 0x06010000
.L080C8F60: .4byte gUnknown_08ADE47C
.L080C8F64: .4byte gUnknown_08ADE080
.L080C8F68: .4byte 0x06010F00
.L080C8F6C:
	ldr r0, .L080C8F8C  @ gUnknown_08ADEEF4
	ldr r1, .L080C8F90  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C8F94  @ gUnknown_08ADFA08
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C8F98  @ gUnknown_08ADF58C
	ldr r1, .L080C8F9C  @ 0x06012D00
	bl Decompress
	b .L080C8FF0
	.align 2, 0
.L080C8F8C: .4byte gUnknown_08ADEEF4
.L080C8F90: .4byte 0x06011E00
.L080C8F94: .4byte gUnknown_08ADFA08
.L080C8F98: .4byte gUnknown_08ADF58C
.L080C8F9C: .4byte 0x06012D00
.L080C8FA0:
	ldr r0, .L080C8FC0  @ gUnknown_08ADE49C
	ldr r1, .L080C8FC4  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C8FC8  @ gUnknown_08ADEED4
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C8FCC  @ gUnknown_08ADEB1C
	ldr r1, .L080C8FD0  @ 0x06014B00
	bl Decompress
	b .L080C8FF0
	.align 2, 0
.L080C8FC0: .4byte gUnknown_08ADE49C
.L080C8FC4: .4byte 0x06013C00
.L080C8FC8: .4byte gUnknown_08ADEED4
.L080C8FCC: .4byte gUnknown_08ADEB1C
.L080C8FD0: .4byte 0x06014B00
.L080C8FD4:
	ldr r0, .L080C9004  @ gUnknown_08ADFA28
	ldr r1, .L080C9008  @ 0x06015A00
	bl Decompress
	ldr r0, .L080C900C  @ gUnknown_08AE04D4
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9010  @ gUnknown_08AE00E4
	ldr r1, .L080C9014  @ 0x06016900
	bl Decompress
.L080C8FF0:
	ldrh r0, [r4, #0x2a]
	cmp r0, #7
	bne .L080C9018
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C901C
	.align 2, 0
.L080C9004: .4byte gUnknown_08ADFA28
.L080C9008: .4byte 0x06015A00
.L080C900C: .4byte gUnknown_08AE04D4
.L080C9010: .4byte gUnknown_08AE00E4
.L080C9014: .4byte 0x06016900
.L080C9018:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C901C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C8ED4

	THUMB_FUNC_START func_080C9024
func_080C9024: @ 0x080C9024
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0xe
	bl DivRem
	adds r3, r0, #0
	movs r0, #0xe
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C9058
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C906A
.L080C9058:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C906A:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq .L080C907C
	cmp r0, #2
	beq .L080C90B0
	b .L080C90CC
.L080C907C:
	ldr r0, .L080C909C  @ gUnknown_08AE04F4
	ldr r1, .L080C90A0  @ 0x06010000
	bl Decompress
	ldr r0, .L080C90A4  @ gUnknown_08AE0D74
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C90A8  @ gUnknown_08AE0A48
	ldr r1, .L080C90AC  @ 0x06010F00
	bl Decompress
	b .L080C90CC
	.align 2, 0
.L080C909C: .4byte gUnknown_08AE04F4
.L080C90A0: .4byte 0x06010000
.L080C90A4: .4byte gUnknown_08AE0D74
.L080C90A8: .4byte gUnknown_08AE0A48
.L080C90AC: .4byte 0x06010F00
.L080C90B0:
	ldr r0, .L080C90E0  @ gUnknown_08AE0D94
	ldr r1, .L080C90E4  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C90E8  @ gUnknown_08AE1634
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C90EC  @ gUnknown_08AE12BC
	ldr r1, .L080C90F0  @ 0x06012D00
	bl Decompress
.L080C90CC:
	ldrh r0, [r4, #0x2a]
	cmp r0, #8
	bne .L080C90F4
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C90F8
	.align 2, 0
.L080C90E0: .4byte gUnknown_08AE0D94
.L080C90E4: .4byte 0x06011E00
.L080C90E8: .4byte gUnknown_08AE1634
.L080C90EC: .4byte gUnknown_08AE12BC
.L080C90F0: .4byte 0x06012D00
.L080C90F4:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C90F8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9024

	THUMB_FUNC_START func_080C9100
func_080C9100: @ 0x080C9100
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0xc
	bl DivRem
	adds r3, r0, #0
	movs r0, #0xc
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C9134
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C9146
.L080C9134:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C9146:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C9194
	cmp r0, #2
	bgt .L080C915C
	cmp r0, #1
	beq .L080C9162
	b .L080C91E4
.L080C915C:
	cmp r0, #3
	beq .L080C91C8
	b .L080C91E4
.L080C9162:
	ldr r0, .L080C9180  @ gUnknown_08AE1654
	ldr r1, .L080C9184  @ 0x06010000
	bl Decompress
	ldr r0, .L080C9188  @ gUnknown_08AE20C4
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C918C  @ gUnknown_08AE1D00
	ldr r1, .L080C9190  @ 0x06010F00
	bl Decompress
	b .L080C91E4
	.align 2, 0
.L080C9180: .4byte gUnknown_08AE1654
.L080C9184: .4byte 0x06010000
.L080C9188: .4byte gUnknown_08AE20C4
.L080C918C: .4byte gUnknown_08AE1D00
.L080C9190: .4byte 0x06010F00
.L080C9194:
	ldr r0, .L080C91B4  @ gUnknown_08AE20E4
	ldr r1, .L080C91B8  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C91BC  @ gUnknown_08AE2BF4
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C91C0  @ gUnknown_08AE281C
	ldr r1, .L080C91C4  @ 0x06012D00
	bl Decompress
	b .L080C91E4
	.align 2, 0
.L080C91B4: .4byte gUnknown_08AE20E4
.L080C91B8: .4byte 0x06011E00
.L080C91BC: .4byte gUnknown_08AE2BF4
.L080C91C0: .4byte gUnknown_08AE281C
.L080C91C4: .4byte 0x06012D00
.L080C91C8:
	ldr r0, .L080C91F8  @ gUnknown_08AE2C14
	ldr r1, .L080C91FC  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C9200  @ gUnknown_08AE3734
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9204  @ gUnknown_08AE33D4
	ldr r1, .L080C9208  @ 0x06014B00
	bl Decompress
.L080C91E4:
	ldrh r0, [r4, #0x2a]
	cmp r0, #9
	bne .L080C920C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9210
	.align 2, 0
.L080C91F8: .4byte gUnknown_08AE2C14
.L080C91FC: .4byte 0x06013C00
.L080C9200: .4byte gUnknown_08AE3734
.L080C9204: .4byte gUnknown_08AE33D4
.L080C9208: .4byte 0x06014B00
.L080C920C:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9210:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9100

	THUMB_FUNC_START func_080C9218
func_080C9218: @ 0x080C9218
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #0xa
	bl DivRem
	adds r3, r0, #0
	movs r0, #0xa
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C924C
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C925E
.L080C924C:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C925E:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C92AC
	cmp r0, #2
	bgt .L080C9274
	cmp r0, #1
	beq .L080C927A
	b .L080C92FC
.L080C9274:
	cmp r0, #3
	beq .L080C92E0
	b .L080C92FC
.L080C927A:
	ldr r0, .L080C9298  @ gUnknown_08AE3754
	ldr r1, .L080C929C  @ 0x06010000
	bl Decompress
	ldr r0, .L080C92A0  @ gUnknown_08AE41E4
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C92A4  @ gUnknown_08AE3E54
	ldr r1, .L080C92A8  @ 0x06010F00
	bl Decompress
	b .L080C92FC
	.align 2, 0
.L080C9298: .4byte gUnknown_08AE3754
.L080C929C: .4byte 0x06010000
.L080C92A0: .4byte gUnknown_08AE41E4
.L080C92A4: .4byte gUnknown_08AE3E54
.L080C92A8: .4byte 0x06010F00
.L080C92AC:
	ldr r0, .L080C92CC  @ gUnknown_08AE4204
	ldr r1, .L080C92D0  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C92D4  @ gUnknown_08AE4CE8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C92D8  @ gUnknown_08AE4940
	ldr r1, .L080C92DC  @ 0x06012D00
	bl Decompress
	b .L080C92FC
	.align 2, 0
.L080C92CC: .4byte gUnknown_08AE4204
.L080C92D0: .4byte 0x06011E00
.L080C92D4: .4byte gUnknown_08AE4CE8
.L080C92D8: .4byte gUnknown_08AE4940
.L080C92DC: .4byte 0x06012D00
.L080C92E0:
	ldr r0, .L080C9310  @ gUnknown_08AE4D08
	ldr r1, .L080C9314  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C9318  @ gUnknown_08AE5730
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C931C  @ gUnknown_08AE53C8
	ldr r1, .L080C9320  @ 0x06014B00
	bl Decompress
.L080C92FC:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xa
	bne .L080C9324
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9328
	.align 2, 0
.L080C9310: .4byte gUnknown_08AE4D08
.L080C9314: .4byte 0x06013C00
.L080C9318: .4byte gUnknown_08AE5730
.L080C931C: .4byte gUnknown_08AE53C8
.L080C9320: .4byte 0x06014B00
.L080C9324:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9328:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9218

	THUMB_FUNC_START func_080C9330
func_080C9330: @ 0x080C9330
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #9
	bl DivRem
	adds r3, r0, #0
	movs r0, #9
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C9364
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C9376
.L080C9364:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C9376:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq .L080C9388
	cmp r0, #2
	beq .L080C93BC
	b .L080C93D8
.L080C9388:
	ldr r0, .L080C93A8  @ gUnknown_08AE5750
	ldr r1, .L080C93AC  @ 0x06010000
	bl Decompress
	ldr r0, .L080C93B0  @ gUnknown_08AE60B0
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C93B4  @ gUnknown_08AE5D54
	ldr r1, .L080C93B8  @ 0x06010F00
	bl Decompress
	b .L080C93D8
	.align 2, 0
.L080C93A8: .4byte gUnknown_08AE5750
.L080C93AC: .4byte 0x06010000
.L080C93B0: .4byte gUnknown_08AE60B0
.L080C93B4: .4byte gUnknown_08AE5D54
.L080C93B8: .4byte 0x06010F00
.L080C93BC:
	ldr r0, .L080C93EC  @ gUnknown_08AE60D0
	ldr r1, .L080C93F0  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C93F4  @ gUnknown_08AE69EC
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C93F8  @ gUnknown_08AE6648
	ldr r1, .L080C93FC  @ 0x06012D00
	bl Decompress
.L080C93D8:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xb
	bne .L080C9400
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9404
	.align 2, 0
.L080C93EC: .4byte gUnknown_08AE60D0
.L080C93F0: .4byte 0x06011E00
.L080C93F4: .4byte gUnknown_08AE69EC
.L080C93F8: .4byte gUnknown_08AE6648
.L080C93FC: .4byte 0x06012D00
.L080C9400:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9404:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9330

	THUMB_FUNC_START func_080C940C
func_080C940C: @ 0x080C940C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #8
	bl DivRem
	adds r3, r0, #0
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C9440
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C9452
.L080C9440:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C9452:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C94A4
	cmp r0, #2
	bgt .L080C9468
	cmp r0, #1
	beq .L080C9472
	b .L080C9528
.L080C9468:
	cmp r0, #3
	beq .L080C94D8
	cmp r0, #4
	beq .L080C950C
	b .L080C9528
.L080C9472:
	ldr r0, .L080C9490  @ gUnknown_08AE6A0C
	ldr r1, .L080C9494  @ 0x06010000
	bl Decompress
	ldr r0, .L080C9498  @ gUnknown_08AE72C8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C949C  @ gUnknown_08AE6FA8
	ldr r1, .L080C94A0  @ 0x06010F00
	bl Decompress
	b .L080C9528
	.align 2, 0
.L080C9490: .4byte gUnknown_08AE6A0C
.L080C9494: .4byte 0x06010000
.L080C9498: .4byte gUnknown_08AE72C8
.L080C949C: .4byte gUnknown_08AE6FA8
.L080C94A0: .4byte 0x06010F00
.L080C94A4:
	ldr r0, .L080C94C4  @ gUnknown_08AE84DC
	ldr r1, .L080C94C8  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C94CC  @ gUnknown_08AE8D84
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C94D0  @ gUnknown_08AE8AB8
	ldr r1, .L080C94D4  @ 0x06012D00
	bl Decompress
	b .L080C9528
	.align 2, 0
.L080C94C4: .4byte gUnknown_08AE84DC
.L080C94C8: .4byte 0x06011E00
.L080C94CC: .4byte gUnknown_08AE8D84
.L080C94D0: .4byte gUnknown_08AE8AB8
.L080C94D4: .4byte 0x06012D00
.L080C94D8:
	ldr r0, .L080C94F8  @ gUnknown_08AE72E8
	ldr r1, .L080C94FC  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C9500  @ gUnknown_08AE7C2C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9504  @ gUnknown_08AE78B0
	ldr r1, .L080C9508  @ 0x06014B00
	bl Decompress
	b .L080C9528
	.align 2, 0
.L080C94F8: .4byte gUnknown_08AE72E8
.L080C94FC: .4byte 0x06013C00
.L080C9500: .4byte gUnknown_08AE7C2C
.L080C9504: .4byte gUnknown_08AE78B0
.L080C9508: .4byte 0x06014B00
.L080C950C:
	ldr r0, .L080C953C  @ gUnknown_08AE7C4C
	ldr r1, .L080C9540  @ 0x06015A00
	bl Decompress
	ldr r0, .L080C9544  @ gUnknown_08AE84BC
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9548  @ gUnknown_08AE819C
	ldr r1, .L080C954C  @ 0x06016900
	bl Decompress
.L080C9528:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xc
	bne .L080C9550
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9554
	.align 2, 0
.L080C953C: .4byte gUnknown_08AE7C4C
.L080C9540: .4byte 0x06015A00
.L080C9544: .4byte gUnknown_08AE84BC
.L080C9548: .4byte gUnknown_08AE819C
.L080C954C: .4byte 0x06016900
.L080C9550:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9554:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C940C

	THUMB_FUNC_START func_080C955C
func_080C955C: @ 0x080C955C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #7
	bl DivRem
	adds r3, r0, #0
	movs r0, #7
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C9590
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C95A2
.L080C9590:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C95A2:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq .L080C95B4
	cmp r0, #2
	beq .L080C95E8
	b .L080C9604
.L080C95B4:
	ldr r0, .L080C95D4  @ gUnknown_08AE8DA4
	ldr r1, .L080C95D8  @ 0x06010000
	bl Decompress
	ldr r0, .L080C95DC  @ gUnknown_08AE9720
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C95E0  @ gUnknown_08AE9364
	ldr r1, .L080C95E4  @ 0x06010F00
	bl Decompress
	b .L080C9604
	.align 2, 0
.L080C95D4: .4byte gUnknown_08AE8DA4
.L080C95D8: .4byte 0x06010000
.L080C95DC: .4byte gUnknown_08AE9720
.L080C95E0: .4byte gUnknown_08AE9364
.L080C95E4: .4byte 0x06010F00
.L080C95E8:
	ldr r0, .L080C9618  @ gUnknown_08AE9740
	ldr r1, .L080C961C  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C9620  @ gUnknown_08AEA02C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9624  @ gUnknown_08AE9CA4
	ldr r1, .L080C9628  @ 0x06012D00
	bl Decompress
.L080C9604:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xd
	bne .L080C962C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9630
	.align 2, 0
.L080C9618: .4byte gUnknown_08AE9740
.L080C961C: .4byte 0x06011E00
.L080C9620: .4byte gUnknown_08AEA02C
.L080C9624: .4byte gUnknown_08AE9CA4
.L080C9628: .4byte 0x06012D00
.L080C962C:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9630:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C955C

	THUMB_FUNC_START func_080C9638
func_080C9638: @ 0x080C9638
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #6
	bl DivRem
	adds r3, r0, #0
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C966C
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C967E
.L080C966C:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C967E:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C96CC
	cmp r0, #2
	bgt .L080C9694
	cmp r0, #1
	beq .L080C969A
	b .L080C971C
.L080C9694:
	cmp r0, #3
	beq .L080C9700
	b .L080C971C
.L080C969A:
	ldr r0, .L080C96B8  @ gUnknown_08AECAE0
	ldr r1, .L080C96BC  @ 0x06010000
	bl Decompress
	ldr r0, .L080C96C0  @ gUnknown_08AED3E8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C96C4  @ gUnknown_08AED0A4
	ldr r1, .L080C96C8  @ 0x06010F00
	bl Decompress
	b .L080C971C
	.align 2, 0
.L080C96B8: .4byte gUnknown_08AECAE0
.L080C96BC: .4byte 0x06010000
.L080C96C0: .4byte gUnknown_08AED3E8
.L080C96C4: .4byte gUnknown_08AED0A4
.L080C96C8: .4byte 0x06010F00
.L080C96CC:
	ldr r0, .L080C96EC  @ gUnknown_08AED408
	ldr r1, .L080C96F0  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C96F4  @ gUnknown_08AEDC80
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C96F8  @ gUnknown_08AED95C
	ldr r1, .L080C96FC  @ 0x06012D00
	bl Decompress
	b .L080C971C
	.align 2, 0
.L080C96EC: .4byte gUnknown_08AED408
.L080C96F0: .4byte 0x06011E00
.L080C96F4: .4byte gUnknown_08AEDC80
.L080C96F8: .4byte gUnknown_08AED95C
.L080C96FC: .4byte 0x06012D00
.L080C9700:
	ldr r0, .L080C9730  @ gUnknown_08AEDCA0
	ldr r1, .L080C9734  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C9738  @ gUnknown_08AEE564
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C973C  @ gUnknown_08AEE218
	ldr r1, .L080C9740  @ 0x06014B00
	bl Decompress
.L080C971C:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xe
	bne .L080C9744
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9748
	.align 2, 0
.L080C9730: .4byte gUnknown_08AEDCA0
.L080C9734: .4byte 0x06013C00
.L080C9738: .4byte gUnknown_08AEE564
.L080C973C: .4byte gUnknown_08AEE218
.L080C9740: .4byte 0x06014B00
.L080C9744:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9748:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9638

	THUMB_FUNC_START func_080C9750
func_080C9750: @ 0x080C9750
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #5
	bl DivRem
	adds r3, r0, #0
	movs r0, #5
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C9784
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C9796
.L080C9784:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C9796:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C97E8
	cmp r0, #2
	bgt .L080C97AC
	cmp r0, #1
	beq .L080C97B6
	b .L080C986C
.L080C97AC:
	cmp r0, #3
	beq .L080C981C
	cmp r0, #4
	beq .L080C9850
	b .L080C986C
.L080C97B6:
	ldr r0, .L080C97D4  @ gUnknown_08AEA04C
	ldr r1, .L080C97D8  @ 0x06010000
	bl Decompress
	ldr r0, .L080C97DC  @ gUnknown_08AEAB50
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C97E0  @ gUnknown_08AEA7A8
	ldr r1, .L080C97E4  @ 0x06010F00
	bl Decompress
	b .L080C986C
	.align 2, 0
.L080C97D4: .4byte gUnknown_08AEA04C
.L080C97D8: .4byte 0x06010000
.L080C97DC: .4byte gUnknown_08AEAB50
.L080C97E0: .4byte gUnknown_08AEA7A8
.L080C97E4: .4byte 0x06010F00
.L080C97E8:
	ldr r0, .L080C9808  @ gUnknown_08AEAB70
	ldr r1, .L080C980C  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C9810  @ gUnknown_08AEB56C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9814  @ gUnknown_08AEB1B8
	ldr r1, .L080C9818  @ 0x06012D00
	bl Decompress
	b .L080C986C
	.align 2, 0
.L080C9808: .4byte gUnknown_08AEAB70
.L080C980C: .4byte 0x06011E00
.L080C9810: .4byte gUnknown_08AEB56C
.L080C9814: .4byte gUnknown_08AEB1B8
.L080C9818: .4byte 0x06012D00
.L080C981C:
	ldr r0, .L080C983C  @ gUnknown_08AEB58C
	ldr r1, .L080C9840  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C9844  @ gUnknown_08AEC048
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9848  @ gUnknown_08AEBCEC
	ldr r1, .L080C984C  @ 0x06014B00
	bl Decompress
	b .L080C986C
	.align 2, 0
.L080C983C: .4byte gUnknown_08AEB58C
.L080C9840: .4byte 0x06013C00
.L080C9844: .4byte gUnknown_08AEC048
.L080C9848: .4byte gUnknown_08AEBCEC
.L080C984C: .4byte 0x06014B00
.L080C9850:
	ldr r0, .L080C9880  @ gUnknown_08AEC068
	ldr r1, .L080C9884  @ 0x06015A00
	bl Decompress
	ldr r0, .L080C9888  @ gUnknown_08AECAC0
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C988C  @ gUnknown_08AEC724
	ldr r1, .L080C9890  @ 0x06016900
	bl Decompress
.L080C986C:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0xf
	bne .L080C9894
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9898
	.align 2, 0
.L080C9880: .4byte gUnknown_08AEC068
.L080C9884: .4byte 0x06015A00
.L080C9888: .4byte gUnknown_08AECAC0
.L080C988C: .4byte gUnknown_08AEC724
.L080C9890: .4byte 0x06016900
.L080C9894:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9898:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9750

	THUMB_FUNC_START func_080C98A0
func_080C98A0: @ 0x080C98A0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #4
	bl DivRem
	adds r3, r0, #0
	movs r0, #4
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C98D4
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C98E6
.L080C98D4:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C98E6:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #2
	beq .L080C9934
	cmp r0, #2
	bgt .L080C98FC
	cmp r0, #1
	beq .L080C9902
	b .L080C9984
.L080C98FC:
	cmp r0, #3
	beq .L080C9968
	b .L080C9984
.L080C9902:
	ldr r0, .L080C9920  @ gUnknown_08AEE584
	ldr r1, .L080C9924  @ 0x06010000
	bl Decompress
	ldr r0, .L080C9928  @ gUnknown_08AEEECC
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C992C  @ gUnknown_08AEEBB0
	ldr r1, .L080C9930  @ 0x06010F00
	bl Decompress
	b .L080C9984
	.align 2, 0
.L080C9920: .4byte gUnknown_08AEE584
.L080C9924: .4byte 0x06010000
.L080C9928: .4byte gUnknown_08AEEECC
.L080C992C: .4byte gUnknown_08AEEBB0
.L080C9930: .4byte 0x06010F00
.L080C9934:
	ldr r0, .L080C9954  @ gUnknown_08AEEEEC
	ldr r1, .L080C9958  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C995C  @ gUnknown_08AEF880
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9960  @ gUnknown_08AEF580
	ldr r1, .L080C9964  @ 0x06012D00
	bl Decompress
	b .L080C9984
	.align 2, 0
.L080C9954: .4byte gUnknown_08AEEEEC
.L080C9958: .4byte 0x06011E00
.L080C995C: .4byte gUnknown_08AEF880
.L080C9960: .4byte gUnknown_08AEF580
.L080C9964: .4byte 0x06012D00
.L080C9968:
	ldr r0, .L080C9998  @ gUnknown_08AEF8A0
	ldr r1, .L080C999C  @ 0x06013C00
	bl Decompress
	ldr r0, .L080C99A0  @ gUnknown_08AF0130
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C99A4  @ gUnknown_08AEFDC8
	ldr r1, .L080C99A8  @ 0x06014B00
	bl Decompress
.L080C9984:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C99AC
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C99B0
	.align 2, 0
.L080C9998: .4byte gUnknown_08AEF8A0
.L080C999C: .4byte 0x06013C00
.L080C99A0: .4byte gUnknown_08AF0130
.L080C99A4: .4byte gUnknown_08AEFDC8
.L080C99A8: .4byte 0x06014B00
.L080C99AC:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C99B0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C98A0

	THUMB_FUNC_START func_080C99B8
func_080C99B8: @ 0x080C99B8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x3e]
	movs r1, #3
	bl DivRem
	adds r3, r0, #0
	movs r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1a
	bl Interpolate
	adds r3, r0, #0
	cmp r3, #0xc
	bgt .L080C99EC
	lsls r1, r3, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	b .L080C99FE
.L080C99EC:
	movs r1, #0x19
	subs r1, r1, r3
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
.L080C99FE:
	ldrh r0, [r4, #0x3e]
	adds r0, #1
	strh r0, [r4, #0x3e]
	ldrh r0, [r4, #0x2a]
	cmp r0, #1
	beq .L080C9A10
	cmp r0, #2
	beq .L080C9A44
	b .L080C9A60
.L080C9A10:
	ldr r0, .L080C9A30  @ gUnknown_08AF0150
	ldr r1, .L080C9A34  @ 0x06010000
	bl Decompress
	ldr r0, .L080C9A38  @ gUnknown_08AF0DE8
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9A3C  @ gUnknown_08AF09E4
	ldr r1, .L080C9A40  @ 0x06010F00
	bl Decompress
	b .L080C9A60
	.align 2, 0
.L080C9A30: .4byte gUnknown_08AF0150
.L080C9A34: .4byte 0x06010000
.L080C9A38: .4byte gUnknown_08AF0DE8
.L080C9A3C: .4byte gUnknown_08AF09E4
.L080C9A40: .4byte 0x06010F00
.L080C9A44:
	ldr r0, .L080C9A74  @ gUnknown_08AF0E08
	ldr r1, .L080C9A78  @ 0x06011E00
	bl Decompress
	ldr r0, .L080C9A7C  @ gUnknown_08AF1AC8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl StorePaletteToBufferMaybe
	ldr r0, .L080C9A80  @ gUnknown_08AF16CC
	ldr r1, .L080C9A84  @ 0x06012D00
	bl Decompress
.L080C9A60:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x12
	bne .L080C9A88
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9A8C
	.align 2, 0
.L080C9A74: .4byte gUnknown_08AF0E08
.L080C9A78: .4byte 0x06011E00
.L080C9A7C: .4byte gUnknown_08AF1AC8
.L080C9A80: .4byte gUnknown_08AF16CC
.L080C9A84: .4byte 0x06012D00
.L080C9A88:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9A8C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C99B8

	THUMB_FUNC_START func_080C9A94
func_080C9A94: @ 0x080C9A94
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, .L080C9AEC  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	ldrh r3, [r4, #0x2a]
	movs r0, #0x30
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xd
	bl Interpolate
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r0, #1
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x30
	bne .L080C9AF0
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9AF4
	.align 2, 0
.L080C9AEC: .4byte gDispIo
.L080C9AF0:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9AF4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9A94

	THUMB_FUNC_START func_080C9AFC
func_080C9AFC: @ 0x080C9AFC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r3, [r7, #0x2a]
	movs r0, #0x30
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r4, r0, #0
	ldr r0, .L080C9B50  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	ldr r5, .L080C9B54  @ gPal
	lsls r6, r4, #0x10
	movs r4, #7
.L080C9B26:
	adds r0, r5, #0
	ldr r1, .L080C9B58  @ 0x00007FFF
	lsrs r2, r6, #0x10
	bl func_080C69B0
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L080C9B26
	ldrh r0, [r7, #0x2a]
	cmp r0, #0x30
	bne .L080C9B60
	ldr r0, .L080C9B5C  @ gUnknown_02022188
	movs r2, #0
	ldr r1, .L080C9B58  @ 0x00007FFF
	strh r1, [r0, #0xc]
	strh r2, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080C9B64
	.align 2, 0
.L080C9B50: .4byte gUnknown_08B103D8
.L080C9B54: .4byte gPal
.L080C9B58: .4byte 0x00007FFF
.L080C9B5C: .4byte gUnknown_02022188
.L080C9B60:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080C9B64:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9AFC

	THUMB_FUNC_START func_080C9B6C
func_080C9B6C: @ 0x080C9B6C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	ldr r4, .L080C9C04  @ gDispIo
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	mov r8, r2
	mov r2, r8
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r6, #2
	orrs r1, r6
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	movs r5, #0
	str r5, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r5, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	ldrb r0, [r4, #1]
	mov r1, r8
	orrs r0, r1
	orrs r0, r6
	movs r1, #5
	negs r1, r1
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	movs r0, #1
	movs r1, #0
	bl SetBgChrOffset
	movs r1, #0xe0
	lsls r1, r1, #8
	movs r0, #1
	bl SetBgTilemapOffset
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9C04: .4byte gDispIo

	THUMB_FUNC_END func_080C9B6C

	THUMB_FUNC_START func_080C9C08
func_080C9C08: @ 0x080C9C08
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C9B6C
	ldr r0, .L080C9C54  @ gUnknown_08ACC3E0
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r1, r4, #0
	adds r1, #0x47
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r0, .L080C9C58  @ gBuf
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0x8c
	lsls r0, r0, #1
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x42
	movs r1, #0xe8
	strh r1, [r0]
	subs r0, #2
	strh r1, [r0]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9C54: .4byte gUnknown_08ACC3E0
.L080C9C58: .4byte gBuf

	THUMB_FUNC_END func_080C9C08

	THUMB_FUNC_START func_080C9C5C
func_080C9C5C: @ 0x080C9C5C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C9B6C
	ldr r0, .L080C9CA4  @ gUnknown_08ACF314
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r0, r4, #0
	adds r0, #0x47
	movs r2, #0
	strb r2, [r0]
	ldr r0, .L080C9CA8  @ gBuf
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xc0
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x80
	strh r0, [r1]
	subs r1, #2
	subs r0, #0x38
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9CA4: .4byte gUnknown_08ACF314
.L080C9CA8: .4byte gBuf

	THUMB_FUNC_END func_080C9C5C

	THUMB_FUNC_START func_080C9CAC
func_080C9CAC: @ 0x080C9CAC
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C9B6C
	ldr r0, .L080C9CF4  @ gUnknown_08AD24B4
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r1, r4, #0
	adds r1, #0x47
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r0, .L080C9CF8  @ gBuf
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xc0
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x80
	strh r0, [r1]
	subs r1, #2
	subs r0, #0x28
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9CF4: .4byte gUnknown_08AD24B4
.L080C9CF8: .4byte gBuf

	THUMB_FUNC_END func_080C9CAC

	THUMB_FUNC_START func_080C9CFC
func_080C9CFC: @ 0x080C9CFC
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C9B6C
	ldr r0, .L080C9D44  @ gUnknown_08AD54DC
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r0, r4, #0
	adds r0, #0x47
	movs r2, #0
	strb r2, [r0]
	ldr r0, .L080C9D48  @ gBuf
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0x88
	lsls r0, r0, #1
	strh r0, [r1]
	subs r1, #2
	movs r0, #0xf0
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x18
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9D44: .4byte gUnknown_08AD54DC
.L080C9D48: .4byte gBuf

	THUMB_FUNC_END func_080C9CFC

	THUMB_FUNC_START func_080C9D4C
func_080C9D4C: @ 0x080C9D4C
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C9B6C
	ldr r0, .L080C9D98  @ gUnknown_08AD89A8
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r1, r4, #0
	adds r1, #0x47
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	ldr r0, .L080C9D9C  @ gBuf
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r0, r4, #0
	adds r0, #0x44
	movs r1, #0xe8
	strh r1, [r0]
	adds r3, r4, #0
	adds r3, #0x42
	movs r0, #0x8c
	lsls r0, r0, #1
	strh r0, [r3]
	adds r0, r4, #0
	adds r0, #0x40
	strh r1, [r0]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9D98: .4byte gUnknown_08AD89A8
.L080C9D9C: .4byte gBuf

	THUMB_FUNC_END func_080C9D4C

	THUMB_FUNC_START func_080C9DA0
func_080C9DA0: @ 0x080C9DA0
	push {r4, lr}
	adds r4, r0, #0
	bl func_080C9B6C
	ldr r0, .L080C9DE8  @ gUnknown_08ADBD18
	movs r2, #0xb0
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	adds r0, r4, #0
	adds r0, #0x47
	movs r2, #0
	strb r2, [r0]
	ldr r0, .L080C9DEC  @ gBuf
	str r0, [r4, #0x48]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r0, #0xc8
	strh r0, [r1]
	subs r1, #2
	adds r0, #0x70
	strh r0, [r1]
	subs r1, #2
	subs r0, #0x10
	strh r0, [r1]
	strh r2, [r4, #0x30]
	strh r2, [r4, #0x32]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9DE8: .4byte gUnknown_08ADBD18
.L080C9DEC: .4byte gBuf

	THUMB_FUNC_END func_080C9DA0

	THUMB_FUNC_START func_080C9DF0
func_080C9DF0: @ 0x080C9DF0
	push {r4, r5, lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	ldr r2, .L080C9E68  @ gDispIo
	ldrb r0, [r2, #1]
	movs r4, #1
	orrs r0, r4
	movs r5, #2
	orrs r0, r5
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldrb r3, [r2, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r3
	orrs r0, r4
	strb r0, [r2, #0xc]
	ldrb r3, [r2, #0x10]
	adds r0, r1, #0
	ands r0, r3
	orrs r0, r5
	strb r0, [r2, #0x10]
	ldrb r0, [r2, #0x14]
	ands r1, r0
	strb r1, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r2, #0x18]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9E68: .4byte gDispIo

	THUMB_FUNC_END func_080C9DF0

	THUMB_FUNC_START func_080C9E6C
func_080C9E6C: @ 0x080C9E6C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl func_080C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bhi .L080C9ED8
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r2, .L080C9ED4  @ gDispIo
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C9ED8
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9EDE
	.align 2, 0
.L080C9ED4: .4byte gDispIo
.L080C9ED8:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9EDE:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9E6C

	THUMB_FUNC_START func_080C9EE8
func_080C9EE8: @ 0x080C9EE8
	push {r4, lr}
	sub sp, #4
	ldr r0, .L080C9F74  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	movs r3, #8
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	ldr r3, .L080C9F78  @ gDispIo
	ldrb r1, [r3, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	ldrb r1, [r3, #0xc]
	movs r2, #4
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	ldrb r1, [r3, #0x10]
	adds r0, r2, #0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r2, r0
	strb r2, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080C9F74: .4byte gUnknown_08B103D8
.L080C9F78: .4byte gDispIo

	THUMB_FUNC_END func_080C9EE8

	THUMB_FUNC_START func_080C9F7C
func_080C9F7C: @ 0x080C9F7C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl func_080C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bhi .L080C9FE8
	adds r3, r0, #0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	ldr r2, .L080C9FE4  @ gDispIo
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x10
	bne .L080C9FE8
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080C9FEE
	.align 2, 0
.L080C9FE4: .4byte gDispIo
.L080C9FE8:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080C9FEE:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9F7C

	THUMB_FUNC_START func_080C9FF8
func_080C9FF8: @ 0x080C9FF8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r5, r0, #0
	ldrh r0, [r5, #0x38]
	ldrh r1, [r5, #0x3a]
	bl func_080C726C
	ldrh r0, [r5, #0x38]
	strh r0, [r5, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r5, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x3c]
	adds r0, #1
	strh r0, [r5, #0x3c]
	movs r0, #1
	bl EnableBgSync
	adds r0, r5, #0
	adds r0, #0x40
	ldrh r2, [r0]
	ldrh r3, [r5, #0x2a]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	bl Interpolate
	adds r7, r0, #0
	adds r0, r5, #0
	adds r0, #0x47
	ldrb r6, [r0]
	cmp r6, #0
	beq .L080CA06E
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	adds r4, r5, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r5, #0x48]
	str r3, [sp]
	ldr r3, [r5, #0x4c]
	str r3, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	bl func_080C67D4
	b .L080CA08E
.L080CA06E:
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	adds r4, r5, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r5, #0x48]
	str r3, [sp]
	ldr r3, [r5, #0x4c]
	str r3, [sp, #4]
	str r6, [sp, #8]
	movs r3, #0
	bl func_080C689C
.L080CA08E:
	strh r7, [r5, #0x30]
	ldrh r0, [r5, #0x2a]
	cmp r0, #0x1e
	bne .L080CA0FE
	movs r0, #2
	bl EnableBgSync
	adds r0, r5, #0
	adds r0, #0x42
	ldrh r0, [r0]
	adds r0, #0xf0
	adds r1, r5, #0
	adds r1, #0x40
	ldrh r1, [r1]
	subs r0, r0, r1
	strh r0, [r5, #0x32]
	adds r0, r5, #0
	adds r0, #0x47
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CA0D6
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r1, [r5, #0x48]
	str r1, [sp]
	ldr r1, [r5, #0x4c]
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	movs r1, #0
	movs r3, #1
	bl func_080C689C
	b .L080CA0F2
.L080CA0D6:
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r1, [r5, #0x48]
	str r1, [sp]
	ldr r1, [r5, #0x4c]
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	movs r1, #0
	movs r3, #1
	bl func_080C67D4
.L080CA0F2:
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r0, r5, #0
	bl Proc_Break
	b .L080CA102
.L080CA0FE:
	adds r0, #1
	strh r0, [r5, #0x2a]
.L080CA102:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080C9FF8

	THUMB_FUNC_START func_080CA10C
func_080CA10C: @ 0x080CA10C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r6, r0, #0
	ldrh r0, [r6, #0x38]
	ldrh r1, [r6, #0x3a]
	bl func_080C726C
	ldrh r0, [r6, #0x38]
	strh r0, [r6, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r6, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r6, #0x38]
	ldrh r0, [r6, #0x3c]
	adds r0, #1
	strh r0, [r6, #0x3c]
	ldrh r3, [r6, #0x2a]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r5
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetBlendConfig
	movs r0, #1
	bl EnableBgSync
	adds r0, r6, #0
	adds r0, #0x40
	ldrh r1, [r0]
	adds r2, r1, #0
	adds r2, #0x10
	ldrh r3, [r6, #0x2a]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r5, r0, #0
	adds r0, r6, #0
	adds r0, #0x47
	ldrb r7, [r0]
	cmp r7, #0
	beq .L080CA1AA
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r6, r2]
	adds r4, r6, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	bl func_080C67D4
	b .L080CA1CA
.L080CA1AA:
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r6, r2]
	adds r4, r6, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	str r7, [sp, #8]
	movs r3, #0
	bl func_080C689C
.L080CA1CA:
	adds r7, r4, #0
	strh r5, [r6, #0x30]
	movs r0, #2
	bl EnableBgSync
	ldrh r3, [r6, #0x2a]
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x60
	bl Interpolate
	adds r5, r0, #0
	ldrh r3, [r6, #0x2a]
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x60
	bl Interpolate
	adds r1, r6, #0
	adds r1, #0x42
	ldrh r1, [r1]
	adds r1, #0xf0
	adds r2, r6, #0
	adds r2, #0x40
	ldrh r2, [r2]
	subs r1, r1, r2
	adds r1, r1, r5
	adds r5, r1, r0
	adds r0, r6, #0
	adds r0, #0x47
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CA230
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	movs r3, #0
	ldrsh r2, [r7, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl func_080C689C
	b .L080CA24C
.L080CA230:
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	movs r3, #0
	ldrsh r2, [r7, r3]
	ldr r3, [r6, #0x48]
	str r3, [sp]
	ldr r3, [r6, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl func_080C67D4
.L080CA24C:
	strh r5, [r6, #0x32]
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x1e
	bne .L080CA260
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_Break
	b .L080CA264
.L080CA260:
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080CA264:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CA10C

	THUMB_FUNC_START func_080CA26C
func_080CA26C: @ 0x080CA26C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xb
	bne .L080CA2E6
	ldr r5, .L080CA380  @ gDispIo
	ldrb r0, [r5, #1]
	movs r1, #1
	orrs r0, r1
	movs r2, #3
	negs r2, r2
	mov sl, r2
	ands r0, r2
	movs r3, #5
	negs r3, r3
	mov r9, r3
	ands r0, r3
	movs r1, #8
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r5, #1]
	movs r4, #0
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #8
	bl SetBlendConfig
	ldrb r0, [r5, #1]
	movs r3, #1
	orrs r0, r3
	mov r1, sl
	ands r0, r1
	mov r2, r9
	ands r0, r2
	mov r3, r8
	orrs r0, r3
	orrs r0, r6
	strb r0, [r5, #1]
.L080CA2E6:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xa
	bhi .L080CA3A6
	adds r3, r0, #0
	adds r3, #0x1e
	movs r0, #0x28
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0x10
	subs r2, r2, r4
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r3, #8
	bl SetBlendConfig
	movs r0, #2
	bl EnableBgSync
	ldrh r3, [r7, #0x2a]
	adds r3, #0x1e
	movs r4, #0x3c
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x60
	bl Interpolate
	adds r5, r0, #0
	ldrh r3, [r7, #0x2a]
	adds r3, #0x1e
	str r4, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x60
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x42
	ldrh r1, [r1]
	adds r1, #0xf0
	adds r2, r7, #0
	adds r2, #0x40
	ldrh r2, [r2]
	subs r1, r1, r2
	adds r1, r1, r5
	adds r4, r1, r0
	adds r0, r7, #0
	adds r0, #0x47
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CA384
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r7, #0x48]
	str r3, [sp]
	ldr r3, [r7, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl func_080C689C
	b .L080CA3A4
	.align 2, 0
.L080CA380: .4byte gDispIo
.L080CA384:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	adds r2, r7, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r7, #0x48]
	str r3, [sp]
	ldr r3, [r7, #0x4c]
	str r3, [sp, #4]
	movs r3, #1
	str r3, [sp, #8]
	bl func_080C67D4
.L080CA3A4:
	strh r4, [r7, #0x32]
.L080CA3A6:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CA26C

	THUMB_FUNC_START func_080CA3B8
func_080CA3B8: @ 0x080CA3B8
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r4, r0, #0
	bl func_080CA26C
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x3a]
	bl func_080C726C
	ldrh r0, [r4, #0x38]
	strh r0, [r4, #0x3a]
	movs r2, #0x9c
	lsls r2, r2, #2
	ldrh r3, [r4, #0x3c]
	movs r0, #0x86
	lsls r0, r0, #3
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	ldrh r0, [r4, #0x2a]
	adds r3, r0, #0
	subs r3, #0xf
	cmp r3, #0
	blt .L080CA412
	movs r0, #0xf
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r2, .L080CA460  @ gDispIo
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
.L080CA412:
	movs r0, #1
	bl EnableBgSync
	adds r0, r4, #0
	adds r0, #0x40
	ldrh r2, [r0]
	adds r1, r2, #0
	adds r1, #0x10
	lsls r2, r2, #1
	adds r2, #0x10
	ldrh r3, [r4, #0x2a]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #1
	bl Interpolate
	adds r6, r0, #0
	adds r0, r4, #0
	adds r0, #0x47
	ldrb r5, [r0]
	cmp r5, #0
	beq .L080CA464
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r4, #0x48]
	str r3, [sp]
	ldr r3, [r4, #0x4c]
	str r3, [sp, #4]
	movs r3, #0
	str r3, [sp, #8]
	bl func_080C67D4
	b .L080CA484
	.align 2, 0
.L080CA460: .4byte gDispIo
.L080CA464:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, [r4, #0x48]
	str r3, [sp]
	ldr r3, [r4, #0x4c]
	str r3, [sp, #4]
	str r5, [sp, #8]
	movs r3, #0
	bl func_080C689C
.L080CA484:
	strh r6, [r4, #0x30]
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x1e
	bne .L080CA498
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
	b .L080CA49C
.L080CA498:
	adds r0, #1
	strh r0, [r4, #0x2a]
.L080CA49C:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CA3B8

	THUMB_FUNC_START func_080CA4A4
func_080CA4A4: @ 0x080CA4A4
	push {lr}
	ldr r0, .L080CA4D4  @ gUnknown_08AA707C
	bl EndEachProc
	ldr r2, .L080CA4D8  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bl SetBlendNone
	pop {r0}
	bx r0
	.align 2, 0
.L080CA4D4: .4byte gUnknown_08AA707C
.L080CA4D8: .4byte gDispIo

	THUMB_FUNC_END func_080CA4A4

	THUMB_FUNC_START func_080CA4DC
func_080CA4DC: @ 0x080CA4DC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	cmp r0, #4
	bhi .L080CA53E
	lsls r0, r0, #2
	ldr r1, .L080CA4F4  @ .L080CA4F8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080CA4F4: .4byte .L080CA4F8
.L080CA4F8: @ jump table
	.4byte .L080CA53E @ case 0
	.4byte .L080CA50C @ case 1
	.4byte .L080CA51A @ case 2
	.4byte .L080CA528 @ case 3
	.4byte .L080CA536 @ case 4
.L080CA50C:
	movs r0, #0xd8
	lsls r0, r0, #1
	movs r1, #0xc4
	lsls r1, r1, #1
	bl func_080C726C
	b .L080CA53E
.L080CA51A:
	movs r0, #0xf8
	lsls r0, r0, #1
	movs r1, #0xd8
	lsls r1, r1, #1
	bl func_080C726C
	b .L080CA53E
.L080CA528:
	movs r0, #0x8c
	lsls r0, r0, #2
	movs r1, #0xf8
	lsls r1, r1, #1
	bl func_080C726C
	b .L080CA53E
.L080CA536:
	movs r0, #0x8c
	lsls r0, r0, #2
	strh r0, [r6, #0x3a]
	strh r0, [r6, #0x38]
.L080CA53E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8e
	bls .L080CA550
	movs r0, #0xae
	movs r1, #0xa
	movs r2, #4
	movs r3, #9
	bl func_080C6474
.L080CA550:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8d
	bls .L080CA562
	movs r0, #0x38
	movs r1, #0x28
	movs r2, #4
	movs r3, #7
	bl func_080C6474
.L080CA562:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8c
	bls .L080CA574
	movs r0, #0x9c
	movs r1, #0x3a
	movs r2, #3
	movs r3, #3
	bl func_080C6474
.L080CA574:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8b
	bls .L080CA586
	movs r0, #0x22
	movs r1, #0
	movs r2, #4
	movs r3, #1
	bl func_080C6474
.L080CA586:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x8a
	bls .L080CA598
	movs r0, #0xd2
	movs r1, #0x10
	movs r2, #4
	movs r3, #5
	bl func_080C6474
.L080CA598:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x89
	bls .L080CA5AA
	movs r0, #0xc
	movs r1, #0x1a
	movs r2, #3
	movs r3, #1
	bl func_080C6474
.L080CA5AA:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x88
	bls .L080CA5BC
	movs r0, #0xcc
	movs r1, #0x2a
	movs r2, #3
	movs r3, #4
	bl func_080C6474
.L080CA5BC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x87
	bls .L080CA5CE
	movs r0, #0x60
	movs r1, #0
	movs r2, #4
	movs r3, #0
	bl func_080C6474
.L080CA5CE:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x86
	bls .L080CA5E0
	movs r0, #0xe4
	movs r1, #0x10
	movs r2, #4
	movs r3, #0xb
	bl func_080C6474
.L080CA5E0:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x85
	bls .L080CA5F2
	movs r0, #0x58
	movs r1, #0x1e
	movs r2, #3
	movs r3, #3
	bl func_080C6474
.L080CA5F2:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x84
	bls .L080CA604
	movs r0, #0x54
	movs r1, #0x2e
	movs r2, #2
	movs r3, #1
	bl func_080C6474
.L080CA604:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x83
	bls .L080CA616
	movs r0, #0
	movs r1, #2
	movs r2, #4
	movs r3, #2
	bl func_080C6474
.L080CA616:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x82
	bls .L080CA628
	movs r0, #0xc6
	movs r1, #0x18
	movs r2, #4
	movs r3, #9
	bl func_080C6474
.L080CA628:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x81
	bls .L080CA63A
	movs r0, #0x90
	movs r1, #0x22
	movs r2, #3
	movs r3, #5
	bl func_080C6474
.L080CA63A:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x80
	bls .L080CA64C
	movs r0, #0xa8
	movs r1, #0x44
	movs r2, #2
	movs r3, #0
	bl func_080C6474
.L080CA64C:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7f
	bls .L080CA65E
	movs r0, #0xca
	movs r1, #2
	movs r2, #4
	movs r3, #7
	bl func_080C6474
.L080CA65E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7e
	bls .L080CA670
	movs r0, #0x26
	movs r1, #0x18
	movs r2, #4
	movs r3, #2
	bl func_080C6474
.L080CA670:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7d
	bls .L080CA682
	movs r0, #0x80
	movs r1, #0x26
	movs r2, #3
	movs r3, #0
	bl func_080C6474
.L080CA682:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x7b
	bls .L080CA694
	movs r0, #0x80
	movs r1, #0x32
	movs r2, #2
	movs r3, #5
	bl func_080C6474
.L080CA694:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x79
	bls .L080CA6A6
	movs r0, #0x86
	movs r1, #6
	movs r2, #4
	movs r3, #0
	bl func_080C6474
.L080CA6A6:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x77
	bls .L080CA6B8
	movs r0, #0x98
	movs r1, #0x16
	movs r2, #4
	movs r3, #1
	bl func_080C6474
.L080CA6B8:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x75
	bls .L080CA6CA
	movs r0, #0xe8
	movs r1, #0x16
	movs r2, #3
	movs r3, #3
	bl func_080C6474
.L080CA6CA:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x73
	bls .L080CA6DC
	movs r0, #0x64
	movs r1, #0x48
	movs r2, #2
	movs r3, #1
	bl func_080C6474
.L080CA6DC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x71
	bls .L080CA6EE
	movs r0, #0x70
	movs r1, #6
	movs r2, #4
	movs r3, #0xa
	bl func_080C6474
.L080CA6EE:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x6f
	bls .L080CA700
	movs r0, #0x40
	movs r1, #0x14
	movs r2, #4
	movs r3, #8
	bl func_080C6474
.L080CA700:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x6d
	bls .L080CA712
	movs r0, #0
	movs r1, #0x2e
	movs r2, #3
	movs r3, #4
	bl func_080C6474
.L080CA712:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x6b
	bls .L080CA724
	movs r0, #0x2c
	movs r1, #0x4a
	movs r2, #2
	movs r3, #4
	bl func_080C6474
.L080CA724:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x69
	bls .L080CA736
	movs r0, #0x40
	movs r1, #8
	movs r2, #4
	movs r3, #6
	bl func_080C6474
.L080CA736:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x67
	bls .L080CA748
	movs r0, #0x78
	movs r1, #0x1a
	movs r2, #4
	movs r3, #2
	bl func_080C6474
.L080CA748:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x65
	bls .L080CA75A
	movs r0, #0x24
	movs r1, #0x32
	movs r2, #3
	movs r3, #2
	bl func_080C6474
.L080CA75A:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x62
	bls .L080CA76C
	movs r0, #0xe
	movs r1, #0x4e
	movs r2, #2
	movs r3, #0
	bl func_080C6474
.L080CA76C:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x5f
	bls .L080CA77E
	movs r0, #0x16
	movs r1, #0xa
	movs r2, #4
	movs r3, #4
	bl func_080C6474
.L080CA77E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x5c
	bls .L080CA790
	movs r0, #0xb4
	movs r1, #0x28
	movs r2, #4
	movs r3, #1
	bl func_080C6474
.L080CA790:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x59
	bls .L080CA7A2
	movs r0, #0x42
	movs r1, #0x36
	movs r2, #3
	movs r3, #1
	bl func_080C6474
.L080CA7A2:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x55
	bls .L080CA7B4
	movs r0, #0xdc
	movs r1, #0x32
	movs r2, #2
	movs r3, #2
	bl func_080C6474
.L080CA7B4:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x51
	bls .L080CA7C6
	movs r0, #0xc8
	movs r1, #0x48
	movs r2, #1
	movs r3, #0
	bl func_080C6474
.L080CA7C6:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x4c
	bls .L080CA7D8
	movs r0, #0x38
	movs r1, #0x28
	movs r2, #4
	movs r3, #0
	bl func_080C6474
.L080CA7D8:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x47
	bls .L080CA7EA
	movs r0, #0x8c
	movs r1, #0x54
	movs r2, #1
	movs r3, #2
	bl func_080C6474
.L080CA7EA:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x41
	bls .L080CA7FC
	movs r0, #0x10
	movs r1, #0x64
	movs r2, #1
	movs r3, #1
	bl func_080C6474
.L080CA7FC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x37
	bls .L080CA80E
	movs r0, #0
	movs r1, #0x7e
	movs r2, #0
	movs r3, #1
	bl func_080C6474
.L080CA80E:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x31
	bls .L080CA820
	movs r0, #0xa0
	movs r1, #0x78
	movs r2, #0
	movs r3, #2
	bl func_080C6474
.L080CA820:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0x1d
	bls .L080CA832
	movs r0, #0x58
	movs r1, #0x70
	movs r2, #0
	movs r3, #0
	bl func_080C6474
.L080CA832:
	ldrh r0, [r6, #0x2a]
	adds r4, r0, #0
	subs r4, #0x52
	cmp r4, #0
	bne .L080CA870
	ldr r2, .L080CA914  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	negs r1, r1
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	movs r1, #0xe8
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgTilemapOffset
.L080CA870:
	cmp r4, #0x5f
	bhi .L080CA8A8
	ldr r0, .L080CA918  @ gUnknown_08B103D8
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl StorePaletteToBufferMaybe
	movs r0, #0x5f
	str r0, [sp]
	movs r0, #4
	movs r1, #0x10
	movs r2, #0xc
	adds r3, r4, #0
	bl Interpolate
	ldr r5, .L080CA91C  @ gPal
	lsls r7, r0, #0x10
	movs r4, #7
.L080CA896:
	adds r0, r5, #0
	movs r1, #0
	lsrs r2, r7, #0x10
	bl func_080C69B0
	adds r5, #0x20
	subs r4, #1
	cmp r4, #0
	bge .L080CA896
.L080CA8A8:
	ldrh r0, [r6, #0x2a]
	adds r4, r0, #0
	subs r4, #0xb1
	cmp r4, #0
	bne .L080CA8DC
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetB
.L080CA8DC:
	cmp r4, #0x20
	bhi .L080CA900
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	adds r3, r4, #0
	bl Interpolate
	ldr r2, .L080CA914  @ gDispIo
	adds r1, r2, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	adds r2, #0x45
	strb r1, [r2]
.L080CA900:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0xd1
	bne .L080CA920
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_Break
	b .L080CA924
	.align 2, 0
.L080CA914: .4byte gDispIo
.L080CA918: .4byte gUnknown_08B103D8
.L080CA91C: .4byte gPal
.L080CA920:
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080CA924:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CA4DC

	THUMB_FUNC_START func_080CA92C
func_080CA92C: @ 0x080CA92C
	push {r4, lr}
	adds r4, r0, #0
	bl SetBlendNone
	adds r4, #0x46
	movs r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CA92C

	THUMB_FUNC_START func_080CA940
func_080CA940: @ 0x080CA940
	push {r4, r5, r6, lr}
	mov r6, r9
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	ldr r0, .L080CA9F0  @ gUnknown_08AA707C
	bl EndEachProc
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r3, .L080CA9F4  @ gDispIo
	ldrb r1, [r3, #1]
	movs r2, #2
	negs r2, r2
	adds r0, r2, #0
	ands r0, r1
	movs r5, #3
	negs r5, r5
	ands r0, r5
	movs r1, #4
	mov r8, r1
	mov r1, r8
	orrs r0, r1
	movs r4, #9
	negs r4, r4
	ands r0, r4
	movs r6, #0x10
	orrs r0, r6
	movs r1, #0x21
	negs r1, r1
	mov r9, r1
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r3, #1]
	movs r0, #0x37
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	adds r0, r2, #0
	ands r0, r1
	ands r0, r5
	mov r1, r8
	orrs r0, r1
	ands r0, r4
	orrs r0, r6
	adds r3, #0x36
	ldrb r1, [r3]
	ands r2, r1
	ands r2, r5
	movs r1, #5
	negs r1, r1
	ands r2, r1
	ands r2, r4
	subs r1, #0xc
	ands r2, r1
	movs r1, #0x20
	orrs r0, r1
	mov r1, ip
	strb r0, [r1]
	mov r0, r9
	ands r2, r0
	strb r2, [r3]
	movs r0, #1
	movs r1, #4
	movs r2, #8
	movs r3, #8
	bl SetBlendConfig
	movs r0, #0
	str r0, [sp]
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080CA9F0: .4byte gUnknown_08AA707C
.L080CA9F4: .4byte gDispIo

	THUMB_FUNC_END func_080CA940

	THUMB_FUNC_START func_080CA9F8
func_080CA9F8: @ 0x080CA9F8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, r1, #0
	subs r2, r3, r2
	movs r5, #0x10
	subs r3, r5, r2
	cmp r3, #0
	bge .L080CAA14
	ldr r0, .L080CAA10  @ 0x0000FFFF
	b .L080CAA2E
	.align 2, 0
.L080CAA10: .4byte 0x0000FFFF
.L080CAA14:
	cmp r3, #0xf
	bgt .L080CAA2C
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #4
	adds r1, r4, r1
	str r5, [sp]
	movs r0, #4
	adds r2, r4, #0
	bl Interpolate
	b .L080CAA2E
.L080CAA2C:
	adds r0, r4, #0
.L080CAA2E:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CA9F8

	THUMB_FUNC_START func_080CAA38
func_080CAA38: @ 0x080CAA38
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r0, #0x78
	movs r1, #1
	negs r1, r1
	movs r3, #0x14
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CAB60  @ 0x0000FFFF
	mov sl, r0
	cmp r7, sl
	beq .L080CAAA2
	adds r4, r7, #0
	subs r4, #0x30
	ldr r5, .L080CAB64  @ 0x000001FF
	ands r4, r5
	ldr r6, .L080CAB68  @ gUnknown_08AA709C
	movs r1, #0
	mov r8, r1
	str r1, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0xec
	adds r3, r6, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r5
	ldr r2, .L080CAB6C  @ 0x000004EC
	ldr r0, .L080CAB70  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl PutSpriteExt
	ldr r2, .L080CAB74  @ 0x00000804
	ldr r3, .L080CAB78  @ gUnknown_08AA70BC
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	bl PutSpriteExt
.L080CAAA2:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #6
	movs r0, #0x78
	movs r1, #1
	negs r1, r1
	movs r3, #0x14
	bl func_080CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq .L080CAAF8
	adds r4, r7, #0
	subs r4, #0x30
	ldr r5, .L080CAB64  @ 0x000001FF
	ands r4, r5
	ldr r6, .L080CAB68  @ gUnknown_08AA709C
	ldr r0, .L080CAB7C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r5
	movs r2, #0x84
	lsls r2, r2, #3
	ldr r0, .L080CAB80  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl PutSpriteExt
	ldr r2, .L080CAB84  @ 0x00000838
	ldr r3, .L080CAB78  @ gUnknown_08AA70BC
	movs r0, #0
	str r0, [sp]
	adds r1, r4, #0
	bl PutSpriteExt
.L080CAAF8:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #2
	movs r0, #0x78
	movs r1, #1
	negs r1, r1
	movs r3, #0x14
	bl func_080CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq .L080CAB4C
	adds r4, r7, #0
	subs r4, #0x30
	ldr r5, .L080CAB64  @ 0x000001FF
	ands r4, r5
	ldr r6, .L080CAB68  @ gUnknown_08AA709C
	ldr r0, .L080CAB88  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0x54
	adds r3, r6, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r5
	ldr r2, .L080CAB8C  @ 0x00000454
	ldr r0, .L080CAB90  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl PutSpriteExt
	ldr r2, .L080CAB94  @ 0x0000086C
	ldr r3, .L080CAB78  @ gUnknown_08AA70BC
	movs r0, #0
	str r0, [sp]
	adds r1, r4, #0
	bl PutSpriteExt
.L080CAB4C:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #0x14
	bne .L080CAB98
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_Break
	b .L080CAB9E
	.align 2, 0
.L080CAB60: .4byte 0x0000FFFF
.L080CAB64: .4byte 0x000001FF
.L080CAB68: .4byte gUnknown_08AA709C
.L080CAB6C: .4byte 0x000004EC
.L080CAB70: .4byte 0x00001078
.L080CAB74: .4byte 0x00000804
.L080CAB78: .4byte gUnknown_08AA70BC
.L080CAB7C: .4byte 0x000020F0
.L080CAB80: .4byte 0x00003168
.L080CAB84: .4byte 0x00000838
.L080CAB88: .4byte 0x000041E0
.L080CAB8C: .4byte 0x00000454
.L080CAB90: .4byte 0x00005258
.L080CAB94: .4byte 0x0000086C
.L080CAB98:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
.L080CAB9E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CAA38

	THUMB_FUNC_START func_080CABB0
func_080CABB0: @ 0x080CABB0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	ldrh r4, [r0, #0x2a]
	adds r4, #2
	movs r5, #1
	negs r5, r5
	movs r0, #0x42
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x12
	bl func_080CA9F8
	mov sl, r0
	movs r0, #0x2a
	adds r1, r5, #0
	adds r2, r4, #0
	movs r3, #0x12
	bl func_080CA9F8
	adds r7, r0, #0
	movs r0, #0xae
	movs r1, #1
	adds r2, r4, #0
	movs r3, #0x12
	bl func_080CA9F8
	str r0, [sp, #8]
	movs r0, #0x76
	movs r1, #1
	adds r2, r4, #0
	movs r3, #0x12
	bl func_080CA9F8
	str r0, [sp, #0xc]
	ldr r0, .L080CADDC  @ 0x0000FFFF
	cmp sl, r0
	beq .L080CACE0
	cmp r7, r0
	beq .L080CAC6E
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CAC6E
	cmp r7, #0xc8
	bgt .L080CAC6E
	mov r5, sl
	subs r5, #0x30
	ldr r6, .L080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, .L080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	movs r0, #0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CADE8  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	adds r2, r7, #0
	subs r2, #0x20
	mov r1, r9
	ands r2, r1
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl PutSpriteExt
.L080CAC6E:
	ldr r0, .L080CADDC  @ 0x0000FFFF
	cmp sl, r0
	beq .L080CACE0
	ldr r1, [sp, #0xc]
	cmp r1, r0
	beq .L080CACE0
	movs r0, #0x28
	negs r0, r0
	cmp r1, r0
	blt .L080CACE0
	cmp r1, #0xc8
	bgt .L080CACE0
	mov r5, sl
	subs r5, #0x30
	ldr r6, .L080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r1, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, .L080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	ldr r0, .L080CADF0  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CADF4  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	ldr r2, [sp, #0xc]
	subs r2, #0x20
	mov r0, r9
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl PutSpriteExt
.L080CACE0:
	ldr r0, .L080CADDC  @ 0x0000FFFF
	ldr r1, [sp, #8]
	cmp r1, r0
	beq .L080CADC6
	cmp r7, r0
	beq .L080CAD52
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CAD52
	cmp r7, #0xc8
	bgt .L080CAD52
	adds r5, r1, #0
	subs r5, #0x30
	ldr r6, .L080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, .L080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	ldr r0, .L080CADF8  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	ldr r1, [sp, #8]
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CADFC  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	adds r2, r7, #0
	subs r2, #0x20
	mov r0, r9
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl PutSpriteExt
.L080CAD52:
	ldr r0, .L080CADDC  @ 0x0000FFFF
	ldr r1, [sp, #8]
	cmp r1, r0
	beq .L080CADC6
	ldr r1, [sp, #0xc]
	cmp r1, r0
	beq .L080CADC6
	movs r0, #0x28
	negs r0, r0
	cmp r1, r0
	blt .L080CADC6
	cmp r1, #0xc8
	bgt .L080CADC6
	ldr r5, [sp, #8]
	subs r5, #0x30
	ldr r6, .L080CADE0  @ 0x000001FF
	ands r5, r6
	adds r4, r1, #0
	subs r4, #0x28
	movs r0, #0xff
	mov r9, r0
	ands r4, r0
	ldr r1, .L080CADE4  @ gUnknown_08AA709C
	mov r8, r1
	ldr r0, .L080CAE00  @ 0x000062D0
	str r0, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	ldr r1, [sp, #8]
	subs r1, #0x2c
	ands r1, r6
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CAE04  @ 0x00007348
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	mov r3, r8
	bl PutSpriteExt
	ldr r2, [sp, #0xc]
	subs r2, #0x20
	mov r0, r9
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CADEC  @ gUnknown_08AA70DC
	movs r0, #0
	str r0, [sp]
	adds r1, r5, #0
	bl PutSpriteExt
.L080CADC6:
	ldr r1, [sp, #4]
	ldrh r0, [r1, #0x2a]
	cmp r0, #0x12
	bne .L080CAE08
	movs r0, #0
	strh r0, [r1, #0x2a]
	ldr r0, [sp, #4]
	bl Proc_Break
	b .L080CAE0E
	.align 2, 0
.L080CADDC: .4byte 0x0000FFFF
.L080CADE0: .4byte 0x000001FF
.L080CADE4: .4byte gUnknown_08AA709C
.L080CADE8: .4byte 0x00001078
.L080CADEC: .4byte gUnknown_08AA70DC
.L080CADF0: .4byte 0x000020F0
.L080CADF4: .4byte 0x00003168
.L080CADF8: .4byte 0x000041E0
.L080CADFC: .4byte 0x00005258
.L080CAE00: .4byte 0x000062D0
.L080CAE04: .4byte 0x00007348
.L080CAE08:
	adds r0, #1
	ldr r1, [sp, #4]
	strh r0, [r1, #0x2a]
.L080CAE0E:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CABB0

	THUMB_FUNC_START func_080CAE20
func_080CAE20: @ 0x080CAE20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldrh r0, [r0, #0x2a]
	adds r0, #2
	mov r9, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x3e
	mov r2, r9
	movs r3, #0x10
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CAEF4  @ 0x0000FFFF
	mov sl, r0
	cmp r7, sl
	beq .L080CAE8C
	adds r1, r7, #0
	subs r1, #0x20
	ldr r4, .L080CAEF8  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CAEFC  @ gUnknown_08AA709C
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r2, #0x20
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x1c
	ands r1, r4
	movs r2, #0x84
	lsls r2, r2, #3
	ldr r0, .L080CAF00  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CAF04  @ 0x00000838
	ldr r3, .L080CAF08  @ gUnknown_08AA70EA
	str r6, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080CAE8C:
	movs r0, #0xb2
	movs r1, #1
	mov r2, r9
	movs r3, #0x10
	bl func_080CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq .L080CAEDE
	adds r1, r7, #0
	subs r1, #0x40
	ldr r4, .L080CAEF8  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CAEFC  @ gUnknown_08AA709C
	ldr r0, .L080CAF0C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x20
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x3c
	ands r1, r4
	movs r2, #0x84
	lsls r2, r2, #3
	ldr r0, .L080CAF10  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CAF04  @ 0x00000838
	ldr r3, .L080CAF08  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CAEDE:
	mov r1, r8
	ldrh r0, [r1, #0x2a]
	cmp r0, #0x10
	bne .L080CAF14
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r8
	bl Proc_Break
	b .L080CAF1A
	.align 2, 0
.L080CAEF4: .4byte 0x0000FFFF
.L080CAEF8: .4byte 0x000001FF
.L080CAEFC: .4byte gUnknown_08AA709C
.L080CAF00: .4byte 0x00001078
.L080CAF04: .4byte 0x00000838
.L080CAF08: .4byte gUnknown_08AA70EA
.L080CAF0C: .4byte 0x000020F0
.L080CAF10: .4byte 0x00003168
.L080CAF14:
	adds r0, #1
	mov r1, r8
	strh r0, [r1, #0x2a]
.L080CAF1A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CAE20

	THUMB_FUNC_START func_080CAF2C
func_080CAF2C: @ 0x080CAF2C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #0xf
	bl func_080CA9F8
	adds r4, r0, #0
	ldr r0, .L080CB074  @ 0x0000FFFF
	cmp r4, r0
	beq .L080CAF98
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt .L080CAF98
	cmp r4, #0xc8
	bgt .L080CAF98
	movs r6, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CB078  @ gUnknown_08AA709C
	str r6, [sp]
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CB07C  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #4
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CB080  @ gUnknown_08AA7116
	str r6, [sp]
	movs r0, #0
	movs r1, #0x10
	adds r2, r4, #0
	bl PutSpriteExt
.L080CAF98:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #6
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #0xf
	bl func_080CA9F8
	adds r4, r0, #0
	ldr r0, .L080CB074  @ 0x0000FFFF
	cmp r4, r0
	beq .L080CAFFC
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt .L080CAFFC
	cmp r4, #0xc8
	bgt .L080CAFFC
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CB078  @ gUnknown_08AA709C
	ldr r0, .L080CB084  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CB088  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CB080  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0x58
	adds r2, r4, #0
	bl PutSpriteExt
.L080CAFFC:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #2
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #0xf
	bl func_080CA9F8
	adds r4, r0, #0
	ldr r0, .L080CB074  @ 0x0000FFFF
	cmp r4, r0
	beq .L080CB060
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt .L080CB060
	cmp r4, #0xc8
	bgt .L080CB060
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CB078  @ gUnknown_08AA709C
	ldr r0, .L080CB08C  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x90
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CB090  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x94
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CB080  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0xa0
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB060:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xf
	bne .L080CB094
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080CB098
	.align 2, 0
.L080CB074: .4byte 0x0000FFFF
.L080CB078: .4byte gUnknown_08AA709C
.L080CB07C: .4byte 0x00001078
.L080CB080: .4byte gUnknown_08AA7116
.L080CB084: .4byte 0x000020F0
.L080CB088: .4byte 0x00003168
.L080CB08C: .4byte 0x000041E0
.L080CB090: .4byte 0x00005258
.L080CB094:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080CB098:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CAF2C

	THUMB_FUNC_START func_080CB0A0
func_080CB0A0: @ 0x080CB0A0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r0, #0x50
	movs r1, #1
	movs r3, #0xd
	bl func_080CA9F8
	adds r4, r0, #0
	ldr r0, .L080CB1E0  @ 0x0000FFFF
	cmp r4, r0
	beq .L080CB10A
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt .L080CB10A
	cmp r4, #0xc8
	bgt .L080CB10A
	movs r6, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CB1E4  @ gUnknown_08AA709C
	str r6, [sp]
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CB1E8  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #4
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CB1EC  @ gUnknown_08AA7116
	str r6, [sp]
	movs r0, #0
	movs r1, #0x10
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB10A:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #6
	movs r0, #0x50
	movs r1, #1
	movs r3, #0xd
	bl func_080CA9F8
	adds r4, r0, #0
	ldr r0, .L080CB1E0  @ 0x0000FFFF
	cmp r4, r0
	beq .L080CB16C
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt .L080CB16C
	cmp r4, #0xc8
	bgt .L080CB16C
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CB1E4  @ gUnknown_08AA709C
	ldr r0, .L080CB1F0  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CB1F4  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CB1EC  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0x58
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB16C:
	ldrh r0, [r7, #0x2a]
	adds r2, r0, #2
	movs r0, #0x50
	movs r1, #1
	movs r3, #0xd
	bl func_080CA9F8
	adds r4, r0, #0
	ldr r0, .L080CB1E0  @ 0x0000FFFF
	cmp r4, r0
	beq .L080CB1CE
	movs r0, #0x28
	negs r0, r0
	cmp r4, r0
	blt .L080CB1CE
	cmp r4, #0xc8
	bgt .L080CB1CE
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CB1E4  @ gUnknown_08AA709C
	ldr r0, .L080CB1F8  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x90
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CB1FC  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x94
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CB1EC  @ gUnknown_08AA7116
	movs r0, #0
	str r0, [sp]
	movs r1, #0xa0
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB1CE:
	ldrh r0, [r7, #0x2a]
	cmp r0, #0xd
	bne .L080CB200
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b .L080CB204
	.align 2, 0
.L080CB1E0: .4byte 0x0000FFFF
.L080CB1E4: .4byte gUnknown_08AA709C
.L080CB1E8: .4byte 0x00001078
.L080CB1EC: .4byte gUnknown_08AA7116
.L080CB1F0: .4byte 0x000020F0
.L080CB1F4: .4byte 0x00003168
.L080CB1F8: .4byte 0x000041E0
.L080CB1FC: .4byte 0x00005258
.L080CB200:
	adds r0, #1
	strh r0, [r7, #0x2a]
.L080CB204:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CB0A0

	THUMB_FUNC_START func_080CB20C
func_080CB20C: @ 0x080CB20C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #6
	movs r0, #1
	negs r0, r0
	mov sl, r0
	movs r0, #0x3c
	mov r1, sl
	movs r3, #0xb
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB2E0  @ 0x0000FFFF
	mov r9, r0
	cmp r7, r9
	beq .L080CB27A
	adds r1, r7, #0
	subs r1, #0x20
	ldr r4, .L080CB2E4  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CB2E8  @ gUnknown_08AA709C
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	movs r0, #1
	movs r2, #6
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x1c
	ands r1, r4
	ldr r2, .L080CB2EC  @ 0x00000406
	ldr r0, .L080CB2F0  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CB2F4  @ 0x0000081E
	ldr r3, .L080CB2F8  @ gUnknown_08AA70EA
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080CB27A:
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #2
	movs r0, #0x3c
	mov r1, sl
	movs r3, #0xb
	bl func_080CA9F8
	adds r7, r0, #0
	cmp r7, r9
	beq .L080CB2CC
	adds r1, r7, #0
	subs r1, #0x40
	ldr r4, .L080CB2E4  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CB2E8  @ gUnknown_08AA709C
	ldr r0, .L080CB2FC  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x3a
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x3c
	ands r1, r4
	ldr r2, .L080CB300  @ 0x0000043A
	ldr r0, .L080CB304  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CB308  @ 0x00000852
	ldr r3, .L080CB2F8  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CB2CC:
	ldrh r0, [r6, #0x2a]
	cmp r0, #0xb
	bne .L080CB30C
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_Break
	b .L080CB310
	.align 2, 0
.L080CB2E0: .4byte 0x0000FFFF
.L080CB2E4: .4byte 0x000001FF
.L080CB2E8: .4byte gUnknown_08AA709C
.L080CB2EC: .4byte 0x00000406
.L080CB2F0: .4byte 0x00001078
.L080CB2F4: .4byte 0x0000081E
.L080CB2F8: .4byte gUnknown_08AA70EA
.L080CB2FC: .4byte 0x000020F0
.L080CB300: .4byte 0x0000043A
.L080CB304: .4byte 0x00003168
.L080CB308: .4byte 0x00000852
.L080CB30C:
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080CB310:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CB20C

	THUMB_FUNC_START func_080CB320
func_080CB320: @ 0x080CB320
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	ldrh r7, [r0, #0x2a]
	cmp r7, #0
	bne .L080CB3A6
	ldr r0, .L080CB54C  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r2, #0x20
	orrs r0, r2
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x80
	orrs r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r5, ip
	adds r5, #0x34
	ldrb r0, [r5]
	orrs r0, r2
	movs r1, #2
	negs r1, r1
	mov r8, r1
	ands r0, r1
	movs r6, #3
	negs r6, r6
	ands r0, r6
	movs r4, #4
	orrs r0, r4
	movs r3, #9
	negs r3, r3
	ands r0, r3
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r5]
	adds r5, #1
	ldrb r0, [r5]
	orrs r0, r2
	mov r2, r8
	ands r0, r2
	ands r0, r6
	orrs r0, r4
	ands r0, r3
	orrs r0, r1
	strb r0, [r5]
	mov r0, ip
	adds r0, #0x2d
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	subs r0, #5
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	subs r0, #1
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	subs r0, #5
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
.L080CB3A6:
	mov r1, sl
	ldrh r0, [r1, #0x2a]
	adds r0, #2
	mov r9, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x1c
	mov r2, r9
	movs r3, #0xa
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB550  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CB41C
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB41C
	cmp r7, #0xc8
	bgt .L080CB41C
	adds r4, r7, #0
	subs r4, #0x30
	movs r6, #0xff
	ands r4, r6
	ldr r5, .L080CB554  @ gUnknown_08AA709C
	movs r2, #0
	mov r8, r2
	str r2, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CB558  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	adds r2, r7, #0
	subs r2, #0x18
	ands r2, r6
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CB55C  @ gUnknown_08AA70EA
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x40
	bl PutSpriteExt
.L080CB41C:
	movs r0, #0x84
	movs r1, #1
	mov r2, r9
	movs r3, #0xa
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB550  @ 0x0000FFFF
	movs r1, #0x78
	cmp r1, r0
	beq .L080CB49A
	cmp r7, r0
	beq .L080CB49A
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB49A
	cmp r7, #0xc8
	bgt .L080CB49A
	subs r1, #0x30
	ldr r5, .L080CB560  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r2, #0xff
	mov r8, r2
	ands r4, r2
	ldr r6, .L080CB554  @ gUnknown_08AA709C
	ldr r0, .L080CB564  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	movs r1, #0x78
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CB568  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	movs r1, #0x78
	subs r1, #0x38
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CB55C  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CB49A:
	mov r3, r9
	subs r3, #2
	cmp r3, #7
	bhi .L080CB4F2
	movs r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x18
	bl Interpolate
	adds r7, r0, #0
	ldr r3, .L080CB54C  @ gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #6
	strb r0, [r1]
	movs r2, #0x50
	subs r2, r2, r7
	adds r0, r3, #0
	adds r0, #0x31
	strb r2, [r0]
	subs r1, #1
	movs r0, #0x76
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x50
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
	adds r5, r3, #0
	adds r5, #0x2f
	movs r0, #0x7a
	strb r0, [r5]
	adds r0, r3, #0
	adds r0, #0x33
	strb r2, [r0]
	adds r2, r3, #0
	adds r2, #0x2e
	movs r0, #0xea
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x32
	strb r1, [r0]
.L080CB4F2:
	ldr r4, .L080CB554  @ gUnknown_08AA709C
	ldr r0, .L080CB56C  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0xe
	movs r2, #0x20
	adds r3, r4, #0
	bl PutSpriteExt
	movs r5, #0x84
	lsls r5, r5, #3
	ldr r0, .L080CB570  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x12
	adds r2, r5, #0
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L080CB574  @ 0x000062D0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x82
	movs r2, #0x20
	adds r3, r4, #0
	bl PutSpriteExt
	ldr r0, .L080CB578  @ 0x00007348
	str r0, [sp]
	movs r0, #2
	movs r1, #0x86
	adds r2, r5, #0
	adds r3, r4, #0
	bl PutSpriteExt
	mov r1, sl
	ldrh r0, [r1, #0x2a]
	cmp r0, #0xa
	bne .L080CB57C
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, sl
	bl Proc_Break
	b .L080CB582
	.align 2, 0
.L080CB54C: .4byte gDispIo
.L080CB550: .4byte 0x0000FFFF
.L080CB554: .4byte gUnknown_08AA709C
.L080CB558: .4byte 0x00001078
.L080CB55C: .4byte gUnknown_08AA70EA
.L080CB560: .4byte 0x000001FF
.L080CB564: .4byte 0x000020F0
.L080CB568: .4byte 0x00003168
.L080CB56C: .4byte 0x000041E0
.L080CB570: .4byte 0x00005258
.L080CB574: .4byte 0x000062D0
.L080CB578: .4byte 0x00007348
.L080CB57C:
	adds r0, #1
	mov r2, sl
	strh r0, [r2, #0x2a]
.L080CB582:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CB320

	THUMB_FUNC_START func_080CB594
func_080CB594: @ 0x080CB594
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #6
	movs r0, #0xb4
	movs r1, #1
	movs r3, #9
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB660  @ 0x0000FFFF
	mov r9, r0
	cmp r7, r9
	beq .L080CB5FA
	adds r1, r7, #0
	subs r1, #0x20
	ldr r4, .L080CB664  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CB668  @ gUnknown_08AA709C
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	movs r0, #1
	movs r2, #6
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x1c
	ands r1, r4
	ldr r2, .L080CB66C  @ 0x00000406
	ldr r0, .L080CB670  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CB674  @ 0x0000081E
	ldr r3, .L080CB678  @ gUnknown_08AA70EA
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080CB5FA:
	ldrh r0, [r6, #0x2a]
	adds r2, r0, #2
	movs r0, #0xb4
	movs r1, #1
	movs r3, #9
	bl func_080CA9F8
	adds r7, r0, #0
	cmp r7, r9
	beq .L080CB64C
	adds r1, r7, #0
	subs r1, #0x40
	ldr r4, .L080CB664  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CB668  @ gUnknown_08AA709C
	ldr r0, .L080CB67C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x3a
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x3c
	ands r1, r4
	ldr r2, .L080CB680  @ 0x0000043A
	ldr r0, .L080CB684  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CB688  @ 0x00000852
	ldr r3, .L080CB678  @ gUnknown_08AA70EA
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CB64C:
	ldrh r0, [r6, #0x2a]
	cmp r0, #9
	bne .L080CB68C
	movs r0, #0
	strh r0, [r6, #0x2a]
	adds r0, r6, #0
	bl Proc_Break
	b .L080CB690
	.align 2, 0
.L080CB660: .4byte 0x0000FFFF
.L080CB664: .4byte 0x000001FF
.L080CB668: .4byte gUnknown_08AA709C
.L080CB66C: .4byte 0x00000406
.L080CB670: .4byte 0x00001078
.L080CB674: .4byte 0x0000081E
.L080CB678: .4byte gUnknown_08AA70EA
.L080CB67C: .4byte 0x000020F0
.L080CB680: .4byte 0x0000043A
.L080CB684: .4byte 0x00003168
.L080CB688: .4byte 0x00000852
.L080CB68C:
	adds r0, #1
	strh r0, [r6, #0x2a]
.L080CB690:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CB594

	THUMB_FUNC_START func_080CB6A0
func_080CB6A0: @ 0x080CB6A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r0, #0x78
	mov sl, r0
	movs r0, #0x1c
	movs r1, #1
	movs r3, #8
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB83C  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CB722
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB722
	cmp r7, #0xc8
	bgt .L080CB722
	adds r4, r7, #0
	subs r4, #0x30
	movs r6, #0xff
	ands r4, r6
	ldr r5, .L080CB840  @ gUnknown_08AA709C
	movs r1, #0
	mov r8, r1
	str r1, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CB844  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	adds r2, r7, #0
	subs r2, #0x18
	ands r2, r6
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CB848  @ gUnknown_08AA715C
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x18
	bl PutSpriteExt
.L080CB722:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #6
	movs r0, #0x50
	movs r1, #1
	movs r3, #8
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB83C  @ 0x0000FFFF
	cmp sl, r0
	beq .L080CB7A4
	cmp r7, r0
	beq .L080CB7A4
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB7A4
	cmp r7, #0xc8
	bgt .L080CB7A4
	mov r1, sl
	subs r1, #0x30
	ldr r5, .L080CB84C  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, .L080CB840  @ gUnknown_08AA709C
	ldr r0, .L080CB850  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CB854  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CB848  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CB7A4:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #2
	movs r0, #0x84
	movs r1, #1
	movs r3, #8
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CB83C  @ 0x0000FFFF
	cmp sl, r0
	beq .L080CB826
	cmp r7, r0
	beq .L080CB826
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB826
	cmp r7, #0xc8
	bgt .L080CB826
	mov r1, sl
	subs r1, #0x30
	ldr r5, .L080CB84C  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, .L080CB840  @ gUnknown_08AA709C
	ldr r0, .L080CB858  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CB85C  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CB848  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CB826:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #8
	bne .L080CB860
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_Break
	b .L080CB866
	.align 2, 0
.L080CB83C: .4byte 0x0000FFFF
.L080CB840: .4byte gUnknown_08AA709C
.L080CB844: .4byte 0x00001078
.L080CB848: .4byte gUnknown_08AA715C
.L080CB84C: .4byte 0x000001FF
.L080CB850: .4byte 0x000020F0
.L080CB854: .4byte 0x00003168
.L080CB858: .4byte 0x000041E0
.L080CB85C: .4byte 0x00005258
.L080CB860:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
.L080CB866:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CB6A0

	THUMB_FUNC_START func_080CB878
func_080CB878: @ 0x080CB878
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r0, #2
	str r0, [sp, #4]
	movs r0, #0x1e
	mov sl, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	ldr r2, [sp, #4]
	movs r3, #7
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CB902
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB902
	cmp r7, #0xc8
	bgt .L080CB902
	mov r1, sl
	subs r1, #0x30
	ldr r5, .L080CBA24  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r6, .L080CBA28  @ gUnknown_08AA709C
	movs r0, #0
	mov r8, r0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CBA2C  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r6, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CBA30  @ gUnknown_08AA712A
	mov r1, r8
	str r1, [sp]
	movs r0, #0
	movs r1, #2
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB902:
	ldr r0, .L080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CB956
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB956
	cmp r7, #0xc8
	bgt .L080CB956
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CBA28  @ gUnknown_08AA709C
	ldr r0, .L080CBA34  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x66
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CBA38  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	movs r1, #0x6a
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CBA30  @ gUnknown_08AA712A
	movs r0, #0
	str r0, [sp]
	movs r1, #0x7a
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB956:
	movs r0, #0x50
	movs r1, #1
	ldr r2, [sp, #4]
	movs r3, #7
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CB9B8
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CB9B8
	cmp r7, #0xc8
	bgt .L080CB9B8
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CBA28  @ gUnknown_08AA709C
	ldr r0, .L080CBA3C  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r1, #0x2a
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CBA40  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	movs r1, #0x2e
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CBA30  @ gUnknown_08AA712A
	movs r0, #0
	str r0, [sp]
	movs r1, #0x3e
	adds r2, r4, #0
	bl PutSpriteExt
.L080CB9B8:
	ldr r0, .L080CBA20  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CBA0C
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CBA0C
	cmp r7, #0xc8
	bgt .L080CBA0C
	adds r4, r7, #0
	subs r4, #0x28
	movs r0, #0xff
	ands r4, r0
	ldr r5, .L080CBA28  @ gUnknown_08AA709C
	ldr r0, .L080CBA44  @ 0x000062D0
	str r0, [sp]
	movs r0, #1
	movs r1, #0xa2
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r2, r4
	ldr r0, .L080CBA48  @ 0x00007348
	str r0, [sp]
	movs r0, #2
	movs r1, #0xa6
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r4, r0
	ldr r3, .L080CBA30  @ gUnknown_08AA712A
	movs r0, #0
	str r0, [sp]
	movs r1, #0xb6
	adds r2, r4, #0
	bl PutSpriteExt
.L080CBA0C:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #7
	bne .L080CBA4C
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_Break
	b .L080CBA52
	.align 2, 0
.L080CBA20: .4byte 0x0000FFFF
.L080CBA24: .4byte 0x000001FF
.L080CBA28: .4byte gUnknown_08AA709C
.L080CBA2C: .4byte 0x00001078
.L080CBA30: .4byte gUnknown_08AA712A
.L080CBA34: .4byte 0x000041E0
.L080CBA38: .4byte 0x00005258
.L080CBA3C: .4byte 0x000020F0
.L080CBA40: .4byte 0x00003168
.L080CBA44: .4byte 0x000062D0
.L080CBA48: .4byte 0x00007348
.L080CBA4C:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
.L080CBA52:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CB878

	THUMB_FUNC_START func_080CBA64
func_080CBA64: @ 0x080CBA64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r9, r0
	ldrh r0, [r0, #0x2a]
	adds r2, r0, #2
	movs r0, #0x78
	mov sl, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x1c
	movs r3, #6
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CBC04  @ 0x0000FFFF
	cmp r7, r0
	beq .L080CBAE6
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CBAE6
	cmp r7, #0xc8
	bgt .L080CBAE6
	adds r4, r7, #0
	subs r4, #0x30
	movs r6, #0xff
	ands r4, r6
	ldr r5, .L080CBC08  @ gUnknown_08AA709C
	movs r1, #0
	mov r8, r1
	str r1, [sp]
	movs r0, #1
	movs r1, #0x48
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CBC0C  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	movs r1, #0x4c
	adds r2, r4, #0
	adds r3, r5, #0
	bl PutSpriteExt
	adds r2, r7, #0
	subs r2, #0x18
	ands r2, r6
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CBC10  @ gUnknown_08AA715C
	mov r0, r8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x18
	bl PutSpriteExt
.L080CBAE6:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #6
	movs r1, #1
	negs r1, r1
	movs r0, #0x50
	movs r3, #6
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CBC04  @ 0x0000FFFF
	cmp sl, r0
	beq .L080CBB6A
	cmp r7, r0
	beq .L080CBB6A
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CBB6A
	cmp r7, #0xc8
	bgt .L080CBB6A
	mov r1, sl
	subs r1, #0x30
	ldr r5, .L080CBC14  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, .L080CBC08  @ gUnknown_08AA709C
	ldr r0, .L080CBC18  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CBC1C  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CBC10  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CBB6A:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	adds r2, r0, #0
	adds r2, #0xa
	movs r1, #1
	negs r1, r1
	movs r0, #0x84
	movs r3, #6
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CBC04  @ 0x0000FFFF
	cmp sl, r0
	beq .L080CBBF0
	cmp r7, r0
	beq .L080CBBF0
	movs r0, #0x28
	negs r0, r0
	cmp r7, r0
	blt .L080CBBF0
	cmp r7, #0xc8
	bgt .L080CBBF0
	mov r1, sl
	subs r1, #0x30
	ldr r5, .L080CBC14  @ 0x000001FF
	ands r1, r5
	adds r4, r7, #0
	subs r4, #0x30
	movs r0, #0xff
	mov r8, r0
	ands r4, r0
	ldr r6, .L080CBC08  @ gUnknown_08AA709C
	ldr r0, .L080CBC20  @ 0x000041E0
	str r0, [sp]
	movs r0, #1
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x2c
	ands r1, r5
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r4, r0
	ldr r0, .L080CBC24  @ 0x00005258
	str r0, [sp]
	movs r0, #2
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSpriteExt
	mov r1, sl
	subs r1, #0x60
	ands r1, r5
	adds r2, r7, #0
	subs r2, #0x18
	mov r0, r8
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #4
	orrs r2, r0
	ldr r3, .L080CBC10  @ gUnknown_08AA715C
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CBBF0:
	mov r1, r9
	ldrh r0, [r1, #0x2a]
	cmp r0, #6
	bne .L080CBC28
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r9
	bl Proc_Break
	b .L080CBC2E
	.align 2, 0
.L080CBC04: .4byte 0x0000FFFF
.L080CBC08: .4byte gUnknown_08AA709C
.L080CBC0C: .4byte 0x00001078
.L080CBC10: .4byte gUnknown_08AA715C
.L080CBC14: .4byte 0x000001FF
.L080CBC18: .4byte 0x000020F0
.L080CBC1C: .4byte 0x00003168
.L080CBC20: .4byte 0x000041E0
.L080CBC24: .4byte 0x00005258
.L080CBC28:
	adds r0, #1
	mov r1, r9
	strh r0, [r1, #0x2a]
.L080CBC2E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CBA64

	THUMB_FUNC_START func_080CBC40
func_080CBC40: @ 0x080CBC40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldrh r0, [r0, #0x2a]
	adds r0, #2
	mov r9, r0
	movs r1, #1
	negs r1, r1
	movs r0, #0x3e
	mov r2, r9
	movs r3, #5
	bl func_080CA9F8
	adds r7, r0, #0
	ldr r0, .L080CBD3C  @ 0x0000FFFF
	mov sl, r0
	cmp r7, sl
	beq .L080CBCAC
	adds r1, r7, #0
	subs r1, #0x30
	ldr r4, .L080CBD40  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CBD44  @ gUnknown_08AA709C
	movs r6, #0
	str r6, [sp]
	movs r0, #1
	movs r2, #0x28
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r4
	movs r2, #0x85
	lsls r2, r2, #3
	ldr r0, .L080CBD48  @ 0x00001078
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CBD4C  @ 0x00000828
	ldr r3, .L080CBD50  @ gUnknown_08AA7194
	str r6, [sp]
	movs r0, #0
	bl PutSpriteExt
.L080CBCAC:
	movs r0, #0xb2
	movs r1, #1
	mov r2, r9
	movs r3, #5
	bl func_080CA9F8
	adds r7, r0, #0
	cmp r7, sl
	beq .L080CBCFE
	adds r1, r7, #0
	subs r1, #0x30
	ldr r4, .L080CBD40  @ 0x000001FF
	ands r1, r4
	ldr r5, .L080CBD44  @ gUnknown_08AA709C
	ldr r0, .L080CBD54  @ 0x000020F0
	str r0, [sp]
	movs r0, #1
	movs r2, #0x28
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x2c
	ands r1, r4
	movs r2, #0x85
	lsls r2, r2, #3
	ldr r0, .L080CBD58  @ 0x00003168
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSpriteExt
	adds r1, r7, #0
	subs r1, #0x38
	ands r1, r4
	ldr r2, .L080CBD4C  @ 0x00000828
	ldr r3, .L080CBD50  @ gUnknown_08AA7194
	movs r0, #0
	str r0, [sp]
	bl PutSpriteExt
.L080CBCFE:
	mov r1, r8
	ldrh r0, [r1, #0x2a]
	cmp r0, #1
	bne .L080CBD28
	ldr r0, .L080CBD5C  @ gUnknown_08AF4330
	ldr r4, .L080CBD60  @ 0x0600F000
	adds r1, r4, #0
	bl Decompress
	movs r3, #0x80
	lsls r3, r3, #8
	adds r2, r3, #0
	movs r1, #0xa0
	lsls r1, r1, #2
.L080CBD1A:
	ldrh r3, [r4]
	adds r0, r2, r3
	strh r0, [r4]
	subs r1, #1
	adds r4, #2
	cmp r1, #0
	bne .L080CBD1A
.L080CBD28:
	mov r1, r8
	ldrh r0, [r1, #0x2a]
	cmp r0, #5
	bne .L080CBD64
	movs r0, #0
	strh r0, [r1, #0x2a]
	mov r0, r8
	bl Proc_Break
	b .L080CBD6A
	.align 2, 0
.L080CBD3C: .4byte 0x0000FFFF
.L080CBD40: .4byte 0x000001FF
.L080CBD44: .4byte gUnknown_08AA709C
.L080CBD48: .4byte 0x00001078
.L080CBD4C: .4byte 0x00000828
.L080CBD50: .4byte gUnknown_08AA7194
.L080CBD54: .4byte 0x000020F0
.L080CBD58: .4byte 0x00003168
.L080CBD5C: .4byte gUnknown_08AF4330
.L080CBD60: .4byte 0x0600F000
.L080CBD64:
	adds r0, #1
	mov r3, r8
	strh r0, [r3, #0x2a]
.L080CBD6A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CBC40

	THUMB_FUNC_START func_080CBD7C
func_080CBD7C: @ 0x080CBD7C
	push {r4, lr}
	bl EndAllProcChildren
	bl func_080C71D4
	movs r0, #0
	bl SetOnHBlankA
	bl DeleteSome6C
	ldr r4, .L080CBDCC  @ gDispIo
	ldrb r1, [r4]
	movs r0, #0x41
	negs r0, r0
	ands r0, r1
	strb r0, [r4]
	ldr r1, .L080CBDD0  @ gPal
	ldr r0, .L080CBDD4  @ gUnknown_02022188
	ldrh r0, [r0, #0xc]
	strh r0, [r1]
	bl EnablePalSync
	ldrb r1, [r4, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CBDCC: .4byte gDispIo
.L080CBDD0: .4byte gPal
.L080CBDD4: .4byte gUnknown_02022188

	THUMB_FUNC_END func_080CBD7C

	THUMB_FUNC_START func_080CBDD8
func_080CBDD8: @ 0x080CBDD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	cmp r0, #2
	beq .L080CBDEA
	bl IsHealthSafetySkipEnabled
	cmp r0, #0
	beq .L080CBE00
.L080CBDEA:
	ldr r0, .L080CBE08  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0xa
	ands r0, r1
	cmp r0, #0
	beq .L080CBE00
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
.L080CBE00:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CBE08: .4byte gKeySt

	THUMB_FUNC_END func_080CBDD8

	THUMB_FUNC_START func_080CBE0C
func_080CBE0C: @ 0x080CBE0C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #1
	bl FadeBgmOut
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl SetOnHBlankA
	ldr r5, .L080CBECC  @ gDispIo
	ldrb r1, [r5, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	mov sl, r1
	ands r0, r1
	subs r1, #2
	mov r9, r1
	ands r0, r1
	subs r1, #4
	mov r8, r1
	ands r0, r1
	movs r6, #0x11
	negs r6, r6
	ands r0, r6
	strb r0, [r5, #1]
	ldr r0, .L080CBED0  @ gUnknown_08B10630
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	ldr r0, .L080CBED4  @ gUnknown_08B104D8
	ldr r4, .L080CBED8  @ gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080CBEDC  @ gBg0Tm
	adds r1, r4, #0
	movs r2, #0
	bl TmApplyTsa_thm
	ldr r0, .L080CBEE0  @ gUnknown_08B10CA4
	ldr r1, .L080CBEE4  @ 0x06002000
	bl Decompress
	ldr r0, .L080CBEE8  @ gUnknown_08B10ADC
	adds r1, r4, #0
	bl Decompress
	ldr r0, .L080CBEEC  @ gBg1Tm
	movs r2, #0x88
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_thm
	movs r4, #0
	str r4, [sp]
	ldr r1, .L080CBEF0  @ gPal
	ldr r2, .L080CBEF4  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	movs r0, #3
	bl EnableBgSync
	ldrb r0, [r5, #1]
	movs r1, #1
	orrs r0, r1
	mov r1, sl
	ands r0, r1
	mov r1, r9
	ands r0, r1
	mov r1, r8
	ands r0, r1
	ands r0, r6
	strb r0, [r5, #1]
	str r4, [r7, #0x30]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CBECC: .4byte gDispIo
.L080CBED0: .4byte gUnknown_08B10630
.L080CBED4: .4byte gUnknown_08B104D8
.L080CBED8: .4byte gBuf
.L080CBEDC: .4byte gBg0Tm
.L080CBEE0: .4byte gUnknown_08B10CA4
.L080CBEE4: .4byte 0x06002000
.L080CBEE8: .4byte gUnknown_08B10ADC
.L080CBEEC: .4byte gBg1Tm
.L080CBEF0: .4byte gPal
.L080CBEF4: .4byte 0x01000100

	THUMB_FUNC_END func_080CBE0C

	THUMB_FUNC_START func_080CBEF8
func_080CBEF8: @ 0x080CBEF8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	adds r7, r3, #0
	lsls r2, r2, #4
	lsls r1, r1, #5
	ldr r0, .L080CBF74  @ gPal
	adds r1, r1, r0
	mov r8, r1
	ldr r0, [sp, #0x20]
	cmp r7, r0
	bge .L080CBF78
	cmp r2, #0
	ble .L080CBF86
	mov r9, r4
	mov sl, r2
.L080CBF1E:
	mov r1, r9
	ldrh r4, [r1]
	adds r0, r4, #0
	movs r1, #0x1f
	ands r0, r1
	muls r0, r7, r0
	ldr r1, [sp, #0x20]
	bl __divsi3
	adds r6, r0, #0
	asrs r0, r4, #5
	movs r1, #0x1f
	ands r0, r1
	muls r0, r7, r0
	ldr r1, [sp, #0x20]
	bl __divsi3
	adds r5, r0, #0
	asrs r4, r4, #0xa
	movs r0, #0x1f
	ands r4, r0
	adds r0, r4, #0
	muls r0, r7, r0
	ldr r1, [sp, #0x20]
	bl __divsi3
	lsls r5, r5, #5
	orrs r5, r6
	lsls r0, r0, #0xa
	orrs r0, r5
	mov r1, r8
	strh r0, [r1]
	movs r0, #2
	add r8, r0
	add r9, r0
	movs r1, #1
	negs r1, r1
	add sl, r1
	mov r0, sl
	cmp r0, #0
	bne .L080CBF1E
	b .L080CBF86
	.align 2, 0
.L080CBF74: .4byte gPal
.L080CBF78:
	asrs r2, r2, #1
	ldr r0, .L080CBF98  @ 0x001FFFFF
	ands r2, r0
	adds r0, r4, #0
	mov r1, r8
	bl CpuFastSet
.L080CBF86:
	bl EnablePalSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CBF98: .4byte 0x001FFFFF

	THUMB_FUNC_END func_080CBEF8

	THUMB_FUNC_START func_080CBF9C
func_080CBF9C: @ 0x080CBF9C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080CBFB8  @ gPal
	ldr r1, .L080CBFBC  @ gUnknown_02000000
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #4
	str r0, [r4, #0x38]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CBFB8: .4byte gPal
.L080CBFBC: .4byte gUnknown_02000000

	THUMB_FUNC_END func_080CBF9C

	THUMB_FUNC_START func_080CBFC0
func_080CBFC0: @ 0x080CBFC0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, [r7, #0x38]
	subs r0, #1
	str r0, [r7, #0x38]
	cmp r0, #0
	ble .L080CC044
	movs r6, #0
	ldr r0, .L080CC038  @ gPal
	mov r9, r0
	movs r3, #0x1f
	mov r8, r3
	ldr r4, .L080CC03C  @ gUnknown_02000000
	mov ip, r4
.L080CBFE4:
	lsls r2, r6, #1
	mov r0, ip
	ldrh r3, [r0]
	movs r0, #0x1f
	ands r0, r3
	ldr r1, [r7, #0x38]
	muls r0, r1, r0
	cmp r0, #0
	bge .L080CBFF8
	adds r0, #3
.L080CBFF8:
	asrs r5, r0, #2
	lsls r3, r3, #0x10
	lsrs r0, r3, #0x15
	mov r4, r8
	ands r0, r4
	muls r0, r1, r0
	cmp r0, #0
	bge .L080CC00A
	adds r0, #3
.L080CC00A:
	asrs r4, r0, #2
	lsrs r0, r3, #0x1a
	mov r3, r8
	ands r0, r3
	muls r0, r1, r0
	cmp r0, #0
	bge .L080CC01A
	adds r0, #3
.L080CC01A:
	asrs r1, r0, #2
	add r2, r9
	lsls r0, r4, #5
	orrs r0, r5
	lsls r1, r1, #0xa
	orrs r0, r1
	strh r0, [r2]
	movs r4, #2
	add ip, r4
	adds r6, #1
	ldr r0, .L080CC040  @ 0x000001FF
	cmp r6, r0
	ble .L080CBFE4
	b .L080CC058
	.align 2, 0
.L080CC038: .4byte gPal
.L080CC03C: .4byte gUnknown_02000000
.L080CC040: .4byte 0x000001FF
.L080CC044:
	movs r0, #0
	str r0, [sp]
	ldr r1, .L080CC06C  @ gPal
	ldr r2, .L080CC070  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	adds r0, r7, #0
	bl Proc_Break
.L080CC058:
	bl EnablePalSync
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC06C: .4byte gPal
.L080CC070: .4byte 0x01000100

	THUMB_FUNC_END func_080CBFC0

	THUMB_FUNC_START func_080CC074
func_080CC074: @ 0x080CC074
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	subs r0, #1
	str r0, [r4, #0x34]
	cmp r0, #0
	bgt .L080CC08C
	movs r0, #0
	str r0, [r4, #0x30]
	adds r0, r4, #0
	bl Proc_Break
.L080CC08C:
	adds r0, r4, #0
	bl func_080CBDD8
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CC074

	THUMB_FUNC_START func_080CC098
func_080CC098: @ 0x080CC098
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bne .L080CC0C0
	ldr r2, .L080CC0F4  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
.L080CC0C0:
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, .L080CC0F8  @ gUnknown_08B10ABC
	movs r1, #0x1e
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl func_080CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble .L080CC0E4
	movs r0, #0x3c
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080CC0E4:
	adds r0, r4, #0
	bl func_080CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC0F4: .4byte gDispIo
.L080CC0F8: .4byte gUnknown_08B10ABC

	THUMB_FUNC_END func_080CC098

	THUMB_FUNC_START func_080CC0FC
func_080CC0FC: @ 0x080CC0FC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, .L080CC138  @ gUnknown_08B10ABC
	movs r1, #0x1e
	subs r3, r1, r3
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl func_080CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble .L080CC128
	movs r0, #0x28
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080CC128:
	adds r0, r4, #0
	bl func_080CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC138: .4byte gUnknown_08B10ABC

	THUMB_FUNC_END func_080CC0FC

	THUMB_FUNC_START func_080CC13C
func_080CC13C: @ 0x080CC13C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bne .L080CC166
	ldr r2, .L080CC198  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
.L080CC166:
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, .L080CC19C  @ gUnknown_08B11864
	movs r1, #0x1e
	str r1, [sp]
	movs r1, #1
	movs r2, #3
	bl func_080CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble .L080CC18A
	movs r0, #0x3c
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080CC18A:
	adds r0, r4, #0
	bl func_080CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC198: .4byte gDispIo
.L080CC19C: .4byte gUnknown_08B11864

	THUMB_FUNC_END func_080CC13C

	THUMB_FUNC_START func_080CC1A0
func_080CC1A0: @ 0x080CC1A0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, .L080CC1DC  @ gUnknown_08B11864
	movs r1, #0x28
	subs r3, r1, r3
	str r1, [sp]
	movs r1, #1
	movs r2, #3
	bl func_080CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x27
	ble .L080CC1CC
	movs r0, #0x3c
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080CC1CC:
	adds r0, r4, #0
	bl func_080CBDD8
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC1DC: .4byte gUnknown_08B11864

	THUMB_FUNC_END func_080CC1A0

	THUMB_FUNC_START func_080CC1E0
func_080CC1E0: @ 0x080CC1E0
	movs r1, #0
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_END func_080CC1E0

	THUMB_FUNC_START func_080CC1E8
func_080CC1E8: @ 0x080CC1E8
	movs r1, #1
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_END func_080CC1E8

	THUMB_FUNC_START func_080CC1F0
func_080CC1F0: @ 0x080CC1F0
	movs r1, #2
	str r1, [r0, #0x2c]
	bx lr

	THUMB_FUNC_END func_080CC1F0

	THUMB_FUNC_START PrepareHealthAndSafetyScreen
PrepareHealthAndSafetyScreen: @ 0x080CC1F8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	bl IsHealthSafetySkipEnabled
	cmp r0, #1
	bne .L080CC21C
	ldr r1, .L080CC218  @ 0x000003E7
	adds r0, r7, #0
	bl Proc_Goto
	b .L080CC2BA
	.align 2, 0
.L080CC218: .4byte 0x000003E7
.L080CC21C:
	movs r0, #1
	bl FadeBgmOut
	movs r0, #0
	bl SetupBackgrounds
	movs r0, #0
	bl SetOnHBlankA
	ldr r6, .L080CC2CC  @ gDispIo
	ldrb r1, [r6, #1]
	movs r4, #2
	negs r4, r4
	adds r0, r4, #0
	ands r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	mov sl, r1
	ands r0, r1
	subs r1, #4
	mov r9, r1
	ands r0, r1
	subs r1, #8
	mov r8, r1
	ands r0, r1
	strb r0, [r6, #1]
	ldr r0, .L080CC2D0  @ gUnknown_08B11D0C
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	ldr r0, .L080CC2D4  @ gUnknown_08B118C4
	ldr r5, .L080CC2D8  @ gBuf
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L080CC2DC  @ gBg1Tm
	adds r1, r5, #0
	movs r2, #0
	bl TmApplyTsa_thm
	ldr r0, .L080CC2E0  @ gUnknown_08B11C0C
	adds r1, r5, #0
	bl Decompress
	ldr r0, .L080CC2E4  @ gBg0Tm
	adds r1, r5, #0
	movs r2, #0
	bl TmApplyTsa_thm
	movs r5, #0
	str r5, [sp]
	ldr r1, .L080CC2E8  @ gPal
	ldr r2, .L080CC2EC  @ 0x01000100
	mov r0, sp
	bl CpuFastSet
	bl EnablePalSync
	movs r0, #3
	bl EnableBgSync
	ldrb r0, [r6, #1]
	ands r4, r0
	movs r0, #2
	orrs r4, r0
	mov r0, sl
	ands r4, r0
	mov r1, r9
	ands r4, r1
	mov r0, r8
	ands r4, r0
	strb r4, [r6, #1]
	str r5, [r7, #0x30]
	ldr r0, .L080CC2F0  @ 0x000003FF
	bl SetKeyIgnore
.L080CC2BA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC2CC: .4byte gDispIo
.L080CC2D0: .4byte gUnknown_08B11D0C
.L080CC2D4: .4byte gUnknown_08B118C4
.L080CC2D8: .4byte gBuf
.L080CC2DC: .4byte gBg1Tm
.L080CC2E0: .4byte gUnknown_08B11C0C
.L080CC2E4: .4byte gBg0Tm
.L080CC2E8: .4byte gPal
.L080CC2EC: .4byte 0x01000100
.L080CC2F0: .4byte 0x000003FF

	THUMB_FUNC_END PrepareHealthAndSafetyScreen

	THUMB_FUNC_START func_080CC2F4
func_080CC2F4: @ 0x080CC2F4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, .L080CC328  @ gUnknown_08B125F4
	movs r1, #0x1e
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl func_080CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble .L080CC31E
	movs r0, #0x5a
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080CC31E:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC328: .4byte gUnknown_08B125F4

	THUMB_FUNC_END func_080CC2F4

	THUMB_FUNC_START func_080CC32C
func_080CC32C: @ 0x080CC32C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r3, [r5, #0x30]
	cmp r3, #0
	bne .L080CC368
	ldr r2, .L080CC39C  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	str r3, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #0
	bl SetKeyIgnore
.L080CC368:
	ldr r2, [r5, #0x30]
	adds r1, r2, #1
	str r1, [r5, #0x30]
	adds r0, r1, #0
	cmp r1, #0
	bge .L080CC378
	adds r0, r2, #0
	adds r0, #0x40
.L080CC378:
	asrs r0, r0, #6
	lsls r0, r0, #6
	subs r0, r1, r0
	asrs r0, r0, #1
	movs r1, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	cmp r1, #0
	blt .L080CC3A0
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBlendConfig
	b .L080CC3B0
	.align 2, 0
.L080CC39C: .4byte gDispIo
.L080CC3A0:
	negs r3, r3
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBlendConfig
.L080CC3B0:
	ldr r1, [r5, #0x30]
	ldr r0, .L080CC420  @ 0x00000E0F
	cmp r1, r0
	bgt .L080CC3C6
	ldr r0, .L080CC424  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	ldr r0, .L080CC428  @ 0x000003FF
	ands r0, r1
	cmp r0, #0
	beq .L080CC416
.L080CC3C6:
	movs r4, #0
	str r4, [r5, #0x30]
	ldr r2, .L080CC42C  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #2
	negs r0, r0
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	negs r1, r1
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetB
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendConfig
	adds r0, r5, #0
	bl Proc_Break
.L080CC416:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC420: .4byte 0x00000E0F
.L080CC424: .4byte gKeySt
.L080CC428: .4byte 0x000003FF
.L080CC42C: .4byte gDispIo

	THUMB_FUNC_END func_080CC32C

	THUMB_FUNC_START func_080CC430
func_080CC430: @ 0x080CC430
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	adds r3, #1
	str r3, [r4, #0x30]
	ldr r0, .L080CC464  @ gUnknown_08B125F4
	movs r1, #0x1e
	subs r3, r1, r3
	str r1, [sp]
	movs r1, #0
	movs r2, #1
	bl func_080CBEF8
	ldr r0, [r4, #0x30]
	cmp r0, #0x1d
	ble .L080CC45C
	movs r0, #0x28
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl Proc_Break
.L080CC45C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC464: .4byte gUnknown_08B125F4

	THUMB_FUNC_END func_080CC430

	THUMB_FUNC_START NewPromotionMain
NewPromotionMain: @ 0x080CC468
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	adds r1, r6, #0
	adds r1, #0x30
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	bl NewPromotionMain_raw
	str r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x38
	strb r4, [r1]
	adds r0, #0x39
	strb r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END NewPromotionMain

	THUMB_FUNC_START NewPromotionMain_raw
NewPromotionMain_raw: @ 0x080CC498
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080CC4A8  @ gUnknown_08B12614
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
.L080CC4A8: .4byte gUnknown_08B12614

	THUMB_FUNC_END NewPromotionMain_raw

	THUMB_FUNC_START func_080CC4AC
func_080CC4AC: @ 0x080CC4AC
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r1, [r0, #0x30]
	str r1, [r0, #0x34]
	ldr r4, [r0, #0x14]
	adds r5, r4, #0
	adds r5, #0x31
	ldrb r0, [r5]
	cmp r0, #0
	bne .L080CC502
	bl InitFaces
	bl ResetText
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	ldr r3, .L080CC5B0  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
.L080CC502:
	ldrb r0, [r5]
	cmp r0, #1
	bne .L080CC578
	ldr r4, [r4, #0x14]
	movs r0, #0
	bl SetupBackgrounds
	bl EndGreenText
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r4, #0x40]
	bl HideRIsInfo
	bl EndSmallBrownNameBoxes
	bl EndAllParallelWorkers
	movs r0, #0
	bl EndFaceById
	movs r0, #0
	bl func_080ACA84
	bl InitFaces
	bl ResetText
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	ldr r3, .L080CC5B0  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #2
	bl EnableBgSync
.L080CC578:
	ldrb r0, [r5]
	cmp r0, #2
	bne .L080CC5AA
	ldr r3, .L080CC5B0  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
.L080CC5AA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CC5B0: .4byte gDispIo

	THUMB_FUNC_END func_080CC4AC

	THUMB_FUNC_START func_080CC5B4
func_080CC5B4: @ 0x080CC5B4
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080CC5DE
	cmp r0, #1
	bgt .L080CC5CE
	cmp r0, #0
	beq .L080CC5D4
	b .L080CC622
.L080CC5CE:
	cmp r0, #2
	beq .L080CC5F6
	b .L080CC622
.L080CC5D4:
	adds r0, r2, #0
	movs r1, #2
	bl Proc_Goto
	b .L080CC622
.L080CC5DE:
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CC600
	cmp r0, #1
	bne .L080CC622
	adds r0, r2, #0
	movs r1, #4
	bl Proc_Goto
	b .L080CC622
.L080CC5F6:
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC616
.L080CC600:
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	adds r1, r2, #0
	adds r1, #0x3b
	strb r0, [r1]
	adds r0, r2, #0
	movs r1, #5
	bl Proc_Goto
	b .L080CC622
.L080CC616:
	cmp r0, #1
	bne .L080CC622
	adds r0, r2, #0
	movs r1, #4
	bl Proc_Goto
.L080CC622:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CC5B4

	THUMB_FUNC_START func_080CC628
func_080CC628: @ 0x080CC628
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC664
	adds r5, r1, #0
	adds r5, #0x34
	ldrb r0, [r5]
	cmp r0, #0
	bne .L080CC656
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x3b
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
.L080CC656:
	ldrb r0, [r5]
	cmp r0, #1
	bne .L080CC664
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
.L080CC664:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CC628

	THUMB_FUNC_START func_080CC66C
func_080CC66C: @ 0x080CC66C
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	blt .L080CC694
	cmp r0, #1
	ble .L080CC694
	cmp r0, #2
	bne .L080CC694
	bl UnlockBmDisplay
	bl RefreshUnitSprites
	bl ApplyUnitSpritePalettes
	bl ForceSyncUnitSpriteSheet
	bl InitSystemTextFont
.L080CC694:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CC66C

	THUMB_FUNC_START func_080CC698
func_080CC698: @ 0x080CC698
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC6BA
	bl RestoreBgm
	movs r0, #0x80
	lsls r0, r0, #1
	bl SetBgmVolume
	movs r0, #0x34
	bl OverrideBgm
.L080CC6BA:
	adds r1, r5, #0
	adds r1, #0x30
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	bl EndAllProcChildren
	adds r0, r4, #0
	bl Proc_End
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CC698

	THUMB_FUNC_START func_080CC6D4
func_080CC6D4: @ 0x080CC6D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	mov r0, sp
	ldr r1, .L080CC6FC  @ gUnknown_08207044
	ldm r1!, {r2, r3, r4}
	stm r0!, {r2, r3, r4}
	ldr r0, .L080CC700  @ gPlaySt
	ldrb r0, [r0, #0x1b]
	cmp r0, #2
	beq .L080CC6F6
	cmp r0, #3
	beq .L080CC704
.L080CC6F6:
	movs r5, #1
	mov r9, r5
	b .L080CC708
	.align 2, 0
.L080CC6FC: .4byte gUnknown_08207044
.L080CC700: .4byte gPlaySt
.L080CC704:
	movs r0, #0xf
	mov r9, r0
.L080CC708:
	adds r1, r7, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080CC7EE
	strb r0, [r1]
	adds r1, #3
	movs r0, #1
	strb r0, [r1]
	movs r6, #0
	movs r3, #0
	mov r8, r1
	ldr r1, .L080CC7C8  @ gUnknown_0895DFA5
	mov sl, r1
.L080CC724:
	lsls r4, r3, #2
	mov r2, sp
	adds r5, r2, r4
	ldrb r0, [r5]
	str r3, [sp, #0xc]
	bl GetUnitByPid
	adds r2, r0, #0
	ldr r3, [sp, #0xc]
	cmp r2, #0
	bne .L080CC73C
	movs r6, #1
.L080CC73C:
	ldr r0, [r2, #0xc]
	ldr r1, .L080CC7CC  @ 0x00010004
	ands r0, r1
	cmp r0, #0
	beq .L080CC748
	movs r6, #1
.L080CC748:
	movs r1, #8
	ldrsb r1, [r2, r1]
	ldrb r0, [r5, #1]
	cmp r1, r0
	bge .L080CC754
	movs r6, #1
.L080CC754:
	ldr r0, [r2, #4]
	ldrb r2, [r0, #4]
	ldrb r0, [r5, #2]
	cmp r2, r0
	beq .L080CC760
	movs r6, #1
.L080CC760:
	ldr r1, .L080CC7D0  @ gUnknown_0895DFA4
	lsls r2, r2, #1
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC778
	mov r5, sl
	adds r0, r2, r5
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC778
	movs r6, #1
.L080CC778:
	cmp r6, #0
	bne .L080CC7E0
	adds r1, r2, r1
	ldrb r3, [r1]
	cmp r3, #0
	beq .L080CC79E
	mov r5, sl
	adds r0, r2, r5
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC798
	adds r0, r7, #0
	adds r0, #0x35
	strb r3, [r0]
	mov r0, r8
	strb r6, [r0]
.L080CC798:
	ldrb r0, [r1]
	cmp r0, #0
	bne .L080CC7B4
.L080CC79E:
	mov r1, sl
	adds r0, r2, r1
	ldrb r1, [r0]
	cmp r1, #0
	beq .L080CC7B4
	adds r3, r7, #0
	adds r3, #0x35
	movs r0, #0
	strb r1, [r3]
	mov r2, r8
	strb r0, [r2]
.L080CC7B4:
	mov r3, sp
	adds r0, r3, r4
	ldrb r1, [r0]
	cmp r1, r9
	beq .L080CC7D4
	mov r4, r9
	lsls r2, r4, #0x18
	adds r0, r7, #0
	lsrs r2, r2, #0x18
	b .L080CC8E2
	.align 2, 0
.L080CC7C8: .4byte gUnknown_0895DFA5
.L080CC7CC: .4byte 0x00010004
.L080CC7D0: .4byte gUnknown_0895DFA4
.L080CC7D4:
	adds r0, r7, #0
	mov r1, r9
	movs r2, #2
	bl NewPromotionMain
	b .L080CC8E6
.L080CC7E0:
	movs r6, #0
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, #6
	bls .L080CC724
	b .L080CC8F0
.L080CC7EE:
	cmp r0, #1
	bne .L080CC864
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x34
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	bl GetUnitByPid
	adds r2, r0, #0
	ldr r0, [r2, #4]
	ldrb r2, [r0, #4]
	ldr r0, .L080CC824  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r6, r1, r0
	ldrb r3, [r6]
	mov r8, r5
	cmp r3, #0
	bne .L080CC828
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC842
	b .L080CC8F0
	.align 2, 0
.L080CC824: .4byte gUnknown_0895DFA4
.L080CC828:
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC83C
	adds r1, r7, #0
	adds r1, #0x35
	strb r3, [r1]
	mov r5, r8
	strb r0, [r5]
.L080CC83C:
	ldrb r0, [r6]
	cmp r0, #0
	bne .L080CC8DC
.L080CC842:
	ldr r0, .L080CC860  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r0, #1
	adds r1, r1, r0
	ldrb r1, [r1]
	cmp r1, #0
	beq .L080CC8DC
	adds r3, r7, #0
	adds r3, #0x35
	movs r0, #0
	strb r1, [r3]
	mov r1, r8
	strb r0, [r1]
	b .L080CC8DC
	.align 2, 0
.L080CC860: .4byte gUnknown_0895DFA4
.L080CC864:
	cmp r0, #2
	bne .L080CC8F0
	strb r0, [r1]
	adds r5, r7, #0
	adds r5, #0x34
	movs r0, #1
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	bl GetUnitByPid
	adds r2, r0, #0
	ldr r0, [r2, #4]
	ldrb r2, [r0, #4]
	ldr r0, .L080CC8A4  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r6, r1, r0
	ldrb r3, [r6]
	mov r8, r5
	cmp r3, #0
	bne .L080CC8A8
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC8C2
	bl UnlockBmDisplay
	bl InitBmDisplay
	b .L080CC8F0
	.align 2, 0
.L080CC8A4: .4byte gUnknown_0895DFA4
.L080CC8A8:
	adds r0, #1
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CC8BC
	adds r1, r7, #0
	adds r1, #0x35
	strb r3, [r1]
	mov r3, r8
	strb r0, [r3]
.L080CC8BC:
	ldrb r0, [r6]
	cmp r0, #0
	bne .L080CC8DC
.L080CC8C2:
	ldr r0, .L080CC8EC  @ gUnknown_0895DFA4
	lsls r1, r2, #1
	adds r0, #1
	adds r1, r1, r0
	ldrb r1, [r1]
	cmp r1, #0
	beq .L080CC8DC
	adds r3, r7, #0
	adds r3, #0x35
	movs r0, #0
	strb r1, [r3]
	mov r5, r8
	strb r0, [r5]
.L080CC8DC:
	ldrb r1, [r4]
	adds r0, r7, #0
	movs r2, #1
.L080CC8E2:
	bl NewPromotionMain
.L080CC8E6:
	movs r0, #1
	b .L080CC8F2
	.align 2, 0
.L080CC8EC: .4byte gUnknown_0895DFA4
.L080CC8F0:
	movs r0, #2
.L080CC8F2:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CC6D4

	THUMB_FUNC_START PromotionInit_SetNullState
PromotionInit_SetNullState: @ 0x080CC904
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	bx lr

	THUMB_FUNC_END PromotionInit_SetNullState

	THUMB_FUNC_START PromotionInit_Loop
PromotionInit_Loop: @ 0x080CC910
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x30
	ldrb r1, [r4]
	cmp r1, #1
	beq .L080CC938
	cmp r1, #1
	bgt .L080CC926
	cmp r1, #0
	beq .L080CC92C
	b .L080CC938
.L080CC926:
	cmp r1, #2
	beq .L080CC934
	b .L080CC938
.L080CC92C:
	bl func_080CC6D4
	strb r0, [r4]
	b .L080CC938
.L080CC934:
	bl Proc_Break
.L080CC938:
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END PromotionInit_Loop

	THUMB_FUNC_START StartTraineePromotion
StartTraineePromotion: @ 0x080CC940
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080CC984  @ gUnknown_08B126CC
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r0, #0x31
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	str r1, [r2, #0x38]
	movs r0, #1
	negs r0, r0
	str r0, [r2, #0x3c]
	ldr r2, .L080CC988  @ gBattleUnitA
	ldr r3, .L080CC98C  @ gBattleUnitB
	adds r0, r3, #0
	adds r0, #0x4a
	strh r1, [r0]
	adds r0, r2, #0
	adds r0, #0x4a
	strh r1, [r0]
	adds r0, r3, #0
	adds r0, #0x48
	strh r1, [r0]
	adds r2, #0x48
	strh r1, [r2]
	adds r1, r3, #0
	adds r1, #0x6f
	movs r0, #0xff
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
.L080CC984: .4byte gUnknown_08B126CC
.L080CC988: .4byte gBattleUnitA
.L080CC98C: .4byte gBattleUnitB

	THUMB_FUNC_END StartTraineePromotion

	THUMB_FUNC_START StartPrepScreenPromotion
StartPrepScreenPromotion: @ 0x080CC990
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r2, [r5, #0x30]
	movs r0, #1
	negs r0, r0
	cmp r2, r0
	beq .L080CC9B6
	ldr r3, .L080CCA08  @ gBattleUnitA
	ldr r1, .L080CCA0C  @ gBattleUnitB
	ldr r0, [r5, #0x2c]
	lsls r2, r2, #1
	adds r0, #0x1e
	adds r0, r0, r2
	ldrh r2, [r0]
	adds r1, #0x4a
	strh r2, [r1]
	ldrh r0, [r0]
	adds r3, #0x4a
	strh r0, [r3]
.L080CC9B6:
	ldr r0, [r5, #0x2c]
	bl GetUnitEquippedWeapon
	ldr r1, .L080CCA08  @ gBattleUnitA
	ldr r2, .L080CCA0C  @ gBattleUnitB
	adds r3, r2, #0
	adds r3, #0x48
	movs r4, #0
	strh r0, [r3]
	adds r1, #0x48
	strh r0, [r1]
	adds r2, #0x6f
	movs r0, #0xff
	strb r0, [r2]
	ldr r0, .L080CCA10  @ gUnknown_08B126CC
	adds r1, r5, #0
	bl SpawnProcLocking
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x31
	movs r0, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x32
	strb r4, [r0]
	ldr r1, [r3, #0x14]
	ldr r0, [r1, #0x2c]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	adds r2, r3, #0
	adds r2, #0x33
	strb r0, [r2]
	ldr r0, [r1, #0x2c]
	str r0, [r3, #0x38]
	ldr r0, [r1, #0x30]
	str r0, [r3, #0x3c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CCA08: .4byte gBattleUnitA
.L080CCA0C: .4byte gBattleUnitB
.L080CCA10: .4byte gUnknown_08B126CC

	THUMB_FUNC_END StartPrepScreenPromotion

	THUMB_FUNC_START StartMapPromotion
StartMapPromotion: @ 0x080CCA14
	push {r4, r5, lr}
	adds r1, r0, #0
	ldr r0, .L080CCA5C  @ gUnknown_08B126CC
	bl SpawnProcLocking
	adds r5, r0, #0
	adds r2, r5, #0
	adds r2, #0x31
	movs r1, #0
	movs r0, #2
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x32
	strb r1, [r0]
	ldr r4, .L080CCA60  @ gAction
	ldrb r0, [r4, #0xc]
	bl GetUnit
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	adds r1, r5, #0
	adds r1, #0x33
	strb r0, [r1]
	ldrb r0, [r4, #0xc]
	bl GetUnit
	str r0, [r5, #0x38]
	ldrb r0, [r4, #0x12]
	str r0, [r5, #0x3c]
	bl LockBmDisplay
	bl MU_EndAll
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CCA5C: .4byte gUnknown_08B126CC
.L080CCA60: .4byte gAction

	THUMB_FUNC_END StartMapPromotion

	THUMB_FUNC_START ChangePromotionClassDescText
ChangePromotionClassDescText: @ 0x080CCA64
	push {r4, lr}
	adds r4, r0, #0
	bl SetInitTalkTextFont
	bl Dialogue_ClearLines
	movs r0, #2
	movs r1, #0xf
	adds r2, r4, #0
	bl StartTalkMsg
	movs r0, #0
	bl Dialogue_SetDefaultTextColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #8
	bl SetTalkFlag
	movs r0, #0x40
	bl SetTalkFlag
	movs r0, #4
	bl Dialogue_SetCharacterDisplayDelay
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END ChangePromotionClassDescText

	THUMB_FUNC_START PromotionDisplay_InitClassName
PromotionDisplay_InitClassName: @ 0x080CCAAC
	push {r4, r5, lr}
	sub sp, #0x20
	adds r4, r0, #0
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	adds r2, r4, #0
	adds r2, #0x44
	movs r3, #0
	movs r1, #0
	strh r1, [r2]
	adds r5, r4, #0
	adds r5, #0x46
	strb r3, [r5]
	adds r2, #3
	movs r1, #0x78
	strb r1, [r2]
	bl GetJInfo
	ldrh r0, [r0]
	mov r1, sp
	bl GetMsgTo
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080CCB16
	mov r4, sp
.L080CCAE6:
	ldrb r0, [r4]
	bl func_080B4108
	adds r1, r0, #0
	cmp r1, #0
	beq .L080CCAFE
	ldrb r0, [r1, #5]
	ldrb r1, [r1, #4]
	subs r0, r0, r1
	ldrb r1, [r5]
	adds r0, r0, r1
	b .L080CCB02
.L080CCAFE:
	ldrb r0, [r5]
	adds r0, #4
.L080CCB02:
	strb r0, [r5]
	adds r4, #1
	mov r0, sp
	adds r0, #0x13
	cmp r4, r0
	bgt .L080CCB16
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne .L080CCAE6
.L080CCB16:
	ldr r0, .L080CCB34  @ gUnknown_08A36338
	ldr r1, .L080CCB38  @ 0x06011000
	bl Decompress
	ldr r0, .L080CCB3C  @ gUnknown_08A372C0
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	add sp, #0x20
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CCB34: .4byte gUnknown_08A36338
.L080CCB38: .4byte 0x06011000
.L080CCB3C: .4byte gUnknown_08A372C0

	THUMB_FUNC_END PromotionDisplay_InitClassName

	THUMB_FUNC_START PromotionDisplay_DrawClassName
PromotionDisplay_DrawClassName: @ 0x080CCB40
	push {r4, r5, r6, r7, lr}
	sub sp, #0x24
	adds r7, r0, #0
	adds r0, #0x41
	ldrb r1, [r0]
	lsls r1, r1, #1
	subs r0, #0x15
	adds r0, r0, r1
	ldrh r0, [r0]
	movs r6, #0x74
	bl GetJInfo
	ldrh r0, [r0]
	add r1, sp, #4
	bl GetMsgTo
	add r0, sp, #4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080CCBBC
	add r5, sp, #4
.L080CCB6E:
	ldrb r0, [r5]
	bl func_080B4108
	adds r4, r0, #0
	cmp r4, #0
	beq .L080CCBA8
	ldr r3, [r4]
	cmp r3, #0
	beq .L080CCBAA
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r1, r6, r1
	subs r1, #2
	movs r2, #6
	ldrsb r2, [r4, r2]
	adds r2, #6
	movs r0, #0x81
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	movs r0, #5
	ldrsb r0, [r4, r0]
	movs r1, #4
	ldrsb r1, [r4, r1]
	subs r0, r0, r1
	adds r6, r6, r0
	b .L080CCBAA
.L080CCBA8:
	adds r6, #4
.L080CCBAA:
	adds r5, #1
	mov r0, sp
	adds r0, #0x17
	cmp r5, r0
	bgt .L080CCBBC
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne .L080CCB6E
.L080CCBBC:
	adds r1, r7, #0
	adds r1, #0x44
	ldrh r0, [r1]
	cmp r0, #0xfe
	bhi .L080CCBCA
	adds r0, #1
	strh r0, [r1]
.L080CCBCA:
	add sp, #0x24
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END PromotionDisplay_DrawClassName

	THUMB_FUNC_START func_080CCBD4
func_080CCBD4: @ 0x080CCBD4
	push {lr}
	bl EndEkrAnimeDrvProc
	ldr r0, .L080CCBEC  @ gUnknown_030053A0
	bl func_0805AA28
	ldr r0, .L080CCBF0  @ gUnknown_0201FADC
	bl func_0805AE14
	pop {r0}
	bx r0
	.align 2, 0
.L080CCBEC: .4byte gUnknown_030053A0
.L080CCBF0: .4byte gUnknown_0201FADC

	THUMB_FUNC_END func_080CCBD4

	THUMB_FUNC_START func_080CCBF4
func_080CCBF4: @ 0x080CCBF4
	push {r4, lr}
	ldr r4, .L080CCC1C  @ gUnknown_08A30800
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, .L080CCC20  @ 0x06003000
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, .L080CCC24  @ gBg2Tm
	ldr r1, .L080CCC28  @ gUnknown_08A30978
	movs r2, #0x8c
	lsls r2, r2, #5
	bl func_080CCCE0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CCC1C: .4byte gUnknown_08A30800
.L080CCC20: .4byte 0x06003000
.L080CCC24: .4byte gBg2Tm
.L080CCC28: .4byte gUnknown_08A30978

	THUMB_FUNC_END func_080CCBF4

	THUMB_FUNC_START func_080CCC2C
func_080CCC2C: @ 0x080CCC2C
	push {r4, r5, r6, lr}
	sub sp, #0x24
	adds r6, r0, #0
	ldr r0, .L080CCC9C  @ gBg2Tm
	movs r1, #6
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r1, #1
	str r1, [sp, #8]
	movs r1, #2
	movs r2, #1
	movs r3, #0xa
	bl DrawUiFrame
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #0
	bl SetTextFont
	ldrh r0, [r6, #0x2c]
	bl GetJInfo
	ldrh r0, [r0]
	bl GetMsg
	ldr r4, .L080CCCA0  @ gBg0Tm+0x86
	movs r5, #8
	str r5, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldrh r0, [r6, #0x2e]
	bl GetJInfo
	ldrh r0, [r0]
	bl GetMsg
	adds r4, #0x80
	str r5, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #0x24
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080CCC9C: .4byte gBg2Tm
.L080CCCA0: .4byte gBg0Tm+0x86

	THUMB_FUNC_END func_080CCC2C

	THUMB_FUNC_START IsThirdTraineePromotionAllowed
IsThirdTraineePromotionAllowed: @ 0x080CCCA4
	push {lr}
	sub sp, #0x64
	mov r0, sp
	bl LoadGeneralGameMetadata
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080CCCBE
	bl InitSaveGeneralGameMetadata
	mov r0, sp
	bl LoadGeneralGameMetadata
.L080CCCBE:
	mov r0, sp
	ldrb r1, [r0, #0xe]
	movs r0, #0x1c
	ands r0, r1
	cmp r0, #0
	beq .L080CCCD6
	movs r0, #0xe0
	ands r0, r1
	cmp r0, #0
	beq .L080CCCD6
	movs r0, #1
	b .L080CCCD8
.L080CCCD6:
	movs r0, #0
.L080CCCD8:
	add sp, #0x64
	pop {r1}
	bx r1

	THUMB_FUNC_END IsThirdTraineePromotionAllowed

	THUMB_FUNC_START func_080CCCE0
func_080CCCE0: @ 0x080CCCE0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	adds r4, r1, #2
	movs r2, #0xff
	ldr r0, [r1]
	ldrb r6, [r1]
	lsrs r3, r0, #8
	ands r3, r2
	lsls r1, r3, #0x10
	cmp r3, #0xc
	ble .L080CCD28
.L080CCCFA:
	asrs r0, r1, #0xa
	adds r2, r7, r0
	lsls r1, r6, #0x10
	asrs r0, r1, #0x10
	lsls r3, r3, #0x10
	cmp r0, #0
	blt .L080CCD1A
.L080CCD08:
	ldrh r0, [r4]
	adds r0, r5, r0
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	ldr r0, .L080CCD30  @ 0xFFFF0000
	adds r1, r1, r0
	cmp r1, #0
	bge .L080CCD08
.L080CCD1A:
	ldr r1, .L080CCD30  @ 0xFFFF0000
	adds r0, r3, r1
	lsrs r3, r0, #0x10
	lsls r1, r3, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0xc
	bgt .L080CCCFA
.L080CCD28:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CCD30: .4byte 0xFFFF0000

	THUMB_FUNC_END func_080CCCE0

	THUMB_FUNC_START Make6C_PromotionSub
Make6C_PromotionSub: @ 0x080CCD34
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080CCD44  @ gUnknown_08B1271C
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
.L080CCD44: .4byte gUnknown_08B1271C

	THUMB_FUNC_END Make6C_PromotionSub

	THUMB_FUNC_START PromotionDisplay_Init
PromotionDisplay_Init: @ 0x080CCD48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	str r0, [sp, #4]
	adds r1, r0, #0
	adds r1, #0x29
	movs r4, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, [sp, #4]
	adds r0, #0x38
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x42
	strh r0, [r1]
	movs r0, #9
	str r0, [r5, #0x50]
	ldr r0, .L080CCE80  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080CCE84  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080CCE88  @ gBg2Tm
	movs r1, #0
	bl TmFill
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	movs r1, #1
	negs r1, r1
	movs r2, #0xfb
	lsls r2, r2, #1
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	movs r3, #0x58
	bl func_080CD47C
	bl func_080CCBF4
	ldr r0, [r5, #0x50]
	movs r1, #0x8c
	lsls r1, r1, #1
	movs r2, #0x68
	bl func_080CD408
	strh r4, [r5, #0x32]
	strh r4, [r5, #0x34]
	strh r4, [r5, #0x36]
	movs r4, #1
.L080CCDC0:
	adds r0, r4, #0
	bl GetUnit
	mov sl, r0
	cmp r0, #0
	bne .L080CCDCE
	b .L080CCEEE
.L080CCDCE:
	ldr r0, [r0]
	cmp r0, #0
	bne .L080CCDD6
	b .L080CCEEE
.L080CCDD6:
	adds r1, r5, #0
	adds r1, #0x42
	ldrb r0, [r0, #4]
	ldrh r1, [r1]
	cmp r0, r1
	beq .L080CCDE4
	b .L080CCEEE
.L080CCDE4:
	mov r1, sl
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp, #8]
	mov r0, sl
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r9, r0
	movs r2, #0
	mov r8, r2
	adds r0, r5, #0
	adds r0, #0x4a
	str r0, [sp, #0x18]
	adds r1, r5, #0
	adds r1, #0x48
	str r1, [sp, #0x14]
	adds r2, r5, #0
	adds r2, #0x40
	str r2, [sp, #0xc]
	subs r0, #9
	str r0, [sp, #0x10]
	adds r3, r5, #0
	adds r3, #0x38
	adds r7, r5, #0
	adds r7, #0x32
	adds r6, r5, #0
	adds r6, #0x2c
.L080CCE1E:
	ldr r1, [sp, #8]
	lsls r4, r1, #1
	add r4, r8
	ldr r2, .L080CCE8C  @ gUnknown_0895DFA4
	adds r4, r4, r2
	ldrb r0, [r4]
	strh r0, [r6]
	ldrb r1, [r4]
	adds r0, r7, #0
	mov r2, r9
	str r3, [sp, #0x1c]
	bl GetClassAnimationIdForWeapon
	ldr r1, [sp, #0x18]
	add r1, r8
	strb r0, [r1]
	ldrb r0, [r4]
	bl GetJInfo
	ldrh r0, [r0, #2]
	ldr r3, [sp, #0x1c]
	strh r0, [r3]
	adds r3, #2
	adds r7, #2
	adds r6, #2
	movs r0, #1
	add r8, r0
	mov r1, r8
	cmp r1, #1
	ble .L080CCE1E
	mov r0, r9
	ldr r2, [sp, #0x14]
	strh r0, [r2]
	bl IsThirdTraineePromotionAllowed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CCF02
	mov r1, sl
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	str r0, [sp, #8]
	cmp r0, #0x3e
	beq .L080CCEB2
	cmp r0, #0x3e
	bgt .L080CCE90
	cmp r0, #0x3d
	beq .L080CCE98
	b .L080CCF02
	.align 2, 0
.L080CCE80: .4byte gBg0Tm
.L080CCE84: .4byte gBg1Tm
.L080CCE88: .4byte gBg2Tm
.L080CCE8C: .4byte gUnknown_0895DFA4
.L080CCE90:
	ldr r2, [sp, #8]
	cmp r2, #0x47
	beq .L080CCECC
	b .L080CCF02
.L080CCE98:
	movs r0, #0x7e
	strh r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x36
	movs r1, #0x7e
	mov r2, r9
	bl GetClassAnimationIdForWeapon
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	movs r0, #0x7e
	b .L080CCEE4
.L080CCEB2:
	movs r0, #0x7f
	strh r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x36
	movs r1, #0x7f
	mov r2, r9
	bl GetClassAnimationIdForWeapon
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	movs r0, #0x7f
	b .L080CCEE4
.L080CCECC:
	movs r0, #0x37
	strh r0, [r5, #0x30]
	adds r0, r5, #0
	adds r0, #0x36
	movs r1, #0x37
	mov r2, r9
	bl GetClassAnimationIdForWeapon
	adds r1, r5, #0
	adds r1, #0x4c
	strb r0, [r1]
	movs r0, #0x37
.L080CCEE4:
	bl GetJInfo
	ldrh r0, [r0, #2]
	strh r0, [r5, #0x3c]
	b .L080CCF02
.L080CCEEE:
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x40
	str r0, [sp, #0xc]
	adds r1, r5, #0
	adds r1, #0x41
	str r1, [sp, #0x10]
	cmp r4, #0x3f
	bgt .L080CCF02
	b .L080CCDC0
.L080CCF02:
	ldrh r0, [r5, #0x32]
	cmp r0, #0
	bne .L080CCF12
	ldrh r0, [r5, #0x34]
	cmp r0, #0
	bne .L080CCF12
	strh r0, [r5, #0x34]
	strh r0, [r5, #0x32]
.L080CCF12:
	movs r1, #0
	movs r0, #1
	ldr r2, [sp, #0xc]
	strb r0, [r2]
	ldr r0, [sp, #0x10]
	strb r1, [r0]
	adds r0, r5, #0
	ldr r1, [sp, #8]
	bl PromotionDisplay_InitClassName
	adds r0, r5, #0
	bl PromotionDisplay_DrawClassName
	bl LoadObjUiGfx
	adds r0, r5, #0
	bl StartPromotionMenuSelect
	str r0, [r5, #0x54]
	ldr r1, [sp, #4]
	ldr r0, [r1, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #1
	bne .L080CCF4E
	bl RestartScreenMenuScrollingBg
	movs r0, #0xf
	bl EnableBgSync
.L080CCF4E:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END PromotionDisplay_Init

	THUMB_FUNC_START PromotionDisplay_InitClassDesc
PromotionDisplay_InitClassDesc: @ 0x080CCF60
	push {r4, lr}
	adds r4, r0, #0
	bl ResetTextFont
	bl ResetText
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #2
	movs r2, #0
	bl InitTalk
	adds r0, r4, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r4, #0x38
	adds r4, r4, r0
	movs r1, #0
	ldrsh r0, [r4, r1]
	bl ChangePromotionClassDescText
	movs r0, #1
	negs r0, r0
	bl Dialogue_SetCharacterDisplayDelay
	ldr r3, .L080CD004  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #1
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0xf
	bl EnableBgSync
	ldr r3, .L080CD008  @ 0x04000008
	ldrh r2, [r3]
	ldr r1, .L080CD00C  @ 0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	adds r3, #2
	ldrh r2, [r3]
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	adds r3, #2
	ldrh r2, [r3]
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	ldr r2, .L080CD010  @ 0x0400000E
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #1
	strh r1, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD004: .4byte gDispIo
.L080CD008: .4byte 0x04000008
.L080CD00C: .4byte 0x0000FFFC
.L080CD010: .4byte 0x0400000E

	THUMB_FUNC_END PromotionDisplay_InitClassDesc

	THUMB_FUNC_START PromotionDisplay_MainLoop
PromotionDisplay_MainLoop: @ 0x080CD014
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x5c
	mov r9, r0
	ldr r0, .L080CD06C  @ gUnknown_030053A0
	ldr r1, [r0, #0x14]
	str r1, [sp, #0x50]
	ldr r2, [r0, #0x18]
	str r2, [sp, #0x54]
	ldr r1, .L080CD070  @ gUnknown_0201FADC
	ldr r7, [r1, #0x14]
	ldr r1, [r1, #0x18]
	mov sl, r1
	mov r3, r9
	adds r3, #0x40
	ldrb r1, [r3]
	adds r4, r0, #0
	cmp r1, #1
	beq .L080CD042
	b .L080CD164
.L080CD042:
	ldrh r2, [r7, #0x32]
	movs r0, #0x32
	ldrsh r1, [r7, r0]
	ldr r0, .L080CD074  @ 0x00000117
	cmp r1, r0
	bgt .L080CD08C
	adds r0, r2, #0
	adds r0, #0xc
	strh r0, [r7, #0x32]
	mov r1, sl
	ldrh r0, [r1, #0x32]
	adds r0, #0xc
	strh r0, [r1, #0x32]
	ldr r2, [sp, #0x50]
	ldrh r0, [r2, #2]
	adds r0, #0xc
	strh r0, [r2, #2]
	ldr r3, [sp, #0x54]
	strh r0, [r3, #2]
	b .L080CD090
	.align 2, 0
.L080CD06C: .4byte gUnknown_030053A0
.L080CD070: .4byte gUnknown_0201FADC
.L080CD074: .4byte 0x00000117
.L080CD078:
	ldr r0, .L080CD088  @ gUnknown_0895EEA4
	adds r0, r2, r0
	ldrb r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x58]
	b .L080CD130
	.align 2, 0
.L080CD088: .4byte gUnknown_0895EEA4
.L080CD08C:
	movs r0, #2
	strb r0, [r3]
.L080CD090:
	mov r0, r9
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, #2
	beq .L080CD09C
	b .L080CD1AC
.L080CD09C:
	bl EndEkrAnimeDrvProc
	ldr r0, .L080CD198  @ gUnknown_030053A0
	bl func_0805AA28
	mov r1, r9
	adds r1, #0x42
	ldrh r4, [r1]
	subs r4, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0x41
	add r0, r9
	mov r8, r0
	ldrb r0, [r0]
	lsls r0, r0, #1
	mov r5, r9
	adds r5, #0x2c
	adds r0, r5, r0
	ldrh r6, [r0]
	ldr r2, .L080CD19C  @ 0x0000FFFF
	str r2, [sp, #0x58]
	ldrh r0, [r1]
	bl GetUnitByPid
	adds r1, r0, #0
	add r0, sp, #4
	movs r2, #0x48
	bl memcpy
	mov r3, r8
	ldrb r0, [r3]
	lsls r0, r0, #1
	adds r5, r5, r0
	ldrh r0, [r5]
	bl GetJInfo
	str r0, [sp, #8]
	ldr r5, [r0, #0x34]
	add r0, sp, #4
	bl GetUnitEquippedWeapon
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	add r3, sp, #0x4c
	add r0, sp, #4
	adds r1, r5, #0
	bl GetBattleAnimationId
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldr r5, .L080CD1A0  @ gUnknown_0895E0A4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r0, r4, #3
	subs r3, r0, r4
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
.L080CD116:
	lsls r0, r1, #0x10
	asrs r1, r0, #0x10
	adds r2, r1, r3
	adds r0, r2, r5
	ldrb r0, [r0]
	cmp r0, r6
	beq .L080CD078
	adds r0, r1, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	ble .L080CD116
.L080CD130:
	mov r1, r8
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	ldr r2, [sp, #0x58]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	ldrh r2, [r7, #0x32]
	adds r2, #0x28
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r3, #6
	str r3, [sp]
	movs r3, #0x58
	bl func_080CD47C
	ldr r0, .L080CD1A4  @ gUnknown_0201FADC
	bl func_0805AE14
	mov r3, r9
	ldr r0, [r3, #0x50]
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	movs r3, #0x3a
	ldrsh r2, [r7, r3]
	bl func_080CD408
.L080CD164:
	mov r1, r9
	adds r1, #0x40
	ldrb r0, [r1]
	ldr r4, .L080CD198  @ gUnknown_030053A0
	cmp r0, #2
	bne .L080CD1AC
	ldrh r2, [r7, #0x32]
	movs r3, #0x32
	ldrsh r0, [r7, r3]
	cmp r0, #0x82
	ble .L080CD1A8
	movs r1, #0xc
	subs r0, r2, r1
	strh r0, [r7, #0x32]
	mov r2, sl
	ldrh r0, [r2, #0x32]
	subs r0, r0, r1
	strh r0, [r2, #0x32]
	ldr r3, [sp, #0x50]
	ldrh r0, [r3, #2]
	subs r0, r0, r1
	strh r0, [r3, #2]
	ldr r1, [sp, #0x54]
	strh r0, [r1, #2]
	b .L080CD1AC
	.align 2, 0
.L080CD198: .4byte gUnknown_030053A0
.L080CD19C: .4byte 0x0000FFFF
.L080CD1A0: .4byte gUnknown_0895E0A4
.L080CD1A4: .4byte gUnknown_0201FADC
.L080CD1A8:
	movs r0, #0
	strb r0, [r1]
.L080CD1AC:
	adds r0, r4, #0
	bl func_0805A96C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CD1BE
	adds r0, r4, #0
	bl func_0805A990
.L080CD1BE:
	mov r0, r9
	bl PromotionDisplay_DrawClassName
	add sp, #0x5c
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END PromotionDisplay_MainLoop

	THUMB_FUNC_START func_080CD1D4
func_080CD1D4: @ 0x080CD1D4
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	ldr r5, [r4, #0x14]
	adds r1, r5, #0
	adds r1, #0x31
	ldrb r1, [r1]
	cmp r1, #0
	beq .L080CD208
	cmp r1, #1
	bne .L080CD208
	bl Proc_End
	adds r0, r4, #0
	bl Proc_End
	adds r0, r5, #0
	bl Proc_End
	ldr r0, .L080CD210  @ gUnknown_030053A0
	bl func_0805AA28
	ldr r0, .L080CD214  @ gUnknown_0201FADC
	bl func_0805AE14
	bl EndEkrAnimeDrvProc
.L080CD208:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD210: .4byte gUnknown_030053A0
.L080CD214: .4byte gUnknown_0201FADC

	THUMB_FUNC_END func_080CD1D4

	THUMB_FUNC_START func_080CD218
func_080CD218: @ 0x080CD218
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	ldr r5, [r1, #0x14]
	ldr r4, [r5, #0x14]
	ldr r6, [r4, #0x14]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #2
	bne .L080CD27C
	adds r0, r1, #0
	bl Proc_End
	adds r0, r5, #0
	bl Proc_End
	adds r0, r4, #0
	bl Proc_End
	ldr r0, .L080CD284  @ gUnknown_030053A0
	bl func_0805AA28
	ldr r0, .L080CD288  @ gUnknown_0201FADC
	bl func_0805AE14
	bl EndEkrAnimeDrvProc
	ldr r1, .L080CD28C  @ gAction
	movs r0, #0
	strb r0, [r1, #0x11]
	adds r0, r6, #0
	movs r1, #2
	bl Proc_Goto
	bl UnlockBmDisplay
	bl InitBmDisplay
	bl RefreshEntityMaps
	bl RenderMap
	bl RefreshUnitSprites
	bl MU_EndAll
	ldr r0, .L080CD290  @ gActiveUnit
	ldr r0, [r0]
	bl MU_Create
.L080CD27C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD284: .4byte gUnknown_030053A0
.L080CD288: .4byte gUnknown_0201FADC
.L080CD28C: .4byte gAction
.L080CD290: .4byte gActiveUnit

	THUMB_FUNC_END func_080CD218

	THUMB_FUNC_START func_080CD294
func_080CD294: @ 0x080CD294
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CD2AE
	adds r0, r1, #0
	movs r1, #4
	bl Proc_Goto
	b .L080CD2C6
.L080CD2AE:
	cmp r0, #1
	bne .L080CD2BA
	adds r0, r1, #0
	bl Proc_Break
	b .L080CD2C6
.L080CD2BA:
	cmp r0, #2
	bne .L080CD2C6
	adds r0, r1, #0
	movs r1, #4
	bl Proc_Goto
.L080CD2C6:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CD294

	THUMB_FUNC_START func_080CD2CC
func_080CD2CC: @ 0x080CD2CC
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x14]
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CD2E0
	cmp r0, #1
	bne .L080CD2EA
.L080CD2E0:
	adds r0, r1, #0
	movs r1, #5
	bl Proc_Goto
	b .L080CD2F4
.L080CD2EA:
	cmp r0, #2
	bne .L080CD2F4
	adds r0, r1, #0
	bl Proc_Break
.L080CD2F4:
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CD2CC

	THUMB_FUNC_START func_080CD2F8
func_080CD2F8: @ 0x080CD2F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080CD324
	cmp r0, #1
	bgt .L080CD310
	cmp r0, #0
	beq .L080CD314
	b .L080CD328
.L080CD310:
	cmp r0, #0xff
	bne .L080CD328
.L080CD314:
	adds r0, r5, #0
	bl Make6C_PromotionSub
	str r0, [r5, #0x34]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
.L080CD324:
	movs r0, #0
	b .L080CD32A
.L080CD328:
	movs r0, #1
.L080CD32A:
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CD2F8

	THUMB_FUNC_START func_080CD330
func_080CD330: @ 0x080CD330
	push {lr}
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	blt .L080CD346
	cmp r0, #1
	ble .L080CD346
	cmp r0, #2
	bne .L080CD346
	movs r0, #0
	b .L080CD348
.L080CD346:
	movs r0, #1
.L080CD348:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CD330

	THUMB_FUNC_START func_080CD34C
func_080CD34C: @ 0x080CD34C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	movs r0, #1
	movs r1, #0x10
	movs r2, #0x10
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetB
	ldr r0, .L080CD404  @ gDispIo
	mov ip, r0
	ldrb r0, [r0, #1]
	movs r6, #0x20
	orrs r0, r6
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r2, #0x34
	add r2, ip
	mov r8, r2
	ldrb r1, [r2]
	movs r2, #1
	orrs r1, r2
	movs r0, #2
	orrs r1, r0
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	mov r7, ip
	adds r7, #0x36
	ldrb r0, [r7]
	orrs r0, r2
	movs r2, #3
	negs r2, r2
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r1, r6
	mov r2, r8
	strb r1, [r2]
	movs r1, #0x21
	negs r1, r1
	ands r0, r1
	strb r0, [r7]
	mov r1, ip
	adds r1, #0x3d
	ldrb r0, [r1]
	orrs r0, r6
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD404: .4byte gDispIo

	THUMB_FUNC_END func_080CD34C

	THUMB_FUNC_START func_080CD408
func_080CD408: @ 0x080CD408
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r1, #0
	adds r6, r2, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	ldr r4, .L080CD46C  @ gUnknown_0201FADC
	movs r2, #0
	strh r0, [r4]
	movs r1, #0xe
	strh r1, [r4, #2]
	movs r1, #0xe0
	lsls r1, r1, #2
	strh r1, [r4, #4]
	strh r0, [r4, #6]
	movs r0, #0xf
	strh r0, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r2, [r4, #0xc]
	ldr r0, .L080CD470  @ 0x0000FFFF
	strh r0, [r4, #0xe]
	ldr r0, .L080CD474  @ 0x06010000
	str r0, [r4, #0x1c]
	ldr r0, .L080CD478  @ gUnknown_020145C8
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl func_0805AA68
	lsls r5, r5, #0x10
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	asrs r1, r5, #0x10
	movs r0, #0xc0
	lsls r0, r0, #0xf
	adds r5, r5, r0
	asrs r5, r5, #0x10
	str r6, [sp]
	adds r0, r4, #0
	adds r2, r6, #0
	adds r3, r5, #0
	bl func_0805AE40
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD46C: .4byte gUnknown_0201FADC
.L080CD470: .4byte 0x0000FFFF
.L080CD474: .4byte 0x06010000
.L080CD478: .4byte gUnknown_020145C8

	THUMB_FUNC_END func_080CD408

	THUMB_FUNC_START func_080CD47C
func_080CD47C: @ 0x080CD47C
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	mov r9, r1
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r6, r3, #0x10
	ldr r2, .L080CD53C  @ gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #4]
	movs r0, #0xc
	ands r0, r1
	cmp r0, #0
	beq .L080CD4A4
	ldr r1, .L080CD540  @ gUnknown_03005408
	movs r0, #0
	strh r0, [r1]
.L080CD4A4:
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq .L080CD4BC
	ldr r1, .L080CD540  @ gUnknown_03005408
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
.L080CD4BC:
	bl StartEkrAnimeDrvProc
	ldr r4, .L080CD544  @ gUnknown_030053A0
	movs r2, #0
	movs r1, #0
	strh r7, [r4, #2]
	strh r6, [r4, #4]
	movs r3, #1
	strh r3, [r4, #0xc]
	mov r0, r8
	strh r0, [r4, #6]
	mov r0, r9
	strh r0, [r4, #8]
	ldr r0, [sp, #0x1c]
	strh r0, [r4, #0xa]
	strb r2, [r4, #1]
	strh r5, [r4, #0xe]
	movs r0, #0xa
	strh r0, [r4, #0x10]
	ldr r0, .L080CD548  @ gUnknown_02000088
	str r0, [r4, #0x1c]
	ldr r0, .L080CD54C  @ gUnknown_020041C8
	str r0, [r4, #0x24]
	ldr r0, .L080CD550  @ gUnknown_02004088
	str r0, [r4, #0x20]
	ldr r0, .L080CD554  @ gUnknown_0200F1C8
	str r0, [r4, #0x28]
	ldr r0, .L080CD558  @ gUnknown_030053E0
	str r0, [r4, #0x30]
	movs r2, #4
	strh r2, [r0]
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	strh r1, [r0, #6]
	strh r1, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #2
	strh r1, [r0, #0xe]
	movs r1, #8
	strh r1, [r0, #0x10]
	strh r5, [r0, #0xa]
	strh r2, [r0, #0xc]
	strh r3, [r0, #0x12]
	ldr r1, .L080CD55C  @ gBg1Tm
	str r1, [r0, #0x14]
	ldr r1, .L080CD560  @ gUnknown_02017790
	str r1, [r0, #0x18]
	ldr r1, .L080CD564  @ gUnknown_02019790
	str r1, [r0, #0x1c]
	ldr r1, .L080CD568  @ gUnknown_0201A790
	str r1, [r0, #0x20]
	ldr r1, .L080CD56C  @ func_080CD34C
	str r1, [r0, #0x24]
	bl func_0806E8F0
	adds r0, r4, #0
	bl StartEkrUnitMainMini
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD53C: .4byte gKeySt
.L080CD540: .4byte gUnknown_03005408
.L080CD544: .4byte gUnknown_030053A0
.L080CD548: .4byte gUnknown_02000088
.L080CD54C: .4byte gUnknown_020041C8
.L080CD550: .4byte gUnknown_02004088
.L080CD554: .4byte gUnknown_0200F1C8
.L080CD558: .4byte gUnknown_030053E0
.L080CD55C: .4byte gBg1Tm
.L080CD560: .4byte gUnknown_02017790
.L080CD564: .4byte gUnknown_02019790
.L080CD568: .4byte gUnknown_0201A790
.L080CD56C: .4byte func_080CD34C

	THUMB_FUNC_END func_080CD47C

	THUMB_FUNC_START GetClassAnimationIdForWeapon
GetClassAnimationIdForWeapon: @ 0x080CD570
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r6, r2, #0x10
	adds r0, r7, #0
	bl GetJInfo
	ldr r5, [r0, #0x34]
	adds r0, r6, #0
	bl GetItemKind
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0
	strh r0, [r4]
	movs r2, #0
	b .L080CD5A2
.L080CD59C:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
.L080CD5A2:
	lsls r0, r2, #2
	adds r1, r0, r5
	ldrh r0, [r1]
	cmp r0, r3
	bne .L080CD5B2
	ldrh r0, [r1, #2]
	subs r0, #1
	strh r0, [r4]
.L080CD5B2:
	ldrh r0, [r1, #2]
	cmp r0, #0
	bne .L080CD59C
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne .L080CD5E8
	ldr r3, .L080CD5C8  @ 0x00000109
	movs r2, #0
	b .L080CD5D2
	.align 2, 0
.L080CD5C8: .4byte 0x00000109
.L080CD5CC:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
.L080CD5D2:
	lsls r0, r2, #2
	adds r1, r0, r5
	ldrh r0, [r1]
	cmp r0, r3
	bne .L080CD5E2
	ldrh r0, [r1, #2]
	subs r0, #1
	strh r0, [r4]
.L080CD5E2:
	ldrh r0, [r1, #2]
	cmp r0, #0
	bne .L080CD5CC
.L080CD5E8:
	cmp r6, #0
	beq .L080CD60C
	adds r0, r6, #0
	bl GetItemRequiredExp
	adds r4, r0, #0
	adds r0, r7, #0
	bl GetJInfo
	adds r5, r0, #0
	adds r0, r6, #0
	bl GetItemKind
	adds r5, #0x2c
	adds r5, r5, r0
	ldrb r5, [r5]
	cmp r4, r5
	bge .L080CD610
.L080CD60C:
	movs r0, #0
	b .L080CD612
.L080CD610:
	movs r0, #1
.L080CD612:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	THUMB_FUNC_END GetClassAnimationIdForWeapon

	THUMB_FUNC_START StartCCRamifyEnd
StartCCRamifyEnd: @ 0x080CD618
	push {lr}
	ldr r0, .L080CD628  @ gUnknown_08B127EC
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
.L080CD628: .4byte gUnknown_08B127EC

	THUMB_FUNC_END StartCCRamifyEnd

	THUMB_FUNC_START func_080CD62C
func_080CD62C: @ 0x080CD62C
	push {lr}
	bl UnlockBmDisplay
	bl InitBmDisplay
	bl RefreshEntityMaps
	bl MU_EndAll
	ldr r0, .L080CD654  @ gActiveUnit
	ldr r0, [r0]
	bl MU_Create
	bl RenderMap
	bl RefreshUnitSprites
	pop {r0}
	bx r0
	.align 2, 0
.L080CD654: .4byte gActiveUnit

	THUMB_FUNC_END func_080CD62C

	THUMB_FUNC_START func_080CD658
func_080CD658: @ 0x080CD658
	push {r4, lr}
	adds r4, r0, #0
	bl func_080CD668
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CD658

	THUMB_FUNC_START func_080CD668
func_080CD668: @ 0x080CD668
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080CD678  @ gUnknown_08B1280C
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
.L080CD678: .4byte gUnknown_08B1280C

	THUMB_FUNC_END func_080CD668

	THUMB_FUNC_START func_080CD67C
func_080CD67C: @ 0x080CD67C
	push {r4, r5, r6, lr}
	ldr r5, .L080CD6A4  @ gFaces
	ldr r4, [r5]
	ldrh r6, [r4, #0x34]
	movs r0, #0x34
	ldrsh r1, [r4, r0]
	movs r0, #0xa8
	lsls r0, r0, #1
	cmp r1, r0
	bgt .L080CD6A8
	ldr r3, [r5, #4]
	ldr r2, [r5, #8]
	ldr r1, [r5, #0xc]
	adds r0, r6, #4
	strh r0, [r4, #0x34]
	strh r0, [r1, #0x34]
	strh r0, [r2, #0x34]
	strh r0, [r3, #0x34]
	movs r0, #1
	b .L080CD6AA
	.align 2, 0
.L080CD6A4: .4byte gFaces
.L080CD6A8:
	movs r0, #0
.L080CD6AA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CD67C

	THUMB_FUNC_START func_080CD6B0
func_080CD6B0: @ 0x080CD6B0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	adds r0, #0x38
	ldrb r0, [r0]
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2a]
	bl GetUnitByPid
	cmp r0, #0
	beq .L080CD6D4
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	b .L080CD6DC
.L080CD6D4:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
.L080CD6DC:
	bl InitFaces
	bl ResetText
	bl LoadUiFrameGraphics
	bl LoadObjUiGfx
	ldr r4, .L080CD788  @ gDispIo
	ldrb r2, [r4, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r4, #0xc]
	ldrb r2, [r4, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	movs r5, #1
	orrs r1, r5
	strb r1, [r4, #0x14]
	ldrb r0, [r4, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #2
	bl EnableBgSync
	bl RestartScreenMenuScrollingBg
	ldr r0, .L080CD78C  @ gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	ldrb r0, [r4, #1]
	orrs r0, r5
	movs r1, #3
	negs r1, r1
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #3
	movs r2, #1
	bl InitTalk
	movs r0, #1
	movs r1, #0xe
	movs r2, #8
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD788: .4byte gDispIo
.L080CD78C: .4byte gBg2Tm

	THUMB_FUNC_END func_080CD6B0

	THUMB_FUNC_START func_080CD790
func_080CD790: @ 0x080CD790
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x29
	movs r1, #0xff
	strb r1, [r0]
	bl ClearDialogueAndFaces
	bl func_08096C20
	bl EndEachSpriteAnimProc
	bl EndScreenMenuScrollingBg
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #4
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #8
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0xf
	bl EnableBgSync
	ldr r2, .L080CD7F8  @ gDispIo
	ldrb r0, [r2, #1]
	movs r1, #1
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
.L080CD7F8: .4byte gDispIo

	THUMB_FUNC_END func_080CD790

	THUMB_FUNC_START func_080CD7FC
func_080CD7FC: @ 0x080CD7FC
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r2, r0, #0
	add r1, sp, #0x10
	ldr r0, .L080CD81C  @ gUnknown_0820707C
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	ldrh r0, [r2, #0x2a]
	cmp r0, #0x12
	beq .L080CD820
	cmp r0, #0x12
	ble .L080CD828
	cmp r0, #0x18
	beq .L080CD824
	b .L080CD828
	.align 2, 0
.L080CD81C: .4byte gUnknown_0820707C
.L080CD820:
	movs r5, #1
	b .L080CD82A
.L080CD824:
	movs r5, #2
	b .L080CD82A
.L080CD828:
	movs r5, #0
.L080CD82A:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	movs r4, #0
	str r4, [sp]
	movs r1, #0xd4
	movs r2, #0x50
	movs r3, #0x82
	bl StartDialogueFace
	lsls r0, r5, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, .L080CD88C  @ 0x06011800
	str r0, [sp, #4]
	movs r5, #1
	negs r5, r5
	str r5, [sp, #8]
	str r4, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl func_0808F128
	movs r0, #0xa
	bl func_0808E9D8
	ldr r1, .L080CD890  @ gFaces
	ldr r2, [r1]
	movs r0, #0x82
	str r0, [r2, #0x30]
	ldr r3, [r1, #4]
	ldr r2, [r1, #8]
	ldr r1, [r1, #0xc]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [r1, #0x30]
	str r0, [r2, #0x30]
	str r0, [r3, #0x30]
	ldr r0, .L080CD894  @ gUnknown_03005398
	strb r5, [r0]
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD88C: .4byte 0x06011800
.L080CD890: .4byte gFaces
.L080CD894: .4byte gUnknown_03005398

	THUMB_FUNC_END func_080CD7FC

	THUMB_FUNC_START func_080CD898
func_080CD898: @ 0x080CD898
	push {r4, r5, lr}
	sub sp, #0x1c
	add r2, sp, #0x10
	ldr r1, .L080CD8B4  @ gUnknown_08207088
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldrh r0, [r0, #0x2a]
	cmp r0, #0x12
	beq .L080CD8B8
	cmp r0, #0x12
	ble .L080CD8C0
	cmp r0, #0x18
	beq .L080CD8BC
	b .L080CD8C0
	.align 2, 0
.L080CD8B4: .4byte gUnknown_08207088
.L080CD8B8:
	movs r0, #1
	b .L080CD8C2
.L080CD8BC:
	movs r0, #2
	b .L080CD8C2
.L080CD8C0:
	movs r0, #0
.L080CD8C2:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, .L080CD8F4  @ 0x06011800
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl func_0808F128
	movs r0, #0xa
	bl func_0808E9D8
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD8F4: .4byte 0x06011800

	THUMB_FUNC_END func_080CD898

	THUMB_FUNC_START func_080CD8F8
func_080CD8F8: @ 0x080CD8F8
	push {r4, r5, lr}
	sub sp, #0x1c
	add r2, sp, #0x10
	ldr r1, .L080CD914  @ gUnknown_08207094
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldrh r0, [r0, #0x2a]
	cmp r0, #0x12
	beq .L080CD918
	cmp r0, #0x12
	ble .L080CD920
	cmp r0, #0x18
	beq .L080CD91C
	b .L080CD920
	.align 2, 0
.L080CD914: .4byte gUnknown_08207094
.L080CD918:
	movs r0, #1
	b .L080CD922
.L080CD91C:
	movs r0, #2
	b .L080CD922
.L080CD920:
	movs r0, #0
.L080CD922:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, .L080CD954  @ 0x06011800
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl func_0808F128
	movs r0, #0xa
	bl func_0808E9D8
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD954: .4byte 0x06011800

	THUMB_FUNC_END func_080CD8F8

	THUMB_FUNC_START func_080CD958
func_080CD958: @ 0x080CD958
	push {r4, r5, lr}
	sub sp, #0x1c
	add r2, sp, #0x10
	ldr r1, .L080CD974  @ gUnknown_082070A0
	ldm r1!, {r3, r4, r5}
	stm r2!, {r3, r4, r5}
	ldrh r0, [r0, #0x2a]
	cmp r0, #0x12
	beq .L080CD978
	cmp r0, #0x12
	ble .L080CD980
	cmp r0, #0x18
	beq .L080CD97C
	b .L080CD980
	.align 2, 0
.L080CD974: .4byte gUnknown_082070A0
.L080CD978:
	movs r0, #1
	b .L080CD982
.L080CD97C:
	movs r0, #2
	b .L080CD982
.L080CD980:
	movs r0, #0
.L080CD982:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	str r0, [sp]
	ldr r0, .L080CD9B4  @ 0x06011800
	str r0, [sp, #4]
	movs r0, #1
	negs r0, r0
	str r0, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl func_0808F128
	movs r0, #0xa
	bl func_0808E9D8
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CD9B4: .4byte 0x06011800

	THUMB_FUNC_END func_080CD958

	THUMB_FUNC_START func_080CD9B8
func_080CD9B8: @ 0x080CD9B8
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r2, r0, #0
	add r1, sp, #0x10
	ldr r0, .L080CD9D8  @ gUnknown_082070AC
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	ldrh r0, [r2, #0x2a]
	cmp r0, #0x12
	beq .L080CD9DC
	cmp r0, #0x12
	ble .L080CD9E4
	cmp r0, #0x18
	beq .L080CD9E0
	b .L080CD9E4
	.align 2, 0
.L080CD9D8: .4byte gUnknown_082070AC
.L080CD9DC:
	movs r0, #1
	b .L080CD9E6
.L080CD9E0:
	movs r0, #2
	b .L080CD9E6
.L080CD9E4:
	movs r0, #0
.L080CD9E6:
	lsls r0, r0, #2
	add r0, sp
	adds r0, #0x10
	ldr r0, [r0]
	movs r1, #1
	negs r1, r1
	cmp r0, r1
	bne .L080CDA00
	adds r0, r2, #0
	movs r1, #3
	bl Proc_Goto
	b .L080CDA1E
.L080CDA00:
	str r0, [sp]
	ldr r0, .L080CDA28  @ 0x06011800
	str r0, [sp, #4]
	str r1, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	movs r0, #0x16
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #4
	bl func_0808F128
	movs r0, #0xa
	bl func_0808E9D8
.L080CDA1E:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CDA28: .4byte 0x06011800

	THUMB_FUNC_END func_080CD9B8

	THUMB_FUNC_START func_080CDA2C
func_080CDA2C: @ 0x080CDA2C
	push {lr}
	bl func_080CD658
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CDA2C

	THUMB_FUNC_START func_080CDA38
func_080CDA38: @ 0x080CDA38
	push {lr}
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0xff
	beq .L080CDA46
	movs r0, #1
	b .L080CDA48
.L080CDA46:
	movs r0, #0
.L080CDA48:
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CDA38

	THUMB_FUNC_START func_080CDA4C
func_080CDA4C: @ 0x080CDA4C
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b .L080CDA74
.L080CDA54:
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #0x30]
	ldr r0, [r0, #0x10]
	cmp r0, #0
	bne .L080CDA70
	adds r0, r1, #0
	adds r0, #0x34
	movs r1, #0
	bl Text_SetCursor
.L080CDA70:
	adds r4, #1
	adds r0, r5, #0
.L080CDA74:
	adds r0, #0x60
	ldrb r0, [r0]
	cmp r4, r0
	blt .L080CDA54
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CDA4C

	THUMB_FUNC_START func_080CDA84
func_080CDA84: @ 0x080CDA84
	push {lr}
	bl SyncMenuBgs
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CDA84

	THUMB_FUNC_START func_080CDA90
func_080CDA90: @ 0x080CDA90
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, .L080CDACC  @ gBg0Tm+0x110
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080CDAD0  @ gBg2Tm+0x110
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	ldr r0, .L080CDAD4  @ gUnknown_03005380
	bl SetTextFont
	ldr r0, [r4, #0x14]
	bl func_080CDA4C
	ldr r0, [r4, #0x14]
	bl Menu_Draw
	adds r0, r4, #0
	bl SyncMenuBgs
	movs r0, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080CDACC: .4byte gBg0Tm+0x110
.L080CDAD0: .4byte gBg2Tm+0x110
.L080CDAD4: .4byte gUnknown_03005380

	THUMB_FUNC_END func_080CDA90

	THUMB_FUNC_START func_080CDAD8
func_080CDAD8: @ 0x080CDAD8
	push {r4, lr}
	adds r4, r0, #0
	adds r1, #0x3c
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne .L080CDB0A
	adds r0, r4, #0
	bl EndMenu
	ldr r0, [r4, #0x14]
	bl EndMenu
	ldr r0, .L080CDB14  @ gUnknown_08B12614
	bl FindProc
	adds r4, r0, #0
	bl EndAllProcChildren
	bl func_080CCBD4
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
.L080CDB0A:
	movs r0, #7
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
.L080CDB14: .4byte gUnknown_08B12614

	THUMB_FUNC_END func_080CDAD8

	THUMB_FUNC_START func_080CDB18
func_080CDB18: @ 0x080CDB18
	movs r0, #0xb
	bx lr

	THUMB_FUNC_END func_080CDB18

	THUMB_FUNC_START func_080CDB1C
func_080CDB1C: @ 0x080CDB1C
	push {lr}
	bl SyncMenuBgs
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CDB1C

	THUMB_FUNC_START func_080CDB28
func_080CDB28: @ 0x080CDB28
	push {lr}
	bl SyncMenuBgs
	movs r0, #0
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CDB28

	THUMB_FUNC_START PromotionCommand_OnSelect
PromotionCommand_OnSelect: @ 0x080CDB34
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	adds r6, r1, #0
	ldr r0, [r7, #0x14]
	ldr r0, [r0, #0x14]
	ldr r4, [r0, #0x14]
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CDBFA
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitByPid
	adds r5, r0, #0
	ldr r0, [r5, #4]
	ldrb r1, [r0, #4]
	adds r3, r6, #0
	adds r3, #0x3c
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #1
	bgt .L080CDB78
	ldr r2, .L080CDB74  @ gUnknown_0895DFA4
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r1, [r0]
	b .L080CDBA6
	.align 2, 0
.L080CDB74: .4byte gUnknown_0895DFA4
.L080CDB78:
	adds r2, r4, #0
	adds r2, #0x3b
	cmp r0, #2
	bne .L080CDBAE
	cmp r1, #0x3e
	beq .L080CDB9A
	cmp r1, #0x3e
	bgt .L080CDB8E
	cmp r1, #0x3d
	beq .L080CDB94
	b .L080CDBA6
.L080CDB8E:
	cmp r1, #0x47
	beq .L080CDBA0
	b .L080CDBA6
.L080CDB94:
	movs r0, #0x7e
	strb r0, [r2]
	b .L080CDBAE
.L080CDB9A:
	movs r0, #0x7f
	strb r0, [r2]
	b .L080CDBAE
.L080CDBA0:
	movs r0, #0x37
	strb r0, [r2]
	b .L080CDBAE
.L080CDBA6:
	adds r0, r4, #0
	adds r0, #0x3b
	strb r1, [r0]
	adds r2, r0, #0
.L080CDBAE:
	ldrb r0, [r2]
	cmp r0, #0x1e
	bgt .L080CDBCA
	cmp r0, #0x1d
	blt .L080CDBCA
	ldr r0, [r5, #0xc]
	movs r1, #0x80
	lsls r1, r1, #4
	ands r0, r1
	cmp r0, #0
	beq .L080CDBCA
	adds r0, r5, #0
	bl TryRemoveUnitFromBallista
.L080CDBCA:
	ldr r0, .L080CDC04  @ gUnknown_03005360
	ldr r1, .L080CDC08  @ 0x06001000
	movs r2, #0x80
	movs r3, #5
	bl InitTextFont
	ldr r0, .L080CDC0C  @ gBg0Tm+0x112
	movs r1, #0xa
	movs r2, #6
	movs r3, #0
	bl TmFillRect_thm
	movs r0, #1
	bl EnableBgSync
	ldr r0, .L080CDC10  @ gUnknown_08B12930
	movs r1, #0
	str r1, [sp]
	str r7, [sp, #4]
	movs r1, #2
	movs r2, #0
	movs r3, #0
	bl StartMenuExt2
.L080CDBFA:
	movs r0, #0
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
.L080CDC04: .4byte gUnknown_03005360
.L080CDC08: .4byte 0x06001000
.L080CDC0C: .4byte gBg0Tm+0x112
.L080CDC10: .4byte gUnknown_08B12930

	THUMB_FUNC_END PromotionCommand_OnSelect

	THUMB_FUNC_START func_080CDC14
func_080CDC14: @ 0x080CDC14
	push {r4, lr}
	ldr r1, [r0, #0x14]
	ldr r4, [r1, #0x14]
	ldr r0, [r4, #0x14]
	ldr r0, [r0, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CDC2E
	cmp r0, #1
	beq .L080CDC32
	cmp r0, #2
	beq .L080CDC32
.L080CDC2E:
	movs r0, #0
	b .L080CDC42
.L080CDC32:
	adds r0, r1, #0
	bl Proc_End
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	movs r0, #0xb
.L080CDC42:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CDC14

	THUMB_FUNC_START func_080CDC48
func_080CDC48: @ 0x080CDC48
	push {r4, r5, r6, r7, lr}
	sub sp, #0x20
	adds r7, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r1, [r5, #0x30]
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq .L080CDC64
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r1, #8]
	bl Text_SetColor
.L080CDC64:
	adds r0, r5, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	adds r4, r5, #0
	adds r4, #0x34
	cmp r0, #2
	bne .L080CDC7A
	adds r0, r4, #0
	movs r1, #1
	bl Text_SetColor
.L080CDC7A:
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x14
	bl ClearTextPart
	adds r0, r4, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_DrawString
	adds r0, r7, #0
	adds r0, #0x64
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	bl GetBgTilemap
	adds r1, r0, #0
	movs r2, #0x2c
	ldrsh r0, [r5, r2]
	lsls r0, r0, #5
	movs r3, #0x2a
	ldrsh r2, [r5, r3]
	adds r0, r0, r2
	lsls r0, r0, #1
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	add sp, #0x20
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CDC48

	THUMB_FUNC_START PromotionCommand_OnTextDraw
PromotionCommand_OnTextDraw: @ 0x080CDCC4
	push {r4, r5, lr}
	sub sp, #0x48
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, [r4, #0x14]
	ldr r1, [r0, #0x14]
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #1
	adds r1, #0x2c
	adds r1, r1, r0
	ldrh r0, [r1]
	bl GetJInfo
	ldrh r0, [r0]
	bl GetMsg
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl func_080CDC48
	add sp, #0x48
	pop {r4, r5}
	pop {r1}
	bx r1

	THUMB_FUNC_END PromotionCommand_OnTextDraw

	THUMB_FUNC_START PromotionCommand_OnChange
PromotionCommand_OnChange: @ 0x080CDD00
	push {lr}
	ldr r0, [r0, #0x14]
	ldr r3, [r0, #0x14]
	adds r2, r3, #0
	adds r2, #0x40
	movs r0, #1
	strb r0, [r2]
	adds r1, #0x3c
	ldrb r0, [r1]
	adds r1, r3, #0
	adds r1, #0x41
	strb r0, [r1]
	ldrb r1, [r1]
	lsls r1, r1, #1
	adds r0, r3, #0
	adds r0, #0x38
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl ChangePromotionClassDescText
	movs r0, #1
	negs r0, r0
	bl Dialogue_SetCharacterDisplayDelay
	pop {r1}
	bx r1

	THUMB_FUNC_END PromotionCommand_OnChange

	THUMB_FUNC_START Usability_ThirdPromotionOption
Usability_ThirdPromotionOption: @ 0x080CDD38
	push {r4, lr}
	ldr r0, .L080CDD6C  @ gUnknown_08B12A08
	bl FindProc
	ldr r0, [r0, #0x14]
	ldr r4, [r0, #0x14]
	bl IsThirdTraineePromotionAllowed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CDD70
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitByPid
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x3d
	blt .L080CDD70
	cmp r0, #0x3e
	ble .L080CDD68
	cmp r0, #0x47
	bne .L080CDD70
.L080CDD68:
	movs r0, #1
	b .L080CDD72
	.align 2, 0
.L080CDD6C: .4byte gUnknown_08B12A08
.L080CDD70:
	movs r0, #3
.L080CDD72:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END Usability_ThirdPromotionOption

	THUMB_FUNC_START PromotionMenuSelect_OnInit
PromotionMenuSelect_OnInit: @ 0x080CDD78
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r6, r0, #0
	adds r0, #0x4c
	movs r5, #0
	strb r5, [r0]
	bl ResetTextFont
	bl ResetText
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r4, .L080CDDC4  @ gUnknown_03005380
	ldr r1, .L080CDDC8  @ 0x06001400
	adds r0, r4, #0
	movs r2, #0xa0
	movs r3, #5
	bl InitTextFont
	adds r0, r4, #0
	bl SetTextFont
	ldr r0, .L080CDDCC  @ gUnknown_08B129E4
	ldr r1, .L080CDDD0  @ gUnknown_08B12A60
	ldr r1, [r1]
	str r5, [sp]
	str r5, [sp, #4]
	str r6, [sp, #8]
	movs r2, #2
	movs r3, #0
	bl StartMenuExt
	str r0, [r6, #0x50]
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
.L080CDDC4: .4byte gUnknown_03005380
.L080CDDC8: .4byte 0x06001400
.L080CDDCC: .4byte gUnknown_08B129E4
.L080CDDD0: .4byte gUnknown_08B12A60

	THUMB_FUNC_END PromotionMenuSelect_OnInit

	THUMB_FUNC_START nullsub_60
nullsub_60: @ 0x080CDDD4
	bx lr

	THUMB_FUNC_END nullsub_60

	THUMB_FUNC_START nullsub_61
nullsub_61: @ 0x080CDDD8
	bx lr

	THUMB_FUNC_END nullsub_61

	THUMB_FUNC_START StartPromotionMenuSelect
StartPromotionMenuSelect: @ 0x080CDDDC
	push {lr}
	adds r1, r0, #0
	ldr r0, .L080CDDEC  @ gUnknown_08B12A08
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
.L080CDDEC: .4byte gUnknown_08B12A08

	THUMB_FUNC_END StartPromotionMenuSelect

	THUMB_FUNC_START func_080CDDF0
func_080CDDF0: @ 0x080CDDF0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	ldr r7, [r5, #0x14]
	adds r0, r5, #0
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitByPid
	adds r6, r0, #0
	cmp r6, #0
	bne .L080CDE10
	adds r0, r4, #0
	bl Proc_End
	b .L080CDE6A
.L080CDE10:
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r4, #0
	adds r1, #0x4c
	strh r0, [r1]
	ldr r2, .L080CDE58  @ gDispIo
	ldrb r1, [r2, #1]
	movs r0, #0x21
	negs r0, r0
	ands r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r5, #0
	adds r0, #0x3b
	ldrb r1, [r0]
	movs r2, #1
	negs r2, r2
	adds r0, r6, #0
	movs r3, #0
	bl UnitPromote
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #2
	beq .L080CDE60
	ldr r1, .L080CDE5C  @ gBattleStats
	movs r0, #0x88
	lsls r0, r0, #1
	b .L080CDE64
	.align 2, 0
.L080CDE58: .4byte gDispIo
.L080CDE5C: .4byte gBattleStats
.L080CDE60:
	ldr r1, .L080CDE70  @ gBattleStats
	movs r0, #0x10
.L080CDE64:
	strh r0, [r1]
	bl BeginBattleAnimations
.L080CDE6A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CDE70: .4byte gBattleStats

	THUMB_FUNC_END func_080CDDF0

	THUMB_FUNC_START func_080CDE74
func_080CDE74: @ 0x080CDE74
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl GetGameLogicLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne .L080CDE90
	adds r0, r5, #0
	bl Proc_Break
.L080CDE90:
	pop {r4, r5}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CDE74

	THUMB_FUNC_START func_080CDE98
func_080CDE98: @ 0x080CDE98
	push {lr}
	ldr r0, [r0, #0x14]
	adds r0, #0x38
	ldrb r0, [r0]
	bl GetUnitByPid
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CDE98

	THUMB_FUNC_START func_080CDEA8
func_080CDEA8: @ 0x080CDEA8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x14]
	ldr r1, .L080CDF40  @ gUnknown_03005398
	movs r2, #1
	negs r2, r2
	adds r0, r2, #0
	strb r0, [r1]
	bl func_0808F270
	bl ClearDialogueAndFaces
	bl EndEachSpriteAnimProc
	bl EndScreenMenuScrollingBg
	ldr r3, .L080CDF44  @ gDispIo
	ldrb r2, [r3, #0xc]
	movs r1, #4
	negs r1, r1
	adds r0, r1, #0
	ands r0, r2
	strb r0, [r3, #0xc]
	ldrb r2, [r3, #0x10]
	adds r0, r1, #0
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	movs r1, #3
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	movs r3, #0x10
	bl SetBlendConfig
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #1
	bl SetBlendTargetA
	adds r0, r4, #0
	bl EndAllProcChildren
	ldr r0, .L080CDF48  @ gUnknown_08B12A64
	adds r1, r4, #0
	bl SpawnProcLocking
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CDF38
	ldr r1, [r5, #0x3c]
	movs r0, #1
	negs r0, r0
	cmp r1, r0
	beq .L080CDF38
	ldr r0, [r5, #0x38]
	bl UnitUpdateUsedItem
.L080CDF38:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CDF40: .4byte gUnknown_03005398
.L080CDF44: .4byte gDispIo
.L080CDF48: .4byte gUnknown_08B12A64

	THUMB_FUNC_END func_080CDEA8

	THUMB_FUNC_START IsGuideLocked
IsGuideLocked: @ 0x080CDF4C
	push {r4, lr}
	ldr r4, .L080CDF5C  @ gUnknown_08B19E0C
.L080CDF50:
	ldrb r0, [r4]
	cmp r0, #0xc
	bne .L080CDF60
	movs r0, #1
	b .L080CDF72
	.align 2, 0
.L080CDF5C: .4byte gUnknown_08B19E0C
.L080CDF60:
	ldrh r0, [r4, #6]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080CDF70
	adds r4, #0xc
	b .L080CDF50
.L080CDF70:
	movs r0, #0
.L080CDF72:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END IsGuideLocked

	THUMB_FUNC_START func_080CDF78
func_080CDF78: @ 0x080CDF78
	push {lr}
	movs r0, #0xe0
	movs r1, #3
	bl UnpackUiVArrowGfx
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CDF78

	THUMB_FUNC_START func_080CDF88
func_080CDF88: @ 0x080CDF88
	push {r4, r5, lr}
	sub sp, #4
	bl GetGameTime
	ldr r3, .L080CE014  @ gUnknown_08B12AA8
	movs r4, #0x80
	lsls r4, r4, #6
	str r4, [sp]
	movs r0, #3
	movs r1, #0x10
	movs r2, #8
	bl PutSprite
	ldr r5, .L080CE018  @ gUnknown_08B12AA4
	ldr r0, [r5]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CDFBC
	ldr r3, .L080CE01C  @ gUnknown_08B12AC2
	str r4, [sp]
	movs r0, #3
	movs r1, #0xb0
	movs r2, #3
	bl PutSprite
.L080CDFBC:
	ldr r3, .L080CE020  @ gUnknown_08B12AD0
	str r4, [sp]
	movs r0, #3
	movs r1, #0xb0
	movs r2, #0xf
	bl PutSprite
	ldr r2, [r5]
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r3, r0, #5
	adds r0, r2, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r4, r0, #5
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080CE0B8
	cmp r0, #1
	bgt .L080CE024
	cmp r0, #0
	beq .L080CE02A
	b .L080CE11A
	.align 2, 0
.L080CE014: .4byte gUnknown_08B12AA8
.L080CE018: .4byte gUnknown_08B12AA4
.L080CE01C: .4byte gUnknown_08B12AC2
.L080CE020: .4byte gUnknown_08B12AD0
.L080CE024:
	cmp r0, #2
	beq .L080CE0CA
	b .L080CE11A
.L080CE02A:
	lsls r1, r3, #3
	movs r0, #0xc
	bl DisplayUiHand
	ldr r1, [r5]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE04A
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #6
	bgt .L080CE054
	b .L080CE11A
.L080CE04A:
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #6
	ble .L080CE11A
.L080CE054:
	ldr r4, .L080CE090  @ gUnknown_08B12AA4
	ldr r0, [r4]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080CE070
	ldr r2, .L080CE094  @ 0x000030E0
	movs r0, #0x20
	movs r1, #0x20
	movs r3, #1
	bl DisplayUiVArrow
.L080CE070:
	ldr r1, [r4]
	adds r0, r1, #0
	adds r0, #0x2a
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, #6
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE098
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #6
	cmp r2, r0
	blt .L080CE0A4
	b .L080CE11A
	.align 2, 0
.L080CE090: .4byte gUnknown_08B12AA4
.L080CE094: .4byte 0x000030E0
.L080CE098:
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	subs r0, #6
	cmp r2, r0
	bge .L080CE11A
.L080CE0A4:
	ldr r2, .L080CE0B4  @ 0x000030E0
	movs r0, #0x20
	movs r1, #0x88
	movs r3, #0
	bl DisplayUiVArrow
	b .L080CE11A
	.align 2, 0
.L080CE0B4: .4byte 0x000030E0
.L080CE0B8:
	lsls r1, r3, #3
	movs r0, #0xc
	bl DisplayFrozenUiHand
	lsls r1, r4, #3
	movs r0, #0x50
	bl DisplayUiHand
	b .L080CE11A
.L080CE0CA:
	lsls r1, r3, #3
	movs r0, #0xc
	bl DisplayFrozenUiHand
	ldr r1, [r5]
	adds r0, r1, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #4
	bls .L080CE11A
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq .L080CE0F8
	ldr r2, .L080CE140  @ 0x000030E0
	movs r0, #0x90
	movs r1, #0x38
	movs r3, #1
	bl DisplayUiVArrow
.L080CE0F8:
	ldr r0, [r5]
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x3f
	ldrb r0, [r0]
	subs r0, #4
	cmp r1, r0
	bge .L080CE11A
	ldr r2, .L080CE140  @ 0x000030E0
	movs r0, #0x90
	movs r1, #0x80
	movs r3, #0
	bl DisplayUiVArrow
.L080CE11A:
	ldr r0, .L080CE144  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r0, #0x3e
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl func_080976CC
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE140: .4byte 0x000030E0
.L080CE144: .4byte gUnknown_08B12AA4

	THUMB_FUNC_END func_080CDF88

	THUMB_FUNC_START func_080CE148
func_080CE148: @ 0x080CE148
	push {r4, lr}
	sub sp, #8
	ldr r4, .L080CE1B0  @ gUnknown_08B12AA4
	ldr r1, [r4]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne .L080CE1A8
	adds r0, r1, #0
	adds r0, #0xec
	bl ClearText
	ldr r0, .L080CE1B4  @ 0x000005D4
	bl GetMsg
	adds r3, r0, #0
	ldr r0, [r4]
	adds r0, #0xec
	ldr r1, .L080CE1B8  @ gBg0Tm+0x488
	movs r2, #0x16
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r0, [r4]
	adds r4, r0, #0
	adds r4, #0xec
	ldr r2, .L080CE1BC  @ gUnknown_08B12B04
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x54
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	bl GetMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
.L080CE1A8:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE1B0: .4byte gUnknown_08B12AA4
.L080CE1B4: .4byte 0x000005D4
.L080CE1B8: .4byte gBg0Tm+0x488
.L080CE1BC: .4byte gUnknown_08B12B04

	THUMB_FUNC_END func_080CE148

	THUMB_FUNC_START func_080CE1C0
func_080CE1C0: @ 0x080CE1C0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	ldr r4, .L080CE1F8  @ gUnknown_08B12AA4
	lsls r1, r6, #3
	adds r1, #0x7c
	ldr r0, [r4]
	adds r0, r0, r1
	bl ClearText
	ldr r4, [r4]
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE200
	ldr r1, .L080CE1FC  @ gUnknown_08B12AE0
	adds r0, r4, #0
	adds r0, #0x40
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	b .L080CE210
	.align 2, 0
.L080CE1F8: .4byte gUnknown_08B12AA4
.L080CE1FC: .4byte gUnknown_08B12AE0
.L080CE200:
	ldr r1, .L080CE23C  @ gUnknown_08B12B04
	adds r0, r4, #0
	adds r0, #0x54
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
.L080CE210:
	bl GetMsg
	adds r3, r0, #0
	ldr r0, .L080CE240  @ gUnknown_08B12AA4
	lsls r1, r6, #3
	adds r1, #0x7c
	ldr r0, [r0]
	adds r0, r0, r1
	lsls r1, r7, #6
	ldr r2, .L080CE244  @ gBg1Tm+0x4
	adds r1, r1, r2
	movs r2, #9
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE23C: .4byte gUnknown_08B12B04
.L080CE240: .4byte gUnknown_08B12AA4
.L080CE244: .4byte gBg1Tm+0x4

	THUMB_FUNC_END func_080CE1C0

	THUMB_FUNC_START func_080CE248
func_080CE248: @ 0x080CE248
	push {r4, r5, r6, lr}
	ldr r0, .L080CE260  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE264
	adds r0, r1, #0
	adds r0, #0x3c
	b .L080CE268
	.align 2, 0
.L080CE260: .4byte gUnknown_08B12AA4
.L080CE264:
	adds r0, r1, #0
	adds r0, #0x3d
.L080CE268:
	ldrb r6, [r0]
	movs r4, #0
	movs r5, #5
.L080CE26E:
	cmp r4, r6
	bge .L080CE27C
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl func_080CE1C0
.L080CE27C:
	adds r5, #2
	adds r4, #1
	cmp r4, #5
	ble .L080CE26E
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CE248

	THUMB_FUNC_START func_080CE28C
func_080CE28C: @ 0x080CE28C
	push {r4, r5, lr}
	movs r0, #0xa0
	movs r2, #0
	ldr r5, .L080CE2D8  @ gBg1Tm
	movs r4, #0
.L080CE296:
	movs r1, #0
	adds r3, r0, #0
	adds r3, #0x20
	adds r2, #1
	adds r0, #1
	lsls r0, r0, #1
	adds r0, r0, r5
.L080CE2A4:
	strh r4, [r0]
	adds r0, #2
	adds r1, #1
	cmp r1, #0x1b
	ble .L080CE2A4
	adds r0, r3, #0
	cmp r2, #0xb
	ble .L080CE296
	ldr r0, .L080CE2DC  @ gBg0Tm
	movs r3, #0
	ldr r1, .L080CE2E0  @ 0x000004C2
	adds r2, r0, r1
	subs r1, #0x40
	adds r0, r0, r1
	movs r1, #0x1b
.L080CE2C2:
	strh r3, [r0]
	strh r3, [r2]
	adds r2, #2
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge .L080CE2C2
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE2D8: .4byte gBg1Tm
.L080CE2DC: .4byte gBg0Tm
.L080CE2E0: .4byte 0x000004C2

	THUMB_FUNC_END func_080CE28C

	THUMB_FUNC_START func_080CE2E4
func_080CE2E4: @ 0x080CE2E4
	push {lr}
	movs r0, #2
	bl EnableBgSync
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CE2E4

	THUMB_FUNC_START func_080CE2F0
func_080CE2F0: @ 0x080CE2F0
	push {lr}
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CE2F0

	THUMB_FUNC_START guMenu2ReWriteUp_80CE2FC
guMenu2ReWriteUp_80CE2FC: @ 0x080CE2FC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r4, [r0, #0x34]
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	ldr r5, .L080CE37C  @ gUnknown_08B12AA4
	lsls r0, r0, #3
	adds r6, r0, #0
	adds r6, #0xb4
	ldr r0, [r5]
	adds r0, r0, r6
	bl ClearText
	ldr r0, .L080CE380  @ gUnknown_08B19E0C
	mov r8, r0
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	movs r7, #0
	cmp r0, #0
	bne .L080CE342
	movs r7, #4
.L080CE342:
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #2]
	bl GetMsg
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, r0, r6
	ldr r1, .L080CE384  @ gBg1Tm+0x156
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	adds r2, r7, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE37C: .4byte gUnknown_08B12AA4
.L080CE380: .4byte gUnknown_08B19E0C
.L080CE384: .4byte gBg1Tm+0x156

	THUMB_FUNC_END guMenu2ReWriteUp_80CE2FC

	THUMB_FUNC_START guMenu2ReWriteDown_80CE388
guMenu2ReWriteDown_80CE388: @ 0x080CE388
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r4, [r0, #0x34]
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	ldr r5, .L080CE408  @ gUnknown_08B12AA4
	lsls r0, r0, #3
	adds r6, r0, #0
	adds r6, #0xb4
	ldr r0, [r5]
	adds r0, r0, r6
	bl ClearText
	ldr r0, .L080CE40C  @ gUnknown_08B19E0C
	mov r8, r0
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	movs r7, #0
	cmp r0, #0
	bne .L080CE3CE
	movs r7, #4
.L080CE3CE:
	ldr r0, [r5]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	ldrh r0, [r0, #2]
	bl GetMsg
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, r0, r6
	ldr r1, .L080CE410  @ gBg1Tm+0x3D6
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	adds r2, r7, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE408: .4byte gUnknown_08B12AA4
.L080CE40C: .4byte gUnknown_08B19E0C
.L080CE410: .4byte gBg1Tm+0x3D6

	THUMB_FUNC_END guMenu2ReWriteDown_80CE388

	THUMB_FUNC_START func_080CE414
func_080CE414: @ 0x080CE414
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	movs r0, #5
	str r0, [sp, #8]
	movs r5, #0
	mov r8, r5
	ldr r0, .L080CE47C  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r0, #0x3e
	mov r1, r8
	strb r1, [r0]
	ldr r1, .L080CE480  @ gUnknown_08B19E0C
	ldrb r0, [r1]
	cmp r0, #0xc
	beq .L080CE4B8
	movs r6, #0
.L080CE43C:
	adds r4, r6, r1
	ldrh r0, [r4, #6]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CE4A8
	ldr r0, .L080CE47C  @ gUnknown_08B12AA4
	ldr r2, [r0]
	adds r0, r2, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE484
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x40
	adds r1, r1, r0
	ldrb r0, [r4, #1]
	ldrb r1, [r1]
	cmp r0, r1
	bne .L080CE4A8
	adds r0, r2, #0
	adds r0, #0x68
	adds r0, r0, r5
	mov r2, r8
	strb r2, [r0]
	b .L080CE4A6
	.align 2, 0
.L080CE47C: .4byte gUnknown_08B12AA4
.L080CE480: .4byte gUnknown_08B19E0C
.L080CE484:
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x54
	adds r1, r1, r0
	ldrb r0, [r4]
	ldrb r1, [r1]
	cmp r0, r1
	bne .L080CE4A8
	adds r0, r2, #0
	adds r0, #0x68
	adds r0, r0, r5
	mov r1, r8
	strb r1, [r0]
.L080CE4A6:
	adds r5, #1
.L080CE4A8:
	adds r6, #0xc
	movs r2, #1
	add r8, r2
	ldr r1, .L080CE57C  @ gUnknown_08B19E0C
	adds r0, r6, r1
	ldrb r0, [r0]
	cmp r0, #0xc
	bne .L080CE43C
.L080CE4B8:
	ldr r1, .L080CE580  @ gUnknown_08B12AA4
	ldr r0, [r1]
	adds r0, #0x3e
	strb r5, [r0]
	lsls r0, r5, #0x18
	lsrs r6, r0, #0x18
	ldr r0, [r1]
	adds r0, #0x2c
	movs r4, #0
	ldrsb r4, [r0, r4]
	adds r5, r4, #0
	movs r0, #0
	mov r8, r0
	cmp r6, #0
	beq .L080CE56C
	mov sl, r1
.L080CE4D8:
	adds r0, r5, #0
	movs r1, #6
	bl __modsi3
	adds r5, r0, #0
	lsls r0, r5, #3
	adds r7, r0, #0
	adds r7, #0xb4
	mov r1, sl
	ldr r0, [r1]
	adds r0, r0, r7
	bl ClearText
	mov r2, sl
	ldr r0, [r2]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, .L080CE57C  @ gUnknown_08B19E0C
	adds r0, r0, r1
	ldrh r0, [r0, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	movs r2, #0
	mov r9, r2
	cmp r0, #0
	bne .L080CE51A
	movs r0, #4
	mov r9, r0
.L080CE51A:
	mov r1, sl
	ldr r0, [r1]
	adds r0, #0x68
	adds r0, r0, r4
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r2, .L080CE57C  @ gUnknown_08B19E0C
	adds r0, r0, r2
	ldrh r0, [r0, #2]
	bl GetMsg
	adds r3, r0, #0
	mov r1, sl
	ldr r0, [r1]
	adds r0, r0, r7
	ldr r2, [sp, #8]
	lsls r1, r2, #6
	ldr r2, .L080CE584  @ gBg1Tm+0x16
	adds r1, r1, r2
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	mov r2, r9
	movs r3, #0
	bl PutDrawText
	ldr r0, [sp, #8]
	adds r0, #2
	str r0, [sp, #8]
	adds r5, #1
	subs r6, #1
	adds r4, #1
	movs r1, #1
	add r8, r1
	mov r2, r8
	cmp r2, #5
	bgt .L080CE56C
	cmp r6, #0
	bne .L080CE4D8
.L080CE56C:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE57C: .4byte gUnknown_08B19E0C
.L080CE580: .4byte gUnknown_08B12AA4
.L080CE584: .4byte gBg1Tm+0x16

	THUMB_FUNC_END func_080CE414

	THUMB_FUNC_START guMenu2ReWriteFirst_80CE588
guMenu2ReWriteFirst_80CE588: @ 0x080CE588
	push {r4, r5, lr}
	movs r0, #0xa0
	movs r1, #0
	ldr r5, .L080CE5B8  @ gBg1Tm
	movs r4, #0
.L080CE592:
	adds r2, r0, #0
	adds r2, #0x20
	adds r3, r1, #1
	adds r0, #0xa
	movs r1, #0x12
	lsls r0, r0, #1
	adds r0, r0, r5
.L080CE5A0:
	strh r4, [r0]
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge .L080CE5A0
	adds r0, r2, #0
	adds r1, r3, #0
	cmp r1, #0xb
	ble .L080CE592
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE5B8: .4byte gBg1Tm

	THUMB_FUNC_END guMenu2ReWriteFirst_80CE588

	THUMB_FUNC_START func_080CE5BC
func_080CE5BC: @ 0x080CE5BC
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	cmp r1, #0
	beq .L080CE5DA
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080CE5DA
.L080CE5CC:
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080CE5DA
	cmp r0, #1
	bne .L080CE5DE
	adds r0, r1, #1
	b .L080CE5EA
.L080CE5DA:
	movs r0, #0
	b .L080CE5EA
.L080CE5DE:
	adds r0, r1, #0
	mov r1, sp
	bl GetCharTextLen
	adds r1, r0, #0
	b .L080CE5CC
.L080CE5EA:
	add sp, #4
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CE5BC

	THUMB_FUNC_START func_080CE5F0
func_080CE5F0: @ 0x080CE5F0
	push {r4, r5, r6, r7, lr}
	mov r7, r9
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r8, r0
	adds r5, r1, #0
	movs r4, #1
	ldr r0, .L080CE618  @ gUnknown_08B19E0C
	mov r2, r8
	lsls r1, r2, #1
	add r1, r8
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r0, [r1, #4]
	bl GetMsg
	adds r6, r0, #0
	b .L080CE61E
	.align 2, 0
.L080CE618: .4byte gUnknown_08B19E0C
.L080CE61C:
	adds r4, #1
.L080CE61E:
	adds r0, r6, #0
	bl func_080CE5BC
	adds r6, r0, #0
	cmp r6, #0
	bne .L080CE61C
	ldr r0, .L080CE654  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r1, #0x3f
	strb r4, [r1]
	ldr r1, [r0]
	adds r1, #0x2e
	movs r7, #0
	ldrsb r7, [r1, r7]
	cmp r5, #0
	beq .L080CE672
	cmp r4, #4
	ble .L080CE660
	cmp r5, #1
	bne .L080CE658
	subs r1, r4, #4
	adds r7, #4
	cmp r7, r1
	ble .L080CE660
	adds r7, r1, #0
	b .L080CE660
	.align 2, 0
.L080CE654: .4byte gUnknown_08B12AA4
.L080CE658:
	subs r7, #4
	cmp r7, #0
	bge .L080CE660
	movs r7, #0
.L080CE660:
	cmp r5, #0
	beq .L080CE672
	ldr r0, [r0]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r7
	beq .L080CE73A
.L080CE672:
	bl guMenu2ReWriteFirst_80CE588
	ldr r5, .L080CE6C0  @ gUnknown_08B12AA4
	ldr r0, [r5]
	adds r0, #0x2e
	strb r7, [r0]
	ldr r0, [r5]
	adds r0, #0xb4
	bl ClearText
	ldr r0, .L080CE6C4  @ gUnknown_08B19E0C
	mov r1, r8
	lsls r4, r1, #1
	add r4, r8
	lsls r4, r4, #2
	adds r4, r4, r0
	ldrh r0, [r4, #2]
	bl GetMsg
	adds r3, r0, #0
	ldr r0, [r5]
	adds r0, #0xb4
	ldr r1, .L080CE6C8  @ gBg1Tm+0x154
	movs r2, #0x12
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #3
	movs r3, #2
	bl PutDrawText
	ldrh r0, [r4, #4]
	bl GetMsg
	adds r6, r0, #0
	movs r2, #0
	mov r8, r2
	adds r0, r7, #4
	mov r9, r0
	b .L080CE71E
	.align 2, 0
.L080CE6C0: .4byte gUnknown_08B12AA4
.L080CE6C4: .4byte gUnknown_08B19E0C
.L080CE6C8: .4byte gBg1Tm+0x154
.L080CE6CC:
	cmp r8, r7
	blt .L080CE71A
	mov r0, r8
	movs r1, #5
	bl __modsi3
	adds r4, r0, #0
	ldr r5, .L080CE748  @ gUnknown_08B12AA4
	lsls r4, r4, #3
	adds r4, #0xbc
	ldr r0, [r5]
	adds r0, r0, r4
	bl ClearText
	ldr r0, [r5]
	adds r2, r0, r4
	mov r1, r8
	subs r0, r1, r7
	adds r1, r0, #0
	cmp r0, #0
	bge .L080CE6F8
	adds r1, r0, #3
.L080CE6F8:
	asrs r1, r1, #2
	lsls r1, r1, #2
	subs r1, r0, r1
	lsls r1, r1, #7
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r1, r0
	ldr r0, .L080CE74C  @ gBg1Tm+0x16
	adds r1, r1, r0
	movs r0, #0x11
	str r0, [sp]
	str r6, [sp, #4]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
.L080CE71A:
	movs r1, #1
	add r8, r1
.L080CE71E:
	cmp r8, r9
	bge .L080CE734
	mov r2, r8
	cmp r2, #0
	beq .L080CE6CC
	adds r0, r6, #0
	bl func_080CE5BC
	adds r6, r0, #0
	cmp r6, #0
	bne .L080CE6CC
.L080CE734:
	movs r0, #2
	bl EnableBgSync
.L080CE73A:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov r9, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE748: .4byte gUnknown_08B12AA4
.L080CE74C: .4byte gBg1Tm+0x16

	THUMB_FUNC_END func_080CE5F0

	THUMB_FUNC_START func_080CE750
func_080CE750: @ 0x080CE750
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov r9, r1
	movs r4, #0xd0
	lsls r4, r4, #1
	ldr r0, .L080CE774  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE778
	cmp r0, #1
	beq .L080CE7DC
	b .L080CE83A
	.align 2, 0
.L080CE774: .4byte gUnknown_08B12AA4
.L080CE778:
	movs r0, #0
	ldr r7, .L080CE7D8  @ gBg1Tm
.L080CE77C:
	movs r1, #0x40
	negs r1, r1
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x22
	adds r2, r4, #0
	adds r2, #0x62
	adds r1, r4, #2
	adds r0, r4, #0
	adds r0, #0x42
	movs r5, #7
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
.L080CE7A6:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge .L080CE7A6
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble .L080CE77C
	mov r0, r9
	movs r1, #6
	bl __modsi3
	adds r1, r0, #0
	mov r0, r9
	movs r2, #5
	bl func_080CE1C0
	b .L080CE83A
	.align 2, 0
.L080CE7D8: .4byte gBg1Tm
.L080CE7DC:
	movs r0, #0
	ldr r1, .L080CE850  @ gUnknown_08B12BEC
	mov sl, r1
	ldr r7, .L080CE854  @ gBg1Tm
.L080CE7E4:
	movs r1, #0x40
	negs r1, r1
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x2a
	adds r2, r4, #0
	adds r2, #0x6a
	adds r1, r4, #0
	adds r1, #0xa
	adds r0, r4, #0
	adds r0, #0x4a
	movs r5, #0x12
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
.L080CE810:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge .L080CE810
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble .L080CE7E4
	mov r0, sl
	mov r1, r8
	bl SpawnProc
	mov r1, r9
	str r1, [r0, #0x34]
.L080CE83A:
	movs r0, #2
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE850: .4byte gUnknown_08B12BEC
.L080CE854: .4byte gBg1Tm

	THUMB_FUNC_END func_080CE750

	THUMB_FUNC_START func_080CE858
func_080CE858: @ 0x080CE858
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov r9, r1
	movs r4, #0xa0
	ldr r0, .L080CE87C  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CE880
	cmp r0, #1
	beq .L080CE8E4
	b .L080CE940
	.align 2, 0
.L080CE87C: .4byte gUnknown_08B12AA4
.L080CE880:
	movs r0, #0
	ldr r7, .L080CE8E0  @ gBg1Tm
.L080CE884:
	movs r1, #0x40
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x62
	adds r2, r4, #0
	adds r2, #0x22
	adds r1, r4, #0
	adds r1, #0x42
	adds r0, r4, #2
	movs r5, #7
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
.L080CE8AC:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge .L080CE8AC
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble .L080CE884
	mov r0, r9
	movs r1, #6
	bl __modsi3
	adds r1, r0, #0
	mov r0, r9
	movs r2, #0xf
	bl func_080CE1C0
	b .L080CE940
	.align 2, 0
.L080CE8E0: .4byte gBg1Tm
.L080CE8E4:
	movs r0, #0
	ldr r1, .L080CE954  @ gUnknown_08B12C14
	mov sl, r1
	ldr r7, .L080CE958  @ gBg1Tm
.L080CE8EC:
	movs r1, #0x40
	adds r1, r1, r4
	mov ip, r1
	adds r6, r0, #1
	adds r3, r4, #0
	adds r3, #0x6a
	adds r2, r4, #0
	adds r2, #0x2a
	adds r1, r4, #0
	adds r1, #0x4a
	adds r0, r4, #0
	adds r0, #0xa
	movs r5, #0x12
	lsls r0, r0, #1
	adds r4, r0, r7
	lsls r1, r1, #1
	adds r1, r1, r7
	lsls r2, r2, #1
	adds r2, r2, r7
	lsls r3, r3, #1
	adds r3, r3, r7
.L080CE916:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge .L080CE916
	mov r4, ip
	adds r0, r6, #0
	cmp r0, #4
	ble .L080CE8EC
	mov r0, sl
	mov r1, r8
	bl SpawnProc
	mov r1, r9
	str r1, [r0, #0x34]
.L080CE940:
	movs r0, #2
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE954: .4byte gUnknown_08B12C14
.L080CE958: .4byte gBg1Tm

	THUMB_FUNC_END func_080CE858

	THUMB_FUNC_START guMess3ReWrite_80CE95C
guMess3ReWrite_80CE95C: @ 0x080CE95C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r5, [r7, #0x34]
	adds r0, r5, #0
	movs r1, #5
	bl __modsi3
	adds r4, r0, #0
	ldr r2, .L080CE998  @ gUnknown_08B19E0C
	ldr r0, .L080CE99C  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0, #4]
	bl GetMsg
	adds r6, r0, #0
	b .L080CE9A2
	.align 2, 0
.L080CE998: .4byte gUnknown_08B19E0C
.L080CE99C: .4byte gUnknown_08B12AA4
.L080CE9A0:
	subs r5, #1
.L080CE9A2:
	cmp r5, #0
	beq .L080CE9B2
	adds r0, r6, #0
	bl func_080CE5BC
	adds r6, r0, #0
	cmp r6, #0
	bne .L080CE9A0
.L080CE9B2:
	ldr r5, .L080CE9E0  @ gUnknown_08B12AA4
	lsls r4, r4, #3
	adds r4, #0xbc
	ldr r0, [r5]
	adds r0, r0, r4
	bl ClearText
	ldr r0, [r5]
	adds r0, r0, r4
	ldr r1, .L080CE9E4  @ gBg1Tm+0x496
	movs r2, #0x11
	str r2, [sp]
	str r6, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	movs r0, #0
	str r0, [r7, #0x34]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CE9E0: .4byte gUnknown_08B12AA4
.L080CE9E4: .4byte gBg1Tm+0x496

	THUMB_FUNC_END guMess3ReWrite_80CE95C

	THUMB_FUNC_START guMess3ReWrite_80CE9E8
guMess3ReWrite_80CE9E8: @ 0x080CE9E8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r0, [r7, #0x38]
	cmp r0, #0
	bne .L080CEA60
	movs r3, #0xe0
	lsls r3, r3, #1
	movs r6, #0x98
	lsls r6, r6, #2
	movs r0, #0
	ldr r5, .L080CEA5C  @ gBg1Tm
.L080CE9FE:
	movs r1, #0x20
	negs r1, r1
	adds r1, r1, r3
	mov ip, r1
	adds r4, r0, #1
	adds r1, r3, #0
	adds r1, #0xa
	adds r0, r3, #0
	adds r0, #0x2a
	movs r3, #0x12
	lsls r0, r0, #1
	adds r2, r0, r5
	lsls r1, r1, #1
	adds r1, r1, r5
.L080CEA1A:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge .L080CEA1A
	mov r3, ip
	adds r0, r4, #0
	cmp r0, #6
	ble .L080CE9FE
	ldr r0, [r7, #0x34]
	cmp r0, #0
	beq .L080CEA38
	subs r6, #0x20
.L080CEA38:
	ldr r2, .L080CEA5C  @ gBg1Tm
	adds r1, r6, #0
	adds r1, #0xa
	adds r0, r3, #0
	adds r0, #0x2a
	movs r3, #0x12
	lsls r0, r0, #1
	adds r4, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
.L080CEA4C:
	ldrh r0, [r1]
	strh r0, [r4]
	adds r1, #2
	adds r4, #2
	subs r3, #1
	cmp r3, #0
	bge .L080CEA4C
	b .L080CEAC6
	.align 2, 0
.L080CEA5C: .4byte gBg1Tm
.L080CEA60:
	movs r3, #0x80
	lsls r3, r3, #1
	movs r6, #0x88
	lsls r6, r6, #2
	movs r0, #0
	ldr r5, .L080CEAD8  @ gBg1Tm
.L080CEA6C:
	adds r4, r0, #1
	movs r0, #0x20
	adds r0, r0, r3
	mov ip, r0
	adds r1, r3, #0
	adds r1, #0x2a
	adds r0, r3, #0
	adds r0, #0xa
	movs r3, #0x12
	lsls r0, r0, #1
	adds r2, r0, r5
	lsls r1, r1, #1
	adds r1, r1, r5
.L080CEA86:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge .L080CEA86
	mov r3, ip
	adds r0, r4, #0
	cmp r0, #6
	ble .L080CEA6C
	ldr r0, [r7, #0x34]
	cmp r0, #0
	beq .L080CEAA4
	adds r6, #0x20
.L080CEAA4:
	ldr r2, .L080CEAD8  @ gBg1Tm
	adds r1, r6, #0
	adds r1, #0x2a
	adds r0, r3, #0
	adds r0, #0xa
	movs r3, #0x12
	lsls r0, r0, #1
	adds r4, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
.L080CEAB8:
	ldrh r0, [r1]
	strh r0, [r4]
	adds r1, #2
	adds r4, #2
	subs r3, #1
	cmp r3, #0
	bge .L080CEAB8
.L080CEAC6:
	movs r0, #2
	bl EnableBgSync
	ldr r0, [r7, #0x34]
	cmp r0, #0
	bne .L080CEADC
	movs r0, #1
	str r0, [r7, #0x34]
	b .L080CEAE2
	.align 2, 0
.L080CEAD8: .4byte gBg1Tm
.L080CEADC:
	adds r0, r7, #0
	bl Proc_Break
.L080CEAE2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END guMess3ReWrite_80CE9E8

	THUMB_FUNC_START func_080CEAE8
func_080CEAE8: @ 0x080CEAE8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	movs r5, #0
	ldr r3, .L080CEB5C  @ gUnknown_08B19E0C
	movs r1, #0
	ldr r2, .L080CEB60  @ gUnknown_08B12AA4
.L080CEAF4:
	mov r4, sp
	adds r0, r4, r5
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x54
	adds r0, r0, r5
	strb r1, [r0]
	adds r5, #1
	cmp r5, #0x13
	ble .L080CEAF4
	ldrb r4, [r3]
	cmp r4, #0xc
	beq .L080CEB2A
	adds r5, r3, #0
.L080CEB10:
	ldrh r0, [r5, #6]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CEB22
	mov r1, sp
	adds r0, r1, r4
	strb r4, [r0]
.L080CEB22:
	adds r5, #0xc
	ldrb r4, [r5]
	cmp r4, #0xc
	bne .L080CEB10
.L080CEB2A:
	ldr r0, .L080CEB60  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r1, #0x3d
	movs r2, #0
	strb r2, [r1]
	movs r5, #0
	adds r6, r0, #0
	adds r7, r6, #0
.L080CEB3A:
	mov r4, sp
	adds r0, r4, r5
	ldrb r4, [r0]
	cmp r4, #0
	beq .L080CEB94
	ldr r1, [r6]
	adds r2, r1, #0
	adds r2, #0x3d
	ldrb r0, [r2]
	cmp r0, #0
	bne .L080CEB64
	adds r0, r1, #0
	adds r0, #0x54
	strb r4, [r0]
	ldr r1, [r7]
	b .L080CEB8C
	.align 2, 0
.L080CEB5C: .4byte gUnknown_08B19E0C
.L080CEB60: .4byte gUnknown_08B12AA4
.L080CEB64:
	movs r3, #0
	ldrb r2, [r2]
	cmp r3, r2
	bge .L080CEB78
	adds r0, r1, #0
	adds r0, #0x54
	ldrb r0, [r0]
	cmp r0, r4
	bne .L080CEB78
	movs r3, #1
.L080CEB78:
	cmp r3, #0
	bne .L080CEB94
	ldr r0, [r6]
	adds r1, r0, #0
	adds r1, #0x3d
	adds r0, #0x54
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r4, [r0]
	ldr r1, [r6]
.L080CEB8C:
	adds r1, #0x3d
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L080CEB94:
	adds r5, #1
	cmp r5, #0xb
	ble .L080CEB3A
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CEAE8

	THUMB_FUNC_START func_080CEBA4
func_080CEBA4: @ 0x080CEBA4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	movs r5, #0
	ldr r6, .L080CEC20  @ gUnknown_08B19E0C
	movs r4, #0xff
	ldr r3, .L080CEC24  @ gUnknown_08B12AA4
	movs r2, #0
.L080CEBB2:
	mov r1, sp
	adds r0, r1, r5
	ldrb r1, [r0]
	orrs r1, r4
	strb r1, [r0]
	ldr r0, [r3]
	adds r0, #0x40
	adds r0, r0, r5
	strb r2, [r0]
	adds r5, #1
	cmp r5, #0x13
	ble .L080CEBB2
	ldrb r2, [r6]
	cmp r2, #0xc
	beq .L080CEBEE
	adds r4, r6, #0
.L080CEBD2:
	ldrh r0, [r4, #6]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CEBE6
	ldrb r2, [r4, #1]
	mov r1, sp
	adds r0, r1, r2
	strb r2, [r0]
.L080CEBE6:
	adds r4, #0xc
	ldrb r2, [r4]
	cmp r2, #0xc
	bne .L080CEBD2
.L080CEBEE:
	ldr r0, .L080CEC24  @ gUnknown_08B12AA4
	ldr r1, [r0]
	adds r1, #0x3c
	movs r2, #0
	strb r2, [r1]
	movs r5, #0
	adds r6, r0, #0
	adds r7, r6, #0
.L080CEBFE:
	mov r0, sp
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0xff
	beq .L080CEC58
	adds r2, r0, #0
	ldr r1, [r6]
	adds r3, r1, #0
	adds r3, #0x3c
	ldrb r0, [r3]
	cmp r0, #0
	bne .L080CEC28
	adds r0, r1, #0
	adds r0, #0x40
	strb r2, [r0]
	ldr r1, [r7]
	b .L080CEC50
	.align 2, 0
.L080CEC20: .4byte gUnknown_08B19E0C
.L080CEC24: .4byte gUnknown_08B12AA4
.L080CEC28:
	movs r4, #0
	ldrb r3, [r3]
	cmp r4, r3
	bge .L080CEC3C
	adds r0, r1, #0
	adds r0, #0x40
	ldrb r0, [r0]
	cmp r0, r2
	bne .L080CEC3C
	movs r4, #1
.L080CEC3C:
	cmp r4, #0
	bne .L080CEC58
	ldr r0, [r6]
	adds r1, r0, #0
	adds r1, #0x3c
	adds r0, #0x40
	ldrb r1, [r1]
	adds r0, r0, r1
	strb r2, [r0]
	ldr r1, [r6]
.L080CEC50:
	adds r1, #0x3c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
.L080CEC58:
	adds r5, #1
	cmp r5, #0xb
	ble .L080CEBFE
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CEBA4

	THUMB_FUNC_START func_080CEC68
func_080CEC68: @ 0x080CEC68
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0xa0
	movs r1, #0
	ldr r2, .L080CECA8  @ gBg2Tm
	mov ip, r2
	ldr r7, .L080CECAC  @ 0x00000FFF
.L080CEC78:
	adds r4, r0, #0
	adds r4, #0x20
	adds r5, r1, #1
	lsls r0, r0, #1
	mov r1, ip
	adds r2, r0, r1
	movs r3, #8
.L080CEC86:
	ldrh r1, [r2]
	adds r0, r7, #0
	ands r0, r1
	adds r0, r6, r0
	strh r0, [r2]
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge .L080CEC86
	adds r0, r4, #0
	adds r1, r5, #0
	cmp r1, #0xb
	ble .L080CEC78
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CECA8: .4byte gBg2Tm
.L080CECAC: .4byte 0x00000FFF

	THUMB_FUNC_END func_080CEC68

	THUMB_FUNC_START Guide_80CECB0
Guide_80CECB0: @ 0x080CECB0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, r9
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	movs r0, #0
	mov sl, r0
	bl SetupBackgrounds
	ldr r5, .L080CEED0  @ gUnknown_08B12AA4
	ldr r0, [r5]
	adds r0, #0x2f
	mov r1, sl
	strb r1, [r0]
	movs r0, #0xb3
	bl CheckFlag
	ldr r1, [r5]
	adds r1, #0x30
	strb r0, [r1]
	ldr r0, [r5]
	adds r0, #0x29
	mov r2, sl
	strb r2, [r0]
	ldr r0, [r5]
	adds r0, #0x2a
	strb r2, [r0]
	ldr r0, [r5]
	adds r0, #0x2b
	strb r2, [r0]
	ldr r0, [r5]
	adds r0, #0x2c
	strb r2, [r0]
	bl func_080CEAE8
	bl func_080CEBA4
	bl LoadUiFrameGraphics
	ldr r7, .L080CEED4  @ gDispIo
	ldrb r0, [r7, #1]
	movs r1, #1
	mov r9, r1
	mov r2, r9
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r2, #4
	mov r8, r2
	mov r1, r8
	orrs r0, r1
	movs r6, #8
	orrs r0, r6
	movs r4, #0x10
	orrs r0, r4
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, .L080CEED8  @ gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080CEEDC  @ gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080CEEE0  @ gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, .L080CEEE4  @ gBg3Tm
	movs r1, #0
	bl TmFill
	ldrb r0, [r7, #1]
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	negs r1, r1
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	mov r2, sl
	strb r2, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	mov r2, r9
	orrs r0, r2
	movs r2, #2
	orrs r0, r2
	mov r2, r8
	orrs r0, r2
	orrs r0, r6
	orrs r0, r4
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x36
	ldrb r0, [r2]
	mov r1, r9
	orrs r0, r1
	movs r1, #3
	negs r1, r1
	ands r0, r1
	mov r1, r8
	orrs r0, r1
	orrs r0, r6
	orrs r0, r4
	strb r0, [r2]
	ldr r0, .L080CEEE8  @ gUnknown_08B17B44
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, .L080CEEEC  @ gUnknown_08B17864
	ldr r1, .L080CEEF0  @ 0x06011000
	bl Decompress
	ldr r0, .L080CEEF4  @ gUnknown_08B177C0
	ldr r1, .L080CEEF8  @ 0x06011800
	bl Decompress
	ldr r0, .L080CEEFC  @ gUnknown_08B176CC
	ldr r4, .L080CEF00  @ gBuf+0x100
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #5
	ldr r0, .L080CEEE0  @ gBg2Tm
	adds r1, r4, #0
	bl TmApplyTsa_thm
	ldr r0, .L080CEF04  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	adds r0, #4
	lsls r0, r0, #5
	ldr r1, .L080CEF08  @ gUiFramePaletteA
	adds r0, r0, r1
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	bl ResetTextFont
	ldr r0, [r5]
	adds r0, #0xec
	movs r1, #0x16
	bl InitText
	bl func_080CE148
	ldr r0, [r5]
	adds r0, #0xac
	movs r1, #9
	bl InitText
	ldr r0, [r5]
	adds r0, #0xe4
	movs r1, #0x12
	bl InitText
	movs r6, #0xb4
	movs r4, #0x7c
	movs r2, #5
	mov sl, r2
.L080CEE44:
	ldr r0, [r5]
	adds r0, r0, r4
	movs r1, #9
	bl InitText
	ldr r0, [r5]
	adds r0, r0, r6
	movs r1, #0x12
	bl InitText
	adds r6, #8
	adds r4, #8
	movs r0, #1
	negs r0, r0
	add sl, r0
	mov r1, sl
	cmp r1, #0
	bge .L080CEE44
	bl func_080CE248
	bl func_080CE414
	movs r0, #0
	str r0, [sp]
	ldr r0, [sp, #4]
	movs r1, #0
	movs r2, #0x12
	movs r3, #2
	bl func_08086CE8
	ldr r0, .L080CEF0C  @ gUnknown_08B12B1C
	ldr r1, [sp, #4]
	bl SpawnProc
	movs r0, #0xf
	bl EnableBgSync
	movs r3, #0x80
	lsls r3, r3, #4
	movs r0, #4
	str r0, [sp]
	ldr r0, [sp, #4]
	movs r1, #0xe0
	movs r2, #0x2f
	bl func_08097748
	ldr r0, .L080CEED0  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r0, #0x3e
	ldrb r2, [r0]
	movs r0, #0xa
	movs r3, #6
	bl func_080976CC
	bl func_08097668
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov r9, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CEED0: .4byte gUnknown_08B12AA4
.L080CEED4: .4byte gDispIo
.L080CEED8: .4byte gBg0Tm
.L080CEEDC: .4byte gBg1Tm
.L080CEEE0: .4byte gBg2Tm
.L080CEEE4: .4byte gBg3Tm
.L080CEEE8: .4byte gUnknown_08B17B44
.L080CEEEC: .4byte gUnknown_08B17864
.L080CEEF0: .4byte 0x06011000
.L080CEEF4: .4byte gUnknown_08B177C0
.L080CEEF8: .4byte 0x06011800
.L080CEEFC: .4byte gUnknown_08B176CC
.L080CEF00: .4byte gBuf+0x100
.L080CEF04: .4byte gPlaySt
.L080CEF08: .4byte gUiFramePaletteA
.L080CEF0C: .4byte gUnknown_08B12B1C

	THUMB_FUNC_END Guide_80CECB0

	THUMB_FUNC_START Guide_80CEF10
Guide_80CEF10: @ 0x080CEF10
	push {r4, lr}
	sub sp, #4
	movs r0, #1
	movs r1, #0xf
	movs r2, #4
	movs r3, #0
	bl SetBlendConfig
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl SetBlendTargetA
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #1
	bl SetBlendTargetB
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END Guide_80CEF10

	THUMB_FUNC_START func_080CEF48
func_080CEF48: @ 0x080CEF48
	push {r4, lr}
	ldr r1, .L080CEF64  @ gUnknown_08B12AA4
	ldr r1, [r1]
	adds r1, #0x2f
	ldrb r2, [r1]
	ldr r4, .L080CEF68  @ gKeySt
	cmp r2, #1
	beq .L080CEF82
	cmp r2, #1
	bgt .L080CEF6C
	cmp r2, #0
	beq .L080CEF72
	b .L080CEFC0
	.align 2, 0
.L080CEF64: .4byte gUnknown_08B12AA4
.L080CEF68: .4byte gKeySt
.L080CEF6C:
	cmp r2, #2
	beq .L080CEF9E
	b .L080CEFC0
.L080CEF72:
	ldr r1, [r4]
	ldrh r2, [r1, #8]
	movs r1, #4
	ands r1, r2
	cmp r1, #0
	beq .L080CEF82
	movs r0, #4
	b .L080CEFCE
.L080CEF82:
	ldr r1, [r4]
	ldrh r2, [r1, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq .L080CEF92
	movs r0, #2
	b .L080CEFCE
.L080CEF92:
	movs r1, #2
	ands r1, r2
	cmp r1, #0
	beq .L080CEFC0
.L080CEF9A:
	movs r0, #3
	b .L080CEFCE
.L080CEF9E:
	ldr r1, [r4]
	ldrh r3, [r1, #8]
	ands r2, r3
	cmp r2, #0
	bne .L080CEF9A
	movs r1, #0x11
	ands r1, r3
	cmp r1, #0
	beq .L080CEFB4
	movs r0, #5
	b .L080CEFCE
.L080CEFB4:
	movs r1, #0x20
	ands r1, r3
	cmp r1, #0
	beq .L080CEFC0
	movs r0, #6
	b .L080CEFCE
.L080CEFC0:
	ldr r1, [r4]
	ldrh r2, [r1, #6]
	movs r1, #0xc0
	ands r1, r2
	cmp r1, #0
	beq .L080CEFCE
	movs r0, #1
.L080CEFCE:
	pop {r4}
	pop {r1}
	bx r1

	THUMB_FUNC_END func_080CEF48

	THUMB_FUNC_START Guide_80CEFD4
Guide_80CEFD4: @ 0x080CEFD4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	bl func_080CEF48
	subs r0, #1
	cmp r0, #5
	bls .L080CEFE6
	b .L080CF43A
.L080CEFE6:
	lsls r0, r0, #2
	ldr r1, .L080CEFF0  @ .L080CEFF4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
.L080CEFF0: .4byte .L080CEFF4
.L080CEFF4: @ jump table
	.4byte .L080CF1AC @ case 0
	.4byte .L080CF00C @ case 1
	.4byte .L080CF0D4 @ case 2
	.4byte .L080CF13C @ case 3
	.4byte .L080CF094 @ case 4
	.4byte .L080CF0B4 @ case 5
.L080CF00C:
	ldr r0, .L080CF03C  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080CF01E
	movs r0, #0x6a
	bl m4aSongNumStart
.L080CF01E:
	ldr r4, .L080CF040  @ gUnknown_08B12AA4
	ldr r1, [r4]
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r1, [r4]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	beq .L080CF044
	cmp r0, #2
	beq .L080CF04A
	b .L080CF43A
	.align 2, 0
.L080CF03C: .4byte gPlaySt
.L080CF040: .4byte gUnknown_08B12AA4
.L080CF044:
	movs r0, #0x80
	lsls r0, r0, #6
	b .L080CF114
.L080CF04A:
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
	ldr r2, .L080CF090  @ gUnknown_08B19E0C
	ldr r0, [r4]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r1, [r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0, #8]
	bl SetFlag
	ldr r0, [r4]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	bl func_080CE5F0
	bl func_0809764C
	b .L080CF43A
	.align 2, 0
.L080CF090: .4byte gUnknown_08B19E0C
.L080CF094:
	ldr r0, .L080CF0B0  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #1
	bl func_080CE5F0
	b .L080CF43A
	.align 2, 0
.L080CF0B0: .4byte gUnknown_08B12AA4
.L080CF0B4:
	ldr r0, .L080CF0D0  @ gUnknown_08B12AA4
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, #0x68
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #2
	bl func_080CE5F0
	b .L080CF43A
	.align 2, 0
.L080CF0D0: .4byte gUnknown_08B12AA4
.L080CF0D4:
	ldr r0, .L080CF108  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080CF0E6
	movs r0, #0x6b
	bl m4aSongNumStart
.L080CF0E6:
	ldr r2, .L080CF10C  @ gUnknown_08B12AA4
	ldr r0, [r2]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	beq .L080CF134
	subs r0, #1
	strb r0, [r1]
	ldr r0, [r2]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CF110
	cmp r0, #1
	beq .L080CF120
	b .L080CF43A
	.align 2, 0
.L080CF108: .4byte gPlaySt
.L080CF10C: .4byte gUnknown_08B12AA4
.L080CF110:
	movs r0, #0x80
	lsls r0, r0, #5
.L080CF114:
	bl func_080CEC68
	movs r0, #4
	bl EnableBgSync
	b .L080CF43A
.L080CF120:
	ldr r0, .L080CF130  @ gUnknown_08B12B9C
	adds r1, r5, #0
	bl SpawnProcLocking
	bl func_08097668
	b .L080CF43A
	.align 2, 0
.L080CF130: .4byte gUnknown_08B12B9C
.L080CF134:
	adds r0, r5, #0
	bl Proc_Break
	b .L080CF43A
.L080CF13C:
	ldr r0, .L080CF170  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080CF14E
	movs r0, #0x6a
	bl m4aSongNumStart
.L080CF14E:
	ldr r3, .L080CF174  @ gUnknown_08B12AA4
	ldr r2, [r3]
	adds r2, #0x30
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r2]
	ldr r0, [r3]
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CF178
	movs r0, #0xb3
	bl SetFlag
	b .L080CF17E
	.align 2, 0
.L080CF170: .4byte gPlaySt
.L080CF174: .4byte gUnknown_08B12AA4
.L080CF178:
	movs r0, #0xb3
	bl ClearFlag
.L080CF17E:
	ldr r2, .L080CF1A4  @ gUnknown_08B12AA4
	ldr r0, [r2]
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2a
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2b
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2c
	strb r1, [r0]
	ldr r0, .L080CF1A8  @ gUnknown_08B12B3C
	adds r1, r5, #0
	bl SpawnProcLocking
	b .L080CF43A
	.align 2, 0
.L080CF1A4: .4byte gUnknown_08B12AA4
.L080CF1A8: .4byte gUnknown_08B12B3C
.L080CF1AC:
	ldr r6, .L080CF1C8  @ gUnknown_08B12AA4
	ldr r3, [r6]
	adds r0, r3, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	adds r7, r6, #0
	cmp r0, #1
	bne .L080CF1BE
	b .L080CF2E8
.L080CF1BE:
	cmp r0, #1
	bgt .L080CF1CC
	cmp r0, #0
	beq .L080CF1D4
	b .L080CF424
	.align 2, 0
.L080CF1C8: .4byte gUnknown_08B12AA4
.L080CF1CC:
	cmp r0, #2
	bne .L080CF1D2
	b .L080CF3A4
.L080CF1D2:
	b .L080CF424
.L080CF1D4:
	ldr r0, .L080CF230  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080CF234
	adds r1, r3, #0
	adds r1, #0x29
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq .L080CF2C0
	subs r0, r2, #1
	strb r0, [r1]
	ldr r1, [r6]
	adds r0, r1, #0
	adds r0, #0x29
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r1, #0
	adds r2, #0x2a
	movs r1, #0
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	cmp r0, #0
	bgt .L080CF22C
	ldrb r1, [r2]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq .L080CF22C
	subs r0, r1, #1
	strb r0, [r2]
	ldr r0, [r6]
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	subs r1, #1
	adds r0, r5, #0
	bl func_080CE750
.L080CF22C:
	movs r4, #1
	b .L080CF2C6
	.align 2, 0
.L080CF230: .4byte gKeySt
.L080CF234:
	adds r0, r3, #0
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, #7
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CF252
	adds r0, r3, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	blt .L080CF25E
	b .L080CF2C0
.L080CF252:
	adds r0, r3, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L080CF2C0
.L080CF25E:
	ldr r0, [r7]
	adds r0, #0x29
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r0, #0x29
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, r2, r0
	cmp r0, #4
	ble .L080CF2BE
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	beq .L080CF298
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	blt .L080CF2A4
	b .L080CF2BE
.L080CF298:
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge .L080CF2BE
.L080CF2A4:
	ldr r1, [r7]
	adds r1, #0x2a
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r0, [r7]
	adds r0, #0x29
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, #1
	adds r0, r5, #0
	bl func_080CE858
.L080CF2BE:
	movs r4, #1
.L080CF2C0:
	cmp r4, #0
	bne .L080CF2C6
	b .L080CF43A
.L080CF2C6:
	ldr r0, .L080CF2E0  @ gUnknown_08B12B9C
	adds r1, r5, #0
	bl SpawnProc
	ldr r2, .L080CF2E4  @ gUnknown_08B12AA4
	ldr r0, [r2]
	adds r0, #0x2b
	movs r1, #0
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x2c
	strb r1, [r0]
	b .L080CF424
	.align 2, 0
.L080CF2E0: .4byte gUnknown_08B12B9C
.L080CF2E4: .4byte gUnknown_08B12AA4
.L080CF2E8:
	ldr r0, .L080CF348  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080CF34C
	adds r1, r3, #0
	adds r1, #0x2b
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne .L080CF306
	b .L080CF424
.L080CF306:
	subs r0, r2, #1
	strb r0, [r1]
	ldr r1, [r6]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r1, #0
	adds r2, #0x2c
	movs r1, #0
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	cmp r0, #0
	bgt .L080CF342
	ldrb r1, [r2]
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq .L080CF342
	subs r0, r1, #1
	strb r0, [r2]
	ldr r0, [r6]
	adds r0, #0x2b
	movs r1, #0
	ldrsb r1, [r0, r1]
	subs r1, #1
	adds r0, r5, #0
	bl func_080CE750
.L080CF342:
	movs r4, #1
	b .L080CF428
	.align 2, 0
.L080CF348: .4byte gKeySt
.L080CF34C:
	adds r2, r3, #0
	adds r2, #0x2b
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r3, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge .L080CF424
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r1, [r6]
	adds r0, r1, #0
	adds r0, #0x2b
	movs r3, #0
	ldrsb r3, [r0, r3]
	adds r2, r1, #0
	adds r2, #0x2c
	movs r0, #0
	ldrsb r0, [r2, r0]
	subs r0, r3, r0
	cmp r0, #4
	ble .L080CF3A0
	adds r0, r1, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	subs r0, #1
	cmp r3, r0
	bge .L080CF3A0
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r0, [r6]
	adds r0, #0x2b
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, #1
	adds r0, r5, #0
	bl func_080CE858
.L080CF3A0:
	movs r4, #1
	b .L080CF428
.L080CF3A4:
	ldr r0, .L080CF3E4  @ gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq .L080CF3EC
	adds r1, r3, #0
	adds r1, #0x2e
	ldrb r2, [r1]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq .L080CF424
	subs r0, r2, #1
	movs r4, #0
	strb r0, [r1]
	ldr r0, .L080CF3E8  @ gUnknown_08B12C3C
	adds r1, r5, #0
	bl SpawnProcLocking
	adds r5, r0, #0
	ldr r0, [r6]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [r5, #0x34]
	str r4, [r5, #0x38]
	movs r4, #1
	b .L080CF428
	.align 2, 0
.L080CF3E4: .4byte gKeySt
.L080CF3E8: .4byte gUnknown_08B12C3C
.L080CF3EC:
	adds r2, r3, #0
	adds r2, #0x2e
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r3, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	subs r0, #4
	cmp r1, r0
	bge .L080CF424
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r0, .L080CF440  @ gUnknown_08B12C3C
	adds r1, r5, #0
	bl SpawnProcLocking
	adds r5, r0, #0
	ldr r0, [r6]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #3
	str r0, [r5, #0x34]
	movs r0, #1
	str r0, [r5, #0x38]
	movs r4, #1
.L080CF424:
	cmp r4, #0
	beq .L080CF43A
.L080CF428:
	ldr r0, .L080CF444  @ gPlaySt
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt .L080CF43A
	movs r0, #0x66
	bl m4aSongNumStart
.L080CF43A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
.L080CF440: .4byte gUnknown_08B12C3C
.L080CF444: .4byte gPlaySt

	THUMB_FUNC_END Guide_80CEFD4

	THUMB_FUNC_START Guide_80CF448
Guide_80CF448: @ 0x080CF448
	push {lr}
	bl EndBG3Slider
	ldr r0, .L080CF45C  @ gUnknown_08B12B1C
	bl EndEachProc
	bl Delete6CMenuScroll
	pop {r0}
	bx r0
	.align 2, 0
.L080CF45C: .4byte gUnknown_08B12B1C

	THUMB_FUNC_END Guide_80CF448

	THUMB_FUNC_START func_080CF460
func_080CF460: @ 0x080CF460
	push {r4, lr}
	ldr r4, .L080CF468  @ gUnknown_08B19E0C
	b .L080CF474
	.align 2, 0
.L080CF468: .4byte gUnknown_08B19E0C
.L080CF46C:
	ldrh r0, [r4, #6]
	bl SetFlag
	adds r4, #0xc
.L080CF474:
	ldrb r0, [r4]
	cmp r0, #0xc
	bne .L080CF46C
	pop {r4}
	pop {r0}
	bx r0

	THUMB_FUNC_END func_080CF460

	THUMB_FUNC_START func_080CF480
func_080CF480: @ 0x080CF480
	push {r4, lr}
	ldr r4, .L080CF488  @ gUnknown_08B19E0C
	b .L080CF4AA
	.align 2, 0
.L080CF488: .4byte gUnknown_08B19E0C
.L080CF48C:
	ldrh r0, [r4, #6]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq .L080CF4A8
	ldrh r0, [r4, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne .L080CF4A8
	movs r0, #0
	b .L080CF4B2
.L080CF4A8:
	adds r4, #0xc
.L080CF4AA:
	ldrb r0, [r4]
	cmp r0, #0xc
	bne .L080CF48C
	movs r0, #1
.L080CF4B2:
	pop {r4}
	pop {r1}
	bx r1
	THUMB_FUNC_END func_080CF480
